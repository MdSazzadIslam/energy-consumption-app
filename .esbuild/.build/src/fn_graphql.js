"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/graphql/version.js
var require_version = __commonJS({
  "node_modules/graphql/version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.versionInfo = exports.version = void 0;
    var version = "15.8.0";
    exports.version = version;
    var versionInfo = Object.freeze({
      major: 15,
      minor: 8,
      patch: 0,
      preReleaseTag: null
    });
    exports.versionInfo = versionInfo;
  }
});

// node_modules/graphql/jsutils/isPromise.js
var require_isPromise = __commonJS({
  "node_modules/graphql/jsutils/isPromise.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isPromise;
    function isPromise(value) {
      return typeof (value === null || value === void 0 ? void 0 : value.then) === "function";
    }
  }
});

// node_modules/graphql/jsutils/isObjectLike.js
var require_isObjectLike = __commonJS({
  "node_modules/graphql/jsutils/isObjectLike.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isObjectLike;
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function isObjectLike(value) {
      return _typeof(value) == "object" && value !== null;
    }
  }
});

// node_modules/graphql/polyfills/symbols.js
var require_symbols = __commonJS({
  "node_modules/graphql/polyfills/symbols.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SYMBOL_TO_STRING_TAG = exports.SYMBOL_ASYNC_ITERATOR = exports.SYMBOL_ITERATOR = void 0;
    var SYMBOL_ITERATOR = typeof Symbol === "function" && Symbol.iterator != null ? Symbol.iterator : "@@iterator";
    exports.SYMBOL_ITERATOR = SYMBOL_ITERATOR;
    var SYMBOL_ASYNC_ITERATOR = typeof Symbol === "function" && Symbol.asyncIterator != null ? Symbol.asyncIterator : "@@asyncIterator";
    exports.SYMBOL_ASYNC_ITERATOR = SYMBOL_ASYNC_ITERATOR;
    var SYMBOL_TO_STRING_TAG = typeof Symbol === "function" && Symbol.toStringTag != null ? Symbol.toStringTag : "@@toStringTag";
    exports.SYMBOL_TO_STRING_TAG = SYMBOL_TO_STRING_TAG;
  }
});

// node_modules/graphql/language/location.js
var require_location = __commonJS({
  "node_modules/graphql/language/location.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getLocation = getLocation;
    function getLocation(source, position) {
      var lineRegexp = /\r\n|[\n\r]/g;
      var line = 1;
      var column = position + 1;
      var match;
      while ((match = lineRegexp.exec(source.body)) && match.index < position) {
        line += 1;
        column = position + 1 - (match.index + match[0].length);
      }
      return {
        line,
        column
      };
    }
  }
});

// node_modules/graphql/language/printLocation.js
var require_printLocation = __commonJS({
  "node_modules/graphql/language/printLocation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.printLocation = printLocation;
    exports.printSourceLocation = printSourceLocation;
    var _location = require_location();
    function printLocation(location) {
      return printSourceLocation(location.source, (0, _location.getLocation)(location.source, location.start));
    }
    function printSourceLocation(source, sourceLocation) {
      var firstLineColumnOffset = source.locationOffset.column - 1;
      var body = whitespace(firstLineColumnOffset) + source.body;
      var lineIndex = sourceLocation.line - 1;
      var lineOffset = source.locationOffset.line - 1;
      var lineNum = sourceLocation.line + lineOffset;
      var columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;
      var columnNum = sourceLocation.column + columnOffset;
      var locationStr = "".concat(source.name, ":").concat(lineNum, ":").concat(columnNum, "\n");
      var lines = body.split(/\r\n|[\n\r]/g);
      var locationLine = lines[lineIndex];
      if (locationLine.length > 120) {
        var subLineIndex = Math.floor(columnNum / 80);
        var subLineColumnNum = columnNum % 80;
        var subLines = [];
        for (var i2 = 0; i2 < locationLine.length; i2 += 80) {
          subLines.push(locationLine.slice(i2, i2 + 80));
        }
        return locationStr + printPrefixedLines([["".concat(lineNum), subLines[0]]].concat(subLines.slice(1, subLineIndex + 1).map(function(subLine) {
          return ["", subLine];
        }), [[" ", whitespace(subLineColumnNum - 1) + "^"], ["", subLines[subLineIndex + 1]]]));
      }
      return locationStr + printPrefixedLines([
        ["".concat(lineNum - 1), lines[lineIndex - 1]],
        ["".concat(lineNum), locationLine],
        ["", whitespace(columnNum - 1) + "^"],
        ["".concat(lineNum + 1), lines[lineIndex + 1]]
      ]);
    }
    function printPrefixedLines(lines) {
      var existingLines = lines.filter(function(_ref) {
        var _ = _ref[0], line = _ref[1];
        return line !== void 0;
      });
      var padLen = Math.max.apply(Math, existingLines.map(function(_ref2) {
        var prefix = _ref2[0];
        return prefix.length;
      }));
      return existingLines.map(function(_ref3) {
        var prefix = _ref3[0], line = _ref3[1];
        return leftPad(padLen, prefix) + (line ? " | " + line : " |");
      }).join("\n");
    }
    function whitespace(len) {
      return Array(len + 1).join(" ");
    }
    function leftPad(len, str) {
      return whitespace(len - str.length) + str;
    }
  }
});

// node_modules/graphql/error/GraphQLError.js
var require_GraphQLError = __commonJS({
  "node_modules/graphql/error/GraphQLError.js"(exports) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.printError = printError;
    exports.GraphQLError = void 0;
    var _isObjectLike = _interopRequireDefault(require_isObjectLike());
    var _symbols = require_symbols();
    var _location = require_location();
    var _printLocation = require_printLocation();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2] != null ? arguments[i2] : {};
        if (i2 % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _wrapNativeSuper(Class) {
      var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
      _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
        if (Class2 === null || !_isNativeFunction(Class2))
          return Class2;
        if (typeof Class2 !== "function") {
          throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
          if (_cache.has(Class2))
            return _cache.get(Class2);
          _cache.set(Class2, Wrapper);
        }
        function Wrapper() {
          return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = Object.create(Class2.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } });
        return _setPrototypeOf(Wrapper, Class2);
      };
      return _wrapNativeSuper(Class);
    }
    function _construct(Parent, args, Class) {
      if (_isNativeReflectConstruct()) {
        _construct = Reflect.construct;
      } else {
        _construct = function _construct2(Parent2, args2, Class2) {
          var a = [null];
          a.push.apply(a, args2);
          var Constructor = Function.bind.apply(Parent2, a);
          var instance = new Constructor();
          if (Class2)
            _setPrototypeOf(instance, Class2.prototype);
          return instance;
        };
      }
      return _construct.apply(null, arguments);
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    function _isNativeFunction(fn) {
      return Function.toString.call(fn).indexOf("[native code]") !== -1;
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var GraphQLError2 = /* @__PURE__ */ function(_Error) {
      _inherits(GraphQLError3, _Error);
      var _super = _createSuper(GraphQLError3);
      function GraphQLError3(message, nodes, source, positions, path, originalError, extensions) {
        var _nodeLocations, _nodeLocations2, _nodeLocations3;
        var _this;
        _classCallCheck(this, GraphQLError3);
        _this = _super.call(this, message);
        _this.name = "GraphQLError";
        _this.originalError = originalError !== null && originalError !== void 0 ? originalError : void 0;
        _this.nodes = undefinedIfEmpty(Array.isArray(nodes) ? nodes : nodes ? [nodes] : void 0);
        var nodeLocations = [];
        for (var _i2 = 0, _ref3 = (_this$nodes = _this.nodes) !== null && _this$nodes !== void 0 ? _this$nodes : []; _i2 < _ref3.length; _i2++) {
          var _this$nodes;
          var _ref4 = _ref3[_i2];
          var loc = _ref4.loc;
          if (loc != null) {
            nodeLocations.push(loc);
          }
        }
        nodeLocations = undefinedIfEmpty(nodeLocations);
        _this.source = source !== null && source !== void 0 ? source : (_nodeLocations = nodeLocations) === null || _nodeLocations === void 0 ? void 0 : _nodeLocations[0].source;
        _this.positions = positions !== null && positions !== void 0 ? positions : (_nodeLocations2 = nodeLocations) === null || _nodeLocations2 === void 0 ? void 0 : _nodeLocations2.map(function(loc2) {
          return loc2.start;
        });
        _this.locations = positions && source ? positions.map(function(pos) {
          return (0, _location.getLocation)(source, pos);
        }) : (_nodeLocations3 = nodeLocations) === null || _nodeLocations3 === void 0 ? void 0 : _nodeLocations3.map(function(loc2) {
          return (0, _location.getLocation)(loc2.source, loc2.start);
        });
        _this.path = path !== null && path !== void 0 ? path : void 0;
        var originalExtensions = originalError === null || originalError === void 0 ? void 0 : originalError.extensions;
        if (extensions == null && (0, _isObjectLike.default)(originalExtensions)) {
          _this.extensions = _objectSpread({}, originalExtensions);
        } else {
          _this.extensions = extensions !== null && extensions !== void 0 ? extensions : {};
        }
        Object.defineProperties(_assertThisInitialized(_this), {
          message: {
            enumerable: true
          },
          locations: {
            enumerable: _this.locations != null
          },
          path: {
            enumerable: _this.path != null
          },
          extensions: {
            enumerable: _this.extensions != null && Object.keys(_this.extensions).length > 0
          },
          name: {
            enumerable: false
          },
          nodes: {
            enumerable: false
          },
          source: {
            enumerable: false
          },
          positions: {
            enumerable: false
          },
          originalError: {
            enumerable: false
          }
        });
        if (originalError !== null && originalError !== void 0 && originalError.stack) {
          Object.defineProperty(_assertThisInitialized(_this), "stack", {
            value: originalError.stack,
            writable: true,
            configurable: true
          });
          return _possibleConstructorReturn(_this);
        }
        if (Error.captureStackTrace) {
          Error.captureStackTrace(_assertThisInitialized(_this), GraphQLError3);
        } else {
          Object.defineProperty(_assertThisInitialized(_this), "stack", {
            value: Error().stack,
            writable: true,
            configurable: true
          });
        }
        return _this;
      }
      _createClass(GraphQLError3, [{
        key: "toString",
        value: function toString() {
          return printError(this);
        }
      }, {
        key: _symbols.SYMBOL_TO_STRING_TAG,
        get: function get() {
          return "Object";
        }
      }]);
      return GraphQLError3;
    }(/* @__PURE__ */ _wrapNativeSuper(Error));
    exports.GraphQLError = GraphQLError2;
    function undefinedIfEmpty(array) {
      return array === void 0 || array.length === 0 ? void 0 : array;
    }
    function printError(error) {
      var output = error.message;
      if (error.nodes) {
        for (var _i4 = 0, _error$nodes2 = error.nodes; _i4 < _error$nodes2.length; _i4++) {
          var node = _error$nodes2[_i4];
          if (node.loc) {
            output += "\n\n" + (0, _printLocation.printLocation)(node.loc);
          }
        }
      } else if (error.source && error.locations) {
        for (var _i6 = 0, _error$locations2 = error.locations; _i6 < _error$locations2.length; _i6++) {
          var location = _error$locations2[_i6];
          output += "\n\n" + (0, _printLocation.printSourceLocation)(error.source, location);
        }
      }
      return output;
    }
  }
});

// node_modules/graphql/error/syntaxError.js
var require_syntaxError = __commonJS({
  "node_modules/graphql/error/syntaxError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.syntaxError = syntaxError;
    var _GraphQLError = require_GraphQLError();
    function syntaxError(source, position, description) {
      return new _GraphQLError.GraphQLError("Syntax Error: ".concat(description), void 0, source, [position]);
    }
  }
});

// node_modules/graphql/language/kinds.js
var require_kinds = __commonJS({
  "node_modules/graphql/language/kinds.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Kind = void 0;
    var Kind = Object.freeze({
      NAME: "Name",
      DOCUMENT: "Document",
      OPERATION_DEFINITION: "OperationDefinition",
      VARIABLE_DEFINITION: "VariableDefinition",
      SELECTION_SET: "SelectionSet",
      FIELD: "Field",
      ARGUMENT: "Argument",
      FRAGMENT_SPREAD: "FragmentSpread",
      INLINE_FRAGMENT: "InlineFragment",
      FRAGMENT_DEFINITION: "FragmentDefinition",
      VARIABLE: "Variable",
      INT: "IntValue",
      FLOAT: "FloatValue",
      STRING: "StringValue",
      BOOLEAN: "BooleanValue",
      NULL: "NullValue",
      ENUM: "EnumValue",
      LIST: "ListValue",
      OBJECT: "ObjectValue",
      OBJECT_FIELD: "ObjectField",
      DIRECTIVE: "Directive",
      NAMED_TYPE: "NamedType",
      LIST_TYPE: "ListType",
      NON_NULL_TYPE: "NonNullType",
      SCHEMA_DEFINITION: "SchemaDefinition",
      OPERATION_TYPE_DEFINITION: "OperationTypeDefinition",
      SCALAR_TYPE_DEFINITION: "ScalarTypeDefinition",
      OBJECT_TYPE_DEFINITION: "ObjectTypeDefinition",
      FIELD_DEFINITION: "FieldDefinition",
      INPUT_VALUE_DEFINITION: "InputValueDefinition",
      INTERFACE_TYPE_DEFINITION: "InterfaceTypeDefinition",
      UNION_TYPE_DEFINITION: "UnionTypeDefinition",
      ENUM_TYPE_DEFINITION: "EnumTypeDefinition",
      ENUM_VALUE_DEFINITION: "EnumValueDefinition",
      INPUT_OBJECT_TYPE_DEFINITION: "InputObjectTypeDefinition",
      DIRECTIVE_DEFINITION: "DirectiveDefinition",
      SCHEMA_EXTENSION: "SchemaExtension",
      SCALAR_TYPE_EXTENSION: "ScalarTypeExtension",
      OBJECT_TYPE_EXTENSION: "ObjectTypeExtension",
      INTERFACE_TYPE_EXTENSION: "InterfaceTypeExtension",
      UNION_TYPE_EXTENSION: "UnionTypeExtension",
      ENUM_TYPE_EXTENSION: "EnumTypeExtension",
      INPUT_OBJECT_TYPE_EXTENSION: "InputObjectTypeExtension"
    });
    exports.Kind = Kind;
  }
});

// node_modules/graphql/jsutils/invariant.js
var require_invariant = __commonJS({
  "node_modules/graphql/jsutils/invariant.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = invariant;
    function invariant(condition, message) {
      var booleanCondition = Boolean(condition);
      if (!booleanCondition) {
        throw new Error(message != null ? message : "Unexpected invariant triggered.");
      }
    }
  }
});

// node_modules/graphql/jsutils/nodejsCustomInspectSymbol.js
var require_nodejsCustomInspectSymbol = __commonJS({
  "node_modules/graphql/jsutils/nodejsCustomInspectSymbol.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var nodejsCustomInspectSymbol = typeof Symbol === "function" && typeof Symbol.for === "function" ? Symbol.for("nodejs.util.inspect.custom") : void 0;
    var _default = nodejsCustomInspectSymbol;
    exports.default = _default;
  }
});

// node_modules/graphql/jsutils/defineInspect.js
var require_defineInspect = __commonJS({
  "node_modules/graphql/jsutils/defineInspect.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = defineInspect;
    var _invariant = _interopRequireDefault(require_invariant());
    var _nodejsCustomInspectSymbol = _interopRequireDefault(require_nodejsCustomInspectSymbol());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function defineInspect(classObject) {
      var fn = classObject.prototype.toJSON;
      typeof fn === "function" || (0, _invariant.default)(0);
      classObject.prototype.inspect = fn;
      if (_nodejsCustomInspectSymbol.default) {
        classObject.prototype[_nodejsCustomInspectSymbol.default] = fn;
      }
    }
  }
});

// node_modules/graphql/language/ast.js
var require_ast = __commonJS({
  "node_modules/graphql/language/ast.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isNode = isNode;
    exports.Token = exports.Location = void 0;
    var _defineInspect = _interopRequireDefault(require_defineInspect());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var Location = /* @__PURE__ */ function() {
      function Location2(startToken, endToken, source) {
        this.start = startToken.start;
        this.end = endToken.end;
        this.startToken = startToken;
        this.endToken = endToken;
        this.source = source;
      }
      var _proto = Location2.prototype;
      _proto.toJSON = function toJSON() {
        return {
          start: this.start,
          end: this.end
        };
      };
      return Location2;
    }();
    exports.Location = Location;
    (0, _defineInspect.default)(Location);
    var Token = /* @__PURE__ */ function() {
      function Token2(kind, start, end, line, column, prev, value) {
        this.kind = kind;
        this.start = start;
        this.end = end;
        this.line = line;
        this.column = column;
        this.value = value;
        this.prev = prev;
        this.next = null;
      }
      var _proto2 = Token2.prototype;
      _proto2.toJSON = function toJSON() {
        return {
          kind: this.kind,
          value: this.value,
          line: this.line,
          column: this.column
        };
      };
      return Token2;
    }();
    exports.Token = Token;
    (0, _defineInspect.default)(Token);
    function isNode(maybeNode) {
      return maybeNode != null && typeof maybeNode.kind === "string";
    }
  }
});

// node_modules/graphql/language/tokenKind.js
var require_tokenKind = __commonJS({
  "node_modules/graphql/language/tokenKind.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TokenKind = void 0;
    var TokenKind = Object.freeze({
      SOF: "<SOF>",
      EOF: "<EOF>",
      BANG: "!",
      DOLLAR: "$",
      AMP: "&",
      PAREN_L: "(",
      PAREN_R: ")",
      SPREAD: "...",
      COLON: ":",
      EQUALS: "=",
      AT: "@",
      BRACKET_L: "[",
      BRACKET_R: "]",
      BRACE_L: "{",
      PIPE: "|",
      BRACE_R: "}",
      NAME: "Name",
      INT: "Int",
      FLOAT: "Float",
      STRING: "String",
      BLOCK_STRING: "BlockString",
      COMMENT: "Comment"
    });
    exports.TokenKind = TokenKind;
  }
});

// node_modules/graphql/jsutils/inspect.js
var require_inspect = __commonJS({
  "node_modules/graphql/jsutils/inspect.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = inspect;
    var _nodejsCustomInspectSymbol = _interopRequireDefault(require_nodejsCustomInspectSymbol());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    var MAX_ARRAY_LENGTH = 10;
    var MAX_RECURSIVE_DEPTH = 2;
    function inspect(value) {
      return formatValue(value, []);
    }
    function formatValue(value, seenValues) {
      switch (_typeof(value)) {
        case "string":
          return JSON.stringify(value);
        case "function":
          return value.name ? "[function ".concat(value.name, "]") : "[function]";
        case "object":
          if (value === null) {
            return "null";
          }
          return formatObjectValue(value, seenValues);
        default:
          return String(value);
      }
    }
    function formatObjectValue(value, previouslySeenValues) {
      if (previouslySeenValues.indexOf(value) !== -1) {
        return "[Circular]";
      }
      var seenValues = [].concat(previouslySeenValues, [value]);
      var customInspectFn = getCustomFn(value);
      if (customInspectFn !== void 0) {
        var customValue = customInspectFn.call(value);
        if (customValue !== value) {
          return typeof customValue === "string" ? customValue : formatValue(customValue, seenValues);
        }
      } else if (Array.isArray(value)) {
        return formatArray(value, seenValues);
      }
      return formatObject(value, seenValues);
    }
    function formatObject(object, seenValues) {
      var keys = Object.keys(object);
      if (keys.length === 0) {
        return "{}";
      }
      if (seenValues.length > MAX_RECURSIVE_DEPTH) {
        return "[" + getObjectTag(object) + "]";
      }
      var properties = keys.map(function(key) {
        var value = formatValue(object[key], seenValues);
        return key + ": " + value;
      });
      return "{ " + properties.join(", ") + " }";
    }
    function formatArray(array, seenValues) {
      if (array.length === 0) {
        return "[]";
      }
      if (seenValues.length > MAX_RECURSIVE_DEPTH) {
        return "[Array]";
      }
      var len = Math.min(MAX_ARRAY_LENGTH, array.length);
      var remaining = array.length - len;
      var items = [];
      for (var i2 = 0; i2 < len; ++i2) {
        items.push(formatValue(array[i2], seenValues));
      }
      if (remaining === 1) {
        items.push("... 1 more item");
      } else if (remaining > 1) {
        items.push("... ".concat(remaining, " more items"));
      }
      return "[" + items.join(", ") + "]";
    }
    function getCustomFn(object) {
      var customInspectFn = object[String(_nodejsCustomInspectSymbol.default)];
      if (typeof customInspectFn === "function") {
        return customInspectFn;
      }
      if (typeof object.inspect === "function") {
        return object.inspect;
      }
    }
    function getObjectTag(object) {
      var tag = Object.prototype.toString.call(object).replace(/^\[object /, "").replace(/]$/, "");
      if (tag === "Object" && typeof object.constructor === "function") {
        var name = object.constructor.name;
        if (typeof name === "string" && name !== "") {
          return name;
        }
      }
      return tag;
    }
  }
});

// node_modules/graphql/jsutils/devAssert.js
var require_devAssert = __commonJS({
  "node_modules/graphql/jsutils/devAssert.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = devAssert;
    function devAssert(condition, message) {
      var booleanCondition = Boolean(condition);
      if (!booleanCondition) {
        throw new Error(message);
      }
    }
  }
});

// node_modules/graphql/jsutils/instanceOf.js
var require_instanceOf = __commonJS({
  "node_modules/graphql/jsutils/instanceOf.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _inspect = _interopRequireDefault(require_inspect());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    var _default = process.env.NODE_ENV === "production" ? function instanceOf(value, constructor) {
      return value instanceof constructor;
    } : function instanceOf(value, constructor) {
      if (value instanceof constructor) {
        return true;
      }
      if (_typeof(value) === "object" && value !== null) {
        var _value$constructor;
        var className = constructor.prototype[Symbol.toStringTag];
        var valueClassName = Symbol.toStringTag in value ? value[Symbol.toStringTag] : (_value$constructor = value.constructor) === null || _value$constructor === void 0 ? void 0 : _value$constructor.name;
        if (className === valueClassName) {
          var stringifiedValue = (0, _inspect.default)(value);
          throw new Error("Cannot use ".concat(className, ' "').concat(stringifiedValue, '" from another module or realm.\n\nEnsure that there is only one instance of "graphql" in the node_modules\ndirectory. If different versions of "graphql" are the dependencies of other\nrelied on modules, use "resolutions" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate "graphql" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.'));
        }
      }
      return false;
    };
    exports.default = _default;
  }
});

// node_modules/graphql/language/source.js
var require_source = __commonJS({
  "node_modules/graphql/language/source.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isSource = isSource;
    exports.Source = void 0;
    var _symbols = require_symbols();
    var _inspect = _interopRequireDefault(require_inspect());
    var _devAssert = _interopRequireDefault(require_devAssert());
    var _instanceOf = _interopRequireDefault(require_instanceOf());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var Source = /* @__PURE__ */ function() {
      function Source2(body) {
        var name = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "GraphQL request";
        var locationOffset = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
          line: 1,
          column: 1
        };
        typeof body === "string" || (0, _devAssert.default)(0, "Body must be a string. Received: ".concat((0, _inspect.default)(body), "."));
        this.body = body;
        this.name = name;
        this.locationOffset = locationOffset;
        this.locationOffset.line > 0 || (0, _devAssert.default)(0, "line in locationOffset is 1-indexed and must be positive.");
        this.locationOffset.column > 0 || (0, _devAssert.default)(0, "column in locationOffset is 1-indexed and must be positive.");
      }
      _createClass(Source2, [{
        key: _symbols.SYMBOL_TO_STRING_TAG,
        get: function get() {
          return "Source";
        }
      }]);
      return Source2;
    }();
    exports.Source = Source;
    function isSource(source) {
      return (0, _instanceOf.default)(source, Source);
    }
  }
});

// node_modules/graphql/language/directiveLocation.js
var require_directiveLocation = __commonJS({
  "node_modules/graphql/language/directiveLocation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.DirectiveLocation = void 0;
    var DirectiveLocation = Object.freeze({
      QUERY: "QUERY",
      MUTATION: "MUTATION",
      SUBSCRIPTION: "SUBSCRIPTION",
      FIELD: "FIELD",
      FRAGMENT_DEFINITION: "FRAGMENT_DEFINITION",
      FRAGMENT_SPREAD: "FRAGMENT_SPREAD",
      INLINE_FRAGMENT: "INLINE_FRAGMENT",
      VARIABLE_DEFINITION: "VARIABLE_DEFINITION",
      SCHEMA: "SCHEMA",
      SCALAR: "SCALAR",
      OBJECT: "OBJECT",
      FIELD_DEFINITION: "FIELD_DEFINITION",
      ARGUMENT_DEFINITION: "ARGUMENT_DEFINITION",
      INTERFACE: "INTERFACE",
      UNION: "UNION",
      ENUM: "ENUM",
      ENUM_VALUE: "ENUM_VALUE",
      INPUT_OBJECT: "INPUT_OBJECT",
      INPUT_FIELD_DEFINITION: "INPUT_FIELD_DEFINITION"
    });
    exports.DirectiveLocation = DirectiveLocation;
  }
});

// node_modules/graphql/language/blockString.js
var require_blockString = __commonJS({
  "node_modules/graphql/language/blockString.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.dedentBlockStringValue = dedentBlockStringValue;
    exports.getBlockStringIndentation = getBlockStringIndentation;
    exports.printBlockString = printBlockString;
    function dedentBlockStringValue(rawString) {
      var lines = rawString.split(/\r\n|[\n\r]/g);
      var commonIndent = getBlockStringIndentation(rawString);
      if (commonIndent !== 0) {
        for (var i2 = 1; i2 < lines.length; i2++) {
          lines[i2] = lines[i2].slice(commonIndent);
        }
      }
      var startLine = 0;
      while (startLine < lines.length && isBlank(lines[startLine])) {
        ++startLine;
      }
      var endLine = lines.length;
      while (endLine > startLine && isBlank(lines[endLine - 1])) {
        --endLine;
      }
      return lines.slice(startLine, endLine).join("\n");
    }
    function isBlank(str) {
      for (var i2 = 0; i2 < str.length; ++i2) {
        if (str[i2] !== " " && str[i2] !== "	") {
          return false;
        }
      }
      return true;
    }
    function getBlockStringIndentation(value) {
      var _commonIndent;
      var isFirstLine = true;
      var isEmptyLine = true;
      var indent = 0;
      var commonIndent = null;
      for (var i2 = 0; i2 < value.length; ++i2) {
        switch (value.charCodeAt(i2)) {
          case 13:
            if (value.charCodeAt(i2 + 1) === 10) {
              ++i2;
            }
          case 10:
            isFirstLine = false;
            isEmptyLine = true;
            indent = 0;
            break;
          case 9:
          case 32:
            ++indent;
            break;
          default:
            if (isEmptyLine && !isFirstLine && (commonIndent === null || indent < commonIndent)) {
              commonIndent = indent;
            }
            isEmptyLine = false;
        }
      }
      return (_commonIndent = commonIndent) !== null && _commonIndent !== void 0 ? _commonIndent : 0;
    }
    function printBlockString(value) {
      var indentation = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      var preferMultipleLines = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var isSingleLine = value.indexOf("\n") === -1;
      var hasLeadingSpace = value[0] === " " || value[0] === "	";
      var hasTrailingQuote = value[value.length - 1] === '"';
      var hasTrailingSlash = value[value.length - 1] === "\\";
      var printAsMultipleLines = !isSingleLine || hasTrailingQuote || hasTrailingSlash || preferMultipleLines;
      var result = "";
      if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {
        result += "\n" + indentation;
      }
      result += indentation ? value.replace(/\n/g, "\n" + indentation) : value;
      if (printAsMultipleLines) {
        result += "\n";
      }
      return '"""' + result.replace(/"""/g, '\\"""') + '"""';
    }
  }
});

// node_modules/graphql/language/lexer.js
var require_lexer = __commonJS({
  "node_modules/graphql/language/lexer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isPunctuatorTokenKind = isPunctuatorTokenKind;
    exports.Lexer = void 0;
    var _syntaxError = require_syntaxError();
    var _ast = require_ast();
    var _tokenKind = require_tokenKind();
    var _blockString = require_blockString();
    var Lexer = /* @__PURE__ */ function() {
      function Lexer2(source) {
        var startOfFileToken = new _ast.Token(_tokenKind.TokenKind.SOF, 0, 0, 0, 0, null);
        this.source = source;
        this.lastToken = startOfFileToken;
        this.token = startOfFileToken;
        this.line = 1;
        this.lineStart = 0;
      }
      var _proto = Lexer2.prototype;
      _proto.advance = function advance() {
        this.lastToken = this.token;
        var token = this.token = this.lookahead();
        return token;
      };
      _proto.lookahead = function lookahead() {
        var token = this.token;
        if (token.kind !== _tokenKind.TokenKind.EOF) {
          do {
            var _token$next;
            token = (_token$next = token.next) !== null && _token$next !== void 0 ? _token$next : token.next = readToken(this, token);
          } while (token.kind === _tokenKind.TokenKind.COMMENT);
        }
        return token;
      };
      return Lexer2;
    }();
    exports.Lexer = Lexer;
    function isPunctuatorTokenKind(kind) {
      return kind === _tokenKind.TokenKind.BANG || kind === _tokenKind.TokenKind.DOLLAR || kind === _tokenKind.TokenKind.AMP || kind === _tokenKind.TokenKind.PAREN_L || kind === _tokenKind.TokenKind.PAREN_R || kind === _tokenKind.TokenKind.SPREAD || kind === _tokenKind.TokenKind.COLON || kind === _tokenKind.TokenKind.EQUALS || kind === _tokenKind.TokenKind.AT || kind === _tokenKind.TokenKind.BRACKET_L || kind === _tokenKind.TokenKind.BRACKET_R || kind === _tokenKind.TokenKind.BRACE_L || kind === _tokenKind.TokenKind.PIPE || kind === _tokenKind.TokenKind.BRACE_R;
    }
    function printCharCode(code) {
      return isNaN(code) ? _tokenKind.TokenKind.EOF : code < 127 ? JSON.stringify(String.fromCharCode(code)) : '"\\u'.concat(("00" + code.toString(16).toUpperCase()).slice(-4), '"');
    }
    function readToken(lexer, prev) {
      var source = lexer.source;
      var body = source.body;
      var bodyLength = body.length;
      var pos = prev.end;
      while (pos < bodyLength) {
        var code = body.charCodeAt(pos);
        var _line = lexer.line;
        var _col = 1 + pos - lexer.lineStart;
        switch (code) {
          case 65279:
          case 9:
          case 32:
          case 44:
            ++pos;
            continue;
          case 10:
            ++pos;
            ++lexer.line;
            lexer.lineStart = pos;
            continue;
          case 13:
            if (body.charCodeAt(pos + 1) === 10) {
              pos += 2;
            } else {
              ++pos;
            }
            ++lexer.line;
            lexer.lineStart = pos;
            continue;
          case 33:
            return new _ast.Token(_tokenKind.TokenKind.BANG, pos, pos + 1, _line, _col, prev);
          case 35:
            return readComment(source, pos, _line, _col, prev);
          case 36:
            return new _ast.Token(_tokenKind.TokenKind.DOLLAR, pos, pos + 1, _line, _col, prev);
          case 38:
            return new _ast.Token(_tokenKind.TokenKind.AMP, pos, pos + 1, _line, _col, prev);
          case 40:
            return new _ast.Token(_tokenKind.TokenKind.PAREN_L, pos, pos + 1, _line, _col, prev);
          case 41:
            return new _ast.Token(_tokenKind.TokenKind.PAREN_R, pos, pos + 1, _line, _col, prev);
          case 46:
            if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {
              return new _ast.Token(_tokenKind.TokenKind.SPREAD, pos, pos + 3, _line, _col, prev);
            }
            break;
          case 58:
            return new _ast.Token(_tokenKind.TokenKind.COLON, pos, pos + 1, _line, _col, prev);
          case 61:
            return new _ast.Token(_tokenKind.TokenKind.EQUALS, pos, pos + 1, _line, _col, prev);
          case 64:
            return new _ast.Token(_tokenKind.TokenKind.AT, pos, pos + 1, _line, _col, prev);
          case 91:
            return new _ast.Token(_tokenKind.TokenKind.BRACKET_L, pos, pos + 1, _line, _col, prev);
          case 93:
            return new _ast.Token(_tokenKind.TokenKind.BRACKET_R, pos, pos + 1, _line, _col, prev);
          case 123:
            return new _ast.Token(_tokenKind.TokenKind.BRACE_L, pos, pos + 1, _line, _col, prev);
          case 124:
            return new _ast.Token(_tokenKind.TokenKind.PIPE, pos, pos + 1, _line, _col, prev);
          case 125:
            return new _ast.Token(_tokenKind.TokenKind.BRACE_R, pos, pos + 1, _line, _col, prev);
          case 34:
            if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {
              return readBlockString(source, pos, _line, _col, prev, lexer);
            }
            return readString(source, pos, _line, _col, prev);
          case 45:
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
            return readNumber(source, pos, code, _line, _col, prev);
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
          case 71:
          case 72:
          case 73:
          case 74:
          case 75:
          case 76:
          case 77:
          case 78:
          case 79:
          case 80:
          case 81:
          case 82:
          case 83:
          case 84:
          case 85:
          case 86:
          case 87:
          case 88:
          case 89:
          case 90:
          case 95:
          case 97:
          case 98:
          case 99:
          case 100:
          case 101:
          case 102:
          case 103:
          case 104:
          case 105:
          case 106:
          case 107:
          case 108:
          case 109:
          case 110:
          case 111:
          case 112:
          case 113:
          case 114:
          case 115:
          case 116:
          case 117:
          case 118:
          case 119:
          case 120:
          case 121:
          case 122:
            return readName(source, pos, _line, _col, prev);
        }
        throw (0, _syntaxError.syntaxError)(source, pos, unexpectedCharacterMessage(code));
      }
      var line = lexer.line;
      var col = 1 + pos - lexer.lineStart;
      return new _ast.Token(_tokenKind.TokenKind.EOF, bodyLength, bodyLength, line, col, prev);
    }
    function unexpectedCharacterMessage(code) {
      if (code < 32 && code !== 9 && code !== 10 && code !== 13) {
        return "Cannot contain the invalid character ".concat(printCharCode(code), ".");
      }
      if (code === 39) {
        return `Unexpected single quote character ('), did you mean to use a double quote (")?`;
      }
      return "Cannot parse the unexpected character ".concat(printCharCode(code), ".");
    }
    function readComment(source, start, line, col, prev) {
      var body = source.body;
      var code;
      var position = start;
      do {
        code = body.charCodeAt(++position);
      } while (!isNaN(code) && (code > 31 || code === 9));
      return new _ast.Token(_tokenKind.TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));
    }
    function readNumber(source, start, firstCode, line, col, prev) {
      var body = source.body;
      var code = firstCode;
      var position = start;
      var isFloat = false;
      if (code === 45) {
        code = body.charCodeAt(++position);
      }
      if (code === 48) {
        code = body.charCodeAt(++position);
        if (code >= 48 && code <= 57) {
          throw (0, _syntaxError.syntaxError)(source, position, "Invalid number, unexpected digit after 0: ".concat(printCharCode(code), "."));
        }
      } else {
        position = readDigits(source, position, code);
        code = body.charCodeAt(position);
      }
      if (code === 46) {
        isFloat = true;
        code = body.charCodeAt(++position);
        position = readDigits(source, position, code);
        code = body.charCodeAt(position);
      }
      if (code === 69 || code === 101) {
        isFloat = true;
        code = body.charCodeAt(++position);
        if (code === 43 || code === 45) {
          code = body.charCodeAt(++position);
        }
        position = readDigits(source, position, code);
        code = body.charCodeAt(position);
      }
      if (code === 46 || isNameStart(code)) {
        throw (0, _syntaxError.syntaxError)(source, position, "Invalid number, expected digit but got: ".concat(printCharCode(code), "."));
      }
      return new _ast.Token(isFloat ? _tokenKind.TokenKind.FLOAT : _tokenKind.TokenKind.INT, start, position, line, col, prev, body.slice(start, position));
    }
    function readDigits(source, start, firstCode) {
      var body = source.body;
      var position = start;
      var code = firstCode;
      if (code >= 48 && code <= 57) {
        do {
          code = body.charCodeAt(++position);
        } while (code >= 48 && code <= 57);
        return position;
      }
      throw (0, _syntaxError.syntaxError)(source, position, "Invalid number, expected digit but got: ".concat(printCharCode(code), "."));
    }
    function readString(source, start, line, col, prev) {
      var body = source.body;
      var position = start + 1;
      var chunkStart = position;
      var code = 0;
      var value = "";
      while (position < body.length && !isNaN(code = body.charCodeAt(position)) && code !== 10 && code !== 13) {
        if (code === 34) {
          value += body.slice(chunkStart, position);
          return new _ast.Token(_tokenKind.TokenKind.STRING, start, position + 1, line, col, prev, value);
        }
        if (code < 32 && code !== 9) {
          throw (0, _syntaxError.syntaxError)(source, position, "Invalid character within String: ".concat(printCharCode(code), "."));
        }
        ++position;
        if (code === 92) {
          value += body.slice(chunkStart, position - 1);
          code = body.charCodeAt(position);
          switch (code) {
            case 34:
              value += '"';
              break;
            case 47:
              value += "/";
              break;
            case 92:
              value += "\\";
              break;
            case 98:
              value += "\b";
              break;
            case 102:
              value += "\f";
              break;
            case 110:
              value += "\n";
              break;
            case 114:
              value += "\r";
              break;
            case 116:
              value += "	";
              break;
            case 117: {
              var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));
              if (charCode < 0) {
                var invalidSequence = body.slice(position + 1, position + 5);
                throw (0, _syntaxError.syntaxError)(source, position, "Invalid character escape sequence: \\u".concat(invalidSequence, "."));
              }
              value += String.fromCharCode(charCode);
              position += 4;
              break;
            }
            default:
              throw (0, _syntaxError.syntaxError)(source, position, "Invalid character escape sequence: \\".concat(String.fromCharCode(code), "."));
          }
          ++position;
          chunkStart = position;
        }
      }
      throw (0, _syntaxError.syntaxError)(source, position, "Unterminated string.");
    }
    function readBlockString(source, start, line, col, prev, lexer) {
      var body = source.body;
      var position = start + 3;
      var chunkStart = position;
      var code = 0;
      var rawValue = "";
      while (position < body.length && !isNaN(code = body.charCodeAt(position))) {
        if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {
          rawValue += body.slice(chunkStart, position);
          return new _ast.Token(_tokenKind.TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, (0, _blockString.dedentBlockStringValue)(rawValue));
        }
        if (code < 32 && code !== 9 && code !== 10 && code !== 13) {
          throw (0, _syntaxError.syntaxError)(source, position, "Invalid character within String: ".concat(printCharCode(code), "."));
        }
        if (code === 10) {
          ++position;
          ++lexer.line;
          lexer.lineStart = position;
        } else if (code === 13) {
          if (body.charCodeAt(position + 1) === 10) {
            position += 2;
          } else {
            ++position;
          }
          ++lexer.line;
          lexer.lineStart = position;
        } else if (code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {
          rawValue += body.slice(chunkStart, position) + '"""';
          position += 4;
          chunkStart = position;
        } else {
          ++position;
        }
      }
      throw (0, _syntaxError.syntaxError)(source, position, "Unterminated string.");
    }
    function uniCharCode(a, b, c, d) {
      return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);
    }
    function char2hex(a) {
      return a >= 48 && a <= 57 ? a - 48 : a >= 65 && a <= 70 ? a - 55 : a >= 97 && a <= 102 ? a - 87 : -1;
    }
    function readName(source, start, line, col, prev) {
      var body = source.body;
      var bodyLength = body.length;
      var position = start + 1;
      var code = 0;
      while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || code >= 48 && code <= 57 || code >= 65 && code <= 90 || code >= 97 && code <= 122)) {
        ++position;
      }
      return new _ast.Token(_tokenKind.TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));
    }
    function isNameStart(code) {
      return code === 95 || code >= 65 && code <= 90 || code >= 97 && code <= 122;
    }
  }
});

// node_modules/graphql/language/parser.js
var require_parser = __commonJS({
  "node_modules/graphql/language/parser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.parse = parse;
    exports.parseValue = parseValue;
    exports.parseType = parseType;
    exports.Parser = void 0;
    var _syntaxError = require_syntaxError();
    var _kinds = require_kinds();
    var _ast = require_ast();
    var _tokenKind = require_tokenKind();
    var _source = require_source();
    var _directiveLocation = require_directiveLocation();
    var _lexer = require_lexer();
    function parse(source, options) {
      var parser = new Parser(source, options);
      return parser.parseDocument();
    }
    function parseValue(source, options) {
      var parser = new Parser(source, options);
      parser.expectToken(_tokenKind.TokenKind.SOF);
      var value = parser.parseValueLiteral(false);
      parser.expectToken(_tokenKind.TokenKind.EOF);
      return value;
    }
    function parseType(source, options) {
      var parser = new Parser(source, options);
      parser.expectToken(_tokenKind.TokenKind.SOF);
      var type = parser.parseTypeReference();
      parser.expectToken(_tokenKind.TokenKind.EOF);
      return type;
    }
    var Parser = /* @__PURE__ */ function() {
      function Parser2(source, options) {
        var sourceObj = (0, _source.isSource)(source) ? source : new _source.Source(source);
        this._lexer = new _lexer.Lexer(sourceObj);
        this._options = options;
      }
      var _proto = Parser2.prototype;
      _proto.parseName = function parseName() {
        var token = this.expectToken(_tokenKind.TokenKind.NAME);
        return {
          kind: _kinds.Kind.NAME,
          value: token.value,
          loc: this.loc(token)
        };
      };
      _proto.parseDocument = function parseDocument() {
        var start = this._lexer.token;
        return {
          kind: _kinds.Kind.DOCUMENT,
          definitions: this.many(_tokenKind.TokenKind.SOF, this.parseDefinition, _tokenKind.TokenKind.EOF),
          loc: this.loc(start)
        };
      };
      _proto.parseDefinition = function parseDefinition() {
        if (this.peek(_tokenKind.TokenKind.NAME)) {
          switch (this._lexer.token.value) {
            case "query":
            case "mutation":
            case "subscription":
              return this.parseOperationDefinition();
            case "fragment":
              return this.parseFragmentDefinition();
            case "schema":
            case "scalar":
            case "type":
            case "interface":
            case "union":
            case "enum":
            case "input":
            case "directive":
              return this.parseTypeSystemDefinition();
            case "extend":
              return this.parseTypeSystemExtension();
          }
        } else if (this.peek(_tokenKind.TokenKind.BRACE_L)) {
          return this.parseOperationDefinition();
        } else if (this.peekDescription()) {
          return this.parseTypeSystemDefinition();
        }
        throw this.unexpected();
      };
      _proto.parseOperationDefinition = function parseOperationDefinition() {
        var start = this._lexer.token;
        if (this.peek(_tokenKind.TokenKind.BRACE_L)) {
          return {
            kind: _kinds.Kind.OPERATION_DEFINITION,
            operation: "query",
            name: void 0,
            variableDefinitions: [],
            directives: [],
            selectionSet: this.parseSelectionSet(),
            loc: this.loc(start)
          };
        }
        var operation = this.parseOperationType();
        var name;
        if (this.peek(_tokenKind.TokenKind.NAME)) {
          name = this.parseName();
        }
        return {
          kind: _kinds.Kind.OPERATION_DEFINITION,
          operation,
          name,
          variableDefinitions: this.parseVariableDefinitions(),
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet(),
          loc: this.loc(start)
        };
      };
      _proto.parseOperationType = function parseOperationType() {
        var operationToken = this.expectToken(_tokenKind.TokenKind.NAME);
        switch (operationToken.value) {
          case "query":
            return "query";
          case "mutation":
            return "mutation";
          case "subscription":
            return "subscription";
        }
        throw this.unexpected(operationToken);
      };
      _proto.parseVariableDefinitions = function parseVariableDefinitions() {
        return this.optionalMany(_tokenKind.TokenKind.PAREN_L, this.parseVariableDefinition, _tokenKind.TokenKind.PAREN_R);
      };
      _proto.parseVariableDefinition = function parseVariableDefinition() {
        var start = this._lexer.token;
        return {
          kind: _kinds.Kind.VARIABLE_DEFINITION,
          variable: this.parseVariable(),
          type: (this.expectToken(_tokenKind.TokenKind.COLON), this.parseTypeReference()),
          defaultValue: this.expectOptionalToken(_tokenKind.TokenKind.EQUALS) ? this.parseValueLiteral(true) : void 0,
          directives: this.parseDirectives(true),
          loc: this.loc(start)
        };
      };
      _proto.parseVariable = function parseVariable() {
        var start = this._lexer.token;
        this.expectToken(_tokenKind.TokenKind.DOLLAR);
        return {
          kind: _kinds.Kind.VARIABLE,
          name: this.parseName(),
          loc: this.loc(start)
        };
      };
      _proto.parseSelectionSet = function parseSelectionSet() {
        var start = this._lexer.token;
        return {
          kind: _kinds.Kind.SELECTION_SET,
          selections: this.many(_tokenKind.TokenKind.BRACE_L, this.parseSelection, _tokenKind.TokenKind.BRACE_R),
          loc: this.loc(start)
        };
      };
      _proto.parseSelection = function parseSelection() {
        return this.peek(_tokenKind.TokenKind.SPREAD) ? this.parseFragment() : this.parseField();
      };
      _proto.parseField = function parseField() {
        var start = this._lexer.token;
        var nameOrAlias = this.parseName();
        var alias;
        var name;
        if (this.expectOptionalToken(_tokenKind.TokenKind.COLON)) {
          alias = nameOrAlias;
          name = this.parseName();
        } else {
          name = nameOrAlias;
        }
        return {
          kind: _kinds.Kind.FIELD,
          alias,
          name,
          arguments: this.parseArguments(false),
          directives: this.parseDirectives(false),
          selectionSet: this.peek(_tokenKind.TokenKind.BRACE_L) ? this.parseSelectionSet() : void 0,
          loc: this.loc(start)
        };
      };
      _proto.parseArguments = function parseArguments(isConst) {
        var item = isConst ? this.parseConstArgument : this.parseArgument;
        return this.optionalMany(_tokenKind.TokenKind.PAREN_L, item, _tokenKind.TokenKind.PAREN_R);
      };
      _proto.parseArgument = function parseArgument() {
        var start = this._lexer.token;
        var name = this.parseName();
        this.expectToken(_tokenKind.TokenKind.COLON);
        return {
          kind: _kinds.Kind.ARGUMENT,
          name,
          value: this.parseValueLiteral(false),
          loc: this.loc(start)
        };
      };
      _proto.parseConstArgument = function parseConstArgument() {
        var start = this._lexer.token;
        return {
          kind: _kinds.Kind.ARGUMENT,
          name: this.parseName(),
          value: (this.expectToken(_tokenKind.TokenKind.COLON), this.parseValueLiteral(true)),
          loc: this.loc(start)
        };
      };
      _proto.parseFragment = function parseFragment() {
        var start = this._lexer.token;
        this.expectToken(_tokenKind.TokenKind.SPREAD);
        var hasTypeCondition = this.expectOptionalKeyword("on");
        if (!hasTypeCondition && this.peek(_tokenKind.TokenKind.NAME)) {
          return {
            kind: _kinds.Kind.FRAGMENT_SPREAD,
            name: this.parseFragmentName(),
            directives: this.parseDirectives(false),
            loc: this.loc(start)
          };
        }
        return {
          kind: _kinds.Kind.INLINE_FRAGMENT,
          typeCondition: hasTypeCondition ? this.parseNamedType() : void 0,
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet(),
          loc: this.loc(start)
        };
      };
      _proto.parseFragmentDefinition = function parseFragmentDefinition() {
        var _this$_options;
        var start = this._lexer.token;
        this.expectKeyword("fragment");
        if (((_this$_options = this._options) === null || _this$_options === void 0 ? void 0 : _this$_options.experimentalFragmentVariables) === true) {
          return {
            kind: _kinds.Kind.FRAGMENT_DEFINITION,
            name: this.parseFragmentName(),
            variableDefinitions: this.parseVariableDefinitions(),
            typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
            directives: this.parseDirectives(false),
            selectionSet: this.parseSelectionSet(),
            loc: this.loc(start)
          };
        }
        return {
          kind: _kinds.Kind.FRAGMENT_DEFINITION,
          name: this.parseFragmentName(),
          typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet(),
          loc: this.loc(start)
        };
      };
      _proto.parseFragmentName = function parseFragmentName() {
        if (this._lexer.token.value === "on") {
          throw this.unexpected();
        }
        return this.parseName();
      };
      _proto.parseValueLiteral = function parseValueLiteral(isConst) {
        var token = this._lexer.token;
        switch (token.kind) {
          case _tokenKind.TokenKind.BRACKET_L:
            return this.parseList(isConst);
          case _tokenKind.TokenKind.BRACE_L:
            return this.parseObject(isConst);
          case _tokenKind.TokenKind.INT:
            this._lexer.advance();
            return {
              kind: _kinds.Kind.INT,
              value: token.value,
              loc: this.loc(token)
            };
          case _tokenKind.TokenKind.FLOAT:
            this._lexer.advance();
            return {
              kind: _kinds.Kind.FLOAT,
              value: token.value,
              loc: this.loc(token)
            };
          case _tokenKind.TokenKind.STRING:
          case _tokenKind.TokenKind.BLOCK_STRING:
            return this.parseStringLiteral();
          case _tokenKind.TokenKind.NAME:
            this._lexer.advance();
            switch (token.value) {
              case "true":
                return {
                  kind: _kinds.Kind.BOOLEAN,
                  value: true,
                  loc: this.loc(token)
                };
              case "false":
                return {
                  kind: _kinds.Kind.BOOLEAN,
                  value: false,
                  loc: this.loc(token)
                };
              case "null":
                return {
                  kind: _kinds.Kind.NULL,
                  loc: this.loc(token)
                };
              default:
                return {
                  kind: _kinds.Kind.ENUM,
                  value: token.value,
                  loc: this.loc(token)
                };
            }
          case _tokenKind.TokenKind.DOLLAR:
            if (!isConst) {
              return this.parseVariable();
            }
            break;
        }
        throw this.unexpected();
      };
      _proto.parseStringLiteral = function parseStringLiteral() {
        var token = this._lexer.token;
        this._lexer.advance();
        return {
          kind: _kinds.Kind.STRING,
          value: token.value,
          block: token.kind === _tokenKind.TokenKind.BLOCK_STRING,
          loc: this.loc(token)
        };
      };
      _proto.parseList = function parseList(isConst) {
        var _this = this;
        var start = this._lexer.token;
        var item = function item2() {
          return _this.parseValueLiteral(isConst);
        };
        return {
          kind: _kinds.Kind.LIST,
          values: this.any(_tokenKind.TokenKind.BRACKET_L, item, _tokenKind.TokenKind.BRACKET_R),
          loc: this.loc(start)
        };
      };
      _proto.parseObject = function parseObject(isConst) {
        var _this2 = this;
        var start = this._lexer.token;
        var item = function item2() {
          return _this2.parseObjectField(isConst);
        };
        return {
          kind: _kinds.Kind.OBJECT,
          fields: this.any(_tokenKind.TokenKind.BRACE_L, item, _tokenKind.TokenKind.BRACE_R),
          loc: this.loc(start)
        };
      };
      _proto.parseObjectField = function parseObjectField(isConst) {
        var start = this._lexer.token;
        var name = this.parseName();
        this.expectToken(_tokenKind.TokenKind.COLON);
        return {
          kind: _kinds.Kind.OBJECT_FIELD,
          name,
          value: this.parseValueLiteral(isConst),
          loc: this.loc(start)
        };
      };
      _proto.parseDirectives = function parseDirectives(isConst) {
        var directives = [];
        while (this.peek(_tokenKind.TokenKind.AT)) {
          directives.push(this.parseDirective(isConst));
        }
        return directives;
      };
      _proto.parseDirective = function parseDirective(isConst) {
        var start = this._lexer.token;
        this.expectToken(_tokenKind.TokenKind.AT);
        return {
          kind: _kinds.Kind.DIRECTIVE,
          name: this.parseName(),
          arguments: this.parseArguments(isConst),
          loc: this.loc(start)
        };
      };
      _proto.parseTypeReference = function parseTypeReference() {
        var start = this._lexer.token;
        var type;
        if (this.expectOptionalToken(_tokenKind.TokenKind.BRACKET_L)) {
          type = this.parseTypeReference();
          this.expectToken(_tokenKind.TokenKind.BRACKET_R);
          type = {
            kind: _kinds.Kind.LIST_TYPE,
            type,
            loc: this.loc(start)
          };
        } else {
          type = this.parseNamedType();
        }
        if (this.expectOptionalToken(_tokenKind.TokenKind.BANG)) {
          return {
            kind: _kinds.Kind.NON_NULL_TYPE,
            type,
            loc: this.loc(start)
          };
        }
        return type;
      };
      _proto.parseNamedType = function parseNamedType() {
        var start = this._lexer.token;
        return {
          kind: _kinds.Kind.NAMED_TYPE,
          name: this.parseName(),
          loc: this.loc(start)
        };
      };
      _proto.parseTypeSystemDefinition = function parseTypeSystemDefinition() {
        var keywordToken = this.peekDescription() ? this._lexer.lookahead() : this._lexer.token;
        if (keywordToken.kind === _tokenKind.TokenKind.NAME) {
          switch (keywordToken.value) {
            case "schema":
              return this.parseSchemaDefinition();
            case "scalar":
              return this.parseScalarTypeDefinition();
            case "type":
              return this.parseObjectTypeDefinition();
            case "interface":
              return this.parseInterfaceTypeDefinition();
            case "union":
              return this.parseUnionTypeDefinition();
            case "enum":
              return this.parseEnumTypeDefinition();
            case "input":
              return this.parseInputObjectTypeDefinition();
            case "directive":
              return this.parseDirectiveDefinition();
          }
        }
        throw this.unexpected(keywordToken);
      };
      _proto.peekDescription = function peekDescription() {
        return this.peek(_tokenKind.TokenKind.STRING) || this.peek(_tokenKind.TokenKind.BLOCK_STRING);
      };
      _proto.parseDescription = function parseDescription() {
        if (this.peekDescription()) {
          return this.parseStringLiteral();
        }
      };
      _proto.parseSchemaDefinition = function parseSchemaDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("schema");
        var directives = this.parseDirectives(true);
        var operationTypes = this.many(_tokenKind.TokenKind.BRACE_L, this.parseOperationTypeDefinition, _tokenKind.TokenKind.BRACE_R);
        return {
          kind: _kinds.Kind.SCHEMA_DEFINITION,
          description,
          directives,
          operationTypes,
          loc: this.loc(start)
        };
      };
      _proto.parseOperationTypeDefinition = function parseOperationTypeDefinition() {
        var start = this._lexer.token;
        var operation = this.parseOperationType();
        this.expectToken(_tokenKind.TokenKind.COLON);
        var type = this.parseNamedType();
        return {
          kind: _kinds.Kind.OPERATION_TYPE_DEFINITION,
          operation,
          type,
          loc: this.loc(start)
        };
      };
      _proto.parseScalarTypeDefinition = function parseScalarTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("scalar");
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        return {
          kind: _kinds.Kind.SCALAR_TYPE_DEFINITION,
          description,
          name,
          directives,
          loc: this.loc(start)
        };
      };
      _proto.parseObjectTypeDefinition = function parseObjectTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("type");
        var name = this.parseName();
        var interfaces = this.parseImplementsInterfaces();
        var directives = this.parseDirectives(true);
        var fields = this.parseFieldsDefinition();
        return {
          kind: _kinds.Kind.OBJECT_TYPE_DEFINITION,
          description,
          name,
          interfaces,
          directives,
          fields,
          loc: this.loc(start)
        };
      };
      _proto.parseImplementsInterfaces = function parseImplementsInterfaces() {
        var _this$_options2;
        if (!this.expectOptionalKeyword("implements")) {
          return [];
        }
        if (((_this$_options2 = this._options) === null || _this$_options2 === void 0 ? void 0 : _this$_options2.allowLegacySDLImplementsInterfaces) === true) {
          var types3 = [];
          this.expectOptionalToken(_tokenKind.TokenKind.AMP);
          do {
            types3.push(this.parseNamedType());
          } while (this.expectOptionalToken(_tokenKind.TokenKind.AMP) || this.peek(_tokenKind.TokenKind.NAME));
          return types3;
        }
        return this.delimitedMany(_tokenKind.TokenKind.AMP, this.parseNamedType);
      };
      _proto.parseFieldsDefinition = function parseFieldsDefinition() {
        var _this$_options3;
        if (((_this$_options3 = this._options) === null || _this$_options3 === void 0 ? void 0 : _this$_options3.allowLegacySDLEmptyFields) === true && this.peek(_tokenKind.TokenKind.BRACE_L) && this._lexer.lookahead().kind === _tokenKind.TokenKind.BRACE_R) {
          this._lexer.advance();
          this._lexer.advance();
          return [];
        }
        return this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseFieldDefinition, _tokenKind.TokenKind.BRACE_R);
      };
      _proto.parseFieldDefinition = function parseFieldDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        var name = this.parseName();
        var args = this.parseArgumentDefs();
        this.expectToken(_tokenKind.TokenKind.COLON);
        var type = this.parseTypeReference();
        var directives = this.parseDirectives(true);
        return {
          kind: _kinds.Kind.FIELD_DEFINITION,
          description,
          name,
          arguments: args,
          type,
          directives,
          loc: this.loc(start)
        };
      };
      _proto.parseArgumentDefs = function parseArgumentDefs() {
        return this.optionalMany(_tokenKind.TokenKind.PAREN_L, this.parseInputValueDef, _tokenKind.TokenKind.PAREN_R);
      };
      _proto.parseInputValueDef = function parseInputValueDef() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        var name = this.parseName();
        this.expectToken(_tokenKind.TokenKind.COLON);
        var type = this.parseTypeReference();
        var defaultValue;
        if (this.expectOptionalToken(_tokenKind.TokenKind.EQUALS)) {
          defaultValue = this.parseValueLiteral(true);
        }
        var directives = this.parseDirectives(true);
        return {
          kind: _kinds.Kind.INPUT_VALUE_DEFINITION,
          description,
          name,
          type,
          defaultValue,
          directives,
          loc: this.loc(start)
        };
      };
      _proto.parseInterfaceTypeDefinition = function parseInterfaceTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("interface");
        var name = this.parseName();
        var interfaces = this.parseImplementsInterfaces();
        var directives = this.parseDirectives(true);
        var fields = this.parseFieldsDefinition();
        return {
          kind: _kinds.Kind.INTERFACE_TYPE_DEFINITION,
          description,
          name,
          interfaces,
          directives,
          fields,
          loc: this.loc(start)
        };
      };
      _proto.parseUnionTypeDefinition = function parseUnionTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("union");
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var types3 = this.parseUnionMemberTypes();
        return {
          kind: _kinds.Kind.UNION_TYPE_DEFINITION,
          description,
          name,
          directives,
          types: types3,
          loc: this.loc(start)
        };
      };
      _proto.parseUnionMemberTypes = function parseUnionMemberTypes() {
        return this.expectOptionalToken(_tokenKind.TokenKind.EQUALS) ? this.delimitedMany(_tokenKind.TokenKind.PIPE, this.parseNamedType) : [];
      };
      _proto.parseEnumTypeDefinition = function parseEnumTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("enum");
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var values = this.parseEnumValuesDefinition();
        return {
          kind: _kinds.Kind.ENUM_TYPE_DEFINITION,
          description,
          name,
          directives,
          values,
          loc: this.loc(start)
        };
      };
      _proto.parseEnumValuesDefinition = function parseEnumValuesDefinition() {
        return this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseEnumValueDefinition, _tokenKind.TokenKind.BRACE_R);
      };
      _proto.parseEnumValueDefinition = function parseEnumValueDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        return {
          kind: _kinds.Kind.ENUM_VALUE_DEFINITION,
          description,
          name,
          directives,
          loc: this.loc(start)
        };
      };
      _proto.parseInputObjectTypeDefinition = function parseInputObjectTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("input");
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var fields = this.parseInputFieldsDefinition();
        return {
          kind: _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION,
          description,
          name,
          directives,
          fields,
          loc: this.loc(start)
        };
      };
      _proto.parseInputFieldsDefinition = function parseInputFieldsDefinition() {
        return this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseInputValueDef, _tokenKind.TokenKind.BRACE_R);
      };
      _proto.parseTypeSystemExtension = function parseTypeSystemExtension() {
        var keywordToken = this._lexer.lookahead();
        if (keywordToken.kind === _tokenKind.TokenKind.NAME) {
          switch (keywordToken.value) {
            case "schema":
              return this.parseSchemaExtension();
            case "scalar":
              return this.parseScalarTypeExtension();
            case "type":
              return this.parseObjectTypeExtension();
            case "interface":
              return this.parseInterfaceTypeExtension();
            case "union":
              return this.parseUnionTypeExtension();
            case "enum":
              return this.parseEnumTypeExtension();
            case "input":
              return this.parseInputObjectTypeExtension();
          }
        }
        throw this.unexpected(keywordToken);
      };
      _proto.parseSchemaExtension = function parseSchemaExtension() {
        var start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("schema");
        var directives = this.parseDirectives(true);
        var operationTypes = this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseOperationTypeDefinition, _tokenKind.TokenKind.BRACE_R);
        if (directives.length === 0 && operationTypes.length === 0) {
          throw this.unexpected();
        }
        return {
          kind: _kinds.Kind.SCHEMA_EXTENSION,
          directives,
          operationTypes,
          loc: this.loc(start)
        };
      };
      _proto.parseScalarTypeExtension = function parseScalarTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("scalar");
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        if (directives.length === 0) {
          throw this.unexpected();
        }
        return {
          kind: _kinds.Kind.SCALAR_TYPE_EXTENSION,
          name,
          directives,
          loc: this.loc(start)
        };
      };
      _proto.parseObjectTypeExtension = function parseObjectTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("type");
        var name = this.parseName();
        var interfaces = this.parseImplementsInterfaces();
        var directives = this.parseDirectives(true);
        var fields = this.parseFieldsDefinition();
        if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
          throw this.unexpected();
        }
        return {
          kind: _kinds.Kind.OBJECT_TYPE_EXTENSION,
          name,
          interfaces,
          directives,
          fields,
          loc: this.loc(start)
        };
      };
      _proto.parseInterfaceTypeExtension = function parseInterfaceTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("interface");
        var name = this.parseName();
        var interfaces = this.parseImplementsInterfaces();
        var directives = this.parseDirectives(true);
        var fields = this.parseFieldsDefinition();
        if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
          throw this.unexpected();
        }
        return {
          kind: _kinds.Kind.INTERFACE_TYPE_EXTENSION,
          name,
          interfaces,
          directives,
          fields,
          loc: this.loc(start)
        };
      };
      _proto.parseUnionTypeExtension = function parseUnionTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("union");
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var types3 = this.parseUnionMemberTypes();
        if (directives.length === 0 && types3.length === 0) {
          throw this.unexpected();
        }
        return {
          kind: _kinds.Kind.UNION_TYPE_EXTENSION,
          name,
          directives,
          types: types3,
          loc: this.loc(start)
        };
      };
      _proto.parseEnumTypeExtension = function parseEnumTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("enum");
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var values = this.parseEnumValuesDefinition();
        if (directives.length === 0 && values.length === 0) {
          throw this.unexpected();
        }
        return {
          kind: _kinds.Kind.ENUM_TYPE_EXTENSION,
          name,
          directives,
          values,
          loc: this.loc(start)
        };
      };
      _proto.parseInputObjectTypeExtension = function parseInputObjectTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("input");
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var fields = this.parseInputFieldsDefinition();
        if (directives.length === 0 && fields.length === 0) {
          throw this.unexpected();
        }
        return {
          kind: _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION,
          name,
          directives,
          fields,
          loc: this.loc(start)
        };
      };
      _proto.parseDirectiveDefinition = function parseDirectiveDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("directive");
        this.expectToken(_tokenKind.TokenKind.AT);
        var name = this.parseName();
        var args = this.parseArgumentDefs();
        var repeatable = this.expectOptionalKeyword("repeatable");
        this.expectKeyword("on");
        var locations = this.parseDirectiveLocations();
        return {
          kind: _kinds.Kind.DIRECTIVE_DEFINITION,
          description,
          name,
          arguments: args,
          repeatable,
          locations,
          loc: this.loc(start)
        };
      };
      _proto.parseDirectiveLocations = function parseDirectiveLocations() {
        return this.delimitedMany(_tokenKind.TokenKind.PIPE, this.parseDirectiveLocation);
      };
      _proto.parseDirectiveLocation = function parseDirectiveLocation() {
        var start = this._lexer.token;
        var name = this.parseName();
        if (_directiveLocation.DirectiveLocation[name.value] !== void 0) {
          return name;
        }
        throw this.unexpected(start);
      };
      _proto.loc = function loc(startToken) {
        var _this$_options4;
        if (((_this$_options4 = this._options) === null || _this$_options4 === void 0 ? void 0 : _this$_options4.noLocation) !== true) {
          return new _ast.Location(startToken, this._lexer.lastToken, this._lexer.source);
        }
      };
      _proto.peek = function peek(kind) {
        return this._lexer.token.kind === kind;
      };
      _proto.expectToken = function expectToken(kind) {
        var token = this._lexer.token;
        if (token.kind === kind) {
          this._lexer.advance();
          return token;
        }
        throw (0, _syntaxError.syntaxError)(this._lexer.source, token.start, "Expected ".concat(getTokenKindDesc(kind), ", found ").concat(getTokenDesc(token), "."));
      };
      _proto.expectOptionalToken = function expectOptionalToken(kind) {
        var token = this._lexer.token;
        if (token.kind === kind) {
          this._lexer.advance();
          return token;
        }
        return void 0;
      };
      _proto.expectKeyword = function expectKeyword(value) {
        var token = this._lexer.token;
        if (token.kind === _tokenKind.TokenKind.NAME && token.value === value) {
          this._lexer.advance();
        } else {
          throw (0, _syntaxError.syntaxError)(this._lexer.source, token.start, 'Expected "'.concat(value, '", found ').concat(getTokenDesc(token), "."));
        }
      };
      _proto.expectOptionalKeyword = function expectOptionalKeyword(value) {
        var token = this._lexer.token;
        if (token.kind === _tokenKind.TokenKind.NAME && token.value === value) {
          this._lexer.advance();
          return true;
        }
        return false;
      };
      _proto.unexpected = function unexpected(atToken) {
        var token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;
        return (0, _syntaxError.syntaxError)(this._lexer.source, token.start, "Unexpected ".concat(getTokenDesc(token), "."));
      };
      _proto.any = function any(openKind, parseFn, closeKind) {
        this.expectToken(openKind);
        var nodes = [];
        while (!this.expectOptionalToken(closeKind)) {
          nodes.push(parseFn.call(this));
        }
        return nodes;
      };
      _proto.optionalMany = function optionalMany(openKind, parseFn, closeKind) {
        if (this.expectOptionalToken(openKind)) {
          var nodes = [];
          do {
            nodes.push(parseFn.call(this));
          } while (!this.expectOptionalToken(closeKind));
          return nodes;
        }
        return [];
      };
      _proto.many = function many(openKind, parseFn, closeKind) {
        this.expectToken(openKind);
        var nodes = [];
        do {
          nodes.push(parseFn.call(this));
        } while (!this.expectOptionalToken(closeKind));
        return nodes;
      };
      _proto.delimitedMany = function delimitedMany(delimiterKind, parseFn) {
        this.expectOptionalToken(delimiterKind);
        var nodes = [];
        do {
          nodes.push(parseFn.call(this));
        } while (this.expectOptionalToken(delimiterKind));
        return nodes;
      };
      return Parser2;
    }();
    exports.Parser = Parser;
    function getTokenDesc(token) {
      var value = token.value;
      return getTokenKindDesc(token.kind) + (value != null ? ' "'.concat(value, '"') : "");
    }
    function getTokenKindDesc(kind) {
      return (0, _lexer.isPunctuatorTokenKind)(kind) ? '"'.concat(kind, '"') : kind;
    }
  }
});

// node_modules/graphql/language/visitor.js
var require_visitor = __commonJS({
  "node_modules/graphql/language/visitor.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.visit = visit;
    exports.visitInParallel = visitInParallel;
    exports.getVisitFn = getVisitFn;
    exports.BREAK = exports.QueryDocumentKeys = void 0;
    var _inspect = _interopRequireDefault(require_inspect());
    var _ast = require_ast();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var QueryDocumentKeys = {
      Name: [],
      Document: ["definitions"],
      OperationDefinition: ["name", "variableDefinitions", "directives", "selectionSet"],
      VariableDefinition: ["variable", "type", "defaultValue", "directives"],
      Variable: ["name"],
      SelectionSet: ["selections"],
      Field: ["alias", "name", "arguments", "directives", "selectionSet"],
      Argument: ["name", "value"],
      FragmentSpread: ["name", "directives"],
      InlineFragment: ["typeCondition", "directives", "selectionSet"],
      FragmentDefinition: [
        "name",
        "variableDefinitions",
        "typeCondition",
        "directives",
        "selectionSet"
      ],
      IntValue: [],
      FloatValue: [],
      StringValue: [],
      BooleanValue: [],
      NullValue: [],
      EnumValue: [],
      ListValue: ["values"],
      ObjectValue: ["fields"],
      ObjectField: ["name", "value"],
      Directive: ["name", "arguments"],
      NamedType: ["name"],
      ListType: ["type"],
      NonNullType: ["type"],
      SchemaDefinition: ["description", "directives", "operationTypes"],
      OperationTypeDefinition: ["type"],
      ScalarTypeDefinition: ["description", "name", "directives"],
      ObjectTypeDefinition: ["description", "name", "interfaces", "directives", "fields"],
      FieldDefinition: ["description", "name", "arguments", "type", "directives"],
      InputValueDefinition: ["description", "name", "type", "defaultValue", "directives"],
      InterfaceTypeDefinition: ["description", "name", "interfaces", "directives", "fields"],
      UnionTypeDefinition: ["description", "name", "directives", "types"],
      EnumTypeDefinition: ["description", "name", "directives", "values"],
      EnumValueDefinition: ["description", "name", "directives"],
      InputObjectTypeDefinition: ["description", "name", "directives", "fields"],
      DirectiveDefinition: ["description", "name", "arguments", "locations"],
      SchemaExtension: ["directives", "operationTypes"],
      ScalarTypeExtension: ["name", "directives"],
      ObjectTypeExtension: ["name", "interfaces", "directives", "fields"],
      InterfaceTypeExtension: ["name", "interfaces", "directives", "fields"],
      UnionTypeExtension: ["name", "directives", "types"],
      EnumTypeExtension: ["name", "directives", "values"],
      InputObjectTypeExtension: ["name", "directives", "fields"]
    };
    exports.QueryDocumentKeys = QueryDocumentKeys;
    var BREAK = Object.freeze({});
    exports.BREAK = BREAK;
    function visit(root, visitor) {
      var visitorKeys = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : QueryDocumentKeys;
      var stack = void 0;
      var inArray = Array.isArray(root);
      var keys = [root];
      var index = -1;
      var edits = [];
      var node = void 0;
      var key = void 0;
      var parent = void 0;
      var path = [];
      var ancestors = [];
      var newRoot = root;
      do {
        index++;
        var isLeaving = index === keys.length;
        var isEdited = isLeaving && edits.length !== 0;
        if (isLeaving) {
          key = ancestors.length === 0 ? void 0 : path[path.length - 1];
          node = parent;
          parent = ancestors.pop();
          if (isEdited) {
            if (inArray) {
              node = node.slice();
            } else {
              var clone2 = {};
              for (var _i2 = 0, _Object$keys2 = Object.keys(node); _i2 < _Object$keys2.length; _i2++) {
                var k = _Object$keys2[_i2];
                clone2[k] = node[k];
              }
              node = clone2;
            }
            var editOffset = 0;
            for (var ii = 0; ii < edits.length; ii++) {
              var editKey = edits[ii][0];
              var editValue = edits[ii][1];
              if (inArray) {
                editKey -= editOffset;
              }
              if (inArray && editValue === null) {
                node.splice(editKey, 1);
                editOffset++;
              } else {
                node[editKey] = editValue;
              }
            }
          }
          index = stack.index;
          keys = stack.keys;
          edits = stack.edits;
          inArray = stack.inArray;
          stack = stack.prev;
        } else {
          key = parent ? inArray ? index : keys[index] : void 0;
          node = parent ? parent[key] : newRoot;
          if (node === null || node === void 0) {
            continue;
          }
          if (parent) {
            path.push(key);
          }
        }
        var result = void 0;
        if (!Array.isArray(node)) {
          if (!(0, _ast.isNode)(node)) {
            throw new Error("Invalid AST Node: ".concat((0, _inspect.default)(node), "."));
          }
          var visitFn = getVisitFn(visitor, node.kind, isLeaving);
          if (visitFn) {
            result = visitFn.call(visitor, node, key, parent, path, ancestors);
            if (result === BREAK) {
              break;
            }
            if (result === false) {
              if (!isLeaving) {
                path.pop();
                continue;
              }
            } else if (result !== void 0) {
              edits.push([key, result]);
              if (!isLeaving) {
                if ((0, _ast.isNode)(result)) {
                  node = result;
                } else {
                  path.pop();
                  continue;
                }
              }
            }
          }
        }
        if (result === void 0 && isEdited) {
          edits.push([key, node]);
        }
        if (isLeaving) {
          path.pop();
        } else {
          var _visitorKeys$node$kin;
          stack = {
            inArray,
            index,
            keys,
            edits,
            prev: stack
          };
          inArray = Array.isArray(node);
          keys = inArray ? node : (_visitorKeys$node$kin = visitorKeys[node.kind]) !== null && _visitorKeys$node$kin !== void 0 ? _visitorKeys$node$kin : [];
          index = -1;
          edits = [];
          if (parent) {
            ancestors.push(parent);
          }
          parent = node;
        }
      } while (stack !== void 0);
      if (edits.length !== 0) {
        newRoot = edits[edits.length - 1][1];
      }
      return newRoot;
    }
    function visitInParallel(visitors) {
      var skipping = new Array(visitors.length);
      return {
        enter: function enter(node) {
          for (var i2 = 0; i2 < visitors.length; i2++) {
            if (skipping[i2] == null) {
              var fn = getVisitFn(
                visitors[i2],
                node.kind,
                false
              );
              if (fn) {
                var result = fn.apply(visitors[i2], arguments);
                if (result === false) {
                  skipping[i2] = node;
                } else if (result === BREAK) {
                  skipping[i2] = BREAK;
                } else if (result !== void 0) {
                  return result;
                }
              }
            }
          }
        },
        leave: function leave(node) {
          for (var i2 = 0; i2 < visitors.length; i2++) {
            if (skipping[i2] == null) {
              var fn = getVisitFn(
                visitors[i2],
                node.kind,
                true
              );
              if (fn) {
                var result = fn.apply(visitors[i2], arguments);
                if (result === BREAK) {
                  skipping[i2] = BREAK;
                } else if (result !== void 0 && result !== false) {
                  return result;
                }
              }
            } else if (skipping[i2] === node) {
              skipping[i2] = null;
            }
          }
        }
      };
    }
    function getVisitFn(visitor, kind, isLeaving) {
      var kindVisitor = visitor[kind];
      if (kindVisitor) {
        if (!isLeaving && typeof kindVisitor === "function") {
          return kindVisitor;
        }
        var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;
        if (typeof kindSpecificVisitor === "function") {
          return kindSpecificVisitor;
        }
      } else {
        var specificVisitor = isLeaving ? visitor.leave : visitor.enter;
        if (specificVisitor) {
          if (typeof specificVisitor === "function") {
            return specificVisitor;
          }
          var specificKindVisitor = specificVisitor[kind];
          if (typeof specificKindVisitor === "function") {
            return specificKindVisitor;
          }
        }
      }
    }
  }
});

// node_modules/graphql/polyfills/find.js
var require_find = __commonJS({
  "node_modules/graphql/polyfills/find.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var find = Array.prototype.find ? function(list, predicate) {
      return Array.prototype.find.call(list, predicate);
    } : function(list, predicate) {
      for (var _i2 = 0; _i2 < list.length; _i2++) {
        var value = list[_i2];
        if (predicate(value)) {
          return value;
        }
      }
    };
    var _default = find;
    exports.default = _default;
  }
});

// node_modules/graphql/polyfills/objectValues.js
var require_objectValues = __commonJS({
  "node_modules/graphql/polyfills/objectValues.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var objectValues = Object.values || function(obj) {
      return Object.keys(obj).map(function(key) {
        return obj[key];
      });
    };
    var _default = objectValues;
    exports.default = _default;
  }
});

// node_modules/graphql/error/locatedError.js
var require_locatedError = __commonJS({
  "node_modules/graphql/error/locatedError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.locatedError = locatedError;
    var _inspect = _interopRequireDefault(require_inspect());
    var _GraphQLError = require_GraphQLError();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function locatedError(rawOriginalError, nodes, path) {
      var _nodes;
      var originalError = rawOriginalError instanceof Error ? rawOriginalError : new Error("Unexpected error value: " + (0, _inspect.default)(rawOriginalError));
      if (Array.isArray(originalError.path)) {
        return originalError;
      }
      return new _GraphQLError.GraphQLError(originalError.message, (_nodes = originalError.nodes) !== null && _nodes !== void 0 ? _nodes : nodes, originalError.source, originalError.positions, path, originalError);
    }
  }
});

// node_modules/graphql/utilities/assertValidName.js
var require_assertValidName = __commonJS({
  "node_modules/graphql/utilities/assertValidName.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.assertValidName = assertValidName;
    exports.isValidNameError = isValidNameError;
    var _devAssert = _interopRequireDefault(require_devAssert());
    var _GraphQLError = require_GraphQLError();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
    function assertValidName(name) {
      var error = isValidNameError(name);
      if (error) {
        throw error;
      }
      return name;
    }
    function isValidNameError(name) {
      typeof name === "string" || (0, _devAssert.default)(0, "Expected name to be a string.");
      if (name.length > 1 && name[0] === "_" && name[1] === "_") {
        return new _GraphQLError.GraphQLError('Name "'.concat(name, '" must not begin with "__", which is reserved by GraphQL introspection.'));
      }
      if (!NAME_RX.test(name)) {
        return new _GraphQLError.GraphQLError('Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but "'.concat(name, '" does not.'));
      }
    }
  }
});

// node_modules/graphql/polyfills/objectEntries.js
var require_objectEntries = __commonJS({
  "node_modules/graphql/polyfills/objectEntries.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var objectEntries = Object.entries || function(obj) {
      return Object.keys(obj).map(function(key) {
        return [key, obj[key]];
      });
    };
    var _default = objectEntries;
    exports.default = _default;
  }
});

// node_modules/graphql/jsutils/keyMap.js
var require_keyMap = __commonJS({
  "node_modules/graphql/jsutils/keyMap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = keyMap;
    function keyMap(list, keyFn) {
      return list.reduce(function(map, item) {
        map[keyFn(item)] = item;
        return map;
      }, /* @__PURE__ */ Object.create(null));
    }
  }
});

// node_modules/graphql/jsutils/mapValue.js
var require_mapValue = __commonJS({
  "node_modules/graphql/jsutils/mapValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = mapValue;
    var _objectEntries3 = _interopRequireDefault(require_objectEntries());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function mapValue(map, fn) {
      var result = /* @__PURE__ */ Object.create(null);
      for (var _i2 = 0, _objectEntries2 = (0, _objectEntries3.default)(map); _i2 < _objectEntries2.length; _i2++) {
        var _ref2 = _objectEntries2[_i2];
        var _key = _ref2[0];
        var _value = _ref2[1];
        result[_key] = fn(_value, _key);
      }
      return result;
    }
  }
});

// node_modules/graphql/jsutils/toObjMap.js
var require_toObjMap = __commonJS({
  "node_modules/graphql/jsutils/toObjMap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = toObjMap;
    var _objectEntries3 = _interopRequireDefault(require_objectEntries());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function toObjMap(obj) {
      if (Object.getPrototypeOf(obj) === null) {
        return obj;
      }
      var map = /* @__PURE__ */ Object.create(null);
      for (var _i2 = 0, _objectEntries2 = (0, _objectEntries3.default)(obj); _i2 < _objectEntries2.length; _i2++) {
        var _ref2 = _objectEntries2[_i2];
        var key = _ref2[0];
        var value = _ref2[1];
        map[key] = value;
      }
      return map;
    }
  }
});

// node_modules/graphql/jsutils/keyValMap.js
var require_keyValMap = __commonJS({
  "node_modules/graphql/jsutils/keyValMap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = keyValMap;
    function keyValMap(list, keyFn, valFn) {
      return list.reduce(function(map, item) {
        map[keyFn(item)] = valFn(item);
        return map;
      }, /* @__PURE__ */ Object.create(null));
    }
  }
});

// node_modules/graphql/jsutils/didYouMean.js
var require_didYouMean = __commonJS({
  "node_modules/graphql/jsutils/didYouMean.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = didYouMean;
    var MAX_SUGGESTIONS = 5;
    function didYouMean(firstArg, secondArg) {
      var _ref = typeof firstArg === "string" ? [firstArg, secondArg] : [void 0, firstArg], subMessage = _ref[0], suggestionsArg = _ref[1];
      var message = " Did you mean ";
      if (subMessage) {
        message += subMessage + " ";
      }
      var suggestions = suggestionsArg.map(function(x2) {
        return '"'.concat(x2, '"');
      });
      switch (suggestions.length) {
        case 0:
          return "";
        case 1:
          return message + suggestions[0] + "?";
        case 2:
          return message + suggestions[0] + " or " + suggestions[1] + "?";
      }
      var selected = suggestions.slice(0, MAX_SUGGESTIONS);
      var lastItem = selected.pop();
      return message + selected.join(", ") + ", or " + lastItem + "?";
    }
  }
});

// node_modules/graphql/jsutils/identityFunc.js
var require_identityFunc = __commonJS({
  "node_modules/graphql/jsutils/identityFunc.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = identityFunc;
    function identityFunc(x2) {
      return x2;
    }
  }
});

// node_modules/graphql/jsutils/naturalCompare.js
var require_naturalCompare = __commonJS({
  "node_modules/graphql/jsutils/naturalCompare.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = naturalCompare;
    function naturalCompare(aStr, bStr) {
      var aIdx = 0;
      var bIdx = 0;
      while (aIdx < aStr.length && bIdx < bStr.length) {
        var aChar = aStr.charCodeAt(aIdx);
        var bChar = bStr.charCodeAt(bIdx);
        if (isDigit(aChar) && isDigit(bChar)) {
          var aNum = 0;
          do {
            ++aIdx;
            aNum = aNum * 10 + aChar - DIGIT_0;
            aChar = aStr.charCodeAt(aIdx);
          } while (isDigit(aChar) && aNum > 0);
          var bNum = 0;
          do {
            ++bIdx;
            bNum = bNum * 10 + bChar - DIGIT_0;
            bChar = bStr.charCodeAt(bIdx);
          } while (isDigit(bChar) && bNum > 0);
          if (aNum < bNum) {
            return -1;
          }
          if (aNum > bNum) {
            return 1;
          }
        } else {
          if (aChar < bChar) {
            return -1;
          }
          if (aChar > bChar) {
            return 1;
          }
          ++aIdx;
          ++bIdx;
        }
      }
      return aStr.length - bStr.length;
    }
    var DIGIT_0 = 48;
    var DIGIT_9 = 57;
    function isDigit(code) {
      return !isNaN(code) && DIGIT_0 <= code && code <= DIGIT_9;
    }
  }
});

// node_modules/graphql/jsutils/suggestionList.js
var require_suggestionList = __commonJS({
  "node_modules/graphql/jsutils/suggestionList.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = suggestionList;
    var _naturalCompare = _interopRequireDefault(require_naturalCompare());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function suggestionList(input, options) {
      var optionsByDistance = /* @__PURE__ */ Object.create(null);
      var lexicalDistance = new LexicalDistance(input);
      var threshold = Math.floor(input.length * 0.4) + 1;
      for (var _i2 = 0; _i2 < options.length; _i2++) {
        var option = options[_i2];
        var distance = lexicalDistance.measure(option, threshold);
        if (distance !== void 0) {
          optionsByDistance[option] = distance;
        }
      }
      return Object.keys(optionsByDistance).sort(function(a, b) {
        var distanceDiff = optionsByDistance[a] - optionsByDistance[b];
        return distanceDiff !== 0 ? distanceDiff : (0, _naturalCompare.default)(a, b);
      });
    }
    var LexicalDistance = /* @__PURE__ */ function() {
      function LexicalDistance2(input) {
        this._input = input;
        this._inputLowerCase = input.toLowerCase();
        this._inputArray = stringToArray(this._inputLowerCase);
        this._rows = [new Array(input.length + 1).fill(0), new Array(input.length + 1).fill(0), new Array(input.length + 1).fill(0)];
      }
      var _proto = LexicalDistance2.prototype;
      _proto.measure = function measure(option, threshold) {
        if (this._input === option) {
          return 0;
        }
        var optionLowerCase = option.toLowerCase();
        if (this._inputLowerCase === optionLowerCase) {
          return 1;
        }
        var a = stringToArray(optionLowerCase);
        var b = this._inputArray;
        if (a.length < b.length) {
          var tmp = a;
          a = b;
          b = tmp;
        }
        var aLength = a.length;
        var bLength = b.length;
        if (aLength - bLength > threshold) {
          return void 0;
        }
        var rows = this._rows;
        for (var j = 0; j <= bLength; j++) {
          rows[0][j] = j;
        }
        for (var i2 = 1; i2 <= aLength; i2++) {
          var upRow = rows[(i2 - 1) % 3];
          var currentRow = rows[i2 % 3];
          var smallestCell = currentRow[0] = i2;
          for (var _j = 1; _j <= bLength; _j++) {
            var cost = a[i2 - 1] === b[_j - 1] ? 0 : 1;
            var currentCell = Math.min(
              upRow[_j] + 1,
              currentRow[_j - 1] + 1,
              upRow[_j - 1] + cost
            );
            if (i2 > 1 && _j > 1 && a[i2 - 1] === b[_j - 2] && a[i2 - 2] === b[_j - 1]) {
              var doubleDiagonalCell = rows[(i2 - 2) % 3][_j - 2];
              currentCell = Math.min(currentCell, doubleDiagonalCell + 1);
            }
            if (currentCell < smallestCell) {
              smallestCell = currentCell;
            }
            currentRow[_j] = currentCell;
          }
          if (smallestCell > threshold) {
            return void 0;
          }
        }
        var distance = rows[aLength % 3][bLength];
        return distance <= threshold ? distance : void 0;
      };
      return LexicalDistance2;
    }();
    function stringToArray(str) {
      var strLength = str.length;
      var array = new Array(strLength);
      for (var i2 = 0; i2 < strLength; ++i2) {
        array[i2] = str.charCodeAt(i2);
      }
      return array;
    }
  }
});

// node_modules/graphql/language/printer.js
var require_printer = __commonJS({
  "node_modules/graphql/language/printer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.print = print;
    var _visitor = require_visitor();
    var _blockString = require_blockString();
    function print(ast) {
      return (0, _visitor.visit)(ast, {
        leave: printDocASTReducer
      });
    }
    var MAX_LINE_LENGTH = 80;
    var printDocASTReducer = {
      Name: function Name(node) {
        return node.value;
      },
      Variable: function Variable(node) {
        return "$" + node.name;
      },
      Document: function Document(node) {
        return join(node.definitions, "\n\n") + "\n";
      },
      OperationDefinition: function OperationDefinition(node) {
        var op = node.operation;
        var name = node.name;
        var varDefs = wrap("(", join(node.variableDefinitions, ", "), ")");
        var directives = join(node.directives, " ");
        var selectionSet = node.selectionSet;
        return !name && !directives && !varDefs && op === "query" ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], " ");
      },
      VariableDefinition: function VariableDefinition(_ref) {
        var variable = _ref.variable, type = _ref.type, defaultValue = _ref.defaultValue, directives = _ref.directives;
        return variable + ": " + type + wrap(" = ", defaultValue) + wrap(" ", join(directives, " "));
      },
      SelectionSet: function SelectionSet(_ref2) {
        var selections = _ref2.selections;
        return block(selections);
      },
      Field: function Field(_ref3) {
        var alias = _ref3.alias, name = _ref3.name, args = _ref3.arguments, directives = _ref3.directives, selectionSet = _ref3.selectionSet;
        var prefix = wrap("", alias, ": ") + name;
        var argsLine = prefix + wrap("(", join(args, ", "), ")");
        if (argsLine.length > MAX_LINE_LENGTH) {
          argsLine = prefix + wrap("(\n", indent(join(args, "\n")), "\n)");
        }
        return join([argsLine, join(directives, " "), selectionSet], " ");
      },
      Argument: function Argument(_ref4) {
        var name = _ref4.name, value = _ref4.value;
        return name + ": " + value;
      },
      FragmentSpread: function FragmentSpread(_ref5) {
        var name = _ref5.name, directives = _ref5.directives;
        return "..." + name + wrap(" ", join(directives, " "));
      },
      InlineFragment: function InlineFragment(_ref6) {
        var typeCondition = _ref6.typeCondition, directives = _ref6.directives, selectionSet = _ref6.selectionSet;
        return join(["...", wrap("on ", typeCondition), join(directives, " "), selectionSet], " ");
      },
      FragmentDefinition: function FragmentDefinition(_ref7) {
        var name = _ref7.name, typeCondition = _ref7.typeCondition, variableDefinitions = _ref7.variableDefinitions, directives = _ref7.directives, selectionSet = _ref7.selectionSet;
        return "fragment ".concat(name).concat(wrap("(", join(variableDefinitions, ", "), ")"), " ") + "on ".concat(typeCondition, " ").concat(wrap("", join(directives, " "), " ")) + selectionSet;
      },
      IntValue: function IntValue(_ref8) {
        var value = _ref8.value;
        return value;
      },
      FloatValue: function FloatValue(_ref9) {
        var value = _ref9.value;
        return value;
      },
      StringValue: function StringValue(_ref10, key) {
        var value = _ref10.value, isBlockString = _ref10.block;
        return isBlockString ? (0, _blockString.printBlockString)(value, key === "description" ? "" : "  ") : JSON.stringify(value);
      },
      BooleanValue: function BooleanValue(_ref11) {
        var value = _ref11.value;
        return value ? "true" : "false";
      },
      NullValue: function NullValue() {
        return "null";
      },
      EnumValue: function EnumValue(_ref12) {
        var value = _ref12.value;
        return value;
      },
      ListValue: function ListValue(_ref13) {
        var values = _ref13.values;
        return "[" + join(values, ", ") + "]";
      },
      ObjectValue: function ObjectValue(_ref14) {
        var fields = _ref14.fields;
        return "{" + join(fields, ", ") + "}";
      },
      ObjectField: function ObjectField(_ref15) {
        var name = _ref15.name, value = _ref15.value;
        return name + ": " + value;
      },
      Directive: function Directive(_ref16) {
        var name = _ref16.name, args = _ref16.arguments;
        return "@" + name + wrap("(", join(args, ", "), ")");
      },
      NamedType: function NamedType(_ref17) {
        var name = _ref17.name;
        return name;
      },
      ListType: function ListType(_ref18) {
        var type = _ref18.type;
        return "[" + type + "]";
      },
      NonNullType: function NonNullType(_ref19) {
        var type = _ref19.type;
        return type + "!";
      },
      SchemaDefinition: addDescription(function(_ref20) {
        var directives = _ref20.directives, operationTypes = _ref20.operationTypes;
        return join(["schema", join(directives, " "), block(operationTypes)], " ");
      }),
      OperationTypeDefinition: function OperationTypeDefinition(_ref21) {
        var operation = _ref21.operation, type = _ref21.type;
        return operation + ": " + type;
      },
      ScalarTypeDefinition: addDescription(function(_ref22) {
        var name = _ref22.name, directives = _ref22.directives;
        return join(["scalar", name, join(directives, " ")], " ");
      }),
      ObjectTypeDefinition: addDescription(function(_ref23) {
        var name = _ref23.name, interfaces = _ref23.interfaces, directives = _ref23.directives, fields = _ref23.fields;
        return join(["type", name, wrap("implements ", join(interfaces, " & ")), join(directives, " "), block(fields)], " ");
      }),
      FieldDefinition: addDescription(function(_ref24) {
        var name = _ref24.name, args = _ref24.arguments, type = _ref24.type, directives = _ref24.directives;
        return name + (hasMultilineItems(args) ? wrap("(\n", indent(join(args, "\n")), "\n)") : wrap("(", join(args, ", "), ")")) + ": " + type + wrap(" ", join(directives, " "));
      }),
      InputValueDefinition: addDescription(function(_ref25) {
        var name = _ref25.name, type = _ref25.type, defaultValue = _ref25.defaultValue, directives = _ref25.directives;
        return join([name + ": " + type, wrap("= ", defaultValue), join(directives, " ")], " ");
      }),
      InterfaceTypeDefinition: addDescription(function(_ref26) {
        var name = _ref26.name, interfaces = _ref26.interfaces, directives = _ref26.directives, fields = _ref26.fields;
        return join(["interface", name, wrap("implements ", join(interfaces, " & ")), join(directives, " "), block(fields)], " ");
      }),
      UnionTypeDefinition: addDescription(function(_ref27) {
        var name = _ref27.name, directives = _ref27.directives, types3 = _ref27.types;
        return join(["union", name, join(directives, " "), types3 && types3.length !== 0 ? "= " + join(types3, " | ") : ""], " ");
      }),
      EnumTypeDefinition: addDescription(function(_ref28) {
        var name = _ref28.name, directives = _ref28.directives, values = _ref28.values;
        return join(["enum", name, join(directives, " "), block(values)], " ");
      }),
      EnumValueDefinition: addDescription(function(_ref29) {
        var name = _ref29.name, directives = _ref29.directives;
        return join([name, join(directives, " ")], " ");
      }),
      InputObjectTypeDefinition: addDescription(function(_ref30) {
        var name = _ref30.name, directives = _ref30.directives, fields = _ref30.fields;
        return join(["input", name, join(directives, " "), block(fields)], " ");
      }),
      DirectiveDefinition: addDescription(function(_ref31) {
        var name = _ref31.name, args = _ref31.arguments, repeatable = _ref31.repeatable, locations = _ref31.locations;
        return "directive @" + name + (hasMultilineItems(args) ? wrap("(\n", indent(join(args, "\n")), "\n)") : wrap("(", join(args, ", "), ")")) + (repeatable ? " repeatable" : "") + " on " + join(locations, " | ");
      }),
      SchemaExtension: function SchemaExtension(_ref32) {
        var directives = _ref32.directives, operationTypes = _ref32.operationTypes;
        return join(["extend schema", join(directives, " "), block(operationTypes)], " ");
      },
      ScalarTypeExtension: function ScalarTypeExtension(_ref33) {
        var name = _ref33.name, directives = _ref33.directives;
        return join(["extend scalar", name, join(directives, " ")], " ");
      },
      ObjectTypeExtension: function ObjectTypeExtension(_ref34) {
        var name = _ref34.name, interfaces = _ref34.interfaces, directives = _ref34.directives, fields = _ref34.fields;
        return join(["extend type", name, wrap("implements ", join(interfaces, " & ")), join(directives, " "), block(fields)], " ");
      },
      InterfaceTypeExtension: function InterfaceTypeExtension(_ref35) {
        var name = _ref35.name, interfaces = _ref35.interfaces, directives = _ref35.directives, fields = _ref35.fields;
        return join(["extend interface", name, wrap("implements ", join(interfaces, " & ")), join(directives, " "), block(fields)], " ");
      },
      UnionTypeExtension: function UnionTypeExtension(_ref36) {
        var name = _ref36.name, directives = _ref36.directives, types3 = _ref36.types;
        return join(["extend union", name, join(directives, " "), types3 && types3.length !== 0 ? "= " + join(types3, " | ") : ""], " ");
      },
      EnumTypeExtension: function EnumTypeExtension(_ref37) {
        var name = _ref37.name, directives = _ref37.directives, values = _ref37.values;
        return join(["extend enum", name, join(directives, " "), block(values)], " ");
      },
      InputObjectTypeExtension: function InputObjectTypeExtension(_ref38) {
        var name = _ref38.name, directives = _ref38.directives, fields = _ref38.fields;
        return join(["extend input", name, join(directives, " "), block(fields)], " ");
      }
    };
    function addDescription(cb) {
      return function(node) {
        return join([node.description, cb(node)], "\n");
      };
    }
    function join(maybeArray) {
      var _maybeArray$filter$jo;
      var separator = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter(function(x2) {
        return x2;
      }).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : "";
    }
    function block(array) {
      return wrap("{\n", indent(join(array, "\n")), "\n}");
    }
    function wrap(start, maybeString) {
      var end = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
      return maybeString != null && maybeString !== "" ? start + maybeString + end : "";
    }
    function indent(str) {
      return wrap("  ", str.replace(/\n/g, "\n  "));
    }
    function isMultiline(str) {
      return str.indexOf("\n") !== -1;
    }
    function hasMultilineItems(maybeArray) {
      return maybeArray != null && maybeArray.some(isMultiline);
    }
  }
});

// node_modules/graphql/utilities/valueFromASTUntyped.js
var require_valueFromASTUntyped = __commonJS({
  "node_modules/graphql/utilities/valueFromASTUntyped.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.valueFromASTUntyped = valueFromASTUntyped;
    var _inspect = _interopRequireDefault(require_inspect());
    var _invariant = _interopRequireDefault(require_invariant());
    var _keyValMap = _interopRequireDefault(require_keyValMap());
    var _kinds = require_kinds();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function valueFromASTUntyped(valueNode, variables) {
      switch (valueNode.kind) {
        case _kinds.Kind.NULL:
          return null;
        case _kinds.Kind.INT:
          return parseInt(valueNode.value, 10);
        case _kinds.Kind.FLOAT:
          return parseFloat(valueNode.value);
        case _kinds.Kind.STRING:
        case _kinds.Kind.ENUM:
        case _kinds.Kind.BOOLEAN:
          return valueNode.value;
        case _kinds.Kind.LIST:
          return valueNode.values.map(function(node) {
            return valueFromASTUntyped(node, variables);
          });
        case _kinds.Kind.OBJECT:
          return (0, _keyValMap.default)(valueNode.fields, function(field) {
            return field.name.value;
          }, function(field) {
            return valueFromASTUntyped(field.value, variables);
          });
        case _kinds.Kind.VARIABLE:
          return variables === null || variables === void 0 ? void 0 : variables[valueNode.name.value];
      }
      (0, _invariant.default)(0, "Unexpected value node: " + (0, _inspect.default)(valueNode));
    }
  }
});

// node_modules/graphql/type/definition.js
var require_definition = __commonJS({
  "node_modules/graphql/type/definition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isType = isType;
    exports.assertType = assertType;
    exports.isScalarType = isScalarType;
    exports.assertScalarType = assertScalarType;
    exports.isObjectType = isObjectType;
    exports.assertObjectType = assertObjectType;
    exports.isInterfaceType = isInterfaceType;
    exports.assertInterfaceType = assertInterfaceType;
    exports.isUnionType = isUnionType;
    exports.assertUnionType = assertUnionType;
    exports.isEnumType = isEnumType;
    exports.assertEnumType = assertEnumType;
    exports.isInputObjectType = isInputObjectType;
    exports.assertInputObjectType = assertInputObjectType;
    exports.isListType = isListType;
    exports.assertListType = assertListType;
    exports.isNonNullType = isNonNullType;
    exports.assertNonNullType = assertNonNullType;
    exports.isInputType = isInputType;
    exports.assertInputType = assertInputType;
    exports.isOutputType = isOutputType;
    exports.assertOutputType = assertOutputType;
    exports.isLeafType = isLeafType;
    exports.assertLeafType = assertLeafType;
    exports.isCompositeType = isCompositeType;
    exports.assertCompositeType = assertCompositeType;
    exports.isAbstractType = isAbstractType;
    exports.assertAbstractType = assertAbstractType;
    exports.GraphQLList = GraphQLList;
    exports.GraphQLNonNull = GraphQLNonNull;
    exports.isWrappingType = isWrappingType;
    exports.assertWrappingType = assertWrappingType;
    exports.isNullableType = isNullableType;
    exports.assertNullableType = assertNullableType;
    exports.getNullableType = getNullableType;
    exports.isNamedType = isNamedType;
    exports.assertNamedType = assertNamedType;
    exports.getNamedType = getNamedType;
    exports.argsToArgsConfig = argsToArgsConfig;
    exports.isRequiredArgument = isRequiredArgument;
    exports.isRequiredInputField = isRequiredInputField;
    exports.GraphQLInputObjectType = exports.GraphQLEnumType = exports.GraphQLUnionType = exports.GraphQLInterfaceType = exports.GraphQLObjectType = exports.GraphQLScalarType = void 0;
    var _objectEntries = _interopRequireDefault(require_objectEntries());
    var _symbols = require_symbols();
    var _inspect = _interopRequireDefault(require_inspect());
    var _keyMap = _interopRequireDefault(require_keyMap());
    var _mapValue = _interopRequireDefault(require_mapValue());
    var _toObjMap = _interopRequireDefault(require_toObjMap());
    var _devAssert = _interopRequireDefault(require_devAssert());
    var _keyValMap = _interopRequireDefault(require_keyValMap());
    var _instanceOf = _interopRequireDefault(require_instanceOf());
    var _didYouMean = _interopRequireDefault(require_didYouMean());
    var _isObjectLike = _interopRequireDefault(require_isObjectLike());
    var _identityFunc = _interopRequireDefault(require_identityFunc());
    var _defineInspect = _interopRequireDefault(require_defineInspect());
    var _suggestionList = _interopRequireDefault(require_suggestionList());
    var _GraphQLError = require_GraphQLError();
    var _kinds = require_kinds();
    var _printer = require_printer();
    var _valueFromASTUntyped = require_valueFromASTUntyped();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function isType(type) {
      return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type) || isListType(type) || isNonNullType(type);
    }
    function assertType(type) {
      if (!isType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL type."));
      }
      return type;
    }
    function isScalarType(type) {
      return (0, _instanceOf.default)(type, GraphQLScalarType);
    }
    function assertScalarType(type) {
      if (!isScalarType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL Scalar type."));
      }
      return type;
    }
    function isObjectType(type) {
      return (0, _instanceOf.default)(type, GraphQLObjectType);
    }
    function assertObjectType(type) {
      if (!isObjectType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL Object type."));
      }
      return type;
    }
    function isInterfaceType(type) {
      return (0, _instanceOf.default)(type, GraphQLInterfaceType);
    }
    function assertInterfaceType(type) {
      if (!isInterfaceType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL Interface type."));
      }
      return type;
    }
    function isUnionType(type) {
      return (0, _instanceOf.default)(type, GraphQLUnionType);
    }
    function assertUnionType(type) {
      if (!isUnionType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL Union type."));
      }
      return type;
    }
    function isEnumType(type) {
      return (0, _instanceOf.default)(type, GraphQLEnumType);
    }
    function assertEnumType(type) {
      if (!isEnumType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL Enum type."));
      }
      return type;
    }
    function isInputObjectType(type) {
      return (0, _instanceOf.default)(type, GraphQLInputObjectType);
    }
    function assertInputObjectType(type) {
      if (!isInputObjectType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL Input Object type."));
      }
      return type;
    }
    function isListType(type) {
      return (0, _instanceOf.default)(type, GraphQLList);
    }
    function assertListType(type) {
      if (!isListType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL List type."));
      }
      return type;
    }
    function isNonNullType(type) {
      return (0, _instanceOf.default)(type, GraphQLNonNull);
    }
    function assertNonNullType(type) {
      if (!isNonNullType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL Non-Null type."));
      }
      return type;
    }
    function isInputType(type) {
      return isScalarType(type) || isEnumType(type) || isInputObjectType(type) || isWrappingType(type) && isInputType(type.ofType);
    }
    function assertInputType(type) {
      if (!isInputType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL input type."));
      }
      return type;
    }
    function isOutputType(type) {
      return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isWrappingType(type) && isOutputType(type.ofType);
    }
    function assertOutputType(type) {
      if (!isOutputType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL output type."));
      }
      return type;
    }
    function isLeafType(type) {
      return isScalarType(type) || isEnumType(type);
    }
    function assertLeafType(type) {
      if (!isLeafType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL leaf type."));
      }
      return type;
    }
    function isCompositeType(type) {
      return isObjectType(type) || isInterfaceType(type) || isUnionType(type);
    }
    function assertCompositeType(type) {
      if (!isCompositeType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL composite type."));
      }
      return type;
    }
    function isAbstractType(type) {
      return isInterfaceType(type) || isUnionType(type);
    }
    function assertAbstractType(type) {
      if (!isAbstractType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL abstract type."));
      }
      return type;
    }
    function GraphQLList(ofType) {
      if (this instanceof GraphQLList) {
        this.ofType = assertType(ofType);
      } else {
        return new GraphQLList(ofType);
      }
    }
    GraphQLList.prototype.toString = function toString() {
      return "[" + String(this.ofType) + "]";
    };
    GraphQLList.prototype.toJSON = function toJSON() {
      return this.toString();
    };
    Object.defineProperty(GraphQLList.prototype, _symbols.SYMBOL_TO_STRING_TAG, {
      get: function get() {
        return "GraphQLList";
      }
    });
    (0, _defineInspect.default)(GraphQLList);
    function GraphQLNonNull(ofType) {
      if (this instanceof GraphQLNonNull) {
        this.ofType = assertNullableType(ofType);
      } else {
        return new GraphQLNonNull(ofType);
      }
    }
    GraphQLNonNull.prototype.toString = function toString() {
      return String(this.ofType) + "!";
    };
    GraphQLNonNull.prototype.toJSON = function toJSON() {
      return this.toString();
    };
    Object.defineProperty(GraphQLNonNull.prototype, _symbols.SYMBOL_TO_STRING_TAG, {
      get: function get() {
        return "GraphQLNonNull";
      }
    });
    (0, _defineInspect.default)(GraphQLNonNull);
    function isWrappingType(type) {
      return isListType(type) || isNonNullType(type);
    }
    function assertWrappingType(type) {
      if (!isWrappingType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL wrapping type."));
      }
      return type;
    }
    function isNullableType(type) {
      return isType(type) && !isNonNullType(type);
    }
    function assertNullableType(type) {
      if (!isNullableType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL nullable type."));
      }
      return type;
    }
    function getNullableType(type) {
      if (type) {
        return isNonNullType(type) ? type.ofType : type;
      }
    }
    function isNamedType(type) {
      return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type);
    }
    function assertNamedType(type) {
      if (!isNamedType(type)) {
        throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL named type."));
      }
      return type;
    }
    function getNamedType(type) {
      if (type) {
        var unwrappedType = type;
        while (isWrappingType(unwrappedType)) {
          unwrappedType = unwrappedType.ofType;
        }
        return unwrappedType;
      }
    }
    function resolveThunk(thunk) {
      return typeof thunk === "function" ? thunk() : thunk;
    }
    function undefineIfEmpty(arr) {
      return arr && arr.length > 0 ? arr : void 0;
    }
    var GraphQLScalarType = /* @__PURE__ */ function() {
      function GraphQLScalarType2(config) {
        var _config$parseValue, _config$serialize, _config$parseLiteral;
        var parseValue = (_config$parseValue = config.parseValue) !== null && _config$parseValue !== void 0 ? _config$parseValue : _identityFunc.default;
        this.name = config.name;
        this.description = config.description;
        this.specifiedByUrl = config.specifiedByUrl;
        this.serialize = (_config$serialize = config.serialize) !== null && _config$serialize !== void 0 ? _config$serialize : _identityFunc.default;
        this.parseValue = parseValue;
        this.parseLiteral = (_config$parseLiteral = config.parseLiteral) !== null && _config$parseLiteral !== void 0 ? _config$parseLiteral : function(node, variables) {
          return parseValue((0, _valueFromASTUntyped.valueFromASTUntyped)(node, variables));
        };
        this.extensions = config.extensions && (0, _toObjMap.default)(config.extensions);
        this.astNode = config.astNode;
        this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
        typeof config.name === "string" || (0, _devAssert.default)(0, "Must provide name.");
        config.specifiedByUrl == null || typeof config.specifiedByUrl === "string" || (0, _devAssert.default)(0, "".concat(this.name, ' must provide "specifiedByUrl" as a string, ') + "but got: ".concat((0, _inspect.default)(config.specifiedByUrl), "."));
        config.serialize == null || typeof config.serialize === "function" || (0, _devAssert.default)(0, "".concat(this.name, ' must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.'));
        if (config.parseLiteral) {
          typeof config.parseValue === "function" && typeof config.parseLiteral === "function" || (0, _devAssert.default)(0, "".concat(this.name, ' must provide both "parseValue" and "parseLiteral" functions.'));
        }
      }
      var _proto = GraphQLScalarType2.prototype;
      _proto.toConfig = function toConfig() {
        var _this$extensionASTNod;
        return {
          name: this.name,
          description: this.description,
          specifiedByUrl: this.specifiedByUrl,
          serialize: this.serialize,
          parseValue: this.parseValue,
          parseLiteral: this.parseLiteral,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: (_this$extensionASTNod = this.extensionASTNodes) !== null && _this$extensionASTNod !== void 0 ? _this$extensionASTNod : []
        };
      };
      _proto.toString = function toString() {
        return this.name;
      };
      _proto.toJSON = function toJSON() {
        return this.toString();
      };
      _createClass(GraphQLScalarType2, [{
        key: _symbols.SYMBOL_TO_STRING_TAG,
        get: function get() {
          return "GraphQLScalarType";
        }
      }]);
      return GraphQLScalarType2;
    }();
    exports.GraphQLScalarType = GraphQLScalarType;
    (0, _defineInspect.default)(GraphQLScalarType);
    var GraphQLObjectType = /* @__PURE__ */ function() {
      function GraphQLObjectType2(config) {
        this.name = config.name;
        this.description = config.description;
        this.isTypeOf = config.isTypeOf;
        this.extensions = config.extensions && (0, _toObjMap.default)(config.extensions);
        this.astNode = config.astNode;
        this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
        this._fields = defineFieldMap.bind(void 0, config);
        this._interfaces = defineInterfaces.bind(void 0, config);
        typeof config.name === "string" || (0, _devAssert.default)(0, "Must provide name.");
        config.isTypeOf == null || typeof config.isTypeOf === "function" || (0, _devAssert.default)(0, "".concat(this.name, ' must provide "isTypeOf" as a function, ') + "but got: ".concat((0, _inspect.default)(config.isTypeOf), "."));
      }
      var _proto2 = GraphQLObjectType2.prototype;
      _proto2.getFields = function getFields() {
        if (typeof this._fields === "function") {
          this._fields = this._fields();
        }
        return this._fields;
      };
      _proto2.getInterfaces = function getInterfaces() {
        if (typeof this._interfaces === "function") {
          this._interfaces = this._interfaces();
        }
        return this._interfaces;
      };
      _proto2.toConfig = function toConfig() {
        return {
          name: this.name,
          description: this.description,
          interfaces: this.getInterfaces(),
          fields: fieldsToFieldsConfig(this.getFields()),
          isTypeOf: this.isTypeOf,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: this.extensionASTNodes || []
        };
      };
      _proto2.toString = function toString() {
        return this.name;
      };
      _proto2.toJSON = function toJSON() {
        return this.toString();
      };
      _createClass(GraphQLObjectType2, [{
        key: _symbols.SYMBOL_TO_STRING_TAG,
        get: function get() {
          return "GraphQLObjectType";
        }
      }]);
      return GraphQLObjectType2;
    }();
    exports.GraphQLObjectType = GraphQLObjectType;
    (0, _defineInspect.default)(GraphQLObjectType);
    function defineInterfaces(config) {
      var _resolveThunk;
      var interfaces = (_resolveThunk = resolveThunk(config.interfaces)) !== null && _resolveThunk !== void 0 ? _resolveThunk : [];
      Array.isArray(interfaces) || (0, _devAssert.default)(0, "".concat(config.name, " interfaces must be an Array or a function which returns an Array."));
      return interfaces;
    }
    function defineFieldMap(config) {
      var fieldMap = resolveThunk(config.fields);
      isPlainObj(fieldMap) || (0, _devAssert.default)(0, "".concat(config.name, " fields must be an object with field names as keys or a function which returns such an object."));
      return (0, _mapValue.default)(fieldMap, function(fieldConfig, fieldName) {
        var _fieldConfig$args;
        isPlainObj(fieldConfig) || (0, _devAssert.default)(0, "".concat(config.name, ".").concat(fieldName, " field config must be an object."));
        !("isDeprecated" in fieldConfig) || (0, _devAssert.default)(0, "".concat(config.name, ".").concat(fieldName, ' should provide "deprecationReason" instead of "isDeprecated".'));
        fieldConfig.resolve == null || typeof fieldConfig.resolve === "function" || (0, _devAssert.default)(0, "".concat(config.name, ".").concat(fieldName, " field resolver must be a function if ") + "provided, but got: ".concat((0, _inspect.default)(fieldConfig.resolve), "."));
        var argsConfig = (_fieldConfig$args = fieldConfig.args) !== null && _fieldConfig$args !== void 0 ? _fieldConfig$args : {};
        isPlainObj(argsConfig) || (0, _devAssert.default)(0, "".concat(config.name, ".").concat(fieldName, " args must be an object with argument names as keys."));
        var args = (0, _objectEntries.default)(argsConfig).map(function(_ref) {
          var argName = _ref[0], argConfig = _ref[1];
          return {
            name: argName,
            description: argConfig.description,
            type: argConfig.type,
            defaultValue: argConfig.defaultValue,
            deprecationReason: argConfig.deprecationReason,
            extensions: argConfig.extensions && (0, _toObjMap.default)(argConfig.extensions),
            astNode: argConfig.astNode
          };
        });
        return {
          name: fieldName,
          description: fieldConfig.description,
          type: fieldConfig.type,
          args,
          resolve: fieldConfig.resolve,
          subscribe: fieldConfig.subscribe,
          isDeprecated: fieldConfig.deprecationReason != null,
          deprecationReason: fieldConfig.deprecationReason,
          extensions: fieldConfig.extensions && (0, _toObjMap.default)(fieldConfig.extensions),
          astNode: fieldConfig.astNode
        };
      });
    }
    function isPlainObj(obj) {
      return (0, _isObjectLike.default)(obj) && !Array.isArray(obj);
    }
    function fieldsToFieldsConfig(fields) {
      return (0, _mapValue.default)(fields, function(field) {
        return {
          description: field.description,
          type: field.type,
          args: argsToArgsConfig(field.args),
          resolve: field.resolve,
          subscribe: field.subscribe,
          deprecationReason: field.deprecationReason,
          extensions: field.extensions,
          astNode: field.astNode
        };
      });
    }
    function argsToArgsConfig(args) {
      return (0, _keyValMap.default)(args, function(arg) {
        return arg.name;
      }, function(arg) {
        return {
          description: arg.description,
          type: arg.type,
          defaultValue: arg.defaultValue,
          deprecationReason: arg.deprecationReason,
          extensions: arg.extensions,
          astNode: arg.astNode
        };
      });
    }
    function isRequiredArgument(arg) {
      return isNonNullType(arg.type) && arg.defaultValue === void 0;
    }
    var GraphQLInterfaceType = /* @__PURE__ */ function() {
      function GraphQLInterfaceType2(config) {
        this.name = config.name;
        this.description = config.description;
        this.resolveType = config.resolveType;
        this.extensions = config.extensions && (0, _toObjMap.default)(config.extensions);
        this.astNode = config.astNode;
        this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
        this._fields = defineFieldMap.bind(void 0, config);
        this._interfaces = defineInterfaces.bind(void 0, config);
        typeof config.name === "string" || (0, _devAssert.default)(0, "Must provide name.");
        config.resolveType == null || typeof config.resolveType === "function" || (0, _devAssert.default)(0, "".concat(this.name, ' must provide "resolveType" as a function, ') + "but got: ".concat((0, _inspect.default)(config.resolveType), "."));
      }
      var _proto3 = GraphQLInterfaceType2.prototype;
      _proto3.getFields = function getFields() {
        if (typeof this._fields === "function") {
          this._fields = this._fields();
        }
        return this._fields;
      };
      _proto3.getInterfaces = function getInterfaces() {
        if (typeof this._interfaces === "function") {
          this._interfaces = this._interfaces();
        }
        return this._interfaces;
      };
      _proto3.toConfig = function toConfig() {
        var _this$extensionASTNod2;
        return {
          name: this.name,
          description: this.description,
          interfaces: this.getInterfaces(),
          fields: fieldsToFieldsConfig(this.getFields()),
          resolveType: this.resolveType,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: (_this$extensionASTNod2 = this.extensionASTNodes) !== null && _this$extensionASTNod2 !== void 0 ? _this$extensionASTNod2 : []
        };
      };
      _proto3.toString = function toString() {
        return this.name;
      };
      _proto3.toJSON = function toJSON() {
        return this.toString();
      };
      _createClass(GraphQLInterfaceType2, [{
        key: _symbols.SYMBOL_TO_STRING_TAG,
        get: function get() {
          return "GraphQLInterfaceType";
        }
      }]);
      return GraphQLInterfaceType2;
    }();
    exports.GraphQLInterfaceType = GraphQLInterfaceType;
    (0, _defineInspect.default)(GraphQLInterfaceType);
    var GraphQLUnionType = /* @__PURE__ */ function() {
      function GraphQLUnionType2(config) {
        this.name = config.name;
        this.description = config.description;
        this.resolveType = config.resolveType;
        this.extensions = config.extensions && (0, _toObjMap.default)(config.extensions);
        this.astNode = config.astNode;
        this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
        this._types = defineTypes.bind(void 0, config);
        typeof config.name === "string" || (0, _devAssert.default)(0, "Must provide name.");
        config.resolveType == null || typeof config.resolveType === "function" || (0, _devAssert.default)(0, "".concat(this.name, ' must provide "resolveType" as a function, ') + "but got: ".concat((0, _inspect.default)(config.resolveType), "."));
      }
      var _proto4 = GraphQLUnionType2.prototype;
      _proto4.getTypes = function getTypes() {
        if (typeof this._types === "function") {
          this._types = this._types();
        }
        return this._types;
      };
      _proto4.toConfig = function toConfig() {
        var _this$extensionASTNod3;
        return {
          name: this.name,
          description: this.description,
          types: this.getTypes(),
          resolveType: this.resolveType,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: (_this$extensionASTNod3 = this.extensionASTNodes) !== null && _this$extensionASTNod3 !== void 0 ? _this$extensionASTNod3 : []
        };
      };
      _proto4.toString = function toString() {
        return this.name;
      };
      _proto4.toJSON = function toJSON() {
        return this.toString();
      };
      _createClass(GraphQLUnionType2, [{
        key: _symbols.SYMBOL_TO_STRING_TAG,
        get: function get() {
          return "GraphQLUnionType";
        }
      }]);
      return GraphQLUnionType2;
    }();
    exports.GraphQLUnionType = GraphQLUnionType;
    (0, _defineInspect.default)(GraphQLUnionType);
    function defineTypes(config) {
      var types3 = resolveThunk(config.types);
      Array.isArray(types3) || (0, _devAssert.default)(0, "Must provide Array of types or a function which returns such an array for Union ".concat(config.name, "."));
      return types3;
    }
    var GraphQLEnumType = /* @__PURE__ */ function() {
      function GraphQLEnumType2(config) {
        this.name = config.name;
        this.description = config.description;
        this.extensions = config.extensions && (0, _toObjMap.default)(config.extensions);
        this.astNode = config.astNode;
        this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
        this._values = defineEnumValues(this.name, config.values);
        this._valueLookup = new Map(this._values.map(function(enumValue) {
          return [enumValue.value, enumValue];
        }));
        this._nameLookup = (0, _keyMap.default)(this._values, function(value) {
          return value.name;
        });
        typeof config.name === "string" || (0, _devAssert.default)(0, "Must provide name.");
      }
      var _proto5 = GraphQLEnumType2.prototype;
      _proto5.getValues = function getValues() {
        return this._values;
      };
      _proto5.getValue = function getValue(name) {
        return this._nameLookup[name];
      };
      _proto5.serialize = function serialize(outputValue) {
        var enumValue = this._valueLookup.get(outputValue);
        if (enumValue === void 0) {
          throw new _GraphQLError.GraphQLError('Enum "'.concat(this.name, '" cannot represent value: ').concat((0, _inspect.default)(outputValue)));
        }
        return enumValue.name;
      };
      _proto5.parseValue = function parseValue(inputValue) {
        if (typeof inputValue !== "string") {
          var valueStr = (0, _inspect.default)(inputValue);
          throw new _GraphQLError.GraphQLError('Enum "'.concat(this.name, '" cannot represent non-string value: ').concat(valueStr, ".") + didYouMeanEnumValue(this, valueStr));
        }
        var enumValue = this.getValue(inputValue);
        if (enumValue == null) {
          throw new _GraphQLError.GraphQLError('Value "'.concat(inputValue, '" does not exist in "').concat(this.name, '" enum.') + didYouMeanEnumValue(this, inputValue));
        }
        return enumValue.value;
      };
      _proto5.parseLiteral = function parseLiteral(valueNode, _variables) {
        if (valueNode.kind !== _kinds.Kind.ENUM) {
          var valueStr = (0, _printer.print)(valueNode);
          throw new _GraphQLError.GraphQLError('Enum "'.concat(this.name, '" cannot represent non-enum value: ').concat(valueStr, ".") + didYouMeanEnumValue(this, valueStr), valueNode);
        }
        var enumValue = this.getValue(valueNode.value);
        if (enumValue == null) {
          var _valueStr = (0, _printer.print)(valueNode);
          throw new _GraphQLError.GraphQLError('Value "'.concat(_valueStr, '" does not exist in "').concat(this.name, '" enum.') + didYouMeanEnumValue(this, _valueStr), valueNode);
        }
        return enumValue.value;
      };
      _proto5.toConfig = function toConfig() {
        var _this$extensionASTNod4;
        var values = (0, _keyValMap.default)(this.getValues(), function(value) {
          return value.name;
        }, function(value) {
          return {
            description: value.description,
            value: value.value,
            deprecationReason: value.deprecationReason,
            extensions: value.extensions,
            astNode: value.astNode
          };
        });
        return {
          name: this.name,
          description: this.description,
          values,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: (_this$extensionASTNod4 = this.extensionASTNodes) !== null && _this$extensionASTNod4 !== void 0 ? _this$extensionASTNod4 : []
        };
      };
      _proto5.toString = function toString() {
        return this.name;
      };
      _proto5.toJSON = function toJSON() {
        return this.toString();
      };
      _createClass(GraphQLEnumType2, [{
        key: _symbols.SYMBOL_TO_STRING_TAG,
        get: function get() {
          return "GraphQLEnumType";
        }
      }]);
      return GraphQLEnumType2;
    }();
    exports.GraphQLEnumType = GraphQLEnumType;
    (0, _defineInspect.default)(GraphQLEnumType);
    function didYouMeanEnumValue(enumType, unknownValueStr) {
      var allNames = enumType.getValues().map(function(value) {
        return value.name;
      });
      var suggestedValues = (0, _suggestionList.default)(unknownValueStr, allNames);
      return (0, _didYouMean.default)("the enum value", suggestedValues);
    }
    function defineEnumValues(typeName, valueMap) {
      isPlainObj(valueMap) || (0, _devAssert.default)(0, "".concat(typeName, " values must be an object with value names as keys."));
      return (0, _objectEntries.default)(valueMap).map(function(_ref2) {
        var valueName = _ref2[0], valueConfig = _ref2[1];
        isPlainObj(valueConfig) || (0, _devAssert.default)(0, "".concat(typeName, ".").concat(valueName, ' must refer to an object with a "value" key ') + "representing an internal value but got: ".concat((0, _inspect.default)(valueConfig), "."));
        !("isDeprecated" in valueConfig) || (0, _devAssert.default)(0, "".concat(typeName, ".").concat(valueName, ' should provide "deprecationReason" instead of "isDeprecated".'));
        return {
          name: valueName,
          description: valueConfig.description,
          value: valueConfig.value !== void 0 ? valueConfig.value : valueName,
          isDeprecated: valueConfig.deprecationReason != null,
          deprecationReason: valueConfig.deprecationReason,
          extensions: valueConfig.extensions && (0, _toObjMap.default)(valueConfig.extensions),
          astNode: valueConfig.astNode
        };
      });
    }
    var GraphQLInputObjectType = /* @__PURE__ */ function() {
      function GraphQLInputObjectType2(config) {
        this.name = config.name;
        this.description = config.description;
        this.extensions = config.extensions && (0, _toObjMap.default)(config.extensions);
        this.astNode = config.astNode;
        this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
        this._fields = defineInputFieldMap.bind(void 0, config);
        typeof config.name === "string" || (0, _devAssert.default)(0, "Must provide name.");
      }
      var _proto6 = GraphQLInputObjectType2.prototype;
      _proto6.getFields = function getFields() {
        if (typeof this._fields === "function") {
          this._fields = this._fields();
        }
        return this._fields;
      };
      _proto6.toConfig = function toConfig() {
        var _this$extensionASTNod5;
        var fields = (0, _mapValue.default)(this.getFields(), function(field) {
          return {
            description: field.description,
            type: field.type,
            defaultValue: field.defaultValue,
            deprecationReason: field.deprecationReason,
            extensions: field.extensions,
            astNode: field.astNode
          };
        });
        return {
          name: this.name,
          description: this.description,
          fields,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: (_this$extensionASTNod5 = this.extensionASTNodes) !== null && _this$extensionASTNod5 !== void 0 ? _this$extensionASTNod5 : []
        };
      };
      _proto6.toString = function toString() {
        return this.name;
      };
      _proto6.toJSON = function toJSON() {
        return this.toString();
      };
      _createClass(GraphQLInputObjectType2, [{
        key: _symbols.SYMBOL_TO_STRING_TAG,
        get: function get() {
          return "GraphQLInputObjectType";
        }
      }]);
      return GraphQLInputObjectType2;
    }();
    exports.GraphQLInputObjectType = GraphQLInputObjectType;
    (0, _defineInspect.default)(GraphQLInputObjectType);
    function defineInputFieldMap(config) {
      var fieldMap = resolveThunk(config.fields);
      isPlainObj(fieldMap) || (0, _devAssert.default)(0, "".concat(config.name, " fields must be an object with field names as keys or a function which returns such an object."));
      return (0, _mapValue.default)(fieldMap, function(fieldConfig, fieldName) {
        !("resolve" in fieldConfig) || (0, _devAssert.default)(0, "".concat(config.name, ".").concat(fieldName, " field has a resolve property, but Input Types cannot define resolvers."));
        return {
          name: fieldName,
          description: fieldConfig.description,
          type: fieldConfig.type,
          defaultValue: fieldConfig.defaultValue,
          deprecationReason: fieldConfig.deprecationReason,
          extensions: fieldConfig.extensions && (0, _toObjMap.default)(fieldConfig.extensions),
          astNode: fieldConfig.astNode
        };
      });
    }
    function isRequiredInputField(field) {
      return isNonNullType(field.type) && field.defaultValue === void 0;
    }
  }
});

// node_modules/graphql/utilities/typeComparators.js
var require_typeComparators = __commonJS({
  "node_modules/graphql/utilities/typeComparators.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isEqualType = isEqualType;
    exports.isTypeSubTypeOf = isTypeSubTypeOf;
    exports.doTypesOverlap = doTypesOverlap;
    var _definition = require_definition();
    function isEqualType(typeA, typeB) {
      if (typeA === typeB) {
        return true;
      }
      if ((0, _definition.isNonNullType)(typeA) && (0, _definition.isNonNullType)(typeB)) {
        return isEqualType(typeA.ofType, typeB.ofType);
      }
      if ((0, _definition.isListType)(typeA) && (0, _definition.isListType)(typeB)) {
        return isEqualType(typeA.ofType, typeB.ofType);
      }
      return false;
    }
    function isTypeSubTypeOf(schema2, maybeSubType, superType) {
      if (maybeSubType === superType) {
        return true;
      }
      if ((0, _definition.isNonNullType)(superType)) {
        if ((0, _definition.isNonNullType)(maybeSubType)) {
          return isTypeSubTypeOf(schema2, maybeSubType.ofType, superType.ofType);
        }
        return false;
      }
      if ((0, _definition.isNonNullType)(maybeSubType)) {
        return isTypeSubTypeOf(schema2, maybeSubType.ofType, superType);
      }
      if ((0, _definition.isListType)(superType)) {
        if ((0, _definition.isListType)(maybeSubType)) {
          return isTypeSubTypeOf(schema2, maybeSubType.ofType, superType.ofType);
        }
        return false;
      }
      if ((0, _definition.isListType)(maybeSubType)) {
        return false;
      }
      return (0, _definition.isAbstractType)(superType) && ((0, _definition.isInterfaceType)(maybeSubType) || (0, _definition.isObjectType)(maybeSubType)) && schema2.isSubType(superType, maybeSubType);
    }
    function doTypesOverlap(schema2, typeA, typeB) {
      if (typeA === typeB) {
        return true;
      }
      if ((0, _definition.isAbstractType)(typeA)) {
        if ((0, _definition.isAbstractType)(typeB)) {
          return schema2.getPossibleTypes(typeA).some(function(type) {
            return schema2.isSubType(typeB, type);
          });
        }
        return schema2.isSubType(typeA, typeB);
      }
      if ((0, _definition.isAbstractType)(typeB)) {
        return schema2.isSubType(typeB, typeA);
      }
      return false;
    }
  }
});

// node_modules/graphql/polyfills/arrayFrom.js
var require_arrayFrom = __commonJS({
  "node_modules/graphql/polyfills/arrayFrom.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _symbols = require_symbols();
    var arrayFrom = Array.from || function(obj, mapFn, thisArg) {
      if (obj == null) {
        throw new TypeError("Array.from requires an array-like object - not null or undefined");
      }
      var iteratorMethod = obj[_symbols.SYMBOL_ITERATOR];
      if (typeof iteratorMethod === "function") {
        var iterator = iteratorMethod.call(obj);
        var result = [];
        var step;
        for (var i2 = 0; !(step = iterator.next()).done; ++i2) {
          result.push(mapFn.call(thisArg, step.value, i2));
          if (i2 > 9999999) {
            throw new TypeError("Near-infinite iteration.");
          }
        }
        return result;
      }
      var length = obj.length;
      if (typeof length === "number" && length >= 0 && length % 1 === 0) {
        var _result = [];
        for (var _i = 0; _i < length; ++_i) {
          if (Object.prototype.hasOwnProperty.call(obj, _i)) {
            _result.push(mapFn.call(thisArg, obj[_i], _i));
          }
        }
        return _result;
      }
      return [];
    };
    var _default = arrayFrom;
    exports.default = _default;
  }
});

// node_modules/graphql/polyfills/isFinite.js
var require_isFinite = __commonJS({
  "node_modules/graphql/polyfills/isFinite.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var isFinitePolyfill = Number.isFinite || function(value) {
      return typeof value === "number" && isFinite(value);
    };
    var _default = isFinitePolyfill;
    exports.default = _default;
  }
});

// node_modules/graphql/jsutils/safeArrayFrom.js
var require_safeArrayFrom = __commonJS({
  "node_modules/graphql/jsutils/safeArrayFrom.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = safeArrayFrom;
    var _symbols = require_symbols();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function safeArrayFrom(collection) {
      var mapFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function(item) {
        return item;
      };
      if (collection == null || _typeof(collection) !== "object") {
        return null;
      }
      if (Array.isArray(collection)) {
        return collection.map(mapFn);
      }
      var iteratorMethod = collection[_symbols.SYMBOL_ITERATOR];
      if (typeof iteratorMethod === "function") {
        var iterator = iteratorMethod.call(collection);
        var result = [];
        var step;
        for (var i2 = 0; !(step = iterator.next()).done; ++i2) {
          result.push(mapFn(step.value, i2));
        }
        return result;
      }
      var length = collection.length;
      if (typeof length === "number" && length >= 0 && length % 1 === 0) {
        var _result = [];
        for (var _i = 0; _i < length; ++_i) {
          if (!Object.prototype.hasOwnProperty.call(collection, _i)) {
            return null;
          }
          _result.push(mapFn(collection[String(_i)], _i));
        }
        return _result;
      }
      return null;
    }
  }
});

// node_modules/graphql/polyfills/isInteger.js
var require_isInteger = __commonJS({
  "node_modules/graphql/polyfills/isInteger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var isInteger = Number.isInteger || function(value) {
      return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
    };
    var _default = isInteger;
    exports.default = _default;
  }
});

// node_modules/graphql/type/scalars.js
var require_scalars = __commonJS({
  "node_modules/graphql/type/scalars.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isSpecifiedScalarType = isSpecifiedScalarType;
    exports.specifiedScalarTypes = exports.GraphQLID = exports.GraphQLBoolean = exports.GraphQLString = exports.GraphQLFloat = exports.GraphQLInt = void 0;
    var _isFinite = _interopRequireDefault(require_isFinite());
    var _isInteger = _interopRequireDefault(require_isInteger());
    var _inspect = _interopRequireDefault(require_inspect());
    var _isObjectLike = _interopRequireDefault(require_isObjectLike());
    var _kinds = require_kinds();
    var _printer = require_printer();
    var _GraphQLError = require_GraphQLError();
    var _definition = require_definition();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var MAX_INT = 2147483647;
    var MIN_INT = -2147483648;
    function serializeInt(outputValue) {
      var coercedValue = serializeObject(outputValue);
      if (typeof coercedValue === "boolean") {
        return coercedValue ? 1 : 0;
      }
      var num = coercedValue;
      if (typeof coercedValue === "string" && coercedValue !== "") {
        num = Number(coercedValue);
      }
      if (!(0, _isInteger.default)(num)) {
        throw new _GraphQLError.GraphQLError("Int cannot represent non-integer value: ".concat((0, _inspect.default)(coercedValue)));
      }
      if (num > MAX_INT || num < MIN_INT) {
        throw new _GraphQLError.GraphQLError("Int cannot represent non 32-bit signed integer value: " + (0, _inspect.default)(coercedValue));
      }
      return num;
    }
    function coerceInt(inputValue) {
      if (!(0, _isInteger.default)(inputValue)) {
        throw new _GraphQLError.GraphQLError("Int cannot represent non-integer value: ".concat((0, _inspect.default)(inputValue)));
      }
      if (inputValue > MAX_INT || inputValue < MIN_INT) {
        throw new _GraphQLError.GraphQLError("Int cannot represent non 32-bit signed integer value: ".concat(inputValue));
      }
      return inputValue;
    }
    var GraphQLInt = new _definition.GraphQLScalarType({
      name: "Int",
      description: "The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",
      serialize: serializeInt,
      parseValue: coerceInt,
      parseLiteral: function parseLiteral(valueNode) {
        if (valueNode.kind !== _kinds.Kind.INT) {
          throw new _GraphQLError.GraphQLError("Int cannot represent non-integer value: ".concat((0, _printer.print)(valueNode)), valueNode);
        }
        var num = parseInt(valueNode.value, 10);
        if (num > MAX_INT || num < MIN_INT) {
          throw new _GraphQLError.GraphQLError("Int cannot represent non 32-bit signed integer value: ".concat(valueNode.value), valueNode);
        }
        return num;
      }
    });
    exports.GraphQLInt = GraphQLInt;
    function serializeFloat(outputValue) {
      var coercedValue = serializeObject(outputValue);
      if (typeof coercedValue === "boolean") {
        return coercedValue ? 1 : 0;
      }
      var num = coercedValue;
      if (typeof coercedValue === "string" && coercedValue !== "") {
        num = Number(coercedValue);
      }
      if (!(0, _isFinite.default)(num)) {
        throw new _GraphQLError.GraphQLError("Float cannot represent non numeric value: ".concat((0, _inspect.default)(coercedValue)));
      }
      return num;
    }
    function coerceFloat(inputValue) {
      if (!(0, _isFinite.default)(inputValue)) {
        throw new _GraphQLError.GraphQLError("Float cannot represent non numeric value: ".concat((0, _inspect.default)(inputValue)));
      }
      return inputValue;
    }
    var GraphQLFloat = new _definition.GraphQLScalarType({
      name: "Float",
      description: "The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",
      serialize: serializeFloat,
      parseValue: coerceFloat,
      parseLiteral: function parseLiteral(valueNode) {
        if (valueNode.kind !== _kinds.Kind.FLOAT && valueNode.kind !== _kinds.Kind.INT) {
          throw new _GraphQLError.GraphQLError("Float cannot represent non numeric value: ".concat((0, _printer.print)(valueNode)), valueNode);
        }
        return parseFloat(valueNode.value);
      }
    });
    exports.GraphQLFloat = GraphQLFloat;
    function serializeObject(outputValue) {
      if ((0, _isObjectLike.default)(outputValue)) {
        if (typeof outputValue.valueOf === "function") {
          var valueOfResult = outputValue.valueOf();
          if (!(0, _isObjectLike.default)(valueOfResult)) {
            return valueOfResult;
          }
        }
        if (typeof outputValue.toJSON === "function") {
          return outputValue.toJSON();
        }
      }
      return outputValue;
    }
    function serializeString(outputValue) {
      var coercedValue = serializeObject(outputValue);
      if (typeof coercedValue === "string") {
        return coercedValue;
      }
      if (typeof coercedValue === "boolean") {
        return coercedValue ? "true" : "false";
      }
      if ((0, _isFinite.default)(coercedValue)) {
        return coercedValue.toString();
      }
      throw new _GraphQLError.GraphQLError("String cannot represent value: ".concat((0, _inspect.default)(outputValue)));
    }
    function coerceString(inputValue) {
      if (typeof inputValue !== "string") {
        throw new _GraphQLError.GraphQLError("String cannot represent a non string value: ".concat((0, _inspect.default)(inputValue)));
      }
      return inputValue;
    }
    var GraphQLString = new _definition.GraphQLScalarType({
      name: "String",
      description: "The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",
      serialize: serializeString,
      parseValue: coerceString,
      parseLiteral: function parseLiteral(valueNode) {
        if (valueNode.kind !== _kinds.Kind.STRING) {
          throw new _GraphQLError.GraphQLError("String cannot represent a non string value: ".concat((0, _printer.print)(valueNode)), valueNode);
        }
        return valueNode.value;
      }
    });
    exports.GraphQLString = GraphQLString;
    function serializeBoolean(outputValue) {
      var coercedValue = serializeObject(outputValue);
      if (typeof coercedValue === "boolean") {
        return coercedValue;
      }
      if ((0, _isFinite.default)(coercedValue)) {
        return coercedValue !== 0;
      }
      throw new _GraphQLError.GraphQLError("Boolean cannot represent a non boolean value: ".concat((0, _inspect.default)(coercedValue)));
    }
    function coerceBoolean(inputValue) {
      if (typeof inputValue !== "boolean") {
        throw new _GraphQLError.GraphQLError("Boolean cannot represent a non boolean value: ".concat((0, _inspect.default)(inputValue)));
      }
      return inputValue;
    }
    var GraphQLBoolean = new _definition.GraphQLScalarType({
      name: "Boolean",
      description: "The `Boolean` scalar type represents `true` or `false`.",
      serialize: serializeBoolean,
      parseValue: coerceBoolean,
      parseLiteral: function parseLiteral(valueNode) {
        if (valueNode.kind !== _kinds.Kind.BOOLEAN) {
          throw new _GraphQLError.GraphQLError("Boolean cannot represent a non boolean value: ".concat((0, _printer.print)(valueNode)), valueNode);
        }
        return valueNode.value;
      }
    });
    exports.GraphQLBoolean = GraphQLBoolean;
    function serializeID(outputValue) {
      var coercedValue = serializeObject(outputValue);
      if (typeof coercedValue === "string") {
        return coercedValue;
      }
      if ((0, _isInteger.default)(coercedValue)) {
        return String(coercedValue);
      }
      throw new _GraphQLError.GraphQLError("ID cannot represent value: ".concat((0, _inspect.default)(outputValue)));
    }
    function coerceID(inputValue) {
      if (typeof inputValue === "string") {
        return inputValue;
      }
      if ((0, _isInteger.default)(inputValue)) {
        return inputValue.toString();
      }
      throw new _GraphQLError.GraphQLError("ID cannot represent value: ".concat((0, _inspect.default)(inputValue)));
    }
    var GraphQLID = new _definition.GraphQLScalarType({
      name: "ID",
      description: 'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',
      serialize: serializeID,
      parseValue: coerceID,
      parseLiteral: function parseLiteral(valueNode) {
        if (valueNode.kind !== _kinds.Kind.STRING && valueNode.kind !== _kinds.Kind.INT) {
          throw new _GraphQLError.GraphQLError("ID cannot represent a non-string and non-integer value: " + (0, _printer.print)(valueNode), valueNode);
        }
        return valueNode.value;
      }
    });
    exports.GraphQLID = GraphQLID;
    var specifiedScalarTypes = Object.freeze([GraphQLString, GraphQLInt, GraphQLFloat, GraphQLBoolean, GraphQLID]);
    exports.specifiedScalarTypes = specifiedScalarTypes;
    function isSpecifiedScalarType(type) {
      return specifiedScalarTypes.some(function(_ref) {
        var name = _ref.name;
        return type.name === name;
      });
    }
  }
});

// node_modules/graphql/utilities/astFromValue.js
var require_astFromValue = __commonJS({
  "node_modules/graphql/utilities/astFromValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.astFromValue = astFromValue;
    var _isFinite = _interopRequireDefault(require_isFinite());
    var _objectValues3 = _interopRequireDefault(require_objectValues());
    var _inspect = _interopRequireDefault(require_inspect());
    var _invariant = _interopRequireDefault(require_invariant());
    var _isObjectLike = _interopRequireDefault(require_isObjectLike());
    var _safeArrayFrom = _interopRequireDefault(require_safeArrayFrom());
    var _kinds = require_kinds();
    var _scalars = require_scalars();
    var _definition = require_definition();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function astFromValue(value, type) {
      if ((0, _definition.isNonNullType)(type)) {
        var astValue = astFromValue(value, type.ofType);
        if ((astValue === null || astValue === void 0 ? void 0 : astValue.kind) === _kinds.Kind.NULL) {
          return null;
        }
        return astValue;
      }
      if (value === null) {
        return {
          kind: _kinds.Kind.NULL
        };
      }
      if (value === void 0) {
        return null;
      }
      if ((0, _definition.isListType)(type)) {
        var itemType = type.ofType;
        var items = (0, _safeArrayFrom.default)(value);
        if (items != null) {
          var valuesNodes = [];
          for (var _i2 = 0; _i2 < items.length; _i2++) {
            var item = items[_i2];
            var itemNode = astFromValue(item, itemType);
            if (itemNode != null) {
              valuesNodes.push(itemNode);
            }
          }
          return {
            kind: _kinds.Kind.LIST,
            values: valuesNodes
          };
        }
        return astFromValue(value, itemType);
      }
      if ((0, _definition.isInputObjectType)(type)) {
        if (!(0, _isObjectLike.default)(value)) {
          return null;
        }
        var fieldNodes = [];
        for (var _i4 = 0, _objectValues2 = (0, _objectValues3.default)(type.getFields()); _i4 < _objectValues2.length; _i4++) {
          var field = _objectValues2[_i4];
          var fieldValue = astFromValue(value[field.name], field.type);
          if (fieldValue) {
            fieldNodes.push({
              kind: _kinds.Kind.OBJECT_FIELD,
              name: {
                kind: _kinds.Kind.NAME,
                value: field.name
              },
              value: fieldValue
            });
          }
        }
        return {
          kind: _kinds.Kind.OBJECT,
          fields: fieldNodes
        };
      }
      if ((0, _definition.isLeafType)(type)) {
        var serialized = type.serialize(value);
        if (serialized == null) {
          return null;
        }
        if (typeof serialized === "boolean") {
          return {
            kind: _kinds.Kind.BOOLEAN,
            value: serialized
          };
        }
        if (typeof serialized === "number" && (0, _isFinite.default)(serialized)) {
          var stringNum = String(serialized);
          return integerStringRegExp.test(stringNum) ? {
            kind: _kinds.Kind.INT,
            value: stringNum
          } : {
            kind: _kinds.Kind.FLOAT,
            value: stringNum
          };
        }
        if (typeof serialized === "string") {
          if ((0, _definition.isEnumType)(type)) {
            return {
              kind: _kinds.Kind.ENUM,
              value: serialized
            };
          }
          if (type === _scalars.GraphQLID && integerStringRegExp.test(serialized)) {
            return {
              kind: _kinds.Kind.INT,
              value: serialized
            };
          }
          return {
            kind: _kinds.Kind.STRING,
            value: serialized
          };
        }
        throw new TypeError("Cannot convert value to AST: ".concat((0, _inspect.default)(serialized), "."));
      }
      (0, _invariant.default)(0, "Unexpected input type: " + (0, _inspect.default)(type));
    }
    var integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;
  }
});

// node_modules/graphql/type/introspection.js
var require_introspection = __commonJS({
  "node_modules/graphql/type/introspection.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isIntrospectionType = isIntrospectionType;
    exports.introspectionTypes = exports.TypeNameMetaFieldDef = exports.TypeMetaFieldDef = exports.SchemaMetaFieldDef = exports.__TypeKind = exports.TypeKind = exports.__EnumValue = exports.__InputValue = exports.__Field = exports.__Type = exports.__DirectiveLocation = exports.__Directive = exports.__Schema = void 0;
    var _objectValues = _interopRequireDefault(require_objectValues());
    var _inspect = _interopRequireDefault(require_inspect());
    var _invariant = _interopRequireDefault(require_invariant());
    var _printer = require_printer();
    var _directiveLocation = require_directiveLocation();
    var _astFromValue = require_astFromValue();
    var _scalars = require_scalars();
    var _definition = require_definition();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var __Schema = new _definition.GraphQLObjectType({
      name: "__Schema",
      description: "A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",
      fields: function fields() {
        return {
          description: {
            type: _scalars.GraphQLString,
            resolve: function resolve(schema2) {
              return schema2.description;
            }
          },
          types: {
            description: "A list of all types supported by this server.",
            type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type))),
            resolve: function resolve(schema2) {
              return (0, _objectValues.default)(schema2.getTypeMap());
            }
          },
          queryType: {
            description: "The type that query operations will be rooted at.",
            type: new _definition.GraphQLNonNull(__Type),
            resolve: function resolve(schema2) {
              return schema2.getQueryType();
            }
          },
          mutationType: {
            description: "If this server supports mutation, the type that mutation operations will be rooted at.",
            type: __Type,
            resolve: function resolve(schema2) {
              return schema2.getMutationType();
            }
          },
          subscriptionType: {
            description: "If this server support subscription, the type that subscription operations will be rooted at.",
            type: __Type,
            resolve: function resolve(schema2) {
              return schema2.getSubscriptionType();
            }
          },
          directives: {
            description: "A list of all directives supported by this server.",
            type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__Directive))),
            resolve: function resolve(schema2) {
              return schema2.getDirectives();
            }
          }
        };
      }
    });
    exports.__Schema = __Schema;
    var __Directive = new _definition.GraphQLObjectType({
      name: "__Directive",
      description: "A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",
      fields: function fields() {
        return {
          name: {
            type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
            resolve: function resolve(directive) {
              return directive.name;
            }
          },
          description: {
            type: _scalars.GraphQLString,
            resolve: function resolve(directive) {
              return directive.description;
            }
          },
          isRepeatable: {
            type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
            resolve: function resolve(directive) {
              return directive.isRepeatable;
            }
          },
          locations: {
            type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__DirectiveLocation))),
            resolve: function resolve(directive) {
              return directive.locations;
            }
          },
          args: {
            type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__InputValue))),
            args: {
              includeDeprecated: {
                type: _scalars.GraphQLBoolean,
                defaultValue: false
              }
            },
            resolve: function resolve(field, _ref) {
              var includeDeprecated = _ref.includeDeprecated;
              return includeDeprecated ? field.args : field.args.filter(function(arg) {
                return arg.deprecationReason == null;
              });
            }
          }
        };
      }
    });
    exports.__Directive = __Directive;
    var __DirectiveLocation = new _definition.GraphQLEnumType({
      name: "__DirectiveLocation",
      description: "A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",
      values: {
        QUERY: {
          value: _directiveLocation.DirectiveLocation.QUERY,
          description: "Location adjacent to a query operation."
        },
        MUTATION: {
          value: _directiveLocation.DirectiveLocation.MUTATION,
          description: "Location adjacent to a mutation operation."
        },
        SUBSCRIPTION: {
          value: _directiveLocation.DirectiveLocation.SUBSCRIPTION,
          description: "Location adjacent to a subscription operation."
        },
        FIELD: {
          value: _directiveLocation.DirectiveLocation.FIELD,
          description: "Location adjacent to a field."
        },
        FRAGMENT_DEFINITION: {
          value: _directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION,
          description: "Location adjacent to a fragment definition."
        },
        FRAGMENT_SPREAD: {
          value: _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD,
          description: "Location adjacent to a fragment spread."
        },
        INLINE_FRAGMENT: {
          value: _directiveLocation.DirectiveLocation.INLINE_FRAGMENT,
          description: "Location adjacent to an inline fragment."
        },
        VARIABLE_DEFINITION: {
          value: _directiveLocation.DirectiveLocation.VARIABLE_DEFINITION,
          description: "Location adjacent to a variable definition."
        },
        SCHEMA: {
          value: _directiveLocation.DirectiveLocation.SCHEMA,
          description: "Location adjacent to a schema definition."
        },
        SCALAR: {
          value: _directiveLocation.DirectiveLocation.SCALAR,
          description: "Location adjacent to a scalar definition."
        },
        OBJECT: {
          value: _directiveLocation.DirectiveLocation.OBJECT,
          description: "Location adjacent to an object type definition."
        },
        FIELD_DEFINITION: {
          value: _directiveLocation.DirectiveLocation.FIELD_DEFINITION,
          description: "Location adjacent to a field definition."
        },
        ARGUMENT_DEFINITION: {
          value: _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION,
          description: "Location adjacent to an argument definition."
        },
        INTERFACE: {
          value: _directiveLocation.DirectiveLocation.INTERFACE,
          description: "Location adjacent to an interface definition."
        },
        UNION: {
          value: _directiveLocation.DirectiveLocation.UNION,
          description: "Location adjacent to a union definition."
        },
        ENUM: {
          value: _directiveLocation.DirectiveLocation.ENUM,
          description: "Location adjacent to an enum definition."
        },
        ENUM_VALUE: {
          value: _directiveLocation.DirectiveLocation.ENUM_VALUE,
          description: "Location adjacent to an enum value definition."
        },
        INPUT_OBJECT: {
          value: _directiveLocation.DirectiveLocation.INPUT_OBJECT,
          description: "Location adjacent to an input object type definition."
        },
        INPUT_FIELD_DEFINITION: {
          value: _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION,
          description: "Location adjacent to an input object field definition."
        }
      }
    });
    exports.__DirectiveLocation = __DirectiveLocation;
    var __Type = new _definition.GraphQLObjectType({
      name: "__Type",
      description: "The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByUrl`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",
      fields: function fields() {
        return {
          kind: {
            type: new _definition.GraphQLNonNull(__TypeKind),
            resolve: function resolve(type) {
              if ((0, _definition.isScalarType)(type)) {
                return TypeKind.SCALAR;
              }
              if ((0, _definition.isObjectType)(type)) {
                return TypeKind.OBJECT;
              }
              if ((0, _definition.isInterfaceType)(type)) {
                return TypeKind.INTERFACE;
              }
              if ((0, _definition.isUnionType)(type)) {
                return TypeKind.UNION;
              }
              if ((0, _definition.isEnumType)(type)) {
                return TypeKind.ENUM;
              }
              if ((0, _definition.isInputObjectType)(type)) {
                return TypeKind.INPUT_OBJECT;
              }
              if ((0, _definition.isListType)(type)) {
                return TypeKind.LIST;
              }
              if ((0, _definition.isNonNullType)(type)) {
                return TypeKind.NON_NULL;
              }
              (0, _invariant.default)(0, 'Unexpected type: "'.concat((0, _inspect.default)(type), '".'));
            }
          },
          name: {
            type: _scalars.GraphQLString,
            resolve: function resolve(type) {
              return type.name !== void 0 ? type.name : void 0;
            }
          },
          description: {
            type: _scalars.GraphQLString,
            resolve: function resolve(type) {
              return type.description !== void 0 ? type.description : void 0;
            }
          },
          specifiedByUrl: {
            type: _scalars.GraphQLString,
            resolve: function resolve(obj) {
              return obj.specifiedByUrl !== void 0 ? obj.specifiedByUrl : void 0;
            }
          },
          fields: {
            type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Field)),
            args: {
              includeDeprecated: {
                type: _scalars.GraphQLBoolean,
                defaultValue: false
              }
            },
            resolve: function resolve(type, _ref2) {
              var includeDeprecated = _ref2.includeDeprecated;
              if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {
                var fields2 = (0, _objectValues.default)(type.getFields());
                return includeDeprecated ? fields2 : fields2.filter(function(field) {
                  return field.deprecationReason == null;
                });
              }
            }
          },
          interfaces: {
            type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type)),
            resolve: function resolve(type) {
              if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {
                return type.getInterfaces();
              }
            }
          },
          possibleTypes: {
            type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type)),
            resolve: function resolve(type, _args, _context, _ref3) {
              var schema2 = _ref3.schema;
              if ((0, _definition.isAbstractType)(type)) {
                return schema2.getPossibleTypes(type);
              }
            }
          },
          enumValues: {
            type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__EnumValue)),
            args: {
              includeDeprecated: {
                type: _scalars.GraphQLBoolean,
                defaultValue: false
              }
            },
            resolve: function resolve(type, _ref4) {
              var includeDeprecated = _ref4.includeDeprecated;
              if ((0, _definition.isEnumType)(type)) {
                var values = type.getValues();
                return includeDeprecated ? values : values.filter(function(field) {
                  return field.deprecationReason == null;
                });
              }
            }
          },
          inputFields: {
            type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__InputValue)),
            args: {
              includeDeprecated: {
                type: _scalars.GraphQLBoolean,
                defaultValue: false
              }
            },
            resolve: function resolve(type, _ref5) {
              var includeDeprecated = _ref5.includeDeprecated;
              if ((0, _definition.isInputObjectType)(type)) {
                var values = (0, _objectValues.default)(type.getFields());
                return includeDeprecated ? values : values.filter(function(field) {
                  return field.deprecationReason == null;
                });
              }
            }
          },
          ofType: {
            type: __Type,
            resolve: function resolve(type) {
              return type.ofType !== void 0 ? type.ofType : void 0;
            }
          }
        };
      }
    });
    exports.__Type = __Type;
    var __Field = new _definition.GraphQLObjectType({
      name: "__Field",
      description: "Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",
      fields: function fields() {
        return {
          name: {
            type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
            resolve: function resolve(field) {
              return field.name;
            }
          },
          description: {
            type: _scalars.GraphQLString,
            resolve: function resolve(field) {
              return field.description;
            }
          },
          args: {
            type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__InputValue))),
            args: {
              includeDeprecated: {
                type: _scalars.GraphQLBoolean,
                defaultValue: false
              }
            },
            resolve: function resolve(field, _ref6) {
              var includeDeprecated = _ref6.includeDeprecated;
              return includeDeprecated ? field.args : field.args.filter(function(arg) {
                return arg.deprecationReason == null;
              });
            }
          },
          type: {
            type: new _definition.GraphQLNonNull(__Type),
            resolve: function resolve(field) {
              return field.type;
            }
          },
          isDeprecated: {
            type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
            resolve: function resolve(field) {
              return field.deprecationReason != null;
            }
          },
          deprecationReason: {
            type: _scalars.GraphQLString,
            resolve: function resolve(field) {
              return field.deprecationReason;
            }
          }
        };
      }
    });
    exports.__Field = __Field;
    var __InputValue = new _definition.GraphQLObjectType({
      name: "__InputValue",
      description: "Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",
      fields: function fields() {
        return {
          name: {
            type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
            resolve: function resolve(inputValue) {
              return inputValue.name;
            }
          },
          description: {
            type: _scalars.GraphQLString,
            resolve: function resolve(inputValue) {
              return inputValue.description;
            }
          },
          type: {
            type: new _definition.GraphQLNonNull(__Type),
            resolve: function resolve(inputValue) {
              return inputValue.type;
            }
          },
          defaultValue: {
            type: _scalars.GraphQLString,
            description: "A GraphQL-formatted string representing the default value for this input value.",
            resolve: function resolve(inputValue) {
              var type = inputValue.type, defaultValue = inputValue.defaultValue;
              var valueAST = (0, _astFromValue.astFromValue)(defaultValue, type);
              return valueAST ? (0, _printer.print)(valueAST) : null;
            }
          },
          isDeprecated: {
            type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
            resolve: function resolve(field) {
              return field.deprecationReason != null;
            }
          },
          deprecationReason: {
            type: _scalars.GraphQLString,
            resolve: function resolve(obj) {
              return obj.deprecationReason;
            }
          }
        };
      }
    });
    exports.__InputValue = __InputValue;
    var __EnumValue = new _definition.GraphQLObjectType({
      name: "__EnumValue",
      description: "One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",
      fields: function fields() {
        return {
          name: {
            type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
            resolve: function resolve(enumValue) {
              return enumValue.name;
            }
          },
          description: {
            type: _scalars.GraphQLString,
            resolve: function resolve(enumValue) {
              return enumValue.description;
            }
          },
          isDeprecated: {
            type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
            resolve: function resolve(enumValue) {
              return enumValue.deprecationReason != null;
            }
          },
          deprecationReason: {
            type: _scalars.GraphQLString,
            resolve: function resolve(enumValue) {
              return enumValue.deprecationReason;
            }
          }
        };
      }
    });
    exports.__EnumValue = __EnumValue;
    var TypeKind = Object.freeze({
      SCALAR: "SCALAR",
      OBJECT: "OBJECT",
      INTERFACE: "INTERFACE",
      UNION: "UNION",
      ENUM: "ENUM",
      INPUT_OBJECT: "INPUT_OBJECT",
      LIST: "LIST",
      NON_NULL: "NON_NULL"
    });
    exports.TypeKind = TypeKind;
    var __TypeKind = new _definition.GraphQLEnumType({
      name: "__TypeKind",
      description: "An enum describing what kind of type a given `__Type` is.",
      values: {
        SCALAR: {
          value: TypeKind.SCALAR,
          description: "Indicates this type is a scalar."
        },
        OBJECT: {
          value: TypeKind.OBJECT,
          description: "Indicates this type is an object. `fields` and `interfaces` are valid fields."
        },
        INTERFACE: {
          value: TypeKind.INTERFACE,
          description: "Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields."
        },
        UNION: {
          value: TypeKind.UNION,
          description: "Indicates this type is a union. `possibleTypes` is a valid field."
        },
        ENUM: {
          value: TypeKind.ENUM,
          description: "Indicates this type is an enum. `enumValues` is a valid field."
        },
        INPUT_OBJECT: {
          value: TypeKind.INPUT_OBJECT,
          description: "Indicates this type is an input object. `inputFields` is a valid field."
        },
        LIST: {
          value: TypeKind.LIST,
          description: "Indicates this type is a list. `ofType` is a valid field."
        },
        NON_NULL: {
          value: TypeKind.NON_NULL,
          description: "Indicates this type is a non-null. `ofType` is a valid field."
        }
      }
    });
    exports.__TypeKind = __TypeKind;
    var SchemaMetaFieldDef = {
      name: "__schema",
      type: new _definition.GraphQLNonNull(__Schema),
      description: "Access the current type schema of this server.",
      args: [],
      resolve: function resolve(_source, _args, _context, _ref7) {
        var schema2 = _ref7.schema;
        return schema2;
      },
      isDeprecated: false,
      deprecationReason: void 0,
      extensions: void 0,
      astNode: void 0
    };
    exports.SchemaMetaFieldDef = SchemaMetaFieldDef;
    var TypeMetaFieldDef = {
      name: "__type",
      type: __Type,
      description: "Request the type information of a single type.",
      args: [{
        name: "name",
        description: void 0,
        type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
        defaultValue: void 0,
        deprecationReason: void 0,
        extensions: void 0,
        astNode: void 0
      }],
      resolve: function resolve(_source, _ref8, _context, _ref9) {
        var name = _ref8.name;
        var schema2 = _ref9.schema;
        return schema2.getType(name);
      },
      isDeprecated: false,
      deprecationReason: void 0,
      extensions: void 0,
      astNode: void 0
    };
    exports.TypeMetaFieldDef = TypeMetaFieldDef;
    var TypeNameMetaFieldDef = {
      name: "__typename",
      type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
      description: "The name of the current Object type at runtime.",
      args: [],
      resolve: function resolve(_source, _args, _context, _ref10) {
        var parentType = _ref10.parentType;
        return parentType.name;
      },
      isDeprecated: false,
      deprecationReason: void 0,
      extensions: void 0,
      astNode: void 0
    };
    exports.TypeNameMetaFieldDef = TypeNameMetaFieldDef;
    var introspectionTypes = Object.freeze([__Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind]);
    exports.introspectionTypes = introspectionTypes;
    function isIntrospectionType(type) {
      return introspectionTypes.some(function(_ref11) {
        var name = _ref11.name;
        return type.name === name;
      });
    }
  }
});

// node_modules/graphql/type/directives.js
var require_directives = __commonJS({
  "node_modules/graphql/type/directives.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isDirective = isDirective;
    exports.assertDirective = assertDirective;
    exports.isSpecifiedDirective = isSpecifiedDirective;
    exports.specifiedDirectives = exports.GraphQLSpecifiedByDirective = exports.GraphQLDeprecatedDirective = exports.DEFAULT_DEPRECATION_REASON = exports.GraphQLSkipDirective = exports.GraphQLIncludeDirective = exports.GraphQLDirective = void 0;
    var _objectEntries = _interopRequireDefault(require_objectEntries());
    var _symbols = require_symbols();
    var _inspect = _interopRequireDefault(require_inspect());
    var _toObjMap = _interopRequireDefault(require_toObjMap());
    var _devAssert = _interopRequireDefault(require_devAssert());
    var _instanceOf = _interopRequireDefault(require_instanceOf());
    var _isObjectLike = _interopRequireDefault(require_isObjectLike());
    var _defineInspect = _interopRequireDefault(require_defineInspect());
    var _directiveLocation = require_directiveLocation();
    var _scalars = require_scalars();
    var _definition = require_definition();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function isDirective(directive) {
      return (0, _instanceOf.default)(directive, GraphQLDirective);
    }
    function assertDirective(directive) {
      if (!isDirective(directive)) {
        throw new Error("Expected ".concat((0, _inspect.default)(directive), " to be a GraphQL directive."));
      }
      return directive;
    }
    var GraphQLDirective = /* @__PURE__ */ function() {
      function GraphQLDirective2(config) {
        var _config$isRepeatable, _config$args;
        this.name = config.name;
        this.description = config.description;
        this.locations = config.locations;
        this.isRepeatable = (_config$isRepeatable = config.isRepeatable) !== null && _config$isRepeatable !== void 0 ? _config$isRepeatable : false;
        this.extensions = config.extensions && (0, _toObjMap.default)(config.extensions);
        this.astNode = config.astNode;
        config.name || (0, _devAssert.default)(0, "Directive must be named.");
        Array.isArray(config.locations) || (0, _devAssert.default)(0, "@".concat(config.name, " locations must be an Array."));
        var args = (_config$args = config.args) !== null && _config$args !== void 0 ? _config$args : {};
        (0, _isObjectLike.default)(args) && !Array.isArray(args) || (0, _devAssert.default)(0, "@".concat(config.name, " args must be an object with argument names as keys."));
        this.args = (0, _objectEntries.default)(args).map(function(_ref) {
          var argName = _ref[0], argConfig = _ref[1];
          return {
            name: argName,
            description: argConfig.description,
            type: argConfig.type,
            defaultValue: argConfig.defaultValue,
            deprecationReason: argConfig.deprecationReason,
            extensions: argConfig.extensions && (0, _toObjMap.default)(argConfig.extensions),
            astNode: argConfig.astNode
          };
        });
      }
      var _proto = GraphQLDirective2.prototype;
      _proto.toConfig = function toConfig() {
        return {
          name: this.name,
          description: this.description,
          locations: this.locations,
          args: (0, _definition.argsToArgsConfig)(this.args),
          isRepeatable: this.isRepeatable,
          extensions: this.extensions,
          astNode: this.astNode
        };
      };
      _proto.toString = function toString() {
        return "@" + this.name;
      };
      _proto.toJSON = function toJSON() {
        return this.toString();
      };
      _createClass(GraphQLDirective2, [{
        key: _symbols.SYMBOL_TO_STRING_TAG,
        get: function get() {
          return "GraphQLDirective";
        }
      }]);
      return GraphQLDirective2;
    }();
    exports.GraphQLDirective = GraphQLDirective;
    (0, _defineInspect.default)(GraphQLDirective);
    var GraphQLIncludeDirective = new GraphQLDirective({
      name: "include",
      description: "Directs the executor to include this field or fragment only when the `if` argument is true.",
      locations: [_directiveLocation.DirectiveLocation.FIELD, _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD, _directiveLocation.DirectiveLocation.INLINE_FRAGMENT],
      args: {
        if: {
          type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
          description: "Included when true."
        }
      }
    });
    exports.GraphQLIncludeDirective = GraphQLIncludeDirective;
    var GraphQLSkipDirective = new GraphQLDirective({
      name: "skip",
      description: "Directs the executor to skip this field or fragment when the `if` argument is true.",
      locations: [_directiveLocation.DirectiveLocation.FIELD, _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD, _directiveLocation.DirectiveLocation.INLINE_FRAGMENT],
      args: {
        if: {
          type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
          description: "Skipped when true."
        }
      }
    });
    exports.GraphQLSkipDirective = GraphQLSkipDirective;
    var DEFAULT_DEPRECATION_REASON = "No longer supported";
    exports.DEFAULT_DEPRECATION_REASON = DEFAULT_DEPRECATION_REASON;
    var GraphQLDeprecatedDirective = new GraphQLDirective({
      name: "deprecated",
      description: "Marks an element of a GraphQL schema as no longer supported.",
      locations: [_directiveLocation.DirectiveLocation.FIELD_DEFINITION, _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION, _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION, _directiveLocation.DirectiveLocation.ENUM_VALUE],
      args: {
        reason: {
          type: _scalars.GraphQLString,
          description: "Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).",
          defaultValue: DEFAULT_DEPRECATION_REASON
        }
      }
    });
    exports.GraphQLDeprecatedDirective = GraphQLDeprecatedDirective;
    var GraphQLSpecifiedByDirective = new GraphQLDirective({
      name: "specifiedBy",
      description: "Exposes a URL that specifies the behaviour of this scalar.",
      locations: [_directiveLocation.DirectiveLocation.SCALAR],
      args: {
        url: {
          type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
          description: "The URL that specifies the behaviour of this scalar."
        }
      }
    });
    exports.GraphQLSpecifiedByDirective = GraphQLSpecifiedByDirective;
    var specifiedDirectives = Object.freeze([GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, GraphQLSpecifiedByDirective]);
    exports.specifiedDirectives = specifiedDirectives;
    function isSpecifiedDirective(directive) {
      return specifiedDirectives.some(function(_ref2) {
        var name = _ref2.name;
        return name === directive.name;
      });
    }
  }
});

// node_modules/graphql/type/schema.js
var require_schema = __commonJS({
  "node_modules/graphql/type/schema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isSchema = isSchema;
    exports.assertSchema = assertSchema;
    exports.GraphQLSchema = void 0;
    var _find = _interopRequireDefault(require_find());
    var _arrayFrom3 = _interopRequireDefault(require_arrayFrom());
    var _objectValues5 = _interopRequireDefault(require_objectValues());
    var _symbols = require_symbols();
    var _inspect = _interopRequireDefault(require_inspect());
    var _toObjMap = _interopRequireDefault(require_toObjMap());
    var _devAssert = _interopRequireDefault(require_devAssert());
    var _instanceOf = _interopRequireDefault(require_instanceOf());
    var _isObjectLike = _interopRequireDefault(require_isObjectLike());
    var _introspection = require_introspection();
    var _directives = require_directives();
    var _definition = require_definition();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function isSchema(schema2) {
      return (0, _instanceOf.default)(schema2, GraphQLSchema);
    }
    function assertSchema(schema2) {
      if (!isSchema(schema2)) {
        throw new Error("Expected ".concat((0, _inspect.default)(schema2), " to be a GraphQL schema."));
      }
      return schema2;
    }
    var GraphQLSchema = /* @__PURE__ */ function() {
      function GraphQLSchema2(config) {
        var _config$directives;
        this.__validationErrors = config.assumeValid === true ? [] : void 0;
        (0, _isObjectLike.default)(config) || (0, _devAssert.default)(0, "Must provide configuration object.");
        !config.types || Array.isArray(config.types) || (0, _devAssert.default)(0, '"types" must be Array if provided but got: '.concat((0, _inspect.default)(config.types), "."));
        !config.directives || Array.isArray(config.directives) || (0, _devAssert.default)(0, '"directives" must be Array if provided but got: ' + "".concat((0, _inspect.default)(config.directives), "."));
        this.description = config.description;
        this.extensions = config.extensions && (0, _toObjMap.default)(config.extensions);
        this.astNode = config.astNode;
        this.extensionASTNodes = config.extensionASTNodes;
        this._queryType = config.query;
        this._mutationType = config.mutation;
        this._subscriptionType = config.subscription;
        this._directives = (_config$directives = config.directives) !== null && _config$directives !== void 0 ? _config$directives : _directives.specifiedDirectives;
        var allReferencedTypes = new Set(config.types);
        if (config.types != null) {
          for (var _i2 = 0, _config$types2 = config.types; _i2 < _config$types2.length; _i2++) {
            var type = _config$types2[_i2];
            allReferencedTypes.delete(type);
            collectReferencedTypes(type, allReferencedTypes);
          }
        }
        if (this._queryType != null) {
          collectReferencedTypes(this._queryType, allReferencedTypes);
        }
        if (this._mutationType != null) {
          collectReferencedTypes(this._mutationType, allReferencedTypes);
        }
        if (this._subscriptionType != null) {
          collectReferencedTypes(this._subscriptionType, allReferencedTypes);
        }
        for (var _i4 = 0, _this$_directives2 = this._directives; _i4 < _this$_directives2.length; _i4++) {
          var directive = _this$_directives2[_i4];
          if ((0, _directives.isDirective)(directive)) {
            for (var _i6 = 0, _directive$args2 = directive.args; _i6 < _directive$args2.length; _i6++) {
              var arg = _directive$args2[_i6];
              collectReferencedTypes(arg.type, allReferencedTypes);
            }
          }
        }
        collectReferencedTypes(_introspection.__Schema, allReferencedTypes);
        this._typeMap = /* @__PURE__ */ Object.create(null);
        this._subTypeMap = /* @__PURE__ */ Object.create(null);
        this._implementationsMap = /* @__PURE__ */ Object.create(null);
        for (var _i8 = 0, _arrayFrom2 = (0, _arrayFrom3.default)(allReferencedTypes); _i8 < _arrayFrom2.length; _i8++) {
          var namedType = _arrayFrom2[_i8];
          if (namedType == null) {
            continue;
          }
          var typeName = namedType.name;
          typeName || (0, _devAssert.default)(0, "One of the provided types for building the Schema is missing a name.");
          if (this._typeMap[typeName] !== void 0) {
            throw new Error('Schema must contain uniquely named types but contains multiple types named "'.concat(typeName, '".'));
          }
          this._typeMap[typeName] = namedType;
          if ((0, _definition.isInterfaceType)(namedType)) {
            for (var _i10 = 0, _namedType$getInterfa2 = namedType.getInterfaces(); _i10 < _namedType$getInterfa2.length; _i10++) {
              var iface = _namedType$getInterfa2[_i10];
              if ((0, _definition.isInterfaceType)(iface)) {
                var implementations = this._implementationsMap[iface.name];
                if (implementations === void 0) {
                  implementations = this._implementationsMap[iface.name] = {
                    objects: [],
                    interfaces: []
                  };
                }
                implementations.interfaces.push(namedType);
              }
            }
          } else if ((0, _definition.isObjectType)(namedType)) {
            for (var _i12 = 0, _namedType$getInterfa4 = namedType.getInterfaces(); _i12 < _namedType$getInterfa4.length; _i12++) {
              var _iface = _namedType$getInterfa4[_i12];
              if ((0, _definition.isInterfaceType)(_iface)) {
                var _implementations = this._implementationsMap[_iface.name];
                if (_implementations === void 0) {
                  _implementations = this._implementationsMap[_iface.name] = {
                    objects: [],
                    interfaces: []
                  };
                }
                _implementations.objects.push(namedType);
              }
            }
          }
        }
      }
      var _proto = GraphQLSchema2.prototype;
      _proto.getQueryType = function getQueryType() {
        return this._queryType;
      };
      _proto.getMutationType = function getMutationType() {
        return this._mutationType;
      };
      _proto.getSubscriptionType = function getSubscriptionType() {
        return this._subscriptionType;
      };
      _proto.getTypeMap = function getTypeMap() {
        return this._typeMap;
      };
      _proto.getType = function getType(name) {
        return this.getTypeMap()[name];
      };
      _proto.getPossibleTypes = function getPossibleTypes(abstractType) {
        return (0, _definition.isUnionType)(abstractType) ? abstractType.getTypes() : this.getImplementations(abstractType).objects;
      };
      _proto.getImplementations = function getImplementations(interfaceType) {
        var implementations = this._implementationsMap[interfaceType.name];
        return implementations !== null && implementations !== void 0 ? implementations : {
          objects: [],
          interfaces: []
        };
      };
      _proto.isPossibleType = function isPossibleType(abstractType, possibleType) {
        return this.isSubType(abstractType, possibleType);
      };
      _proto.isSubType = function isSubType(abstractType, maybeSubType) {
        var map = this._subTypeMap[abstractType.name];
        if (map === void 0) {
          map = /* @__PURE__ */ Object.create(null);
          if ((0, _definition.isUnionType)(abstractType)) {
            for (var _i14 = 0, _abstractType$getType2 = abstractType.getTypes(); _i14 < _abstractType$getType2.length; _i14++) {
              var type = _abstractType$getType2[_i14];
              map[type.name] = true;
            }
          } else {
            var implementations = this.getImplementations(abstractType);
            for (var _i16 = 0, _implementations$obje2 = implementations.objects; _i16 < _implementations$obje2.length; _i16++) {
              var _type = _implementations$obje2[_i16];
              map[_type.name] = true;
            }
            for (var _i18 = 0, _implementations$inte2 = implementations.interfaces; _i18 < _implementations$inte2.length; _i18++) {
              var _type2 = _implementations$inte2[_i18];
              map[_type2.name] = true;
            }
          }
          this._subTypeMap[abstractType.name] = map;
        }
        return map[maybeSubType.name] !== void 0;
      };
      _proto.getDirectives = function getDirectives() {
        return this._directives;
      };
      _proto.getDirective = function getDirective(name) {
        return (0, _find.default)(this.getDirectives(), function(directive) {
          return directive.name === name;
        });
      };
      _proto.toConfig = function toConfig() {
        var _this$extensionASTNod;
        return {
          description: this.description,
          query: this.getQueryType(),
          mutation: this.getMutationType(),
          subscription: this.getSubscriptionType(),
          types: (0, _objectValues5.default)(this.getTypeMap()),
          directives: this.getDirectives().slice(),
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: (_this$extensionASTNod = this.extensionASTNodes) !== null && _this$extensionASTNod !== void 0 ? _this$extensionASTNod : [],
          assumeValid: this.__validationErrors !== void 0
        };
      };
      _createClass(GraphQLSchema2, [{
        key: _symbols.SYMBOL_TO_STRING_TAG,
        get: function get() {
          return "GraphQLSchema";
        }
      }]);
      return GraphQLSchema2;
    }();
    exports.GraphQLSchema = GraphQLSchema;
    function collectReferencedTypes(type, typeSet) {
      var namedType = (0, _definition.getNamedType)(type);
      if (!typeSet.has(namedType)) {
        typeSet.add(namedType);
        if ((0, _definition.isUnionType)(namedType)) {
          for (var _i20 = 0, _namedType$getTypes2 = namedType.getTypes(); _i20 < _namedType$getTypes2.length; _i20++) {
            var memberType = _namedType$getTypes2[_i20];
            collectReferencedTypes(memberType, typeSet);
          }
        } else if ((0, _definition.isObjectType)(namedType) || (0, _definition.isInterfaceType)(namedType)) {
          for (var _i22 = 0, _namedType$getInterfa6 = namedType.getInterfaces(); _i22 < _namedType$getInterfa6.length; _i22++) {
            var interfaceType = _namedType$getInterfa6[_i22];
            collectReferencedTypes(interfaceType, typeSet);
          }
          for (var _i24 = 0, _objectValues2 = (0, _objectValues5.default)(namedType.getFields()); _i24 < _objectValues2.length; _i24++) {
            var field = _objectValues2[_i24];
            collectReferencedTypes(field.type, typeSet);
            for (var _i26 = 0, _field$args2 = field.args; _i26 < _field$args2.length; _i26++) {
              var arg = _field$args2[_i26];
              collectReferencedTypes(arg.type, typeSet);
            }
          }
        } else if ((0, _definition.isInputObjectType)(namedType)) {
          for (var _i28 = 0, _objectValues4 = (0, _objectValues5.default)(namedType.getFields()); _i28 < _objectValues4.length; _i28++) {
            var _field = _objectValues4[_i28];
            collectReferencedTypes(_field.type, typeSet);
          }
        }
      }
      return typeSet;
    }
  }
});

// node_modules/graphql/type/validate.js
var require_validate = __commonJS({
  "node_modules/graphql/type/validate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.validateSchema = validateSchema;
    exports.assertValidSchema = assertValidSchema;
    var _find = _interopRequireDefault(require_find());
    var _objectValues5 = _interopRequireDefault(require_objectValues());
    var _inspect = _interopRequireDefault(require_inspect());
    var _GraphQLError = require_GraphQLError();
    var _locatedError = require_locatedError();
    var _assertValidName = require_assertValidName();
    var _typeComparators = require_typeComparators();
    var _schema = require_schema();
    var _introspection = require_introspection();
    var _directives = require_directives();
    var _definition = require_definition();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function validateSchema(schema2) {
      (0, _schema.assertSchema)(schema2);
      if (schema2.__validationErrors) {
        return schema2.__validationErrors;
      }
      var context = new SchemaValidationContext(schema2);
      validateRootTypes(context);
      validateDirectives(context);
      validateTypes(context);
      var errors = context.getErrors();
      schema2.__validationErrors = errors;
      return errors;
    }
    function assertValidSchema(schema2) {
      var errors = validateSchema(schema2);
      if (errors.length !== 0) {
        throw new Error(errors.map(function(error) {
          return error.message;
        }).join("\n\n"));
      }
    }
    var SchemaValidationContext = /* @__PURE__ */ function() {
      function SchemaValidationContext2(schema2) {
        this._errors = [];
        this.schema = schema2;
      }
      var _proto = SchemaValidationContext2.prototype;
      _proto.reportError = function reportError(message, nodes) {
        var _nodes = Array.isArray(nodes) ? nodes.filter(Boolean) : nodes;
        this.addError(new _GraphQLError.GraphQLError(message, _nodes));
      };
      _proto.addError = function addError(error) {
        this._errors.push(error);
      };
      _proto.getErrors = function getErrors() {
        return this._errors;
      };
      return SchemaValidationContext2;
    }();
    function validateRootTypes(context) {
      var schema2 = context.schema;
      var queryType = schema2.getQueryType();
      if (!queryType) {
        context.reportError("Query root type must be provided.", schema2.astNode);
      } else if (!(0, _definition.isObjectType)(queryType)) {
        var _getOperationTypeNode;
        context.reportError("Query root type must be Object type, it cannot be ".concat((0, _inspect.default)(queryType), "."), (_getOperationTypeNode = getOperationTypeNode(schema2, "query")) !== null && _getOperationTypeNode !== void 0 ? _getOperationTypeNode : queryType.astNode);
      }
      var mutationType = schema2.getMutationType();
      if (mutationType && !(0, _definition.isObjectType)(mutationType)) {
        var _getOperationTypeNode2;
        context.reportError("Mutation root type must be Object type if provided, it cannot be " + "".concat((0, _inspect.default)(mutationType), "."), (_getOperationTypeNode2 = getOperationTypeNode(schema2, "mutation")) !== null && _getOperationTypeNode2 !== void 0 ? _getOperationTypeNode2 : mutationType.astNode);
      }
      var subscriptionType = schema2.getSubscriptionType();
      if (subscriptionType && !(0, _definition.isObjectType)(subscriptionType)) {
        var _getOperationTypeNode3;
        context.reportError("Subscription root type must be Object type if provided, it cannot be " + "".concat((0, _inspect.default)(subscriptionType), "."), (_getOperationTypeNode3 = getOperationTypeNode(schema2, "subscription")) !== null && _getOperationTypeNode3 !== void 0 ? _getOperationTypeNode3 : subscriptionType.astNode);
      }
    }
    function getOperationTypeNode(schema2, operation) {
      var operationNodes = getAllSubNodes(schema2, function(node2) {
        return node2.operationTypes;
      });
      for (var _i2 = 0; _i2 < operationNodes.length; _i2++) {
        var node = operationNodes[_i2];
        if (node.operation === operation) {
          return node.type;
        }
      }
      return void 0;
    }
    function validateDirectives(context) {
      for (var _i4 = 0, _context$schema$getDi2 = context.schema.getDirectives(); _i4 < _context$schema$getDi2.length; _i4++) {
        var directive = _context$schema$getDi2[_i4];
        if (!(0, _directives.isDirective)(directive)) {
          context.reportError("Expected directive but got: ".concat((0, _inspect.default)(directive), "."), directive === null || directive === void 0 ? void 0 : directive.astNode);
          continue;
        }
        validateName(context, directive);
        for (var _i6 = 0, _directive$args2 = directive.args; _i6 < _directive$args2.length; _i6++) {
          var arg = _directive$args2[_i6];
          validateName(context, arg);
          if (!(0, _definition.isInputType)(arg.type)) {
            context.reportError("The type of @".concat(directive.name, "(").concat(arg.name, ":) must be Input Type ") + "but got: ".concat((0, _inspect.default)(arg.type), "."), arg.astNode);
          }
          if ((0, _definition.isRequiredArgument)(arg) && arg.deprecationReason != null) {
            var _arg$astNode;
            context.reportError("Required argument @".concat(directive.name, "(").concat(arg.name, ":) cannot be deprecated."), [
              getDeprecatedDirectiveNode(arg.astNode),
              (_arg$astNode = arg.astNode) === null || _arg$astNode === void 0 ? void 0 : _arg$astNode.type
            ]);
          }
        }
      }
    }
    function validateName(context, node) {
      var error = (0, _assertValidName.isValidNameError)(node.name);
      if (error) {
        context.addError((0, _locatedError.locatedError)(error, node.astNode));
      }
    }
    function validateTypes(context) {
      var validateInputObjectCircularRefs = createInputObjectCircularRefsValidator(context);
      var typeMap = context.schema.getTypeMap();
      for (var _i8 = 0, _objectValues2 = (0, _objectValues5.default)(typeMap); _i8 < _objectValues2.length; _i8++) {
        var type = _objectValues2[_i8];
        if (!(0, _definition.isNamedType)(type)) {
          context.reportError("Expected GraphQL named type but got: ".concat((0, _inspect.default)(type), "."), type.astNode);
          continue;
        }
        if (!(0, _introspection.isIntrospectionType)(type)) {
          validateName(context, type);
        }
        if ((0, _definition.isObjectType)(type)) {
          validateFields(context, type);
          validateInterfaces(context, type);
        } else if ((0, _definition.isInterfaceType)(type)) {
          validateFields(context, type);
          validateInterfaces(context, type);
        } else if ((0, _definition.isUnionType)(type)) {
          validateUnionMembers(context, type);
        } else if ((0, _definition.isEnumType)(type)) {
          validateEnumValues(context, type);
        } else if ((0, _definition.isInputObjectType)(type)) {
          validateInputFields(context, type);
          validateInputObjectCircularRefs(type);
        }
      }
    }
    function validateFields(context, type) {
      var fields = (0, _objectValues5.default)(type.getFields());
      if (fields.length === 0) {
        context.reportError("Type ".concat(type.name, " must define one or more fields."), getAllNodes(type));
      }
      for (var _i10 = 0; _i10 < fields.length; _i10++) {
        var field = fields[_i10];
        validateName(context, field);
        if (!(0, _definition.isOutputType)(field.type)) {
          var _field$astNode;
          context.reportError("The type of ".concat(type.name, ".").concat(field.name, " must be Output Type ") + "but got: ".concat((0, _inspect.default)(field.type), "."), (_field$astNode = field.astNode) === null || _field$astNode === void 0 ? void 0 : _field$astNode.type);
        }
        for (var _i12 = 0, _field$args2 = field.args; _i12 < _field$args2.length; _i12++) {
          var arg = _field$args2[_i12];
          var argName = arg.name;
          validateName(context, arg);
          if (!(0, _definition.isInputType)(arg.type)) {
            var _arg$astNode2;
            context.reportError("The type of ".concat(type.name, ".").concat(field.name, "(").concat(argName, ":) must be Input ") + "Type but got: ".concat((0, _inspect.default)(arg.type), "."), (_arg$astNode2 = arg.astNode) === null || _arg$astNode2 === void 0 ? void 0 : _arg$astNode2.type);
          }
          if ((0, _definition.isRequiredArgument)(arg) && arg.deprecationReason != null) {
            var _arg$astNode3;
            context.reportError("Required argument ".concat(type.name, ".").concat(field.name, "(").concat(argName, ":) cannot be deprecated."), [
              getDeprecatedDirectiveNode(arg.astNode),
              (_arg$astNode3 = arg.astNode) === null || _arg$astNode3 === void 0 ? void 0 : _arg$astNode3.type
            ]);
          }
        }
      }
    }
    function validateInterfaces(context, type) {
      var ifaceTypeNames = /* @__PURE__ */ Object.create(null);
      for (var _i14 = 0, _type$getInterfaces2 = type.getInterfaces(); _i14 < _type$getInterfaces2.length; _i14++) {
        var iface = _type$getInterfaces2[_i14];
        if (!(0, _definition.isInterfaceType)(iface)) {
          context.reportError("Type ".concat((0, _inspect.default)(type), " must only implement Interface types, ") + "it cannot implement ".concat((0, _inspect.default)(iface), "."), getAllImplementsInterfaceNodes(type, iface));
          continue;
        }
        if (type === iface) {
          context.reportError("Type ".concat(type.name, " cannot implement itself because it would create a circular reference."), getAllImplementsInterfaceNodes(type, iface));
          continue;
        }
        if (ifaceTypeNames[iface.name]) {
          context.reportError("Type ".concat(type.name, " can only implement ").concat(iface.name, " once."), getAllImplementsInterfaceNodes(type, iface));
          continue;
        }
        ifaceTypeNames[iface.name] = true;
        validateTypeImplementsAncestors(context, type, iface);
        validateTypeImplementsInterface(context, type, iface);
      }
    }
    function validateTypeImplementsInterface(context, type, iface) {
      var typeFieldMap = type.getFields();
      for (var _i16 = 0, _objectValues4 = (0, _objectValues5.default)(iface.getFields()); _i16 < _objectValues4.length; _i16++) {
        var ifaceField = _objectValues4[_i16];
        var fieldName = ifaceField.name;
        var typeField = typeFieldMap[fieldName];
        if (!typeField) {
          context.reportError("Interface field ".concat(iface.name, ".").concat(fieldName, " expected but ").concat(type.name, " does not provide it."), [ifaceField.astNode].concat(getAllNodes(type)));
          continue;
        }
        if (!(0, _typeComparators.isTypeSubTypeOf)(context.schema, typeField.type, ifaceField.type)) {
          var _ifaceField$astNode, _typeField$astNode;
          context.reportError("Interface field ".concat(iface.name, ".").concat(fieldName, " expects type ") + "".concat((0, _inspect.default)(ifaceField.type), " but ").concat(type.name, ".").concat(fieldName, " ") + "is type ".concat((0, _inspect.default)(typeField.type), "."), [
            (_ifaceField$astNode = ifaceField.astNode) === null || _ifaceField$astNode === void 0 ? void 0 : _ifaceField$astNode.type,
            (_typeField$astNode = typeField.astNode) === null || _typeField$astNode === void 0 ? void 0 : _typeField$astNode.type
          ]);
        }
        var _loop = function _loop3(_i182, _ifaceField$args22) {
          var ifaceArg = _ifaceField$args22[_i182];
          var argName = ifaceArg.name;
          var typeArg = (0, _find.default)(typeField.args, function(arg) {
            return arg.name === argName;
          });
          if (!typeArg) {
            context.reportError("Interface field argument ".concat(iface.name, ".").concat(fieldName, "(").concat(argName, ":) expected but ").concat(type.name, ".").concat(fieldName, " does not provide it."), [ifaceArg.astNode, typeField.astNode]);
            return "continue";
          }
          if (!(0, _typeComparators.isEqualType)(ifaceArg.type, typeArg.type)) {
            var _ifaceArg$astNode, _typeArg$astNode;
            context.reportError("Interface field argument ".concat(iface.name, ".").concat(fieldName, "(").concat(argName, ":) ") + "expects type ".concat((0, _inspect.default)(ifaceArg.type), " but ") + "".concat(type.name, ".").concat(fieldName, "(").concat(argName, ":) is type ") + "".concat((0, _inspect.default)(typeArg.type), "."), [
              (_ifaceArg$astNode = ifaceArg.astNode) === null || _ifaceArg$astNode === void 0 ? void 0 : _ifaceArg$astNode.type,
              (_typeArg$astNode = typeArg.astNode) === null || _typeArg$astNode === void 0 ? void 0 : _typeArg$astNode.type
            ]);
          }
        };
        for (var _i18 = 0, _ifaceField$args2 = ifaceField.args; _i18 < _ifaceField$args2.length; _i18++) {
          var _ret = _loop(_i18, _ifaceField$args2);
          if (_ret === "continue")
            continue;
        }
        var _loop2 = function _loop22(_i202, _typeField$args22) {
          var typeArg = _typeField$args22[_i202];
          var argName = typeArg.name;
          var ifaceArg = (0, _find.default)(ifaceField.args, function(arg) {
            return arg.name === argName;
          });
          if (!ifaceArg && (0, _definition.isRequiredArgument)(typeArg)) {
            context.reportError("Object field ".concat(type.name, ".").concat(fieldName, " includes required argument ").concat(argName, " that is missing from the Interface field ").concat(iface.name, ".").concat(fieldName, "."), [typeArg.astNode, ifaceField.astNode]);
          }
        };
        for (var _i20 = 0, _typeField$args2 = typeField.args; _i20 < _typeField$args2.length; _i20++) {
          _loop2(_i20, _typeField$args2);
        }
      }
    }
    function validateTypeImplementsAncestors(context, type, iface) {
      var ifaceInterfaces = type.getInterfaces();
      for (var _i22 = 0, _iface$getInterfaces2 = iface.getInterfaces(); _i22 < _iface$getInterfaces2.length; _i22++) {
        var transitive = _iface$getInterfaces2[_i22];
        if (ifaceInterfaces.indexOf(transitive) === -1) {
          context.reportError(transitive === type ? "Type ".concat(type.name, " cannot implement ").concat(iface.name, " because it would create a circular reference.") : "Type ".concat(type.name, " must implement ").concat(transitive.name, " because it is implemented by ").concat(iface.name, "."), [].concat(getAllImplementsInterfaceNodes(iface, transitive), getAllImplementsInterfaceNodes(type, iface)));
        }
      }
    }
    function validateUnionMembers(context, union) {
      var memberTypes = union.getTypes();
      if (memberTypes.length === 0) {
        context.reportError("Union type ".concat(union.name, " must define one or more member types."), getAllNodes(union));
      }
      var includedTypeNames = /* @__PURE__ */ Object.create(null);
      for (var _i24 = 0; _i24 < memberTypes.length; _i24++) {
        var memberType = memberTypes[_i24];
        if (includedTypeNames[memberType.name]) {
          context.reportError("Union type ".concat(union.name, " can only include type ").concat(memberType.name, " once."), getUnionMemberTypeNodes(union, memberType.name));
          continue;
        }
        includedTypeNames[memberType.name] = true;
        if (!(0, _definition.isObjectType)(memberType)) {
          context.reportError("Union type ".concat(union.name, " can only include Object types, ") + "it cannot include ".concat((0, _inspect.default)(memberType), "."), getUnionMemberTypeNodes(union, String(memberType)));
        }
      }
    }
    function validateEnumValues(context, enumType) {
      var enumValues = enumType.getValues();
      if (enumValues.length === 0) {
        context.reportError("Enum type ".concat(enumType.name, " must define one or more values."), getAllNodes(enumType));
      }
      for (var _i26 = 0; _i26 < enumValues.length; _i26++) {
        var enumValue = enumValues[_i26];
        var valueName = enumValue.name;
        validateName(context, enumValue);
        if (valueName === "true" || valueName === "false" || valueName === "null") {
          context.reportError("Enum type ".concat(enumType.name, " cannot include value: ").concat(valueName, "."), enumValue.astNode);
        }
      }
    }
    function validateInputFields(context, inputObj) {
      var fields = (0, _objectValues5.default)(inputObj.getFields());
      if (fields.length === 0) {
        context.reportError("Input Object type ".concat(inputObj.name, " must define one or more fields."), getAllNodes(inputObj));
      }
      for (var _i28 = 0; _i28 < fields.length; _i28++) {
        var field = fields[_i28];
        validateName(context, field);
        if (!(0, _definition.isInputType)(field.type)) {
          var _field$astNode2;
          context.reportError("The type of ".concat(inputObj.name, ".").concat(field.name, " must be Input Type ") + "but got: ".concat((0, _inspect.default)(field.type), "."), (_field$astNode2 = field.astNode) === null || _field$astNode2 === void 0 ? void 0 : _field$astNode2.type);
        }
        if ((0, _definition.isRequiredInputField)(field) && field.deprecationReason != null) {
          var _field$astNode3;
          context.reportError("Required input field ".concat(inputObj.name, ".").concat(field.name, " cannot be deprecated."), [
            getDeprecatedDirectiveNode(field.astNode),
            (_field$astNode3 = field.astNode) === null || _field$astNode3 === void 0 ? void 0 : _field$astNode3.type
          ]);
        }
      }
    }
    function createInputObjectCircularRefsValidator(context) {
      var visitedTypes = /* @__PURE__ */ Object.create(null);
      var fieldPath = [];
      var fieldPathIndexByTypeName = /* @__PURE__ */ Object.create(null);
      return detectCycleRecursive;
      function detectCycleRecursive(inputObj) {
        if (visitedTypes[inputObj.name]) {
          return;
        }
        visitedTypes[inputObj.name] = true;
        fieldPathIndexByTypeName[inputObj.name] = fieldPath.length;
        var fields = (0, _objectValues5.default)(inputObj.getFields());
        for (var _i30 = 0; _i30 < fields.length; _i30++) {
          var field = fields[_i30];
          if ((0, _definition.isNonNullType)(field.type) && (0, _definition.isInputObjectType)(field.type.ofType)) {
            var fieldType = field.type.ofType;
            var cycleIndex = fieldPathIndexByTypeName[fieldType.name];
            fieldPath.push(field);
            if (cycleIndex === void 0) {
              detectCycleRecursive(fieldType);
            } else {
              var cyclePath = fieldPath.slice(cycleIndex);
              var pathStr = cyclePath.map(function(fieldObj) {
                return fieldObj.name;
              }).join(".");
              context.reportError('Cannot reference Input Object "'.concat(fieldType.name, '" within itself through a series of non-null fields: "').concat(pathStr, '".'), cyclePath.map(function(fieldObj) {
                return fieldObj.astNode;
              }));
            }
            fieldPath.pop();
          }
        }
        fieldPathIndexByTypeName[inputObj.name] = void 0;
      }
    }
    function getAllNodes(object) {
      var astNode = object.astNode, extensionASTNodes = object.extensionASTNodes;
      return astNode ? extensionASTNodes ? [astNode].concat(extensionASTNodes) : [astNode] : extensionASTNodes !== null && extensionASTNodes !== void 0 ? extensionASTNodes : [];
    }
    function getAllSubNodes(object, getter) {
      var subNodes = [];
      for (var _i32 = 0, _getAllNodes2 = getAllNodes(object); _i32 < _getAllNodes2.length; _i32++) {
        var _getter;
        var node = _getAllNodes2[_i32];
        subNodes = subNodes.concat((_getter = getter(node)) !== null && _getter !== void 0 ? _getter : []);
      }
      return subNodes;
    }
    function getAllImplementsInterfaceNodes(type, iface) {
      return getAllSubNodes(type, function(typeNode) {
        return typeNode.interfaces;
      }).filter(function(ifaceNode) {
        return ifaceNode.name.value === iface.name;
      });
    }
    function getUnionMemberTypeNodes(union, typeName) {
      return getAllSubNodes(union, function(unionNode) {
        return unionNode.types;
      }).filter(function(typeNode) {
        return typeNode.name.value === typeName;
      });
    }
    function getDeprecatedDirectiveNode(definitionNode) {
      var _definitionNode$direc;
      return definitionNode === null || definitionNode === void 0 ? void 0 : (_definitionNode$direc = definitionNode.directives) === null || _definitionNode$direc === void 0 ? void 0 : _definitionNode$direc.find(function(node) {
        return node.name.value === _directives.GraphQLDeprecatedDirective.name;
      });
    }
  }
});

// node_modules/graphql/utilities/typeFromAST.js
var require_typeFromAST = __commonJS({
  "node_modules/graphql/utilities/typeFromAST.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.typeFromAST = typeFromAST;
    var _inspect = _interopRequireDefault(require_inspect());
    var _invariant = _interopRequireDefault(require_invariant());
    var _kinds = require_kinds();
    var _definition = require_definition();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function typeFromAST(schema2, typeNode) {
      var innerType;
      if (typeNode.kind === _kinds.Kind.LIST_TYPE) {
        innerType = typeFromAST(schema2, typeNode.type);
        return innerType && new _definition.GraphQLList(innerType);
      }
      if (typeNode.kind === _kinds.Kind.NON_NULL_TYPE) {
        innerType = typeFromAST(schema2, typeNode.type);
        return innerType && new _definition.GraphQLNonNull(innerType);
      }
      if (typeNode.kind === _kinds.Kind.NAMED_TYPE) {
        return schema2.getType(typeNode.name.value);
      }
      (0, _invariant.default)(0, "Unexpected type node: " + (0, _inspect.default)(typeNode));
    }
  }
});

// node_modules/graphql/utilities/TypeInfo.js
var require_TypeInfo = __commonJS({
  "node_modules/graphql/utilities/TypeInfo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.visitWithTypeInfo = visitWithTypeInfo;
    exports.TypeInfo = void 0;
    var _find = _interopRequireDefault(require_find());
    var _kinds = require_kinds();
    var _ast = require_ast();
    var _visitor = require_visitor();
    var _definition = require_definition();
    var _introspection = require_introspection();
    var _typeFromAST = require_typeFromAST();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var TypeInfo = /* @__PURE__ */ function() {
      function TypeInfo2(schema2, getFieldDefFn, initialType) {
        this._schema = schema2;
        this._typeStack = [];
        this._parentTypeStack = [];
        this._inputTypeStack = [];
        this._fieldDefStack = [];
        this._defaultValueStack = [];
        this._directive = null;
        this._argument = null;
        this._enumValue = null;
        this._getFieldDef = getFieldDefFn !== null && getFieldDefFn !== void 0 ? getFieldDefFn : getFieldDef;
        if (initialType) {
          if ((0, _definition.isInputType)(initialType)) {
            this._inputTypeStack.push(initialType);
          }
          if ((0, _definition.isCompositeType)(initialType)) {
            this._parentTypeStack.push(initialType);
          }
          if ((0, _definition.isOutputType)(initialType)) {
            this._typeStack.push(initialType);
          }
        }
      }
      var _proto = TypeInfo2.prototype;
      _proto.getType = function getType() {
        if (this._typeStack.length > 0) {
          return this._typeStack[this._typeStack.length - 1];
        }
      };
      _proto.getParentType = function getParentType() {
        if (this._parentTypeStack.length > 0) {
          return this._parentTypeStack[this._parentTypeStack.length - 1];
        }
      };
      _proto.getInputType = function getInputType() {
        if (this._inputTypeStack.length > 0) {
          return this._inputTypeStack[this._inputTypeStack.length - 1];
        }
      };
      _proto.getParentInputType = function getParentInputType() {
        if (this._inputTypeStack.length > 1) {
          return this._inputTypeStack[this._inputTypeStack.length - 2];
        }
      };
      _proto.getFieldDef = function getFieldDef2() {
        if (this._fieldDefStack.length > 0) {
          return this._fieldDefStack[this._fieldDefStack.length - 1];
        }
      };
      _proto.getDefaultValue = function getDefaultValue() {
        if (this._defaultValueStack.length > 0) {
          return this._defaultValueStack[this._defaultValueStack.length - 1];
        }
      };
      _proto.getDirective = function getDirective() {
        return this._directive;
      };
      _proto.getArgument = function getArgument() {
        return this._argument;
      };
      _proto.getEnumValue = function getEnumValue() {
        return this._enumValue;
      };
      _proto.enter = function enter(node) {
        var schema2 = this._schema;
        switch (node.kind) {
          case _kinds.Kind.SELECTION_SET: {
            var namedType = (0, _definition.getNamedType)(this.getType());
            this._parentTypeStack.push((0, _definition.isCompositeType)(namedType) ? namedType : void 0);
            break;
          }
          case _kinds.Kind.FIELD: {
            var parentType = this.getParentType();
            var fieldDef;
            var fieldType;
            if (parentType) {
              fieldDef = this._getFieldDef(schema2, parentType, node);
              if (fieldDef) {
                fieldType = fieldDef.type;
              }
            }
            this._fieldDefStack.push(fieldDef);
            this._typeStack.push((0, _definition.isOutputType)(fieldType) ? fieldType : void 0);
            break;
          }
          case _kinds.Kind.DIRECTIVE:
            this._directive = schema2.getDirective(node.name.value);
            break;
          case _kinds.Kind.OPERATION_DEFINITION: {
            var type;
            switch (node.operation) {
              case "query":
                type = schema2.getQueryType();
                break;
              case "mutation":
                type = schema2.getMutationType();
                break;
              case "subscription":
                type = schema2.getSubscriptionType();
                break;
            }
            this._typeStack.push((0, _definition.isObjectType)(type) ? type : void 0);
            break;
          }
          case _kinds.Kind.INLINE_FRAGMENT:
          case _kinds.Kind.FRAGMENT_DEFINITION: {
            var typeConditionAST = node.typeCondition;
            var outputType = typeConditionAST ? (0, _typeFromAST.typeFromAST)(schema2, typeConditionAST) : (0, _definition.getNamedType)(this.getType());
            this._typeStack.push((0, _definition.isOutputType)(outputType) ? outputType : void 0);
            break;
          }
          case _kinds.Kind.VARIABLE_DEFINITION: {
            var inputType = (0, _typeFromAST.typeFromAST)(schema2, node.type);
            this._inputTypeStack.push((0, _definition.isInputType)(inputType) ? inputType : void 0);
            break;
          }
          case _kinds.Kind.ARGUMENT: {
            var _this$getDirective;
            var argDef;
            var argType;
            var fieldOrDirective = (_this$getDirective = this.getDirective()) !== null && _this$getDirective !== void 0 ? _this$getDirective : this.getFieldDef();
            if (fieldOrDirective) {
              argDef = (0, _find.default)(fieldOrDirective.args, function(arg) {
                return arg.name === node.name.value;
              });
              if (argDef) {
                argType = argDef.type;
              }
            }
            this._argument = argDef;
            this._defaultValueStack.push(argDef ? argDef.defaultValue : void 0);
            this._inputTypeStack.push((0, _definition.isInputType)(argType) ? argType : void 0);
            break;
          }
          case _kinds.Kind.LIST: {
            var listType = (0, _definition.getNullableType)(this.getInputType());
            var itemType = (0, _definition.isListType)(listType) ? listType.ofType : listType;
            this._defaultValueStack.push(void 0);
            this._inputTypeStack.push((0, _definition.isInputType)(itemType) ? itemType : void 0);
            break;
          }
          case _kinds.Kind.OBJECT_FIELD: {
            var objectType = (0, _definition.getNamedType)(this.getInputType());
            var inputFieldType;
            var inputField;
            if ((0, _definition.isInputObjectType)(objectType)) {
              inputField = objectType.getFields()[node.name.value];
              if (inputField) {
                inputFieldType = inputField.type;
              }
            }
            this._defaultValueStack.push(inputField ? inputField.defaultValue : void 0);
            this._inputTypeStack.push((0, _definition.isInputType)(inputFieldType) ? inputFieldType : void 0);
            break;
          }
          case _kinds.Kind.ENUM: {
            var enumType = (0, _definition.getNamedType)(this.getInputType());
            var enumValue;
            if ((0, _definition.isEnumType)(enumType)) {
              enumValue = enumType.getValue(node.value);
            }
            this._enumValue = enumValue;
            break;
          }
        }
      };
      _proto.leave = function leave(node) {
        switch (node.kind) {
          case _kinds.Kind.SELECTION_SET:
            this._parentTypeStack.pop();
            break;
          case _kinds.Kind.FIELD:
            this._fieldDefStack.pop();
            this._typeStack.pop();
            break;
          case _kinds.Kind.DIRECTIVE:
            this._directive = null;
            break;
          case _kinds.Kind.OPERATION_DEFINITION:
          case _kinds.Kind.INLINE_FRAGMENT:
          case _kinds.Kind.FRAGMENT_DEFINITION:
            this._typeStack.pop();
            break;
          case _kinds.Kind.VARIABLE_DEFINITION:
            this._inputTypeStack.pop();
            break;
          case _kinds.Kind.ARGUMENT:
            this._argument = null;
            this._defaultValueStack.pop();
            this._inputTypeStack.pop();
            break;
          case _kinds.Kind.LIST:
          case _kinds.Kind.OBJECT_FIELD:
            this._defaultValueStack.pop();
            this._inputTypeStack.pop();
            break;
          case _kinds.Kind.ENUM:
            this._enumValue = null;
            break;
        }
      };
      return TypeInfo2;
    }();
    exports.TypeInfo = TypeInfo;
    function getFieldDef(schema2, parentType, fieldNode) {
      var name = fieldNode.name.value;
      if (name === _introspection.SchemaMetaFieldDef.name && schema2.getQueryType() === parentType) {
        return _introspection.SchemaMetaFieldDef;
      }
      if (name === _introspection.TypeMetaFieldDef.name && schema2.getQueryType() === parentType) {
        return _introspection.TypeMetaFieldDef;
      }
      if (name === _introspection.TypeNameMetaFieldDef.name && (0, _definition.isCompositeType)(parentType)) {
        return _introspection.TypeNameMetaFieldDef;
      }
      if ((0, _definition.isObjectType)(parentType) || (0, _definition.isInterfaceType)(parentType)) {
        return parentType.getFields()[name];
      }
    }
    function visitWithTypeInfo(typeInfo, visitor) {
      return {
        enter: function enter(node) {
          typeInfo.enter(node);
          var fn = (0, _visitor.getVisitFn)(
            visitor,
            node.kind,
            false
          );
          if (fn) {
            var result = fn.apply(visitor, arguments);
            if (result !== void 0) {
              typeInfo.leave(node);
              if ((0, _ast.isNode)(result)) {
                typeInfo.enter(result);
              }
            }
            return result;
          }
        },
        leave: function leave(node) {
          var fn = (0, _visitor.getVisitFn)(
            visitor,
            node.kind,
            true
          );
          var result;
          if (fn) {
            result = fn.apply(visitor, arguments);
          }
          typeInfo.leave(node);
          return result;
        }
      };
    }
  }
});

// node_modules/graphql/language/predicates.js
var require_predicates = __commonJS({
  "node_modules/graphql/language/predicates.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isDefinitionNode = isDefinitionNode;
    exports.isExecutableDefinitionNode = isExecutableDefinitionNode;
    exports.isSelectionNode = isSelectionNode;
    exports.isValueNode = isValueNode;
    exports.isTypeNode = isTypeNode;
    exports.isTypeSystemDefinitionNode = isTypeSystemDefinitionNode;
    exports.isTypeDefinitionNode = isTypeDefinitionNode;
    exports.isTypeSystemExtensionNode = isTypeSystemExtensionNode;
    exports.isTypeExtensionNode = isTypeExtensionNode;
    var _kinds = require_kinds();
    function isDefinitionNode(node) {
      return isExecutableDefinitionNode(node) || isTypeSystemDefinitionNode(node) || isTypeSystemExtensionNode(node);
    }
    function isExecutableDefinitionNode(node) {
      return node.kind === _kinds.Kind.OPERATION_DEFINITION || node.kind === _kinds.Kind.FRAGMENT_DEFINITION;
    }
    function isSelectionNode(node) {
      return node.kind === _kinds.Kind.FIELD || node.kind === _kinds.Kind.FRAGMENT_SPREAD || node.kind === _kinds.Kind.INLINE_FRAGMENT;
    }
    function isValueNode(node) {
      return node.kind === _kinds.Kind.VARIABLE || node.kind === _kinds.Kind.INT || node.kind === _kinds.Kind.FLOAT || node.kind === _kinds.Kind.STRING || node.kind === _kinds.Kind.BOOLEAN || node.kind === _kinds.Kind.NULL || node.kind === _kinds.Kind.ENUM || node.kind === _kinds.Kind.LIST || node.kind === _kinds.Kind.OBJECT;
    }
    function isTypeNode(node) {
      return node.kind === _kinds.Kind.NAMED_TYPE || node.kind === _kinds.Kind.LIST_TYPE || node.kind === _kinds.Kind.NON_NULL_TYPE;
    }
    function isTypeSystemDefinitionNode(node) {
      return node.kind === _kinds.Kind.SCHEMA_DEFINITION || isTypeDefinitionNode(node) || node.kind === _kinds.Kind.DIRECTIVE_DEFINITION;
    }
    function isTypeDefinitionNode(node) {
      return node.kind === _kinds.Kind.SCALAR_TYPE_DEFINITION || node.kind === _kinds.Kind.OBJECT_TYPE_DEFINITION || node.kind === _kinds.Kind.INTERFACE_TYPE_DEFINITION || node.kind === _kinds.Kind.UNION_TYPE_DEFINITION || node.kind === _kinds.Kind.ENUM_TYPE_DEFINITION || node.kind === _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION;
    }
    function isTypeSystemExtensionNode(node) {
      return node.kind === _kinds.Kind.SCHEMA_EXTENSION || isTypeExtensionNode(node);
    }
    function isTypeExtensionNode(node) {
      return node.kind === _kinds.Kind.SCALAR_TYPE_EXTENSION || node.kind === _kinds.Kind.OBJECT_TYPE_EXTENSION || node.kind === _kinds.Kind.INTERFACE_TYPE_EXTENSION || node.kind === _kinds.Kind.UNION_TYPE_EXTENSION || node.kind === _kinds.Kind.ENUM_TYPE_EXTENSION || node.kind === _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION;
    }
  }
});

// node_modules/graphql/validation/rules/ExecutableDefinitionsRule.js
var require_ExecutableDefinitionsRule = __commonJS({
  "node_modules/graphql/validation/rules/ExecutableDefinitionsRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ExecutableDefinitionsRule = ExecutableDefinitionsRule;
    var _GraphQLError = require_GraphQLError();
    var _kinds = require_kinds();
    var _predicates = require_predicates();
    function ExecutableDefinitionsRule(context) {
      return {
        Document: function Document(node) {
          for (var _i2 = 0, _node$definitions2 = node.definitions; _i2 < _node$definitions2.length; _i2++) {
            var definition = _node$definitions2[_i2];
            if (!(0, _predicates.isExecutableDefinitionNode)(definition)) {
              var defName = definition.kind === _kinds.Kind.SCHEMA_DEFINITION || definition.kind === _kinds.Kind.SCHEMA_EXTENSION ? "schema" : '"' + definition.name.value + '"';
              context.reportError(new _GraphQLError.GraphQLError("The ".concat(defName, " definition is not executable."), definition));
            }
          }
          return false;
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/UniqueOperationNamesRule.js
var require_UniqueOperationNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueOperationNamesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UniqueOperationNamesRule = UniqueOperationNamesRule;
    var _GraphQLError = require_GraphQLError();
    function UniqueOperationNamesRule(context) {
      var knownOperationNames = /* @__PURE__ */ Object.create(null);
      return {
        OperationDefinition: function OperationDefinition(node) {
          var operationName = node.name;
          if (operationName) {
            if (knownOperationNames[operationName.value]) {
              context.reportError(new _GraphQLError.GraphQLError('There can be only one operation named "'.concat(operationName.value, '".'), [knownOperationNames[operationName.value], operationName]));
            } else {
              knownOperationNames[operationName.value] = operationName;
            }
          }
          return false;
        },
        FragmentDefinition: function FragmentDefinition() {
          return false;
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/LoneAnonymousOperationRule.js
var require_LoneAnonymousOperationRule = __commonJS({
  "node_modules/graphql/validation/rules/LoneAnonymousOperationRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.LoneAnonymousOperationRule = LoneAnonymousOperationRule;
    var _GraphQLError = require_GraphQLError();
    var _kinds = require_kinds();
    function LoneAnonymousOperationRule(context) {
      var operationCount = 0;
      return {
        Document: function Document(node) {
          operationCount = node.definitions.filter(function(definition) {
            return definition.kind === _kinds.Kind.OPERATION_DEFINITION;
          }).length;
        },
        OperationDefinition: function OperationDefinition(node) {
          if (!node.name && operationCount > 1) {
            context.reportError(new _GraphQLError.GraphQLError("This anonymous operation must be the only defined operation.", node));
          }
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.js
var require_SingleFieldSubscriptionsRule = __commonJS({
  "node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SingleFieldSubscriptionsRule = SingleFieldSubscriptionsRule;
    var _GraphQLError = require_GraphQLError();
    function SingleFieldSubscriptionsRule(context) {
      return {
        OperationDefinition: function OperationDefinition(node) {
          if (node.operation === "subscription") {
            if (node.selectionSet.selections.length !== 1) {
              context.reportError(new _GraphQLError.GraphQLError(node.name ? 'Subscription "'.concat(node.name.value, '" must select only one top level field.') : "Anonymous Subscription must select only one top level field.", node.selectionSet.selections.slice(1)));
            }
          }
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/KnownTypeNamesRule.js
var require_KnownTypeNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/KnownTypeNamesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.KnownTypeNamesRule = KnownTypeNamesRule;
    var _didYouMean = _interopRequireDefault(require_didYouMean());
    var _suggestionList = _interopRequireDefault(require_suggestionList());
    var _GraphQLError = require_GraphQLError();
    var _predicates = require_predicates();
    var _scalars = require_scalars();
    var _introspection = require_introspection();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function KnownTypeNamesRule(context) {
      var schema2 = context.getSchema();
      var existingTypesMap = schema2 ? schema2.getTypeMap() : /* @__PURE__ */ Object.create(null);
      var definedTypes = /* @__PURE__ */ Object.create(null);
      for (var _i2 = 0, _context$getDocument$2 = context.getDocument().definitions; _i2 < _context$getDocument$2.length; _i2++) {
        var def = _context$getDocument$2[_i2];
        if ((0, _predicates.isTypeDefinitionNode)(def)) {
          definedTypes[def.name.value] = true;
        }
      }
      var typeNames = Object.keys(existingTypesMap).concat(Object.keys(definedTypes));
      return {
        NamedType: function NamedType(node, _1, parent, _2, ancestors) {
          var typeName = node.name.value;
          if (!existingTypesMap[typeName] && !definedTypes[typeName]) {
            var _ancestors$;
            var definitionNode = (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0 ? _ancestors$ : parent;
            var isSDL = definitionNode != null && isSDLNode(definitionNode);
            if (isSDL && isStandardTypeName(typeName)) {
              return;
            }
            var suggestedTypes = (0, _suggestionList.default)(typeName, isSDL ? standardTypeNames.concat(typeNames) : typeNames);
            context.reportError(new _GraphQLError.GraphQLError('Unknown type "'.concat(typeName, '".') + (0, _didYouMean.default)(suggestedTypes), node));
          }
        }
      };
    }
    var standardTypeNames = [].concat(_scalars.specifiedScalarTypes, _introspection.introspectionTypes).map(function(type) {
      return type.name;
    });
    function isStandardTypeName(typeName) {
      return standardTypeNames.indexOf(typeName) !== -1;
    }
    function isSDLNode(value) {
      return !Array.isArray(value) && ((0, _predicates.isTypeSystemDefinitionNode)(value) || (0, _predicates.isTypeSystemExtensionNode)(value));
    }
  }
});

// node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.js
var require_FragmentsOnCompositeTypesRule = __commonJS({
  "node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.FragmentsOnCompositeTypesRule = FragmentsOnCompositeTypesRule;
    var _GraphQLError = require_GraphQLError();
    var _printer = require_printer();
    var _definition = require_definition();
    var _typeFromAST = require_typeFromAST();
    function FragmentsOnCompositeTypesRule(context) {
      return {
        InlineFragment: function InlineFragment(node) {
          var typeCondition = node.typeCondition;
          if (typeCondition) {
            var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), typeCondition);
            if (type && !(0, _definition.isCompositeType)(type)) {
              var typeStr = (0, _printer.print)(typeCondition);
              context.reportError(new _GraphQLError.GraphQLError('Fragment cannot condition on non composite type "'.concat(typeStr, '".'), typeCondition));
            }
          }
        },
        FragmentDefinition: function FragmentDefinition(node) {
          var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.typeCondition);
          if (type && !(0, _definition.isCompositeType)(type)) {
            var typeStr = (0, _printer.print)(node.typeCondition);
            context.reportError(new _GraphQLError.GraphQLError('Fragment "'.concat(node.name.value, '" cannot condition on non composite type "').concat(typeStr, '".'), node.typeCondition));
          }
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/VariablesAreInputTypesRule.js
var require_VariablesAreInputTypesRule = __commonJS({
  "node_modules/graphql/validation/rules/VariablesAreInputTypesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.VariablesAreInputTypesRule = VariablesAreInputTypesRule;
    var _GraphQLError = require_GraphQLError();
    var _printer = require_printer();
    var _definition = require_definition();
    var _typeFromAST = require_typeFromAST();
    function VariablesAreInputTypesRule(context) {
      return {
        VariableDefinition: function VariableDefinition(node) {
          var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.type);
          if (type && !(0, _definition.isInputType)(type)) {
            var variableName = node.variable.name.value;
            var typeName = (0, _printer.print)(node.type);
            context.reportError(new _GraphQLError.GraphQLError('Variable "$'.concat(variableName, '" cannot be non-input type "').concat(typeName, '".'), node.type));
          }
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/ScalarLeafsRule.js
var require_ScalarLeafsRule = __commonJS({
  "node_modules/graphql/validation/rules/ScalarLeafsRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ScalarLeafsRule = ScalarLeafsRule;
    var _inspect = _interopRequireDefault(require_inspect());
    var _GraphQLError = require_GraphQLError();
    var _definition = require_definition();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function ScalarLeafsRule(context) {
      return {
        Field: function Field(node) {
          var type = context.getType();
          var selectionSet = node.selectionSet;
          if (type) {
            if ((0, _definition.isLeafType)((0, _definition.getNamedType)(type))) {
              if (selectionSet) {
                var fieldName = node.name.value;
                var typeStr = (0, _inspect.default)(type);
                context.reportError(new _GraphQLError.GraphQLError('Field "'.concat(fieldName, '" must not have a selection since type "').concat(typeStr, '" has no subfields.'), selectionSet));
              }
            } else if (!selectionSet) {
              var _fieldName = node.name.value;
              var _typeStr = (0, _inspect.default)(type);
              context.reportError(new _GraphQLError.GraphQLError('Field "'.concat(_fieldName, '" of type "').concat(_typeStr, '" must have a selection of subfields. Did you mean "').concat(_fieldName, ' { ... }"?'), node));
            }
          }
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.js
var require_FieldsOnCorrectTypeRule = __commonJS({
  "node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.FieldsOnCorrectTypeRule = FieldsOnCorrectTypeRule;
    var _arrayFrom = _interopRequireDefault(require_arrayFrom());
    var _didYouMean = _interopRequireDefault(require_didYouMean());
    var _suggestionList = _interopRequireDefault(require_suggestionList());
    var _naturalCompare = _interopRequireDefault(require_naturalCompare());
    var _GraphQLError = require_GraphQLError();
    var _definition = require_definition();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function FieldsOnCorrectTypeRule(context) {
      return {
        Field: function Field(node) {
          var type = context.getParentType();
          if (type) {
            var fieldDef = context.getFieldDef();
            if (!fieldDef) {
              var schema2 = context.getSchema();
              var fieldName = node.name.value;
              var suggestion = (0, _didYouMean.default)("to use an inline fragment on", getSuggestedTypeNames(schema2, type, fieldName));
              if (suggestion === "") {
                suggestion = (0, _didYouMean.default)(getSuggestedFieldNames(type, fieldName));
              }
              context.reportError(new _GraphQLError.GraphQLError('Cannot query field "'.concat(fieldName, '" on type "').concat(type.name, '".') + suggestion, node));
            }
          }
        }
      };
    }
    function getSuggestedTypeNames(schema2, type, fieldName) {
      if (!(0, _definition.isAbstractType)(type)) {
        return [];
      }
      var suggestedTypes = /* @__PURE__ */ new Set();
      var usageCount = /* @__PURE__ */ Object.create(null);
      for (var _i2 = 0, _schema$getPossibleTy2 = schema2.getPossibleTypes(type); _i2 < _schema$getPossibleTy2.length; _i2++) {
        var possibleType = _schema$getPossibleTy2[_i2];
        if (!possibleType.getFields()[fieldName]) {
          continue;
        }
        suggestedTypes.add(possibleType);
        usageCount[possibleType.name] = 1;
        for (var _i4 = 0, _possibleType$getInte2 = possibleType.getInterfaces(); _i4 < _possibleType$getInte2.length; _i4++) {
          var _usageCount$possibleI;
          var possibleInterface = _possibleType$getInte2[_i4];
          if (!possibleInterface.getFields()[fieldName]) {
            continue;
          }
          suggestedTypes.add(possibleInterface);
          usageCount[possibleInterface.name] = ((_usageCount$possibleI = usageCount[possibleInterface.name]) !== null && _usageCount$possibleI !== void 0 ? _usageCount$possibleI : 0) + 1;
        }
      }
      return (0, _arrayFrom.default)(suggestedTypes).sort(function(typeA, typeB) {
        var usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];
        if (usageCountDiff !== 0) {
          return usageCountDiff;
        }
        if ((0, _definition.isInterfaceType)(typeA) && schema2.isSubType(typeA, typeB)) {
          return -1;
        }
        if ((0, _definition.isInterfaceType)(typeB) && schema2.isSubType(typeB, typeA)) {
          return 1;
        }
        return (0, _naturalCompare.default)(typeA.name, typeB.name);
      }).map(function(x2) {
        return x2.name;
      });
    }
    function getSuggestedFieldNames(type, fieldName) {
      if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {
        var possibleFieldNames = Object.keys(type.getFields());
        return (0, _suggestionList.default)(fieldName, possibleFieldNames);
      }
      return [];
    }
  }
});

// node_modules/graphql/validation/rules/UniqueFragmentNamesRule.js
var require_UniqueFragmentNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueFragmentNamesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UniqueFragmentNamesRule = UniqueFragmentNamesRule;
    var _GraphQLError = require_GraphQLError();
    function UniqueFragmentNamesRule(context) {
      var knownFragmentNames = /* @__PURE__ */ Object.create(null);
      return {
        OperationDefinition: function OperationDefinition() {
          return false;
        },
        FragmentDefinition: function FragmentDefinition(node) {
          var fragmentName = node.name.value;
          if (knownFragmentNames[fragmentName]) {
            context.reportError(new _GraphQLError.GraphQLError('There can be only one fragment named "'.concat(fragmentName, '".'), [knownFragmentNames[fragmentName], node.name]));
          } else {
            knownFragmentNames[fragmentName] = node.name;
          }
          return false;
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/KnownFragmentNamesRule.js
var require_KnownFragmentNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/KnownFragmentNamesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.KnownFragmentNamesRule = KnownFragmentNamesRule;
    var _GraphQLError = require_GraphQLError();
    function KnownFragmentNamesRule(context) {
      return {
        FragmentSpread: function FragmentSpread(node) {
          var fragmentName = node.name.value;
          var fragment = context.getFragment(fragmentName);
          if (!fragment) {
            context.reportError(new _GraphQLError.GraphQLError('Unknown fragment "'.concat(fragmentName, '".'), node.name));
          }
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/NoUnusedFragmentsRule.js
var require_NoUnusedFragmentsRule = __commonJS({
  "node_modules/graphql/validation/rules/NoUnusedFragmentsRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.NoUnusedFragmentsRule = NoUnusedFragmentsRule;
    var _GraphQLError = require_GraphQLError();
    function NoUnusedFragmentsRule(context) {
      var operationDefs = [];
      var fragmentDefs = [];
      return {
        OperationDefinition: function OperationDefinition(node) {
          operationDefs.push(node);
          return false;
        },
        FragmentDefinition: function FragmentDefinition(node) {
          fragmentDefs.push(node);
          return false;
        },
        Document: {
          leave: function leave() {
            var fragmentNameUsed = /* @__PURE__ */ Object.create(null);
            for (var _i2 = 0; _i2 < operationDefs.length; _i2++) {
              var operation = operationDefs[_i2];
              for (var _i4 = 0, _context$getRecursive2 = context.getRecursivelyReferencedFragments(operation); _i4 < _context$getRecursive2.length; _i4++) {
                var fragment = _context$getRecursive2[_i4];
                fragmentNameUsed[fragment.name.value] = true;
              }
            }
            for (var _i6 = 0; _i6 < fragmentDefs.length; _i6++) {
              var fragmentDef = fragmentDefs[_i6];
              var fragName = fragmentDef.name.value;
              if (fragmentNameUsed[fragName] !== true) {
                context.reportError(new _GraphQLError.GraphQLError('Fragment "'.concat(fragName, '" is never used.'), fragmentDef));
              }
            }
          }
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.js
var require_PossibleFragmentSpreadsRule = __commonJS({
  "node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PossibleFragmentSpreadsRule = PossibleFragmentSpreadsRule;
    var _inspect = _interopRequireDefault(require_inspect());
    var _GraphQLError = require_GraphQLError();
    var _definition = require_definition();
    var _typeFromAST = require_typeFromAST();
    var _typeComparators = require_typeComparators();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function PossibleFragmentSpreadsRule(context) {
      return {
        InlineFragment: function InlineFragment(node) {
          var fragType = context.getType();
          var parentType = context.getParentType();
          if ((0, _definition.isCompositeType)(fragType) && (0, _definition.isCompositeType)(parentType) && !(0, _typeComparators.doTypesOverlap)(context.getSchema(), fragType, parentType)) {
            var parentTypeStr = (0, _inspect.default)(parentType);
            var fragTypeStr = (0, _inspect.default)(fragType);
            context.reportError(new _GraphQLError.GraphQLError('Fragment cannot be spread here as objects of type "'.concat(parentTypeStr, '" can never be of type "').concat(fragTypeStr, '".'), node));
          }
        },
        FragmentSpread: function FragmentSpread(node) {
          var fragName = node.name.value;
          var fragType = getFragmentType(context, fragName);
          var parentType = context.getParentType();
          if (fragType && parentType && !(0, _typeComparators.doTypesOverlap)(context.getSchema(), fragType, parentType)) {
            var parentTypeStr = (0, _inspect.default)(parentType);
            var fragTypeStr = (0, _inspect.default)(fragType);
            context.reportError(new _GraphQLError.GraphQLError('Fragment "'.concat(fragName, '" cannot be spread here as objects of type "').concat(parentTypeStr, '" can never be of type "').concat(fragTypeStr, '".'), node));
          }
        }
      };
    }
    function getFragmentType(context, name) {
      var frag = context.getFragment(name);
      if (frag) {
        var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), frag.typeCondition);
        if ((0, _definition.isCompositeType)(type)) {
          return type;
        }
      }
    }
  }
});

// node_modules/graphql/validation/rules/NoFragmentCyclesRule.js
var require_NoFragmentCyclesRule = __commonJS({
  "node_modules/graphql/validation/rules/NoFragmentCyclesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.NoFragmentCyclesRule = NoFragmentCyclesRule;
    var _GraphQLError = require_GraphQLError();
    function NoFragmentCyclesRule(context) {
      var visitedFrags = /* @__PURE__ */ Object.create(null);
      var spreadPath = [];
      var spreadPathIndexByName = /* @__PURE__ */ Object.create(null);
      return {
        OperationDefinition: function OperationDefinition() {
          return false;
        },
        FragmentDefinition: function FragmentDefinition(node) {
          detectCycleRecursive(node);
          return false;
        }
      };
      function detectCycleRecursive(fragment) {
        if (visitedFrags[fragment.name.value]) {
          return;
        }
        var fragmentName = fragment.name.value;
        visitedFrags[fragmentName] = true;
        var spreadNodes = context.getFragmentSpreads(fragment.selectionSet);
        if (spreadNodes.length === 0) {
          return;
        }
        spreadPathIndexByName[fragmentName] = spreadPath.length;
        for (var _i2 = 0; _i2 < spreadNodes.length; _i2++) {
          var spreadNode = spreadNodes[_i2];
          var spreadName = spreadNode.name.value;
          var cycleIndex = spreadPathIndexByName[spreadName];
          spreadPath.push(spreadNode);
          if (cycleIndex === void 0) {
            var spreadFragment = context.getFragment(spreadName);
            if (spreadFragment) {
              detectCycleRecursive(spreadFragment);
            }
          } else {
            var cyclePath = spreadPath.slice(cycleIndex);
            var viaPath = cyclePath.slice(0, -1).map(function(s2) {
              return '"' + s2.name.value + '"';
            }).join(", ");
            context.reportError(new _GraphQLError.GraphQLError('Cannot spread fragment "'.concat(spreadName, '" within itself') + (viaPath !== "" ? " via ".concat(viaPath, ".") : "."), cyclePath));
          }
          spreadPath.pop();
        }
        spreadPathIndexByName[fragmentName] = void 0;
      }
    }
  }
});

// node_modules/graphql/validation/rules/UniqueVariableNamesRule.js
var require_UniqueVariableNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueVariableNamesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UniqueVariableNamesRule = UniqueVariableNamesRule;
    var _GraphQLError = require_GraphQLError();
    function UniqueVariableNamesRule(context) {
      var knownVariableNames = /* @__PURE__ */ Object.create(null);
      return {
        OperationDefinition: function OperationDefinition() {
          knownVariableNames = /* @__PURE__ */ Object.create(null);
        },
        VariableDefinition: function VariableDefinition(node) {
          var variableName = node.variable.name.value;
          if (knownVariableNames[variableName]) {
            context.reportError(new _GraphQLError.GraphQLError('There can be only one variable named "$'.concat(variableName, '".'), [knownVariableNames[variableName], node.variable.name]));
          } else {
            knownVariableNames[variableName] = node.variable.name;
          }
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/NoUndefinedVariablesRule.js
var require_NoUndefinedVariablesRule = __commonJS({
  "node_modules/graphql/validation/rules/NoUndefinedVariablesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.NoUndefinedVariablesRule = NoUndefinedVariablesRule;
    var _GraphQLError = require_GraphQLError();
    function NoUndefinedVariablesRule(context) {
      var variableNameDefined = /* @__PURE__ */ Object.create(null);
      return {
        OperationDefinition: {
          enter: function enter() {
            variableNameDefined = /* @__PURE__ */ Object.create(null);
          },
          leave: function leave(operation) {
            var usages = context.getRecursiveVariableUsages(operation);
            for (var _i2 = 0; _i2 < usages.length; _i2++) {
              var _ref2 = usages[_i2];
              var node = _ref2.node;
              var varName = node.name.value;
              if (variableNameDefined[varName] !== true) {
                context.reportError(new _GraphQLError.GraphQLError(operation.name ? 'Variable "$'.concat(varName, '" is not defined by operation "').concat(operation.name.value, '".') : 'Variable "$'.concat(varName, '" is not defined.'), [node, operation]));
              }
            }
          }
        },
        VariableDefinition: function VariableDefinition(node) {
          variableNameDefined[node.variable.name.value] = true;
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/NoUnusedVariablesRule.js
var require_NoUnusedVariablesRule = __commonJS({
  "node_modules/graphql/validation/rules/NoUnusedVariablesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.NoUnusedVariablesRule = NoUnusedVariablesRule;
    var _GraphQLError = require_GraphQLError();
    function NoUnusedVariablesRule(context) {
      var variableDefs = [];
      return {
        OperationDefinition: {
          enter: function enter() {
            variableDefs = [];
          },
          leave: function leave(operation) {
            var variableNameUsed = /* @__PURE__ */ Object.create(null);
            var usages = context.getRecursiveVariableUsages(operation);
            for (var _i2 = 0; _i2 < usages.length; _i2++) {
              var _ref2 = usages[_i2];
              var node = _ref2.node;
              variableNameUsed[node.name.value] = true;
            }
            for (var _i4 = 0, _variableDefs2 = variableDefs; _i4 < _variableDefs2.length; _i4++) {
              var variableDef = _variableDefs2[_i4];
              var variableName = variableDef.variable.name.value;
              if (variableNameUsed[variableName] !== true) {
                context.reportError(new _GraphQLError.GraphQLError(operation.name ? 'Variable "$'.concat(variableName, '" is never used in operation "').concat(operation.name.value, '".') : 'Variable "$'.concat(variableName, '" is never used.'), variableDef));
              }
            }
          }
        },
        VariableDefinition: function VariableDefinition(def) {
          variableDefs.push(def);
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/KnownDirectivesRule.js
var require_KnownDirectivesRule = __commonJS({
  "node_modules/graphql/validation/rules/KnownDirectivesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.KnownDirectivesRule = KnownDirectivesRule;
    var _inspect = _interopRequireDefault(require_inspect());
    var _invariant = _interopRequireDefault(require_invariant());
    var _GraphQLError = require_GraphQLError();
    var _kinds = require_kinds();
    var _directiveLocation = require_directiveLocation();
    var _directives = require_directives();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function KnownDirectivesRule(context) {
      var locationsMap = /* @__PURE__ */ Object.create(null);
      var schema2 = context.getSchema();
      var definedDirectives = schema2 ? schema2.getDirectives() : _directives.specifiedDirectives;
      for (var _i2 = 0; _i2 < definedDirectives.length; _i2++) {
        var directive = definedDirectives[_i2];
        locationsMap[directive.name] = directive.locations;
      }
      var astDefinitions = context.getDocument().definitions;
      for (var _i4 = 0; _i4 < astDefinitions.length; _i4++) {
        var def = astDefinitions[_i4];
        if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
          locationsMap[def.name.value] = def.locations.map(function(name) {
            return name.value;
          });
        }
      }
      return {
        Directive: function Directive(node, _key, _parent, _path, ancestors) {
          var name = node.name.value;
          var locations = locationsMap[name];
          if (!locations) {
            context.reportError(new _GraphQLError.GraphQLError('Unknown directive "@'.concat(name, '".'), node));
            return;
          }
          var candidateLocation = getDirectiveLocationForASTPath(ancestors);
          if (candidateLocation && locations.indexOf(candidateLocation) === -1) {
            context.reportError(new _GraphQLError.GraphQLError('Directive "@'.concat(name, '" may not be used on ').concat(candidateLocation, "."), node));
          }
        }
      };
    }
    function getDirectiveLocationForASTPath(ancestors) {
      var appliedTo = ancestors[ancestors.length - 1];
      !Array.isArray(appliedTo) || (0, _invariant.default)(0);
      switch (appliedTo.kind) {
        case _kinds.Kind.OPERATION_DEFINITION:
          return getDirectiveLocationForOperation(appliedTo.operation);
        case _kinds.Kind.FIELD:
          return _directiveLocation.DirectiveLocation.FIELD;
        case _kinds.Kind.FRAGMENT_SPREAD:
          return _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD;
        case _kinds.Kind.INLINE_FRAGMENT:
          return _directiveLocation.DirectiveLocation.INLINE_FRAGMENT;
        case _kinds.Kind.FRAGMENT_DEFINITION:
          return _directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION;
        case _kinds.Kind.VARIABLE_DEFINITION:
          return _directiveLocation.DirectiveLocation.VARIABLE_DEFINITION;
        case _kinds.Kind.SCHEMA_DEFINITION:
        case _kinds.Kind.SCHEMA_EXTENSION:
          return _directiveLocation.DirectiveLocation.SCHEMA;
        case _kinds.Kind.SCALAR_TYPE_DEFINITION:
        case _kinds.Kind.SCALAR_TYPE_EXTENSION:
          return _directiveLocation.DirectiveLocation.SCALAR;
        case _kinds.Kind.OBJECT_TYPE_DEFINITION:
        case _kinds.Kind.OBJECT_TYPE_EXTENSION:
          return _directiveLocation.DirectiveLocation.OBJECT;
        case _kinds.Kind.FIELD_DEFINITION:
          return _directiveLocation.DirectiveLocation.FIELD_DEFINITION;
        case _kinds.Kind.INTERFACE_TYPE_DEFINITION:
        case _kinds.Kind.INTERFACE_TYPE_EXTENSION:
          return _directiveLocation.DirectiveLocation.INTERFACE;
        case _kinds.Kind.UNION_TYPE_DEFINITION:
        case _kinds.Kind.UNION_TYPE_EXTENSION:
          return _directiveLocation.DirectiveLocation.UNION;
        case _kinds.Kind.ENUM_TYPE_DEFINITION:
        case _kinds.Kind.ENUM_TYPE_EXTENSION:
          return _directiveLocation.DirectiveLocation.ENUM;
        case _kinds.Kind.ENUM_VALUE_DEFINITION:
          return _directiveLocation.DirectiveLocation.ENUM_VALUE;
        case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:
        case _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION:
          return _directiveLocation.DirectiveLocation.INPUT_OBJECT;
        case _kinds.Kind.INPUT_VALUE_DEFINITION: {
          var parentNode = ancestors[ancestors.length - 3];
          return parentNode.kind === _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION ? _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION : _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION;
        }
      }
    }
    function getDirectiveLocationForOperation(operation) {
      switch (operation) {
        case "query":
          return _directiveLocation.DirectiveLocation.QUERY;
        case "mutation":
          return _directiveLocation.DirectiveLocation.MUTATION;
        case "subscription":
          return _directiveLocation.DirectiveLocation.SUBSCRIPTION;
      }
      (0, _invariant.default)(0, "Unexpected operation: " + (0, _inspect.default)(operation));
    }
  }
});

// node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.js
var require_UniqueDirectivesPerLocationRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UniqueDirectivesPerLocationRule = UniqueDirectivesPerLocationRule;
    var _GraphQLError = require_GraphQLError();
    var _kinds = require_kinds();
    var _predicates = require_predicates();
    var _directives = require_directives();
    function UniqueDirectivesPerLocationRule(context) {
      var uniqueDirectiveMap = /* @__PURE__ */ Object.create(null);
      var schema2 = context.getSchema();
      var definedDirectives = schema2 ? schema2.getDirectives() : _directives.specifiedDirectives;
      for (var _i2 = 0; _i2 < definedDirectives.length; _i2++) {
        var directive = definedDirectives[_i2];
        uniqueDirectiveMap[directive.name] = !directive.isRepeatable;
      }
      var astDefinitions = context.getDocument().definitions;
      for (var _i4 = 0; _i4 < astDefinitions.length; _i4++) {
        var def = astDefinitions[_i4];
        if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
          uniqueDirectiveMap[def.name.value] = !def.repeatable;
        }
      }
      var schemaDirectives = /* @__PURE__ */ Object.create(null);
      var typeDirectivesMap = /* @__PURE__ */ Object.create(null);
      return {
        enter: function enter(node) {
          if (node.directives == null) {
            return;
          }
          var seenDirectives;
          if (node.kind === _kinds.Kind.SCHEMA_DEFINITION || node.kind === _kinds.Kind.SCHEMA_EXTENSION) {
            seenDirectives = schemaDirectives;
          } else if ((0, _predicates.isTypeDefinitionNode)(node) || (0, _predicates.isTypeExtensionNode)(node)) {
            var typeName = node.name.value;
            seenDirectives = typeDirectivesMap[typeName];
            if (seenDirectives === void 0) {
              typeDirectivesMap[typeName] = seenDirectives = /* @__PURE__ */ Object.create(null);
            }
          } else {
            seenDirectives = /* @__PURE__ */ Object.create(null);
          }
          for (var _i6 = 0, _node$directives2 = node.directives; _i6 < _node$directives2.length; _i6++) {
            var _directive = _node$directives2[_i6];
            var directiveName = _directive.name.value;
            if (uniqueDirectiveMap[directiveName]) {
              if (seenDirectives[directiveName]) {
                context.reportError(new _GraphQLError.GraphQLError('The directive "@'.concat(directiveName, '" can only be used once at this location.'), [seenDirectives[directiveName], _directive]));
              } else {
                seenDirectives[directiveName] = _directive;
              }
            }
          }
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/KnownArgumentNamesRule.js
var require_KnownArgumentNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/KnownArgumentNamesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.KnownArgumentNamesRule = KnownArgumentNamesRule;
    exports.KnownArgumentNamesOnDirectivesRule = KnownArgumentNamesOnDirectivesRule;
    var _didYouMean = _interopRequireDefault(require_didYouMean());
    var _suggestionList = _interopRequireDefault(require_suggestionList());
    var _GraphQLError = require_GraphQLError();
    var _kinds = require_kinds();
    var _directives = require_directives();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2] != null ? arguments[i2] : {};
        if (i2 % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function KnownArgumentNamesRule(context) {
      return _objectSpread(_objectSpread({}, KnownArgumentNamesOnDirectivesRule(context)), {}, {
        Argument: function Argument(argNode) {
          var argDef = context.getArgument();
          var fieldDef = context.getFieldDef();
          var parentType = context.getParentType();
          if (!argDef && fieldDef && parentType) {
            var argName = argNode.name.value;
            var knownArgsNames = fieldDef.args.map(function(arg) {
              return arg.name;
            });
            var suggestions = (0, _suggestionList.default)(argName, knownArgsNames);
            context.reportError(new _GraphQLError.GraphQLError('Unknown argument "'.concat(argName, '" on field "').concat(parentType.name, ".").concat(fieldDef.name, '".') + (0, _didYouMean.default)(suggestions), argNode));
          }
        }
      });
    }
    function KnownArgumentNamesOnDirectivesRule(context) {
      var directiveArgs = /* @__PURE__ */ Object.create(null);
      var schema2 = context.getSchema();
      var definedDirectives = schema2 ? schema2.getDirectives() : _directives.specifiedDirectives;
      for (var _i2 = 0; _i2 < definedDirectives.length; _i2++) {
        var directive = definedDirectives[_i2];
        directiveArgs[directive.name] = directive.args.map(function(arg) {
          return arg.name;
        });
      }
      var astDefinitions = context.getDocument().definitions;
      for (var _i4 = 0; _i4 < astDefinitions.length; _i4++) {
        var def = astDefinitions[_i4];
        if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
          var _def$arguments;
          var argsNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];
          directiveArgs[def.name.value] = argsNodes.map(function(arg) {
            return arg.name.value;
          });
        }
      }
      return {
        Directive: function Directive(directiveNode) {
          var directiveName = directiveNode.name.value;
          var knownArgs = directiveArgs[directiveName];
          if (directiveNode.arguments && knownArgs) {
            for (var _i6 = 0, _directiveNode$argume2 = directiveNode.arguments; _i6 < _directiveNode$argume2.length; _i6++) {
              var argNode = _directiveNode$argume2[_i6];
              var argName = argNode.name.value;
              if (knownArgs.indexOf(argName) === -1) {
                var suggestions = (0, _suggestionList.default)(argName, knownArgs);
                context.reportError(new _GraphQLError.GraphQLError('Unknown argument "'.concat(argName, '" on directive "@').concat(directiveName, '".') + (0, _didYouMean.default)(suggestions), argNode));
              }
            }
          }
          return false;
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/UniqueArgumentNamesRule.js
var require_UniqueArgumentNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueArgumentNamesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UniqueArgumentNamesRule = UniqueArgumentNamesRule;
    var _GraphQLError = require_GraphQLError();
    function UniqueArgumentNamesRule(context) {
      var knownArgNames = /* @__PURE__ */ Object.create(null);
      return {
        Field: function Field() {
          knownArgNames = /* @__PURE__ */ Object.create(null);
        },
        Directive: function Directive() {
          knownArgNames = /* @__PURE__ */ Object.create(null);
        },
        Argument: function Argument(node) {
          var argName = node.name.value;
          if (knownArgNames[argName]) {
            context.reportError(new _GraphQLError.GraphQLError('There can be only one argument named "'.concat(argName, '".'), [knownArgNames[argName], node.name]));
          } else {
            knownArgNames[argName] = node.name;
          }
          return false;
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.js
var require_ValuesOfCorrectTypeRule = __commonJS({
  "node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ValuesOfCorrectTypeRule = ValuesOfCorrectTypeRule;
    var _objectValues3 = _interopRequireDefault(require_objectValues());
    var _keyMap = _interopRequireDefault(require_keyMap());
    var _inspect = _interopRequireDefault(require_inspect());
    var _didYouMean = _interopRequireDefault(require_didYouMean());
    var _suggestionList = _interopRequireDefault(require_suggestionList());
    var _GraphQLError = require_GraphQLError();
    var _printer = require_printer();
    var _definition = require_definition();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function ValuesOfCorrectTypeRule(context) {
      return {
        ListValue: function ListValue(node) {
          var type = (0, _definition.getNullableType)(context.getParentInputType());
          if (!(0, _definition.isListType)(type)) {
            isValidValueNode(context, node);
            return false;
          }
        },
        ObjectValue: function ObjectValue(node) {
          var type = (0, _definition.getNamedType)(context.getInputType());
          if (!(0, _definition.isInputObjectType)(type)) {
            isValidValueNode(context, node);
            return false;
          }
          var fieldNodeMap = (0, _keyMap.default)(node.fields, function(field) {
            return field.name.value;
          });
          for (var _i2 = 0, _objectValues2 = (0, _objectValues3.default)(type.getFields()); _i2 < _objectValues2.length; _i2++) {
            var fieldDef = _objectValues2[_i2];
            var fieldNode = fieldNodeMap[fieldDef.name];
            if (!fieldNode && (0, _definition.isRequiredInputField)(fieldDef)) {
              var typeStr = (0, _inspect.default)(fieldDef.type);
              context.reportError(new _GraphQLError.GraphQLError('Field "'.concat(type.name, ".").concat(fieldDef.name, '" of required type "').concat(typeStr, '" was not provided.'), node));
            }
          }
        },
        ObjectField: function ObjectField(node) {
          var parentType = (0, _definition.getNamedType)(context.getParentInputType());
          var fieldType = context.getInputType();
          if (!fieldType && (0, _definition.isInputObjectType)(parentType)) {
            var suggestions = (0, _suggestionList.default)(node.name.value, Object.keys(parentType.getFields()));
            context.reportError(new _GraphQLError.GraphQLError('Field "'.concat(node.name.value, '" is not defined by type "').concat(parentType.name, '".') + (0, _didYouMean.default)(suggestions), node));
          }
        },
        NullValue: function NullValue(node) {
          var type = context.getInputType();
          if ((0, _definition.isNonNullType)(type)) {
            context.reportError(new _GraphQLError.GraphQLError('Expected value of type "'.concat((0, _inspect.default)(type), '", found ').concat((0, _printer.print)(node), "."), node));
          }
        },
        EnumValue: function EnumValue(node) {
          return isValidValueNode(context, node);
        },
        IntValue: function IntValue(node) {
          return isValidValueNode(context, node);
        },
        FloatValue: function FloatValue(node) {
          return isValidValueNode(context, node);
        },
        StringValue: function StringValue(node) {
          return isValidValueNode(context, node);
        },
        BooleanValue: function BooleanValue(node) {
          return isValidValueNode(context, node);
        }
      };
    }
    function isValidValueNode(context, node) {
      var locationType = context.getInputType();
      if (!locationType) {
        return;
      }
      var type = (0, _definition.getNamedType)(locationType);
      if (!(0, _definition.isLeafType)(type)) {
        var typeStr = (0, _inspect.default)(locationType);
        context.reportError(new _GraphQLError.GraphQLError('Expected value of type "'.concat(typeStr, '", found ').concat((0, _printer.print)(node), "."), node));
        return;
      }
      try {
        var parseResult = type.parseLiteral(
          node,
          void 0
        );
        if (parseResult === void 0) {
          var _typeStr = (0, _inspect.default)(locationType);
          context.reportError(new _GraphQLError.GraphQLError('Expected value of type "'.concat(_typeStr, '", found ').concat((0, _printer.print)(node), "."), node));
        }
      } catch (error) {
        var _typeStr2 = (0, _inspect.default)(locationType);
        if (error instanceof _GraphQLError.GraphQLError) {
          context.reportError(error);
        } else {
          context.reportError(new _GraphQLError.GraphQLError('Expected value of type "'.concat(_typeStr2, '", found ').concat((0, _printer.print)(node), "; ") + error.message, node, void 0, void 0, void 0, error));
        }
      }
    }
  }
});

// node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.js
var require_ProvidedRequiredArgumentsRule = __commonJS({
  "node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProvidedRequiredArgumentsRule = ProvidedRequiredArgumentsRule;
    exports.ProvidedRequiredArgumentsOnDirectivesRule = ProvidedRequiredArgumentsOnDirectivesRule;
    var _inspect = _interopRequireDefault(require_inspect());
    var _keyMap = _interopRequireDefault(require_keyMap());
    var _GraphQLError = require_GraphQLError();
    var _kinds = require_kinds();
    var _printer = require_printer();
    var _directives = require_directives();
    var _definition = require_definition();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2] != null ? arguments[i2] : {};
        if (i2 % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function ProvidedRequiredArgumentsRule(context) {
      return _objectSpread(_objectSpread({}, ProvidedRequiredArgumentsOnDirectivesRule(context)), {}, {
        Field: {
          leave: function leave(fieldNode) {
            var _fieldNode$arguments;
            var fieldDef = context.getFieldDef();
            if (!fieldDef) {
              return false;
            }
            var argNodes = (_fieldNode$arguments = fieldNode.arguments) !== null && _fieldNode$arguments !== void 0 ? _fieldNode$arguments : [];
            var argNodeMap = (0, _keyMap.default)(argNodes, function(arg) {
              return arg.name.value;
            });
            for (var _i2 = 0, _fieldDef$args2 = fieldDef.args; _i2 < _fieldDef$args2.length; _i2++) {
              var argDef = _fieldDef$args2[_i2];
              var argNode = argNodeMap[argDef.name];
              if (!argNode && (0, _definition.isRequiredArgument)(argDef)) {
                var argTypeStr = (0, _inspect.default)(argDef.type);
                context.reportError(new _GraphQLError.GraphQLError('Field "'.concat(fieldDef.name, '" argument "').concat(argDef.name, '" of type "').concat(argTypeStr, '" is required, but it was not provided.'), fieldNode));
              }
            }
          }
        }
      });
    }
    function ProvidedRequiredArgumentsOnDirectivesRule(context) {
      var requiredArgsMap = /* @__PURE__ */ Object.create(null);
      var schema2 = context.getSchema();
      var definedDirectives = schema2 ? schema2.getDirectives() : _directives.specifiedDirectives;
      for (var _i4 = 0; _i4 < definedDirectives.length; _i4++) {
        var directive = definedDirectives[_i4];
        requiredArgsMap[directive.name] = (0, _keyMap.default)(directive.args.filter(_definition.isRequiredArgument), function(arg) {
          return arg.name;
        });
      }
      var astDefinitions = context.getDocument().definitions;
      for (var _i6 = 0; _i6 < astDefinitions.length; _i6++) {
        var def = astDefinitions[_i6];
        if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
          var _def$arguments;
          var argNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];
          requiredArgsMap[def.name.value] = (0, _keyMap.default)(argNodes.filter(isRequiredArgumentNode), function(arg) {
            return arg.name.value;
          });
        }
      }
      return {
        Directive: {
          leave: function leave(directiveNode) {
            var directiveName = directiveNode.name.value;
            var requiredArgs = requiredArgsMap[directiveName];
            if (requiredArgs) {
              var _directiveNode$argume;
              var _argNodes = (_directiveNode$argume = directiveNode.arguments) !== null && _directiveNode$argume !== void 0 ? _directiveNode$argume : [];
              var argNodeMap = (0, _keyMap.default)(_argNodes, function(arg) {
                return arg.name.value;
              });
              for (var _i8 = 0, _Object$keys2 = Object.keys(requiredArgs); _i8 < _Object$keys2.length; _i8++) {
                var argName = _Object$keys2[_i8];
                if (!argNodeMap[argName]) {
                  var argType = requiredArgs[argName].type;
                  var argTypeStr = (0, _definition.isType)(argType) ? (0, _inspect.default)(argType) : (0, _printer.print)(argType);
                  context.reportError(new _GraphQLError.GraphQLError('Directive "@'.concat(directiveName, '" argument "').concat(argName, '" of type "').concat(argTypeStr, '" is required, but it was not provided.'), directiveNode));
                }
              }
            }
          }
        }
      };
    }
    function isRequiredArgumentNode(arg) {
      return arg.type.kind === _kinds.Kind.NON_NULL_TYPE && arg.defaultValue == null;
    }
  }
});

// node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.js
var require_VariablesInAllowedPositionRule = __commonJS({
  "node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.VariablesInAllowedPositionRule = VariablesInAllowedPositionRule;
    var _inspect = _interopRequireDefault(require_inspect());
    var _GraphQLError = require_GraphQLError();
    var _kinds = require_kinds();
    var _definition = require_definition();
    var _typeFromAST = require_typeFromAST();
    var _typeComparators = require_typeComparators();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function VariablesInAllowedPositionRule(context) {
      var varDefMap = /* @__PURE__ */ Object.create(null);
      return {
        OperationDefinition: {
          enter: function enter() {
            varDefMap = /* @__PURE__ */ Object.create(null);
          },
          leave: function leave(operation) {
            var usages = context.getRecursiveVariableUsages(operation);
            for (var _i2 = 0; _i2 < usages.length; _i2++) {
              var _ref2 = usages[_i2];
              var node = _ref2.node;
              var type = _ref2.type;
              var defaultValue = _ref2.defaultValue;
              var varName = node.name.value;
              var varDef = varDefMap[varName];
              if (varDef && type) {
                var schema2 = context.getSchema();
                var varType = (0, _typeFromAST.typeFromAST)(schema2, varDef.type);
                if (varType && !allowedVariableUsage(schema2, varType, varDef.defaultValue, type, defaultValue)) {
                  var varTypeStr = (0, _inspect.default)(varType);
                  var typeStr = (0, _inspect.default)(type);
                  context.reportError(new _GraphQLError.GraphQLError('Variable "$'.concat(varName, '" of type "').concat(varTypeStr, '" used in position expecting type "').concat(typeStr, '".'), [varDef, node]));
                }
              }
            }
          }
        },
        VariableDefinition: function VariableDefinition(node) {
          varDefMap[node.variable.name.value] = node;
        }
      };
    }
    function allowedVariableUsage(schema2, varType, varDefaultValue, locationType, locationDefaultValue) {
      if ((0, _definition.isNonNullType)(locationType) && !(0, _definition.isNonNullType)(varType)) {
        var hasNonNullVariableDefaultValue = varDefaultValue != null && varDefaultValue.kind !== _kinds.Kind.NULL;
        var hasLocationDefaultValue = locationDefaultValue !== void 0;
        if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {
          return false;
        }
        var nullableLocationType = locationType.ofType;
        return (0, _typeComparators.isTypeSubTypeOf)(schema2, varType, nullableLocationType);
      }
      return (0, _typeComparators.isTypeSubTypeOf)(schema2, varType, locationType);
    }
  }
});

// node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.js
var require_OverlappingFieldsCanBeMergedRule = __commonJS({
  "node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.OverlappingFieldsCanBeMergedRule = OverlappingFieldsCanBeMergedRule;
    var _find = _interopRequireDefault(require_find());
    var _objectEntries3 = _interopRequireDefault(require_objectEntries());
    var _inspect = _interopRequireDefault(require_inspect());
    var _GraphQLError = require_GraphQLError();
    var _kinds = require_kinds();
    var _printer = require_printer();
    var _definition = require_definition();
    var _typeFromAST = require_typeFromAST();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function reasonMessage(reason) {
      if (Array.isArray(reason)) {
        return reason.map(function(_ref) {
          var responseName = _ref[0], subReason = _ref[1];
          return 'subfields "'.concat(responseName, '" conflict because ') + reasonMessage(subReason);
        }).join(" and ");
      }
      return reason;
    }
    function OverlappingFieldsCanBeMergedRule(context) {
      var comparedFragmentPairs = new PairSet();
      var cachedFieldsAndFragmentNames = /* @__PURE__ */ new Map();
      return {
        SelectionSet: function SelectionSet(selectionSet) {
          var conflicts = findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, context.getParentType(), selectionSet);
          for (var _i2 = 0; _i2 < conflicts.length; _i2++) {
            var _ref3 = conflicts[_i2];
            var _ref2$ = _ref3[0];
            var responseName = _ref2$[0];
            var reason = _ref2$[1];
            var fields1 = _ref3[1];
            var fields2 = _ref3[2];
            var reasonMsg = reasonMessage(reason);
            context.reportError(new _GraphQLError.GraphQLError('Fields "'.concat(responseName, '" conflict because ').concat(reasonMsg, ". Use different aliases on the fields to fetch both if this was intentional."), fields1.concat(fields2)));
          }
        }
      };
    }
    function findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentType, selectionSet) {
      var conflicts = [];
      var _getFieldsAndFragment = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet), fieldMap = _getFieldsAndFragment[0], fragmentNames = _getFieldsAndFragment[1];
      collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap);
      if (fragmentNames.length !== 0) {
        for (var i2 = 0; i2 < fragmentNames.length; i2++) {
          collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fieldMap, fragmentNames[i2]);
          for (var j = i2 + 1; j < fragmentNames.length; j++) {
            collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fragmentNames[i2], fragmentNames[j]);
          }
        }
      }
      return conflicts;
    }
    function collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentName) {
      var fragment = context.getFragment(fragmentName);
      if (!fragment) {
        return;
      }
      var _getReferencedFieldsA = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment), fieldMap2 = _getReferencedFieldsA[0], fragmentNames2 = _getReferencedFieldsA[1];
      if (fieldMap === fieldMap2) {
        return;
      }
      collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fieldMap2);
      for (var i2 = 0; i2 < fragmentNames2.length; i2++) {
        collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentNames2[i2]);
      }
    }
    function collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2) {
      if (fragmentName1 === fragmentName2) {
        return;
      }
      if (comparedFragmentPairs.has(fragmentName1, fragmentName2, areMutuallyExclusive)) {
        return;
      }
      comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);
      var fragment1 = context.getFragment(fragmentName1);
      var fragment2 = context.getFragment(fragmentName2);
      if (!fragment1 || !fragment2) {
        return;
      }
      var _getReferencedFieldsA2 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment1), fieldMap1 = _getReferencedFieldsA2[0], fragmentNames1 = _getReferencedFieldsA2[1];
      var _getReferencedFieldsA3 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment2), fieldMap2 = _getReferencedFieldsA3[0], fragmentNames2 = _getReferencedFieldsA3[1];
      collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2);
      for (var j = 0; j < fragmentNames2.length; j++) {
        collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentNames2[j]);
      }
      for (var i2 = 0; i2 < fragmentNames1.length; i2++) {
        collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[i2], fragmentName2);
      }
    }
    function findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {
      var conflicts = [];
      var _getFieldsAndFragment2 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType1, selectionSet1), fieldMap1 = _getFieldsAndFragment2[0], fragmentNames1 = _getFieldsAndFragment2[1];
      var _getFieldsAndFragment3 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType2, selectionSet2), fieldMap2 = _getFieldsAndFragment3[0], fragmentNames2 = _getFieldsAndFragment3[1];
      collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2);
      if (fragmentNames2.length !== 0) {
        for (var j = 0; j < fragmentNames2.length; j++) {
          collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fragmentNames2[j]);
        }
      }
      if (fragmentNames1.length !== 0) {
        for (var i2 = 0; i2 < fragmentNames1.length; i2++) {
          collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap2, fragmentNames1[i2]);
        }
      }
      for (var _i3 = 0; _i3 < fragmentNames1.length; _i3++) {
        for (var _j = 0; _j < fragmentNames2.length; _j++) {
          collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[_i3], fragmentNames2[_j]);
        }
      }
      return conflicts;
    }
    function collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap) {
      for (var _i5 = 0, _objectEntries2 = (0, _objectEntries3.default)(fieldMap); _i5 < _objectEntries2.length; _i5++) {
        var _ref5 = _objectEntries2[_i5];
        var responseName = _ref5[0];
        var fields = _ref5[1];
        if (fields.length > 1) {
          for (var i2 = 0; i2 < fields.length; i2++) {
            for (var j = i2 + 1; j < fields.length; j++) {
              var conflict = findConflict(
                context,
                cachedFieldsAndFragmentNames,
                comparedFragmentPairs,
                false,
                responseName,
                fields[i2],
                fields[j]
              );
              if (conflict) {
                conflicts.push(conflict);
              }
            }
          }
        }
      }
    }
    function collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {
      for (var _i7 = 0, _Object$keys2 = Object.keys(fieldMap1); _i7 < _Object$keys2.length; _i7++) {
        var responseName = _Object$keys2[_i7];
        var fields2 = fieldMap2[responseName];
        if (fields2) {
          var fields1 = fieldMap1[responseName];
          for (var i2 = 0; i2 < fields1.length; i2++) {
            for (var j = 0; j < fields2.length; j++) {
              var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, fields1[i2], fields2[j]);
              if (conflict) {
                conflicts.push(conflict);
              }
            }
          }
        }
      }
    }
    function findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {
      var parentType1 = field1[0], node1 = field1[1], def1 = field1[2];
      var parentType2 = field2[0], node2 = field2[1], def2 = field2[2];
      var areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && (0, _definition.isObjectType)(parentType1) && (0, _definition.isObjectType)(parentType2);
      if (!areMutuallyExclusive) {
        var _node1$arguments, _node2$arguments;
        var name1 = node1.name.value;
        var name2 = node2.name.value;
        if (name1 !== name2) {
          return [[responseName, '"'.concat(name1, '" and "').concat(name2, '" are different fields')], [node1], [node2]];
        }
        var args1 = (_node1$arguments = node1.arguments) !== null && _node1$arguments !== void 0 ? _node1$arguments : [];
        var args2 = (_node2$arguments = node2.arguments) !== null && _node2$arguments !== void 0 ? _node2$arguments : [];
        if (!sameArguments(args1, args2)) {
          return [[responseName, "they have differing arguments"], [node1], [node2]];
        }
      }
      var type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;
      var type2 = def2 === null || def2 === void 0 ? void 0 : def2.type;
      if (type1 && type2 && doTypesConflict(type1, type2)) {
        return [[responseName, 'they return conflicting types "'.concat((0, _inspect.default)(type1), '" and "').concat((0, _inspect.default)(type2), '"')], [node1], [node2]];
      }
      var selectionSet1 = node1.selectionSet;
      var selectionSet2 = node2.selectionSet;
      if (selectionSet1 && selectionSet2) {
        var conflicts = findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, (0, _definition.getNamedType)(type1), selectionSet1, (0, _definition.getNamedType)(type2), selectionSet2);
        return subfieldConflicts(conflicts, responseName, node1, node2);
      }
    }
    function sameArguments(arguments1, arguments2) {
      if (arguments1.length !== arguments2.length) {
        return false;
      }
      return arguments1.every(function(argument1) {
        var argument2 = (0, _find.default)(arguments2, function(argument) {
          return argument.name.value === argument1.name.value;
        });
        if (!argument2) {
          return false;
        }
        return sameValue(argument1.value, argument2.value);
      });
    }
    function sameValue(value1, value2) {
      return (0, _printer.print)(value1) === (0, _printer.print)(value2);
    }
    function doTypesConflict(type1, type2) {
      if ((0, _definition.isListType)(type1)) {
        return (0, _definition.isListType)(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;
      }
      if ((0, _definition.isListType)(type2)) {
        return true;
      }
      if ((0, _definition.isNonNullType)(type1)) {
        return (0, _definition.isNonNullType)(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;
      }
      if ((0, _definition.isNonNullType)(type2)) {
        return true;
      }
      if ((0, _definition.isLeafType)(type1) || (0, _definition.isLeafType)(type2)) {
        return type1 !== type2;
      }
      return false;
    }
    function getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {
      var cached = cachedFieldsAndFragmentNames.get(selectionSet);
      if (!cached) {
        var nodeAndDefs = /* @__PURE__ */ Object.create(null);
        var fragmentNames = /* @__PURE__ */ Object.create(null);
        _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames);
        cached = [nodeAndDefs, Object.keys(fragmentNames)];
        cachedFieldsAndFragmentNames.set(selectionSet, cached);
      }
      return cached;
    }
    function getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {
      var cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);
      if (cached) {
        return cached;
      }
      var fragmentType = (0, _typeFromAST.typeFromAST)(context.getSchema(), fragment.typeCondition);
      return getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragmentType, fragment.selectionSet);
    }
    function _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {
      for (var _i9 = 0, _selectionSet$selecti2 = selectionSet.selections; _i9 < _selectionSet$selecti2.length; _i9++) {
        var selection = _selectionSet$selecti2[_i9];
        switch (selection.kind) {
          case _kinds.Kind.FIELD: {
            var fieldName = selection.name.value;
            var fieldDef = void 0;
            if ((0, _definition.isObjectType)(parentType) || (0, _definition.isInterfaceType)(parentType)) {
              fieldDef = parentType.getFields()[fieldName];
            }
            var responseName = selection.alias ? selection.alias.value : fieldName;
            if (!nodeAndDefs[responseName]) {
              nodeAndDefs[responseName] = [];
            }
            nodeAndDefs[responseName].push([parentType, selection, fieldDef]);
            break;
          }
          case _kinds.Kind.FRAGMENT_SPREAD:
            fragmentNames[selection.name.value] = true;
            break;
          case _kinds.Kind.INLINE_FRAGMENT: {
            var typeCondition = selection.typeCondition;
            var inlineFragmentType = typeCondition ? (0, _typeFromAST.typeFromAST)(context.getSchema(), typeCondition) : parentType;
            _collectFieldsAndFragmentNames(context, inlineFragmentType, selection.selectionSet, nodeAndDefs, fragmentNames);
            break;
          }
        }
      }
    }
    function subfieldConflicts(conflicts, responseName, node1, node2) {
      if (conflicts.length > 0) {
        return [[responseName, conflicts.map(function(_ref6) {
          var reason = _ref6[0];
          return reason;
        })], conflicts.reduce(function(allFields, _ref7) {
          var fields1 = _ref7[1];
          return allFields.concat(fields1);
        }, [node1]), conflicts.reduce(function(allFields, _ref8) {
          var fields2 = _ref8[2];
          return allFields.concat(fields2);
        }, [node2])];
      }
    }
    var PairSet = /* @__PURE__ */ function() {
      function PairSet2() {
        this._data = /* @__PURE__ */ Object.create(null);
      }
      var _proto = PairSet2.prototype;
      _proto.has = function has(a, b, areMutuallyExclusive) {
        var first = this._data[a];
        var result = first && first[b];
        if (result === void 0) {
          return false;
        }
        if (areMutuallyExclusive === false) {
          return result === false;
        }
        return true;
      };
      _proto.add = function add(a, b, areMutuallyExclusive) {
        this._pairSetAdd(a, b, areMutuallyExclusive);
        this._pairSetAdd(b, a, areMutuallyExclusive);
      };
      _proto._pairSetAdd = function _pairSetAdd(a, b, areMutuallyExclusive) {
        var map = this._data[a];
        if (!map) {
          map = /* @__PURE__ */ Object.create(null);
          this._data[a] = map;
        }
        map[b] = areMutuallyExclusive;
      };
      return PairSet2;
    }();
  }
});

// node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.js
var require_UniqueInputFieldNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UniqueInputFieldNamesRule = UniqueInputFieldNamesRule;
    var _GraphQLError = require_GraphQLError();
    function UniqueInputFieldNamesRule(context) {
      var knownNameStack = [];
      var knownNames = /* @__PURE__ */ Object.create(null);
      return {
        ObjectValue: {
          enter: function enter() {
            knownNameStack.push(knownNames);
            knownNames = /* @__PURE__ */ Object.create(null);
          },
          leave: function leave() {
            knownNames = knownNameStack.pop();
          }
        },
        ObjectField: function ObjectField(node) {
          var fieldName = node.name.value;
          if (knownNames[fieldName]) {
            context.reportError(new _GraphQLError.GraphQLError('There can be only one input field named "'.concat(fieldName, '".'), [knownNames[fieldName], node.name]));
          } else {
            knownNames[fieldName] = node.name;
          }
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.js
var require_LoneSchemaDefinitionRule = __commonJS({
  "node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.LoneSchemaDefinitionRule = LoneSchemaDefinitionRule;
    var _GraphQLError = require_GraphQLError();
    function LoneSchemaDefinitionRule(context) {
      var _ref, _ref2, _oldSchema$astNode;
      var oldSchema = context.getSchema();
      var alreadyDefined = (_ref = (_ref2 = (_oldSchema$astNode = oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.astNode) !== null && _oldSchema$astNode !== void 0 ? _oldSchema$astNode : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getQueryType()) !== null && _ref2 !== void 0 ? _ref2 : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getMutationType()) !== null && _ref !== void 0 ? _ref : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getSubscriptionType();
      var schemaDefinitionsCount = 0;
      return {
        SchemaDefinition: function SchemaDefinition(node) {
          if (alreadyDefined) {
            context.reportError(new _GraphQLError.GraphQLError("Cannot define a new schema within a schema extension.", node));
            return;
          }
          if (schemaDefinitionsCount > 0) {
            context.reportError(new _GraphQLError.GraphQLError("Must provide only one schema definition.", node));
          }
          ++schemaDefinitionsCount;
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/UniqueOperationTypesRule.js
var require_UniqueOperationTypesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueOperationTypesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UniqueOperationTypesRule = UniqueOperationTypesRule;
    var _GraphQLError = require_GraphQLError();
    function UniqueOperationTypesRule(context) {
      var schema2 = context.getSchema();
      var definedOperationTypes = /* @__PURE__ */ Object.create(null);
      var existingOperationTypes = schema2 ? {
        query: schema2.getQueryType(),
        mutation: schema2.getMutationType(),
        subscription: schema2.getSubscriptionType()
      } : {};
      return {
        SchemaDefinition: checkOperationTypes,
        SchemaExtension: checkOperationTypes
      };
      function checkOperationTypes(node) {
        var _node$operationTypes;
        var operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];
        for (var _i2 = 0; _i2 < operationTypesNodes.length; _i2++) {
          var operationType = operationTypesNodes[_i2];
          var operation = operationType.operation;
          var alreadyDefinedOperationType = definedOperationTypes[operation];
          if (existingOperationTypes[operation]) {
            context.reportError(new _GraphQLError.GraphQLError("Type for ".concat(operation, " already defined in the schema. It cannot be redefined."), operationType));
          } else if (alreadyDefinedOperationType) {
            context.reportError(new _GraphQLError.GraphQLError("There can be only one ".concat(operation, " type in schema."), [alreadyDefinedOperationType, operationType]));
          } else {
            definedOperationTypes[operation] = operationType;
          }
        }
        return false;
      }
    }
  }
});

// node_modules/graphql/validation/rules/UniqueTypeNamesRule.js
var require_UniqueTypeNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueTypeNamesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UniqueTypeNamesRule = UniqueTypeNamesRule;
    var _GraphQLError = require_GraphQLError();
    function UniqueTypeNamesRule(context) {
      var knownTypeNames = /* @__PURE__ */ Object.create(null);
      var schema2 = context.getSchema();
      return {
        ScalarTypeDefinition: checkTypeName,
        ObjectTypeDefinition: checkTypeName,
        InterfaceTypeDefinition: checkTypeName,
        UnionTypeDefinition: checkTypeName,
        EnumTypeDefinition: checkTypeName,
        InputObjectTypeDefinition: checkTypeName
      };
      function checkTypeName(node) {
        var typeName = node.name.value;
        if (schema2 !== null && schema2 !== void 0 && schema2.getType(typeName)) {
          context.reportError(new _GraphQLError.GraphQLError('Type "'.concat(typeName, '" already exists in the schema. It cannot also be defined in this type definition.'), node.name));
          return;
        }
        if (knownTypeNames[typeName]) {
          context.reportError(new _GraphQLError.GraphQLError('There can be only one type named "'.concat(typeName, '".'), [knownTypeNames[typeName], node.name]));
        } else {
          knownTypeNames[typeName] = node.name;
        }
        return false;
      }
    }
  }
});

// node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.js
var require_UniqueEnumValueNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UniqueEnumValueNamesRule = UniqueEnumValueNamesRule;
    var _GraphQLError = require_GraphQLError();
    var _definition = require_definition();
    function UniqueEnumValueNamesRule(context) {
      var schema2 = context.getSchema();
      var existingTypeMap = schema2 ? schema2.getTypeMap() : /* @__PURE__ */ Object.create(null);
      var knownValueNames = /* @__PURE__ */ Object.create(null);
      return {
        EnumTypeDefinition: checkValueUniqueness,
        EnumTypeExtension: checkValueUniqueness
      };
      function checkValueUniqueness(node) {
        var _node$values;
        var typeName = node.name.value;
        if (!knownValueNames[typeName]) {
          knownValueNames[typeName] = /* @__PURE__ */ Object.create(null);
        }
        var valueNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];
        var valueNames = knownValueNames[typeName];
        for (var _i2 = 0; _i2 < valueNodes.length; _i2++) {
          var valueDef = valueNodes[_i2];
          var valueName = valueDef.name.value;
          var existingType = existingTypeMap[typeName];
          if ((0, _definition.isEnumType)(existingType) && existingType.getValue(valueName)) {
            context.reportError(new _GraphQLError.GraphQLError('Enum value "'.concat(typeName, ".").concat(valueName, '" already exists in the schema. It cannot also be defined in this type extension.'), valueDef.name));
          } else if (valueNames[valueName]) {
            context.reportError(new _GraphQLError.GraphQLError('Enum value "'.concat(typeName, ".").concat(valueName, '" can only be defined once.'), [valueNames[valueName], valueDef.name]));
          } else {
            valueNames[valueName] = valueDef.name;
          }
        }
        return false;
      }
    }
  }
});

// node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.js
var require_UniqueFieldDefinitionNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UniqueFieldDefinitionNamesRule = UniqueFieldDefinitionNamesRule;
    var _GraphQLError = require_GraphQLError();
    var _definition = require_definition();
    function UniqueFieldDefinitionNamesRule(context) {
      var schema2 = context.getSchema();
      var existingTypeMap = schema2 ? schema2.getTypeMap() : /* @__PURE__ */ Object.create(null);
      var knownFieldNames = /* @__PURE__ */ Object.create(null);
      return {
        InputObjectTypeDefinition: checkFieldUniqueness,
        InputObjectTypeExtension: checkFieldUniqueness,
        InterfaceTypeDefinition: checkFieldUniqueness,
        InterfaceTypeExtension: checkFieldUniqueness,
        ObjectTypeDefinition: checkFieldUniqueness,
        ObjectTypeExtension: checkFieldUniqueness
      };
      function checkFieldUniqueness(node) {
        var _node$fields;
        var typeName = node.name.value;
        if (!knownFieldNames[typeName]) {
          knownFieldNames[typeName] = /* @__PURE__ */ Object.create(null);
        }
        var fieldNodes = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];
        var fieldNames = knownFieldNames[typeName];
        for (var _i2 = 0; _i2 < fieldNodes.length; _i2++) {
          var fieldDef = fieldNodes[_i2];
          var fieldName = fieldDef.name.value;
          if (hasField(existingTypeMap[typeName], fieldName)) {
            context.reportError(new _GraphQLError.GraphQLError('Field "'.concat(typeName, ".").concat(fieldName, '" already exists in the schema. It cannot also be defined in this type extension.'), fieldDef.name));
          } else if (fieldNames[fieldName]) {
            context.reportError(new _GraphQLError.GraphQLError('Field "'.concat(typeName, ".").concat(fieldName, '" can only be defined once.'), [fieldNames[fieldName], fieldDef.name]));
          } else {
            fieldNames[fieldName] = fieldDef.name;
          }
        }
        return false;
      }
    }
    function hasField(type, fieldName) {
      if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type) || (0, _definition.isInputObjectType)(type)) {
        return type.getFields()[fieldName] != null;
      }
      return false;
    }
  }
});

// node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.js
var require_UniqueDirectiveNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UniqueDirectiveNamesRule = UniqueDirectiveNamesRule;
    var _GraphQLError = require_GraphQLError();
    function UniqueDirectiveNamesRule(context) {
      var knownDirectiveNames = /* @__PURE__ */ Object.create(null);
      var schema2 = context.getSchema();
      return {
        DirectiveDefinition: function DirectiveDefinition(node) {
          var directiveName = node.name.value;
          if (schema2 !== null && schema2 !== void 0 && schema2.getDirective(directiveName)) {
            context.reportError(new _GraphQLError.GraphQLError('Directive "@'.concat(directiveName, '" already exists in the schema. It cannot be redefined.'), node.name));
            return;
          }
          if (knownDirectiveNames[directiveName]) {
            context.reportError(new _GraphQLError.GraphQLError('There can be only one directive named "@'.concat(directiveName, '".'), [knownDirectiveNames[directiveName], node.name]));
          } else {
            knownDirectiveNames[directiveName] = node.name;
          }
          return false;
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.js
var require_PossibleTypeExtensionsRule = __commonJS({
  "node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PossibleTypeExtensionsRule = PossibleTypeExtensionsRule;
    var _inspect = _interopRequireDefault(require_inspect());
    var _invariant = _interopRequireDefault(require_invariant());
    var _didYouMean = _interopRequireDefault(require_didYouMean());
    var _suggestionList = _interopRequireDefault(require_suggestionList());
    var _GraphQLError = require_GraphQLError();
    var _kinds = require_kinds();
    var _predicates = require_predicates();
    var _definition = require_definition();
    var _defKindToExtKind;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function PossibleTypeExtensionsRule(context) {
      var schema2 = context.getSchema();
      var definedTypes = /* @__PURE__ */ Object.create(null);
      for (var _i2 = 0, _context$getDocument$2 = context.getDocument().definitions; _i2 < _context$getDocument$2.length; _i2++) {
        var def = _context$getDocument$2[_i2];
        if ((0, _predicates.isTypeDefinitionNode)(def)) {
          definedTypes[def.name.value] = def;
        }
      }
      return {
        ScalarTypeExtension: checkExtension,
        ObjectTypeExtension: checkExtension,
        InterfaceTypeExtension: checkExtension,
        UnionTypeExtension: checkExtension,
        EnumTypeExtension: checkExtension,
        InputObjectTypeExtension: checkExtension
      };
      function checkExtension(node) {
        var typeName = node.name.value;
        var defNode = definedTypes[typeName];
        var existingType = schema2 === null || schema2 === void 0 ? void 0 : schema2.getType(typeName);
        var expectedKind;
        if (defNode) {
          expectedKind = defKindToExtKind[defNode.kind];
        } else if (existingType) {
          expectedKind = typeToExtKind(existingType);
        }
        if (expectedKind) {
          if (expectedKind !== node.kind) {
            var kindStr = extensionKindToTypeName(node.kind);
            context.reportError(new _GraphQLError.GraphQLError("Cannot extend non-".concat(kindStr, ' type "').concat(typeName, '".'), defNode ? [defNode, node] : node));
          }
        } else {
          var allTypeNames = Object.keys(definedTypes);
          if (schema2) {
            allTypeNames = allTypeNames.concat(Object.keys(schema2.getTypeMap()));
          }
          var suggestedTypes = (0, _suggestionList.default)(typeName, allTypeNames);
          context.reportError(new _GraphQLError.GraphQLError('Cannot extend type "'.concat(typeName, '" because it is not defined.') + (0, _didYouMean.default)(suggestedTypes), node.name));
        }
      }
    }
    var defKindToExtKind = (_defKindToExtKind = {}, _defineProperty(_defKindToExtKind, _kinds.Kind.SCALAR_TYPE_DEFINITION, _kinds.Kind.SCALAR_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, _kinds.Kind.OBJECT_TYPE_DEFINITION, _kinds.Kind.OBJECT_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, _kinds.Kind.INTERFACE_TYPE_DEFINITION, _kinds.Kind.INTERFACE_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, _kinds.Kind.UNION_TYPE_DEFINITION, _kinds.Kind.UNION_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, _kinds.Kind.ENUM_TYPE_DEFINITION, _kinds.Kind.ENUM_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION, _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION), _defKindToExtKind);
    function typeToExtKind(type) {
      if ((0, _definition.isScalarType)(type)) {
        return _kinds.Kind.SCALAR_TYPE_EXTENSION;
      }
      if ((0, _definition.isObjectType)(type)) {
        return _kinds.Kind.OBJECT_TYPE_EXTENSION;
      }
      if ((0, _definition.isInterfaceType)(type)) {
        return _kinds.Kind.INTERFACE_TYPE_EXTENSION;
      }
      if ((0, _definition.isUnionType)(type)) {
        return _kinds.Kind.UNION_TYPE_EXTENSION;
      }
      if ((0, _definition.isEnumType)(type)) {
        return _kinds.Kind.ENUM_TYPE_EXTENSION;
      }
      if ((0, _definition.isInputObjectType)(type)) {
        return _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION;
      }
      (0, _invariant.default)(0, "Unexpected type: " + (0, _inspect.default)(type));
    }
    function extensionKindToTypeName(kind) {
      switch (kind) {
        case _kinds.Kind.SCALAR_TYPE_EXTENSION:
          return "scalar";
        case _kinds.Kind.OBJECT_TYPE_EXTENSION:
          return "object";
        case _kinds.Kind.INTERFACE_TYPE_EXTENSION:
          return "interface";
        case _kinds.Kind.UNION_TYPE_EXTENSION:
          return "union";
        case _kinds.Kind.ENUM_TYPE_EXTENSION:
          return "enum";
        case _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION:
          return "input object";
      }
      (0, _invariant.default)(0, "Unexpected kind: " + (0, _inspect.default)(kind));
    }
  }
});

// node_modules/graphql/validation/specifiedRules.js
var require_specifiedRules = __commonJS({
  "node_modules/graphql/validation/specifiedRules.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.specifiedSDLRules = exports.specifiedRules = void 0;
    var _ExecutableDefinitionsRule = require_ExecutableDefinitionsRule();
    var _UniqueOperationNamesRule = require_UniqueOperationNamesRule();
    var _LoneAnonymousOperationRule = require_LoneAnonymousOperationRule();
    var _SingleFieldSubscriptionsRule = require_SingleFieldSubscriptionsRule();
    var _KnownTypeNamesRule = require_KnownTypeNamesRule();
    var _FragmentsOnCompositeTypesRule = require_FragmentsOnCompositeTypesRule();
    var _VariablesAreInputTypesRule = require_VariablesAreInputTypesRule();
    var _ScalarLeafsRule = require_ScalarLeafsRule();
    var _FieldsOnCorrectTypeRule = require_FieldsOnCorrectTypeRule();
    var _UniqueFragmentNamesRule = require_UniqueFragmentNamesRule();
    var _KnownFragmentNamesRule = require_KnownFragmentNamesRule();
    var _NoUnusedFragmentsRule = require_NoUnusedFragmentsRule();
    var _PossibleFragmentSpreadsRule = require_PossibleFragmentSpreadsRule();
    var _NoFragmentCyclesRule = require_NoFragmentCyclesRule();
    var _UniqueVariableNamesRule = require_UniqueVariableNamesRule();
    var _NoUndefinedVariablesRule = require_NoUndefinedVariablesRule();
    var _NoUnusedVariablesRule = require_NoUnusedVariablesRule();
    var _KnownDirectivesRule = require_KnownDirectivesRule();
    var _UniqueDirectivesPerLocationRule = require_UniqueDirectivesPerLocationRule();
    var _KnownArgumentNamesRule = require_KnownArgumentNamesRule();
    var _UniqueArgumentNamesRule = require_UniqueArgumentNamesRule();
    var _ValuesOfCorrectTypeRule = require_ValuesOfCorrectTypeRule();
    var _ProvidedRequiredArgumentsRule = require_ProvidedRequiredArgumentsRule();
    var _VariablesInAllowedPositionRule = require_VariablesInAllowedPositionRule();
    var _OverlappingFieldsCanBeMergedRule = require_OverlappingFieldsCanBeMergedRule();
    var _UniqueInputFieldNamesRule = require_UniqueInputFieldNamesRule();
    var _LoneSchemaDefinitionRule = require_LoneSchemaDefinitionRule();
    var _UniqueOperationTypesRule = require_UniqueOperationTypesRule();
    var _UniqueTypeNamesRule = require_UniqueTypeNamesRule();
    var _UniqueEnumValueNamesRule = require_UniqueEnumValueNamesRule();
    var _UniqueFieldDefinitionNamesRule = require_UniqueFieldDefinitionNamesRule();
    var _UniqueDirectiveNamesRule = require_UniqueDirectiveNamesRule();
    var _PossibleTypeExtensionsRule = require_PossibleTypeExtensionsRule();
    var specifiedRules = Object.freeze([_ExecutableDefinitionsRule.ExecutableDefinitionsRule, _UniqueOperationNamesRule.UniqueOperationNamesRule, _LoneAnonymousOperationRule.LoneAnonymousOperationRule, _SingleFieldSubscriptionsRule.SingleFieldSubscriptionsRule, _KnownTypeNamesRule.KnownTypeNamesRule, _FragmentsOnCompositeTypesRule.FragmentsOnCompositeTypesRule, _VariablesAreInputTypesRule.VariablesAreInputTypesRule, _ScalarLeafsRule.ScalarLeafsRule, _FieldsOnCorrectTypeRule.FieldsOnCorrectTypeRule, _UniqueFragmentNamesRule.UniqueFragmentNamesRule, _KnownFragmentNamesRule.KnownFragmentNamesRule, _NoUnusedFragmentsRule.NoUnusedFragmentsRule, _PossibleFragmentSpreadsRule.PossibleFragmentSpreadsRule, _NoFragmentCyclesRule.NoFragmentCyclesRule, _UniqueVariableNamesRule.UniqueVariableNamesRule, _NoUndefinedVariablesRule.NoUndefinedVariablesRule, _NoUnusedVariablesRule.NoUnusedVariablesRule, _KnownDirectivesRule.KnownDirectivesRule, _UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule, _KnownArgumentNamesRule.KnownArgumentNamesRule, _UniqueArgumentNamesRule.UniqueArgumentNamesRule, _ValuesOfCorrectTypeRule.ValuesOfCorrectTypeRule, _ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsRule, _VariablesInAllowedPositionRule.VariablesInAllowedPositionRule, _OverlappingFieldsCanBeMergedRule.OverlappingFieldsCanBeMergedRule, _UniqueInputFieldNamesRule.UniqueInputFieldNamesRule]);
    exports.specifiedRules = specifiedRules;
    var specifiedSDLRules = Object.freeze([_LoneSchemaDefinitionRule.LoneSchemaDefinitionRule, _UniqueOperationTypesRule.UniqueOperationTypesRule, _UniqueTypeNamesRule.UniqueTypeNamesRule, _UniqueEnumValueNamesRule.UniqueEnumValueNamesRule, _UniqueFieldDefinitionNamesRule.UniqueFieldDefinitionNamesRule, _UniqueDirectiveNamesRule.UniqueDirectiveNamesRule, _KnownTypeNamesRule.KnownTypeNamesRule, _KnownDirectivesRule.KnownDirectivesRule, _UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule, _PossibleTypeExtensionsRule.PossibleTypeExtensionsRule, _KnownArgumentNamesRule.KnownArgumentNamesOnDirectivesRule, _UniqueArgumentNamesRule.UniqueArgumentNamesRule, _UniqueInputFieldNamesRule.UniqueInputFieldNamesRule, _ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsOnDirectivesRule]);
    exports.specifiedSDLRules = specifiedSDLRules;
  }
});

// node_modules/graphql/validation/ValidationContext.js
var require_ValidationContext = __commonJS({
  "node_modules/graphql/validation/ValidationContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ValidationContext = exports.SDLValidationContext = exports.ASTValidationContext = void 0;
    var _kinds = require_kinds();
    var _visitor = require_visitor();
    var _TypeInfo = require_TypeInfo();
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var ASTValidationContext = /* @__PURE__ */ function() {
      function ASTValidationContext2(ast, onError) {
        this._ast = ast;
        this._fragments = void 0;
        this._fragmentSpreads = /* @__PURE__ */ new Map();
        this._recursivelyReferencedFragments = /* @__PURE__ */ new Map();
        this._onError = onError;
      }
      var _proto = ASTValidationContext2.prototype;
      _proto.reportError = function reportError(error) {
        this._onError(error);
      };
      _proto.getDocument = function getDocument() {
        return this._ast;
      };
      _proto.getFragment = function getFragment(name) {
        var fragments = this._fragments;
        if (!fragments) {
          this._fragments = fragments = this.getDocument().definitions.reduce(function(frags, statement) {
            if (statement.kind === _kinds.Kind.FRAGMENT_DEFINITION) {
              frags[statement.name.value] = statement;
            }
            return frags;
          }, /* @__PURE__ */ Object.create(null));
        }
        return fragments[name];
      };
      _proto.getFragmentSpreads = function getFragmentSpreads(node) {
        var spreads = this._fragmentSpreads.get(node);
        if (!spreads) {
          spreads = [];
          var setsToVisit = [node];
          while (setsToVisit.length !== 0) {
            var set = setsToVisit.pop();
            for (var _i2 = 0, _set$selections2 = set.selections; _i2 < _set$selections2.length; _i2++) {
              var selection = _set$selections2[_i2];
              if (selection.kind === _kinds.Kind.FRAGMENT_SPREAD) {
                spreads.push(selection);
              } else if (selection.selectionSet) {
                setsToVisit.push(selection.selectionSet);
              }
            }
          }
          this._fragmentSpreads.set(node, spreads);
        }
        return spreads;
      };
      _proto.getRecursivelyReferencedFragments = function getRecursivelyReferencedFragments(operation) {
        var fragments = this._recursivelyReferencedFragments.get(operation);
        if (!fragments) {
          fragments = [];
          var collectedNames = /* @__PURE__ */ Object.create(null);
          var nodesToVisit = [operation.selectionSet];
          while (nodesToVisit.length !== 0) {
            var node = nodesToVisit.pop();
            for (var _i4 = 0, _this$getFragmentSpre2 = this.getFragmentSpreads(node); _i4 < _this$getFragmentSpre2.length; _i4++) {
              var spread = _this$getFragmentSpre2[_i4];
              var fragName = spread.name.value;
              if (collectedNames[fragName] !== true) {
                collectedNames[fragName] = true;
                var fragment = this.getFragment(fragName);
                if (fragment) {
                  fragments.push(fragment);
                  nodesToVisit.push(fragment.selectionSet);
                }
              }
            }
          }
          this._recursivelyReferencedFragments.set(operation, fragments);
        }
        return fragments;
      };
      return ASTValidationContext2;
    }();
    exports.ASTValidationContext = ASTValidationContext;
    var SDLValidationContext = /* @__PURE__ */ function(_ASTValidationContext) {
      _inheritsLoose(SDLValidationContext2, _ASTValidationContext);
      function SDLValidationContext2(ast, schema2, onError) {
        var _this;
        _this = _ASTValidationContext.call(this, ast, onError) || this;
        _this._schema = schema2;
        return _this;
      }
      var _proto2 = SDLValidationContext2.prototype;
      _proto2.getSchema = function getSchema() {
        return this._schema;
      };
      return SDLValidationContext2;
    }(ASTValidationContext);
    exports.SDLValidationContext = SDLValidationContext;
    var ValidationContext = /* @__PURE__ */ function(_ASTValidationContext2) {
      _inheritsLoose(ValidationContext2, _ASTValidationContext2);
      function ValidationContext2(schema2, ast, typeInfo, onError) {
        var _this2;
        _this2 = _ASTValidationContext2.call(this, ast, onError) || this;
        _this2._schema = schema2;
        _this2._typeInfo = typeInfo;
        _this2._variableUsages = /* @__PURE__ */ new Map();
        _this2._recursiveVariableUsages = /* @__PURE__ */ new Map();
        return _this2;
      }
      var _proto3 = ValidationContext2.prototype;
      _proto3.getSchema = function getSchema() {
        return this._schema;
      };
      _proto3.getVariableUsages = function getVariableUsages(node) {
        var usages = this._variableUsages.get(node);
        if (!usages) {
          var newUsages = [];
          var typeInfo = new _TypeInfo.TypeInfo(this._schema);
          (0, _visitor.visit)(node, (0, _TypeInfo.visitWithTypeInfo)(typeInfo, {
            VariableDefinition: function VariableDefinition() {
              return false;
            },
            Variable: function Variable(variable) {
              newUsages.push({
                node: variable,
                type: typeInfo.getInputType(),
                defaultValue: typeInfo.getDefaultValue()
              });
            }
          }));
          usages = newUsages;
          this._variableUsages.set(node, usages);
        }
        return usages;
      };
      _proto3.getRecursiveVariableUsages = function getRecursiveVariableUsages(operation) {
        var usages = this._recursiveVariableUsages.get(operation);
        if (!usages) {
          usages = this.getVariableUsages(operation);
          for (var _i6 = 0, _this$getRecursivelyR2 = this.getRecursivelyReferencedFragments(operation); _i6 < _this$getRecursivelyR2.length; _i6++) {
            var frag = _this$getRecursivelyR2[_i6];
            usages = usages.concat(this.getVariableUsages(frag));
          }
          this._recursiveVariableUsages.set(operation, usages);
        }
        return usages;
      };
      _proto3.getType = function getType() {
        return this._typeInfo.getType();
      };
      _proto3.getParentType = function getParentType() {
        return this._typeInfo.getParentType();
      };
      _proto3.getInputType = function getInputType() {
        return this._typeInfo.getInputType();
      };
      _proto3.getParentInputType = function getParentInputType() {
        return this._typeInfo.getParentInputType();
      };
      _proto3.getFieldDef = function getFieldDef() {
        return this._typeInfo.getFieldDef();
      };
      _proto3.getDirective = function getDirective() {
        return this._typeInfo.getDirective();
      };
      _proto3.getArgument = function getArgument() {
        return this._typeInfo.getArgument();
      };
      _proto3.getEnumValue = function getEnumValue() {
        return this._typeInfo.getEnumValue();
      };
      return ValidationContext2;
    }(ASTValidationContext);
    exports.ValidationContext = ValidationContext;
  }
});

// node_modules/graphql/validation/validate.js
var require_validate2 = __commonJS({
  "node_modules/graphql/validation/validate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.validate = validate;
    exports.validateSDL = validateSDL;
    exports.assertValidSDL = assertValidSDL;
    exports.assertValidSDLExtension = assertValidSDLExtension;
    var _devAssert = _interopRequireDefault(require_devAssert());
    var _GraphQLError = require_GraphQLError();
    var _visitor = require_visitor();
    var _validate = require_validate();
    var _TypeInfo = require_TypeInfo();
    var _specifiedRules = require_specifiedRules();
    var _ValidationContext = require_ValidationContext();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function validate(schema2, documentAST) {
      var rules = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : _specifiedRules.specifiedRules;
      var typeInfo = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : new _TypeInfo.TypeInfo(schema2);
      var options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {
        maxErrors: void 0
      };
      documentAST || (0, _devAssert.default)(0, "Must provide document.");
      (0, _validate.assertValidSchema)(schema2);
      var abortObj = Object.freeze({});
      var errors = [];
      var context = new _ValidationContext.ValidationContext(schema2, documentAST, typeInfo, function(error) {
        if (options.maxErrors != null && errors.length >= options.maxErrors) {
          errors.push(new _GraphQLError.GraphQLError("Too many validation errors, error limit reached. Validation aborted."));
          throw abortObj;
        }
        errors.push(error);
      });
      var visitor = (0, _visitor.visitInParallel)(rules.map(function(rule) {
        return rule(context);
      }));
      try {
        (0, _visitor.visit)(documentAST, (0, _TypeInfo.visitWithTypeInfo)(typeInfo, visitor));
      } catch (e2) {
        if (e2 !== abortObj) {
          throw e2;
        }
      }
      return errors;
    }
    function validateSDL(documentAST, schemaToExtend) {
      var rules = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : _specifiedRules.specifiedSDLRules;
      var errors = [];
      var context = new _ValidationContext.SDLValidationContext(documentAST, schemaToExtend, function(error) {
        errors.push(error);
      });
      var visitors = rules.map(function(rule) {
        return rule(context);
      });
      (0, _visitor.visit)(documentAST, (0, _visitor.visitInParallel)(visitors));
      return errors;
    }
    function assertValidSDL(documentAST) {
      var errors = validateSDL(documentAST);
      if (errors.length !== 0) {
        throw new Error(errors.map(function(error) {
          return error.message;
        }).join("\n\n"));
      }
    }
    function assertValidSDLExtension(documentAST, schema2) {
      var errors = validateSDL(documentAST, schema2);
      if (errors.length !== 0) {
        throw new Error(errors.map(function(error) {
          return error.message;
        }).join("\n\n"));
      }
    }
  }
});

// node_modules/graphql/jsutils/memoize3.js
var require_memoize3 = __commonJS({
  "node_modules/graphql/jsutils/memoize3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = memoize3;
    function memoize3(fn) {
      var cache0;
      return function memoized(a1, a2, a3) {
        if (!cache0) {
          cache0 = /* @__PURE__ */ new WeakMap();
        }
        var cache1 = cache0.get(a1);
        var cache2;
        if (cache1) {
          cache2 = cache1.get(a2);
          if (cache2) {
            var cachedValue = cache2.get(a3);
            if (cachedValue !== void 0) {
              return cachedValue;
            }
          }
        } else {
          cache1 = /* @__PURE__ */ new WeakMap();
          cache0.set(a1, cache1);
        }
        if (!cache2) {
          cache2 = /* @__PURE__ */ new WeakMap();
          cache1.set(a2, cache2);
        }
        var newValue = fn(a1, a2, a3);
        cache2.set(a3, newValue);
        return newValue;
      };
    }
  }
});

// node_modules/graphql/jsutils/promiseReduce.js
var require_promiseReduce = __commonJS({
  "node_modules/graphql/jsutils/promiseReduce.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = promiseReduce;
    var _isPromise = _interopRequireDefault(require_isPromise());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function promiseReduce(values, callback, initialValue) {
      return values.reduce(function(previous, value) {
        return (0, _isPromise.default)(previous) ? previous.then(function(resolved) {
          return callback(resolved, value);
        }) : callback(previous, value);
      }, initialValue);
    }
  }
});

// node_modules/graphql/jsutils/promiseForObject.js
var require_promiseForObject = __commonJS({
  "node_modules/graphql/jsutils/promiseForObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = promiseForObject;
    function promiseForObject(object) {
      var keys = Object.keys(object);
      var valuesAndPromises = keys.map(function(name) {
        return object[name];
      });
      return Promise.all(valuesAndPromises).then(function(values) {
        return values.reduce(function(resolvedObject, value, i2) {
          resolvedObject[keys[i2]] = value;
          return resolvedObject;
        }, /* @__PURE__ */ Object.create(null));
      });
    }
  }
});

// node_modules/graphql/jsutils/Path.js
var require_Path = __commonJS({
  "node_modules/graphql/jsutils/Path.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.addPath = addPath;
    exports.pathToArray = pathToArray;
    function addPath(prev, key, typename) {
      return {
        prev,
        key,
        typename
      };
    }
    function pathToArray(path) {
      var flattened = [];
      var curr = path;
      while (curr) {
        flattened.push(curr.key);
        curr = curr.prev;
      }
      return flattened.reverse();
    }
  }
});

// node_modules/graphql/utilities/getOperationRootType.js
var require_getOperationRootType = __commonJS({
  "node_modules/graphql/utilities/getOperationRootType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getOperationRootType = getOperationRootType;
    var _GraphQLError = require_GraphQLError();
    function getOperationRootType(schema2, operation) {
      if (operation.operation === "query") {
        var queryType = schema2.getQueryType();
        if (!queryType) {
          throw new _GraphQLError.GraphQLError("Schema does not define the required query root type.", operation);
        }
        return queryType;
      }
      if (operation.operation === "mutation") {
        var mutationType = schema2.getMutationType();
        if (!mutationType) {
          throw new _GraphQLError.GraphQLError("Schema is not configured for mutations.", operation);
        }
        return mutationType;
      }
      if (operation.operation === "subscription") {
        var subscriptionType = schema2.getSubscriptionType();
        if (!subscriptionType) {
          throw new _GraphQLError.GraphQLError("Schema is not configured for subscriptions.", operation);
        }
        return subscriptionType;
      }
      throw new _GraphQLError.GraphQLError("Can only have query, mutation and subscription operations.", operation);
    }
  }
});

// node_modules/graphql/jsutils/printPathArray.js
var require_printPathArray = __commonJS({
  "node_modules/graphql/jsutils/printPathArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = printPathArray;
    function printPathArray(path) {
      return path.map(function(key) {
        return typeof key === "number" ? "[" + key.toString() + "]" : "." + key;
      }).join("");
    }
  }
});

// node_modules/graphql/utilities/valueFromAST.js
var require_valueFromAST = __commonJS({
  "node_modules/graphql/utilities/valueFromAST.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.valueFromAST = valueFromAST;
    var _objectValues3 = _interopRequireDefault(require_objectValues());
    var _keyMap = _interopRequireDefault(require_keyMap());
    var _inspect = _interopRequireDefault(require_inspect());
    var _invariant = _interopRequireDefault(require_invariant());
    var _kinds = require_kinds();
    var _definition = require_definition();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function valueFromAST(valueNode, type, variables) {
      if (!valueNode) {
        return;
      }
      if (valueNode.kind === _kinds.Kind.VARIABLE) {
        var variableName = valueNode.name.value;
        if (variables == null || variables[variableName] === void 0) {
          return;
        }
        var variableValue = variables[variableName];
        if (variableValue === null && (0, _definition.isNonNullType)(type)) {
          return;
        }
        return variableValue;
      }
      if ((0, _definition.isNonNullType)(type)) {
        if (valueNode.kind === _kinds.Kind.NULL) {
          return;
        }
        return valueFromAST(valueNode, type.ofType, variables);
      }
      if (valueNode.kind === _kinds.Kind.NULL) {
        return null;
      }
      if ((0, _definition.isListType)(type)) {
        var itemType = type.ofType;
        if (valueNode.kind === _kinds.Kind.LIST) {
          var coercedValues = [];
          for (var _i2 = 0, _valueNode$values2 = valueNode.values; _i2 < _valueNode$values2.length; _i2++) {
            var itemNode = _valueNode$values2[_i2];
            if (isMissingVariable(itemNode, variables)) {
              if ((0, _definition.isNonNullType)(itemType)) {
                return;
              }
              coercedValues.push(null);
            } else {
              var itemValue = valueFromAST(itemNode, itemType, variables);
              if (itemValue === void 0) {
                return;
              }
              coercedValues.push(itemValue);
            }
          }
          return coercedValues;
        }
        var coercedValue = valueFromAST(valueNode, itemType, variables);
        if (coercedValue === void 0) {
          return;
        }
        return [coercedValue];
      }
      if ((0, _definition.isInputObjectType)(type)) {
        if (valueNode.kind !== _kinds.Kind.OBJECT) {
          return;
        }
        var coercedObj = /* @__PURE__ */ Object.create(null);
        var fieldNodes = (0, _keyMap.default)(valueNode.fields, function(field2) {
          return field2.name.value;
        });
        for (var _i4 = 0, _objectValues2 = (0, _objectValues3.default)(type.getFields()); _i4 < _objectValues2.length; _i4++) {
          var field = _objectValues2[_i4];
          var fieldNode = fieldNodes[field.name];
          if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {
            if (field.defaultValue !== void 0) {
              coercedObj[field.name] = field.defaultValue;
            } else if ((0, _definition.isNonNullType)(field.type)) {
              return;
            }
            continue;
          }
          var fieldValue = valueFromAST(fieldNode.value, field.type, variables);
          if (fieldValue === void 0) {
            return;
          }
          coercedObj[field.name] = fieldValue;
        }
        return coercedObj;
      }
      if ((0, _definition.isLeafType)(type)) {
        var result;
        try {
          result = type.parseLiteral(valueNode, variables);
        } catch (_error) {
          return;
        }
        if (result === void 0) {
          return;
        }
        return result;
      }
      (0, _invariant.default)(0, "Unexpected input type: " + (0, _inspect.default)(type));
    }
    function isMissingVariable(valueNode, variables) {
      return valueNode.kind === _kinds.Kind.VARIABLE && (variables == null || variables[valueNode.name.value] === void 0);
    }
  }
});

// node_modules/graphql/utilities/coerceInputValue.js
var require_coerceInputValue = __commonJS({
  "node_modules/graphql/utilities/coerceInputValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.coerceInputValue = coerceInputValue;
    var _objectValues3 = _interopRequireDefault(require_objectValues());
    var _inspect = _interopRequireDefault(require_inspect());
    var _invariant = _interopRequireDefault(require_invariant());
    var _didYouMean = _interopRequireDefault(require_didYouMean());
    var _isObjectLike = _interopRequireDefault(require_isObjectLike());
    var _safeArrayFrom = _interopRequireDefault(require_safeArrayFrom());
    var _suggestionList = _interopRequireDefault(require_suggestionList());
    var _printPathArray = _interopRequireDefault(require_printPathArray());
    var _Path = require_Path();
    var _GraphQLError = require_GraphQLError();
    var _definition = require_definition();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function coerceInputValue(inputValue, type) {
      var onError = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultOnError;
      return coerceInputValueImpl(inputValue, type, onError);
    }
    function defaultOnError(path, invalidValue, error) {
      var errorPrefix = "Invalid value " + (0, _inspect.default)(invalidValue);
      if (path.length > 0) {
        errorPrefix += ' at "value'.concat((0, _printPathArray.default)(path), '"');
      }
      error.message = errorPrefix + ": " + error.message;
      throw error;
    }
    function coerceInputValueImpl(inputValue, type, onError, path) {
      if ((0, _definition.isNonNullType)(type)) {
        if (inputValue != null) {
          return coerceInputValueImpl(inputValue, type.ofType, onError, path);
        }
        onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError('Expected non-nullable type "'.concat((0, _inspect.default)(type), '" not to be null.')));
        return;
      }
      if (inputValue == null) {
        return null;
      }
      if ((0, _definition.isListType)(type)) {
        var itemType = type.ofType;
        var coercedList = (0, _safeArrayFrom.default)(inputValue, function(itemValue, index) {
          var itemPath = (0, _Path.addPath)(path, index, void 0);
          return coerceInputValueImpl(itemValue, itemType, onError, itemPath);
        });
        if (coercedList != null) {
          return coercedList;
        }
        return [coerceInputValueImpl(inputValue, itemType, onError, path)];
      }
      if ((0, _definition.isInputObjectType)(type)) {
        if (!(0, _isObjectLike.default)(inputValue)) {
          onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError('Expected type "'.concat(type.name, '" to be an object.')));
          return;
        }
        var coercedValue = {};
        var fieldDefs = type.getFields();
        for (var _i2 = 0, _objectValues2 = (0, _objectValues3.default)(fieldDefs); _i2 < _objectValues2.length; _i2++) {
          var field = _objectValues2[_i2];
          var fieldValue = inputValue[field.name];
          if (fieldValue === void 0) {
            if (field.defaultValue !== void 0) {
              coercedValue[field.name] = field.defaultValue;
            } else if ((0, _definition.isNonNullType)(field.type)) {
              var typeStr = (0, _inspect.default)(field.type);
              onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError('Field "'.concat(field.name, '" of required type "').concat(typeStr, '" was not provided.')));
            }
            continue;
          }
          coercedValue[field.name] = coerceInputValueImpl(fieldValue, field.type, onError, (0, _Path.addPath)(path, field.name, type.name));
        }
        for (var _i4 = 0, _Object$keys2 = Object.keys(inputValue); _i4 < _Object$keys2.length; _i4++) {
          var fieldName = _Object$keys2[_i4];
          if (!fieldDefs[fieldName]) {
            var suggestions = (0, _suggestionList.default)(fieldName, Object.keys(type.getFields()));
            onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError('Field "'.concat(fieldName, '" is not defined by type "').concat(type.name, '".') + (0, _didYouMean.default)(suggestions)));
          }
        }
        return coercedValue;
      }
      if ((0, _definition.isLeafType)(type)) {
        var parseResult;
        try {
          parseResult = type.parseValue(inputValue);
        } catch (error) {
          if (error instanceof _GraphQLError.GraphQLError) {
            onError((0, _Path.pathToArray)(path), inputValue, error);
          } else {
            onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError('Expected type "'.concat(type.name, '". ') + error.message, void 0, void 0, void 0, void 0, error));
          }
          return;
        }
        if (parseResult === void 0) {
          onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError('Expected type "'.concat(type.name, '".')));
        }
        return parseResult;
      }
      (0, _invariant.default)(0, "Unexpected input type: " + (0, _inspect.default)(type));
    }
  }
});

// node_modules/graphql/execution/values.js
var require_values = __commonJS({
  "node_modules/graphql/execution/values.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getVariableValues = getVariableValues;
    exports.getArgumentValues = getArgumentValues;
    exports.getDirectiveValues = getDirectiveValues;
    var _find = _interopRequireDefault(require_find());
    var _keyMap = _interopRequireDefault(require_keyMap());
    var _inspect = _interopRequireDefault(require_inspect());
    var _printPathArray = _interopRequireDefault(require_printPathArray());
    var _GraphQLError = require_GraphQLError();
    var _kinds = require_kinds();
    var _printer = require_printer();
    var _definition = require_definition();
    var _typeFromAST = require_typeFromAST();
    var _valueFromAST = require_valueFromAST();
    var _coerceInputValue = require_coerceInputValue();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function getVariableValues(schema2, varDefNodes, inputs, options) {
      var errors = [];
      var maxErrors = options === null || options === void 0 ? void 0 : options.maxErrors;
      try {
        var coerced = coerceVariableValues(schema2, varDefNodes, inputs, function(error) {
          if (maxErrors != null && errors.length >= maxErrors) {
            throw new _GraphQLError.GraphQLError("Too many errors processing variables, error limit reached. Execution aborted.");
          }
          errors.push(error);
        });
        if (errors.length === 0) {
          return {
            coerced
          };
        }
      } catch (error) {
        errors.push(error);
      }
      return {
        errors
      };
    }
    function coerceVariableValues(schema2, varDefNodes, inputs, onError) {
      var coercedValues = {};
      var _loop = function _loop2(_i22) {
        var varDefNode = varDefNodes[_i22];
        var varName = varDefNode.variable.name.value;
        var varType = (0, _typeFromAST.typeFromAST)(schema2, varDefNode.type);
        if (!(0, _definition.isInputType)(varType)) {
          var varTypeStr = (0, _printer.print)(varDefNode.type);
          onError(new _GraphQLError.GraphQLError('Variable "$'.concat(varName, '" expected value of type "').concat(varTypeStr, '" which cannot be used as an input type.'), varDefNode.type));
          return "continue";
        }
        if (!hasOwnProperty(inputs, varName)) {
          if (varDefNode.defaultValue) {
            coercedValues[varName] = (0, _valueFromAST.valueFromAST)(varDefNode.defaultValue, varType);
          } else if ((0, _definition.isNonNullType)(varType)) {
            var _varTypeStr = (0, _inspect.default)(varType);
            onError(new _GraphQLError.GraphQLError('Variable "$'.concat(varName, '" of required type "').concat(_varTypeStr, '" was not provided.'), varDefNode));
          }
          return "continue";
        }
        var value = inputs[varName];
        if (value === null && (0, _definition.isNonNullType)(varType)) {
          var _varTypeStr2 = (0, _inspect.default)(varType);
          onError(new _GraphQLError.GraphQLError('Variable "$'.concat(varName, '" of non-null type "').concat(_varTypeStr2, '" must not be null.'), varDefNode));
          return "continue";
        }
        coercedValues[varName] = (0, _coerceInputValue.coerceInputValue)(value, varType, function(path, invalidValue, error) {
          var prefix = 'Variable "$'.concat(varName, '" got invalid value ') + (0, _inspect.default)(invalidValue);
          if (path.length > 0) {
            prefix += ' at "'.concat(varName).concat((0, _printPathArray.default)(path), '"');
          }
          onError(new _GraphQLError.GraphQLError(prefix + "; " + error.message, varDefNode, void 0, void 0, void 0, error.originalError));
        });
      };
      for (var _i2 = 0; _i2 < varDefNodes.length; _i2++) {
        var _ret = _loop(_i2);
        if (_ret === "continue")
          continue;
      }
      return coercedValues;
    }
    function getArgumentValues(def, node, variableValues) {
      var _node$arguments;
      var coercedValues = {};
      var argumentNodes = (_node$arguments = node.arguments) !== null && _node$arguments !== void 0 ? _node$arguments : [];
      var argNodeMap = (0, _keyMap.default)(argumentNodes, function(arg) {
        return arg.name.value;
      });
      for (var _i4 = 0, _def$args2 = def.args; _i4 < _def$args2.length; _i4++) {
        var argDef = _def$args2[_i4];
        var name = argDef.name;
        var argType = argDef.type;
        var argumentNode = argNodeMap[name];
        if (!argumentNode) {
          if (argDef.defaultValue !== void 0) {
            coercedValues[name] = argDef.defaultValue;
          } else if ((0, _definition.isNonNullType)(argType)) {
            throw new _GraphQLError.GraphQLError('Argument "'.concat(name, '" of required type "').concat((0, _inspect.default)(argType), '" ') + "was not provided.", node);
          }
          continue;
        }
        var valueNode = argumentNode.value;
        var isNull = valueNode.kind === _kinds.Kind.NULL;
        if (valueNode.kind === _kinds.Kind.VARIABLE) {
          var variableName = valueNode.name.value;
          if (variableValues == null || !hasOwnProperty(variableValues, variableName)) {
            if (argDef.defaultValue !== void 0) {
              coercedValues[name] = argDef.defaultValue;
            } else if ((0, _definition.isNonNullType)(argType)) {
              throw new _GraphQLError.GraphQLError('Argument "'.concat(name, '" of required type "').concat((0, _inspect.default)(argType), '" ') + 'was provided the variable "$'.concat(variableName, '" which was not provided a runtime value.'), valueNode);
            }
            continue;
          }
          isNull = variableValues[variableName] == null;
        }
        if (isNull && (0, _definition.isNonNullType)(argType)) {
          throw new _GraphQLError.GraphQLError('Argument "'.concat(name, '" of non-null type "').concat((0, _inspect.default)(argType), '" ') + "must not be null.", valueNode);
        }
        var coercedValue = (0, _valueFromAST.valueFromAST)(valueNode, argType, variableValues);
        if (coercedValue === void 0) {
          throw new _GraphQLError.GraphQLError('Argument "'.concat(name, '" has invalid value ').concat((0, _printer.print)(valueNode), "."), valueNode);
        }
        coercedValues[name] = coercedValue;
      }
      return coercedValues;
    }
    function getDirectiveValues(directiveDef, node, variableValues) {
      var directiveNode = node.directives && (0, _find.default)(node.directives, function(directive) {
        return directive.name.value === directiveDef.name;
      });
      if (directiveNode) {
        return getArgumentValues(directiveDef, directiveNode, variableValues);
      }
    }
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
  }
});

// node_modules/graphql/execution/execute.js
var require_execute = __commonJS({
  "node_modules/graphql/execution/execute.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.execute = execute;
    exports.executeSync = executeSync;
    exports.assertValidExecutionArguments = assertValidExecutionArguments;
    exports.buildExecutionContext = buildExecutionContext;
    exports.collectFields = collectFields;
    exports.buildResolveInfo = buildResolveInfo;
    exports.getFieldDef = getFieldDef;
    exports.defaultFieldResolver = exports.defaultTypeResolver = void 0;
    var _inspect = _interopRequireDefault(require_inspect());
    var _memoize = _interopRequireDefault(require_memoize3());
    var _invariant = _interopRequireDefault(require_invariant());
    var _devAssert = _interopRequireDefault(require_devAssert());
    var _isPromise = _interopRequireDefault(require_isPromise());
    var _isObjectLike = _interopRequireDefault(require_isObjectLike());
    var _safeArrayFrom = _interopRequireDefault(require_safeArrayFrom());
    var _promiseReduce = _interopRequireDefault(require_promiseReduce());
    var _promiseForObject = _interopRequireDefault(require_promiseForObject());
    var _Path = require_Path();
    var _GraphQLError = require_GraphQLError();
    var _locatedError = require_locatedError();
    var _kinds = require_kinds();
    var _validate = require_validate();
    var _introspection = require_introspection();
    var _directives = require_directives();
    var _definition = require_definition();
    var _typeFromAST = require_typeFromAST();
    var _getOperationRootType = require_getOperationRootType();
    var _values = require_values();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function execute(argsOrSchema, document2, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {
      return arguments.length === 1 ? executeImpl(argsOrSchema) : executeImpl({
        schema: argsOrSchema,
        document: document2,
        rootValue,
        contextValue,
        variableValues,
        operationName,
        fieldResolver,
        typeResolver
      });
    }
    function executeSync(args) {
      var result = executeImpl(args);
      if ((0, _isPromise.default)(result)) {
        throw new Error("GraphQL execution failed to complete synchronously.");
      }
      return result;
    }
    function executeImpl(args) {
      var schema2 = args.schema, document2 = args.document, rootValue = args.rootValue, contextValue = args.contextValue, variableValues = args.variableValues, operationName = args.operationName, fieldResolver = args.fieldResolver, typeResolver = args.typeResolver;
      assertValidExecutionArguments(schema2, document2, variableValues);
      var exeContext = buildExecutionContext(schema2, document2, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver);
      if (Array.isArray(exeContext)) {
        return {
          errors: exeContext
        };
      }
      var data = executeOperation(exeContext, exeContext.operation, rootValue);
      return buildResponse(exeContext, data);
    }
    function buildResponse(exeContext, data) {
      if ((0, _isPromise.default)(data)) {
        return data.then(function(resolved) {
          return buildResponse(exeContext, resolved);
        });
      }
      return exeContext.errors.length === 0 ? {
        data
      } : {
        errors: exeContext.errors,
        data
      };
    }
    function assertValidExecutionArguments(schema2, document2, rawVariableValues) {
      document2 || (0, _devAssert.default)(0, "Must provide document.");
      (0, _validate.assertValidSchema)(schema2);
      rawVariableValues == null || (0, _isObjectLike.default)(rawVariableValues) || (0, _devAssert.default)(0, "Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.");
    }
    function buildExecutionContext(schema2, document2, rootValue, contextValue, rawVariableValues, operationName, fieldResolver, typeResolver) {
      var _definition$name, _operation$variableDe;
      var operation;
      var fragments = /* @__PURE__ */ Object.create(null);
      for (var _i2 = 0, _document$definitions2 = document2.definitions; _i2 < _document$definitions2.length; _i2++) {
        var definition = _document$definitions2[_i2];
        switch (definition.kind) {
          case _kinds.Kind.OPERATION_DEFINITION:
            if (operationName == null) {
              if (operation !== void 0) {
                return [new _GraphQLError.GraphQLError("Must provide operation name if query contains multiple operations.")];
              }
              operation = definition;
            } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName) {
              operation = definition;
            }
            break;
          case _kinds.Kind.FRAGMENT_DEFINITION:
            fragments[definition.name.value] = definition;
            break;
        }
      }
      if (!operation) {
        if (operationName != null) {
          return [new _GraphQLError.GraphQLError('Unknown operation named "'.concat(operationName, '".'))];
        }
        return [new _GraphQLError.GraphQLError("Must provide an operation.")];
      }
      var variableDefinitions = (_operation$variableDe = operation.variableDefinitions) !== null && _operation$variableDe !== void 0 ? _operation$variableDe : [];
      var coercedVariableValues = (0, _values.getVariableValues)(schema2, variableDefinitions, rawVariableValues !== null && rawVariableValues !== void 0 ? rawVariableValues : {}, {
        maxErrors: 50
      });
      if (coercedVariableValues.errors) {
        return coercedVariableValues.errors;
      }
      return {
        schema: schema2,
        fragments,
        rootValue,
        contextValue,
        operation,
        variableValues: coercedVariableValues.coerced,
        fieldResolver: fieldResolver !== null && fieldResolver !== void 0 ? fieldResolver : defaultFieldResolver,
        typeResolver: typeResolver !== null && typeResolver !== void 0 ? typeResolver : defaultTypeResolver,
        errors: []
      };
    }
    function executeOperation(exeContext, operation, rootValue) {
      var type = (0, _getOperationRootType.getOperationRootType)(exeContext.schema, operation);
      var fields = collectFields(exeContext, type, operation.selectionSet, /* @__PURE__ */ Object.create(null), /* @__PURE__ */ Object.create(null));
      var path = void 0;
      try {
        var result = operation.operation === "mutation" ? executeFieldsSerially(exeContext, type, rootValue, path, fields) : executeFields(exeContext, type, rootValue, path, fields);
        if ((0, _isPromise.default)(result)) {
          return result.then(void 0, function(error) {
            exeContext.errors.push(error);
            return Promise.resolve(null);
          });
        }
        return result;
      } catch (error) {
        exeContext.errors.push(error);
        return null;
      }
    }
    function executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {
      return (0, _promiseReduce.default)(Object.keys(fields), function(results, responseName) {
        var fieldNodes = fields[responseName];
        var fieldPath = (0, _Path.addPath)(path, responseName, parentType.name);
        var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);
        if (result === void 0) {
          return results;
        }
        if ((0, _isPromise.default)(result)) {
          return result.then(function(resolvedResult) {
            results[responseName] = resolvedResult;
            return results;
          });
        }
        results[responseName] = result;
        return results;
      }, /* @__PURE__ */ Object.create(null));
    }
    function executeFields(exeContext, parentType, sourceValue, path, fields) {
      var results = /* @__PURE__ */ Object.create(null);
      var containsPromise = false;
      for (var _i4 = 0, _Object$keys2 = Object.keys(fields); _i4 < _Object$keys2.length; _i4++) {
        var responseName = _Object$keys2[_i4];
        var fieldNodes = fields[responseName];
        var fieldPath = (0, _Path.addPath)(path, responseName, parentType.name);
        var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);
        if (result !== void 0) {
          results[responseName] = result;
          if ((0, _isPromise.default)(result)) {
            containsPromise = true;
          }
        }
      }
      if (!containsPromise) {
        return results;
      }
      return (0, _promiseForObject.default)(results);
    }
    function collectFields(exeContext, runtimeType, selectionSet, fields, visitedFragmentNames) {
      for (var _i6 = 0, _selectionSet$selecti2 = selectionSet.selections; _i6 < _selectionSet$selecti2.length; _i6++) {
        var selection = _selectionSet$selecti2[_i6];
        switch (selection.kind) {
          case _kinds.Kind.FIELD: {
            if (!shouldIncludeNode(exeContext, selection)) {
              continue;
            }
            var name = getFieldEntryKey(selection);
            if (!fields[name]) {
              fields[name] = [];
            }
            fields[name].push(selection);
            break;
          }
          case _kinds.Kind.INLINE_FRAGMENT: {
            if (!shouldIncludeNode(exeContext, selection) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) {
              continue;
            }
            collectFields(exeContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames);
            break;
          }
          case _kinds.Kind.FRAGMENT_SPREAD: {
            var fragName = selection.name.value;
            if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection)) {
              continue;
            }
            visitedFragmentNames[fragName] = true;
            var fragment = exeContext.fragments[fragName];
            if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) {
              continue;
            }
            collectFields(exeContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);
            break;
          }
        }
      }
      return fields;
    }
    function shouldIncludeNode(exeContext, node) {
      var skip = (0, _values.getDirectiveValues)(_directives.GraphQLSkipDirective, node, exeContext.variableValues);
      if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {
        return false;
      }
      var include = (0, _values.getDirectiveValues)(_directives.GraphQLIncludeDirective, node, exeContext.variableValues);
      if ((include === null || include === void 0 ? void 0 : include.if) === false) {
        return false;
      }
      return true;
    }
    function doesFragmentConditionMatch(exeContext, fragment, type) {
      var typeConditionNode = fragment.typeCondition;
      if (!typeConditionNode) {
        return true;
      }
      var conditionalType = (0, _typeFromAST.typeFromAST)(exeContext.schema, typeConditionNode);
      if (conditionalType === type) {
        return true;
      }
      if ((0, _definition.isAbstractType)(conditionalType)) {
        return exeContext.schema.isSubType(conditionalType, type);
      }
      return false;
    }
    function getFieldEntryKey(node) {
      return node.alias ? node.alias.value : node.name.value;
    }
    function resolveField(exeContext, parentType, source, fieldNodes, path) {
      var _fieldDef$resolve;
      var fieldNode = fieldNodes[0];
      var fieldName = fieldNode.name.value;
      var fieldDef = getFieldDef(exeContext.schema, parentType, fieldName);
      if (!fieldDef) {
        return;
      }
      var returnType = fieldDef.type;
      var resolveFn = (_fieldDef$resolve = fieldDef.resolve) !== null && _fieldDef$resolve !== void 0 ? _fieldDef$resolve : exeContext.fieldResolver;
      var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path);
      try {
        var args = (0, _values.getArgumentValues)(fieldDef, fieldNodes[0], exeContext.variableValues);
        var _contextValue = exeContext.contextValue;
        var result = resolveFn(source, args, _contextValue, info);
        var completed;
        if ((0, _isPromise.default)(result)) {
          completed = result.then(function(resolved) {
            return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);
          });
        } else {
          completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);
        }
        if ((0, _isPromise.default)(completed)) {
          return completed.then(void 0, function(rawError) {
            var error2 = (0, _locatedError.locatedError)(rawError, fieldNodes, (0, _Path.pathToArray)(path));
            return handleFieldError(error2, returnType, exeContext);
          });
        }
        return completed;
      } catch (rawError) {
        var error = (0, _locatedError.locatedError)(rawError, fieldNodes, (0, _Path.pathToArray)(path));
        return handleFieldError(error, returnType, exeContext);
      }
    }
    function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {
      return {
        fieldName: fieldDef.name,
        fieldNodes,
        returnType: fieldDef.type,
        parentType,
        path,
        schema: exeContext.schema,
        fragments: exeContext.fragments,
        rootValue: exeContext.rootValue,
        operation: exeContext.operation,
        variableValues: exeContext.variableValues
      };
    }
    function handleFieldError(error, returnType, exeContext) {
      if ((0, _definition.isNonNullType)(returnType)) {
        throw error;
      }
      exeContext.errors.push(error);
      return null;
    }
    function completeValue(exeContext, returnType, fieldNodes, info, path, result) {
      if (result instanceof Error) {
        throw result;
      }
      if ((0, _definition.isNonNullType)(returnType)) {
        var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);
        if (completed === null) {
          throw new Error("Cannot return null for non-nullable field ".concat(info.parentType.name, ".").concat(info.fieldName, "."));
        }
        return completed;
      }
      if (result == null) {
        return null;
      }
      if ((0, _definition.isListType)(returnType)) {
        return completeListValue(exeContext, returnType, fieldNodes, info, path, result);
      }
      if ((0, _definition.isLeafType)(returnType)) {
        return completeLeafValue(returnType, result);
      }
      if ((0, _definition.isAbstractType)(returnType)) {
        return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);
      }
      if ((0, _definition.isObjectType)(returnType)) {
        return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);
      }
      (0, _invariant.default)(0, "Cannot complete value of unexpected output type: " + (0, _inspect.default)(returnType));
    }
    function completeListValue(exeContext, returnType, fieldNodes, info, path, result) {
      var itemType = returnType.ofType;
      var containsPromise = false;
      var completedResults = (0, _safeArrayFrom.default)(result, function(item, index) {
        var itemPath = (0, _Path.addPath)(path, index, void 0);
        try {
          var completedItem;
          if ((0, _isPromise.default)(item)) {
            completedItem = item.then(function(resolved) {
              return completeValue(exeContext, itemType, fieldNodes, info, itemPath, resolved);
            });
          } else {
            completedItem = completeValue(exeContext, itemType, fieldNodes, info, itemPath, item);
          }
          if ((0, _isPromise.default)(completedItem)) {
            containsPromise = true;
            return completedItem.then(void 0, function(rawError) {
              var error2 = (0, _locatedError.locatedError)(rawError, fieldNodes, (0, _Path.pathToArray)(itemPath));
              return handleFieldError(error2, itemType, exeContext);
            });
          }
          return completedItem;
        } catch (rawError) {
          var error = (0, _locatedError.locatedError)(rawError, fieldNodes, (0, _Path.pathToArray)(itemPath));
          return handleFieldError(error, itemType, exeContext);
        }
      });
      if (completedResults == null) {
        throw new _GraphQLError.GraphQLError('Expected Iterable, but did not find one for field "'.concat(info.parentType.name, ".").concat(info.fieldName, '".'));
      }
      return containsPromise ? Promise.all(completedResults) : completedResults;
    }
    function completeLeafValue(returnType, result) {
      var serializedResult = returnType.serialize(result);
      if (serializedResult === void 0) {
        throw new Error('Expected a value of type "'.concat((0, _inspect.default)(returnType), '" but ') + "received: ".concat((0, _inspect.default)(result)));
      }
      return serializedResult;
    }
    function completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {
      var _returnType$resolveTy;
      var resolveTypeFn = (_returnType$resolveTy = returnType.resolveType) !== null && _returnType$resolveTy !== void 0 ? _returnType$resolveTy : exeContext.typeResolver;
      var contextValue = exeContext.contextValue;
      var runtimeType = resolveTypeFn(result, contextValue, info, returnType);
      if ((0, _isPromise.default)(runtimeType)) {
        return runtimeType.then(function(resolvedRuntimeType) {
          return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);
        });
      }
      return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);
    }
    function ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result) {
      if (runtimeTypeOrName == null) {
        throw new _GraphQLError.GraphQLError('Abstract type "'.concat(returnType.name, '" must resolve to an Object type at runtime for field "').concat(info.parentType.name, ".").concat(info.fieldName, '". Either the "').concat(returnType.name, '" type should provide a "resolveType" function or each possible type should provide an "isTypeOf" function.'), fieldNodes);
      }
      var runtimeTypeName = (0, _definition.isNamedType)(runtimeTypeOrName) ? runtimeTypeOrName.name : runtimeTypeOrName;
      if (typeof runtimeTypeName !== "string") {
        throw new _GraphQLError.GraphQLError('Abstract type "'.concat(returnType.name, '" must resolve to an Object type at runtime for field "').concat(info.parentType.name, ".").concat(info.fieldName, '" with ') + "value ".concat((0, _inspect.default)(result), ', received "').concat((0, _inspect.default)(runtimeTypeOrName), '".'));
      }
      var runtimeType = exeContext.schema.getType(runtimeTypeName);
      if (runtimeType == null) {
        throw new _GraphQLError.GraphQLError('Abstract type "'.concat(returnType.name, '" was resolve to a type "').concat(runtimeTypeName, '" that does not exist inside schema.'), fieldNodes);
      }
      if (!(0, _definition.isObjectType)(runtimeType)) {
        throw new _GraphQLError.GraphQLError('Abstract type "'.concat(returnType.name, '" was resolve to a non-object type "').concat(runtimeTypeName, '".'), fieldNodes);
      }
      if (!exeContext.schema.isSubType(returnType, runtimeType)) {
        throw new _GraphQLError.GraphQLError('Runtime Object type "'.concat(runtimeType.name, '" is not a possible type for "').concat(returnType.name, '".'), fieldNodes);
      }
      return runtimeType;
    }
    function completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {
      if (returnType.isTypeOf) {
        var isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);
        if ((0, _isPromise.default)(isTypeOf)) {
          return isTypeOf.then(function(resolvedIsTypeOf) {
            if (!resolvedIsTypeOf) {
              throw invalidReturnTypeError(returnType, result, fieldNodes);
            }
            return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);
          });
        }
        if (!isTypeOf) {
          throw invalidReturnTypeError(returnType, result, fieldNodes);
        }
      }
      return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);
    }
    function invalidReturnTypeError(returnType, result, fieldNodes) {
      return new _GraphQLError.GraphQLError('Expected value of type "'.concat(returnType.name, '" but got: ').concat((0, _inspect.default)(result), "."), fieldNodes);
    }
    function collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result) {
      var subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes);
      return executeFields(exeContext, returnType, result, path, subFieldNodes);
    }
    var collectSubfields = (0, _memoize.default)(_collectSubfields);
    function _collectSubfields(exeContext, returnType, fieldNodes) {
      var subFieldNodes = /* @__PURE__ */ Object.create(null);
      var visitedFragmentNames = /* @__PURE__ */ Object.create(null);
      for (var _i8 = 0; _i8 < fieldNodes.length; _i8++) {
        var node = fieldNodes[_i8];
        if (node.selectionSet) {
          subFieldNodes = collectFields(exeContext, returnType, node.selectionSet, subFieldNodes, visitedFragmentNames);
        }
      }
      return subFieldNodes;
    }
    var defaultTypeResolver = function defaultTypeResolver2(value, contextValue, info, abstractType) {
      if ((0, _isObjectLike.default)(value) && typeof value.__typename === "string") {
        return value.__typename;
      }
      var possibleTypes = info.schema.getPossibleTypes(abstractType);
      var promisedIsTypeOfResults = [];
      for (var i2 = 0; i2 < possibleTypes.length; i2++) {
        var type = possibleTypes[i2];
        if (type.isTypeOf) {
          var isTypeOfResult = type.isTypeOf(value, contextValue, info);
          if ((0, _isPromise.default)(isTypeOfResult)) {
            promisedIsTypeOfResults[i2] = isTypeOfResult;
          } else if (isTypeOfResult) {
            return type.name;
          }
        }
      }
      if (promisedIsTypeOfResults.length) {
        return Promise.all(promisedIsTypeOfResults).then(function(isTypeOfResults) {
          for (var _i9 = 0; _i9 < isTypeOfResults.length; _i9++) {
            if (isTypeOfResults[_i9]) {
              return possibleTypes[_i9].name;
            }
          }
        });
      }
    };
    exports.defaultTypeResolver = defaultTypeResolver;
    var defaultFieldResolver = function defaultFieldResolver2(source, args, contextValue, info) {
      if ((0, _isObjectLike.default)(source) || typeof source === "function") {
        var property = source[info.fieldName];
        if (typeof property === "function") {
          return source[info.fieldName](args, contextValue, info);
        }
        return property;
      }
    };
    exports.defaultFieldResolver = defaultFieldResolver;
    function getFieldDef(schema2, parentType, fieldName) {
      if (fieldName === _introspection.SchemaMetaFieldDef.name && schema2.getQueryType() === parentType) {
        return _introspection.SchemaMetaFieldDef;
      } else if (fieldName === _introspection.TypeMetaFieldDef.name && schema2.getQueryType() === parentType) {
        return _introspection.TypeMetaFieldDef;
      } else if (fieldName === _introspection.TypeNameMetaFieldDef.name) {
        return _introspection.TypeNameMetaFieldDef;
      }
      return parentType.getFields()[fieldName];
    }
  }
});

// node_modules/graphql/graphql.js
var require_graphql = __commonJS({
  "node_modules/graphql/graphql.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.graphql = graphql;
    exports.graphqlSync = graphqlSync;
    var _isPromise = _interopRequireDefault(require_isPromise());
    var _parser = require_parser();
    var _validate = require_validate2();
    var _validate2 = require_validate();
    var _execute = require_execute();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function graphql(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {
      var _arguments = arguments;
      return new Promise(function(resolve) {
        return resolve(
          _arguments.length === 1 ? graphqlImpl(argsOrSchema) : graphqlImpl({
            schema: argsOrSchema,
            source,
            rootValue,
            contextValue,
            variableValues,
            operationName,
            fieldResolver,
            typeResolver
          })
        );
      });
    }
    function graphqlSync(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {
      var result = arguments.length === 1 ? graphqlImpl(argsOrSchema) : graphqlImpl({
        schema: argsOrSchema,
        source,
        rootValue,
        contextValue,
        variableValues,
        operationName,
        fieldResolver,
        typeResolver
      });
      if ((0, _isPromise.default)(result)) {
        throw new Error("GraphQL execution failed to complete synchronously.");
      }
      return result;
    }
    function graphqlImpl(args) {
      var schema2 = args.schema, source = args.source, rootValue = args.rootValue, contextValue = args.contextValue, variableValues = args.variableValues, operationName = args.operationName, fieldResolver = args.fieldResolver, typeResolver = args.typeResolver;
      var schemaValidationErrors = (0, _validate2.validateSchema)(schema2);
      if (schemaValidationErrors.length > 0) {
        return {
          errors: schemaValidationErrors
        };
      }
      var document2;
      try {
        document2 = (0, _parser.parse)(source);
      } catch (syntaxError) {
        return {
          errors: [syntaxError]
        };
      }
      var validationErrors = (0, _validate.validate)(schema2, document2);
      if (validationErrors.length > 0) {
        return {
          errors: validationErrors
        };
      }
      return (0, _execute.execute)({
        schema: schema2,
        document: document2,
        rootValue,
        contextValue,
        variableValues,
        operationName,
        fieldResolver,
        typeResolver
      });
    }
  }
});

// node_modules/graphql/type/index.js
var require_type = __commonJS({
  "node_modules/graphql/type/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "isSchema", {
      enumerable: true,
      get: function get() {
        return _schema.isSchema;
      }
    });
    Object.defineProperty(exports, "assertSchema", {
      enumerable: true,
      get: function get() {
        return _schema.assertSchema;
      }
    });
    Object.defineProperty(exports, "GraphQLSchema", {
      enumerable: true,
      get: function get() {
        return _schema.GraphQLSchema;
      }
    });
    Object.defineProperty(exports, "isType", {
      enumerable: true,
      get: function get() {
        return _definition.isType;
      }
    });
    Object.defineProperty(exports, "isScalarType", {
      enumerable: true,
      get: function get() {
        return _definition.isScalarType;
      }
    });
    Object.defineProperty(exports, "isObjectType", {
      enumerable: true,
      get: function get() {
        return _definition.isObjectType;
      }
    });
    Object.defineProperty(exports, "isInterfaceType", {
      enumerable: true,
      get: function get() {
        return _definition.isInterfaceType;
      }
    });
    Object.defineProperty(exports, "isUnionType", {
      enumerable: true,
      get: function get() {
        return _definition.isUnionType;
      }
    });
    Object.defineProperty(exports, "isEnumType", {
      enumerable: true,
      get: function get() {
        return _definition.isEnumType;
      }
    });
    Object.defineProperty(exports, "isInputObjectType", {
      enumerable: true,
      get: function get() {
        return _definition.isInputObjectType;
      }
    });
    Object.defineProperty(exports, "isListType", {
      enumerable: true,
      get: function get() {
        return _definition.isListType;
      }
    });
    Object.defineProperty(exports, "isNonNullType", {
      enumerable: true,
      get: function get() {
        return _definition.isNonNullType;
      }
    });
    Object.defineProperty(exports, "isInputType", {
      enumerable: true,
      get: function get() {
        return _definition.isInputType;
      }
    });
    Object.defineProperty(exports, "isOutputType", {
      enumerable: true,
      get: function get() {
        return _definition.isOutputType;
      }
    });
    Object.defineProperty(exports, "isLeafType", {
      enumerable: true,
      get: function get() {
        return _definition.isLeafType;
      }
    });
    Object.defineProperty(exports, "isCompositeType", {
      enumerable: true,
      get: function get() {
        return _definition.isCompositeType;
      }
    });
    Object.defineProperty(exports, "isAbstractType", {
      enumerable: true,
      get: function get() {
        return _definition.isAbstractType;
      }
    });
    Object.defineProperty(exports, "isWrappingType", {
      enumerable: true,
      get: function get() {
        return _definition.isWrappingType;
      }
    });
    Object.defineProperty(exports, "isNullableType", {
      enumerable: true,
      get: function get() {
        return _definition.isNullableType;
      }
    });
    Object.defineProperty(exports, "isNamedType", {
      enumerable: true,
      get: function get() {
        return _definition.isNamedType;
      }
    });
    Object.defineProperty(exports, "isRequiredArgument", {
      enumerable: true,
      get: function get() {
        return _definition.isRequiredArgument;
      }
    });
    Object.defineProperty(exports, "isRequiredInputField", {
      enumerable: true,
      get: function get() {
        return _definition.isRequiredInputField;
      }
    });
    Object.defineProperty(exports, "assertType", {
      enumerable: true,
      get: function get() {
        return _definition.assertType;
      }
    });
    Object.defineProperty(exports, "assertScalarType", {
      enumerable: true,
      get: function get() {
        return _definition.assertScalarType;
      }
    });
    Object.defineProperty(exports, "assertObjectType", {
      enumerable: true,
      get: function get() {
        return _definition.assertObjectType;
      }
    });
    Object.defineProperty(exports, "assertInterfaceType", {
      enumerable: true,
      get: function get() {
        return _definition.assertInterfaceType;
      }
    });
    Object.defineProperty(exports, "assertUnionType", {
      enumerable: true,
      get: function get() {
        return _definition.assertUnionType;
      }
    });
    Object.defineProperty(exports, "assertEnumType", {
      enumerable: true,
      get: function get() {
        return _definition.assertEnumType;
      }
    });
    Object.defineProperty(exports, "assertInputObjectType", {
      enumerable: true,
      get: function get() {
        return _definition.assertInputObjectType;
      }
    });
    Object.defineProperty(exports, "assertListType", {
      enumerable: true,
      get: function get() {
        return _definition.assertListType;
      }
    });
    Object.defineProperty(exports, "assertNonNullType", {
      enumerable: true,
      get: function get() {
        return _definition.assertNonNullType;
      }
    });
    Object.defineProperty(exports, "assertInputType", {
      enumerable: true,
      get: function get() {
        return _definition.assertInputType;
      }
    });
    Object.defineProperty(exports, "assertOutputType", {
      enumerable: true,
      get: function get() {
        return _definition.assertOutputType;
      }
    });
    Object.defineProperty(exports, "assertLeafType", {
      enumerable: true,
      get: function get() {
        return _definition.assertLeafType;
      }
    });
    Object.defineProperty(exports, "assertCompositeType", {
      enumerable: true,
      get: function get() {
        return _definition.assertCompositeType;
      }
    });
    Object.defineProperty(exports, "assertAbstractType", {
      enumerable: true,
      get: function get() {
        return _definition.assertAbstractType;
      }
    });
    Object.defineProperty(exports, "assertWrappingType", {
      enumerable: true,
      get: function get() {
        return _definition.assertWrappingType;
      }
    });
    Object.defineProperty(exports, "assertNullableType", {
      enumerable: true,
      get: function get() {
        return _definition.assertNullableType;
      }
    });
    Object.defineProperty(exports, "assertNamedType", {
      enumerable: true,
      get: function get() {
        return _definition.assertNamedType;
      }
    });
    Object.defineProperty(exports, "getNullableType", {
      enumerable: true,
      get: function get() {
        return _definition.getNullableType;
      }
    });
    Object.defineProperty(exports, "getNamedType", {
      enumerable: true,
      get: function get() {
        return _definition.getNamedType;
      }
    });
    Object.defineProperty(exports, "GraphQLScalarType", {
      enumerable: true,
      get: function get() {
        return _definition.GraphQLScalarType;
      }
    });
    Object.defineProperty(exports, "GraphQLObjectType", {
      enumerable: true,
      get: function get() {
        return _definition.GraphQLObjectType;
      }
    });
    Object.defineProperty(exports, "GraphQLInterfaceType", {
      enumerable: true,
      get: function get() {
        return _definition.GraphQLInterfaceType;
      }
    });
    Object.defineProperty(exports, "GraphQLUnionType", {
      enumerable: true,
      get: function get() {
        return _definition.GraphQLUnionType;
      }
    });
    Object.defineProperty(exports, "GraphQLEnumType", {
      enumerable: true,
      get: function get() {
        return _definition.GraphQLEnumType;
      }
    });
    Object.defineProperty(exports, "GraphQLInputObjectType", {
      enumerable: true,
      get: function get() {
        return _definition.GraphQLInputObjectType;
      }
    });
    Object.defineProperty(exports, "GraphQLList", {
      enumerable: true,
      get: function get() {
        return _definition.GraphQLList;
      }
    });
    Object.defineProperty(exports, "GraphQLNonNull", {
      enumerable: true,
      get: function get() {
        return _definition.GraphQLNonNull;
      }
    });
    Object.defineProperty(exports, "isDirective", {
      enumerable: true,
      get: function get() {
        return _directives.isDirective;
      }
    });
    Object.defineProperty(exports, "assertDirective", {
      enumerable: true,
      get: function get() {
        return _directives.assertDirective;
      }
    });
    Object.defineProperty(exports, "GraphQLDirective", {
      enumerable: true,
      get: function get() {
        return _directives.GraphQLDirective;
      }
    });
    Object.defineProperty(exports, "isSpecifiedDirective", {
      enumerable: true,
      get: function get() {
        return _directives.isSpecifiedDirective;
      }
    });
    Object.defineProperty(exports, "specifiedDirectives", {
      enumerable: true,
      get: function get() {
        return _directives.specifiedDirectives;
      }
    });
    Object.defineProperty(exports, "GraphQLIncludeDirective", {
      enumerable: true,
      get: function get() {
        return _directives.GraphQLIncludeDirective;
      }
    });
    Object.defineProperty(exports, "GraphQLSkipDirective", {
      enumerable: true,
      get: function get() {
        return _directives.GraphQLSkipDirective;
      }
    });
    Object.defineProperty(exports, "GraphQLDeprecatedDirective", {
      enumerable: true,
      get: function get() {
        return _directives.GraphQLDeprecatedDirective;
      }
    });
    Object.defineProperty(exports, "GraphQLSpecifiedByDirective", {
      enumerable: true,
      get: function get() {
        return _directives.GraphQLSpecifiedByDirective;
      }
    });
    Object.defineProperty(exports, "DEFAULT_DEPRECATION_REASON", {
      enumerable: true,
      get: function get() {
        return _directives.DEFAULT_DEPRECATION_REASON;
      }
    });
    Object.defineProperty(exports, "isSpecifiedScalarType", {
      enumerable: true,
      get: function get() {
        return _scalars.isSpecifiedScalarType;
      }
    });
    Object.defineProperty(exports, "specifiedScalarTypes", {
      enumerable: true,
      get: function get() {
        return _scalars.specifiedScalarTypes;
      }
    });
    Object.defineProperty(exports, "GraphQLInt", {
      enumerable: true,
      get: function get() {
        return _scalars.GraphQLInt;
      }
    });
    Object.defineProperty(exports, "GraphQLFloat", {
      enumerable: true,
      get: function get() {
        return _scalars.GraphQLFloat;
      }
    });
    Object.defineProperty(exports, "GraphQLString", {
      enumerable: true,
      get: function get() {
        return _scalars.GraphQLString;
      }
    });
    Object.defineProperty(exports, "GraphQLBoolean", {
      enumerable: true,
      get: function get() {
        return _scalars.GraphQLBoolean;
      }
    });
    Object.defineProperty(exports, "GraphQLID", {
      enumerable: true,
      get: function get() {
        return _scalars.GraphQLID;
      }
    });
    Object.defineProperty(exports, "isIntrospectionType", {
      enumerable: true,
      get: function get() {
        return _introspection.isIntrospectionType;
      }
    });
    Object.defineProperty(exports, "introspectionTypes", {
      enumerable: true,
      get: function get() {
        return _introspection.introspectionTypes;
      }
    });
    Object.defineProperty(exports, "__Schema", {
      enumerable: true,
      get: function get() {
        return _introspection.__Schema;
      }
    });
    Object.defineProperty(exports, "__Directive", {
      enumerable: true,
      get: function get() {
        return _introspection.__Directive;
      }
    });
    Object.defineProperty(exports, "__DirectiveLocation", {
      enumerable: true,
      get: function get() {
        return _introspection.__DirectiveLocation;
      }
    });
    Object.defineProperty(exports, "__Type", {
      enumerable: true,
      get: function get() {
        return _introspection.__Type;
      }
    });
    Object.defineProperty(exports, "__Field", {
      enumerable: true,
      get: function get() {
        return _introspection.__Field;
      }
    });
    Object.defineProperty(exports, "__InputValue", {
      enumerable: true,
      get: function get() {
        return _introspection.__InputValue;
      }
    });
    Object.defineProperty(exports, "__EnumValue", {
      enumerable: true,
      get: function get() {
        return _introspection.__EnumValue;
      }
    });
    Object.defineProperty(exports, "__TypeKind", {
      enumerable: true,
      get: function get() {
        return _introspection.__TypeKind;
      }
    });
    Object.defineProperty(exports, "TypeKind", {
      enumerable: true,
      get: function get() {
        return _introspection.TypeKind;
      }
    });
    Object.defineProperty(exports, "SchemaMetaFieldDef", {
      enumerable: true,
      get: function get() {
        return _introspection.SchemaMetaFieldDef;
      }
    });
    Object.defineProperty(exports, "TypeMetaFieldDef", {
      enumerable: true,
      get: function get() {
        return _introspection.TypeMetaFieldDef;
      }
    });
    Object.defineProperty(exports, "TypeNameMetaFieldDef", {
      enumerable: true,
      get: function get() {
        return _introspection.TypeNameMetaFieldDef;
      }
    });
    Object.defineProperty(exports, "validateSchema", {
      enumerable: true,
      get: function get() {
        return _validate.validateSchema;
      }
    });
    Object.defineProperty(exports, "assertValidSchema", {
      enumerable: true,
      get: function get() {
        return _validate.assertValidSchema;
      }
    });
    var _schema = require_schema();
    var _definition = require_definition();
    var _directives = require_directives();
    var _scalars = require_scalars();
    var _introspection = require_introspection();
    var _validate = require_validate();
  }
});

// node_modules/graphql/language/index.js
var require_language = __commonJS({
  "node_modules/graphql/language/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "Source", {
      enumerable: true,
      get: function get() {
        return _source.Source;
      }
    });
    Object.defineProperty(exports, "getLocation", {
      enumerable: true,
      get: function get() {
        return _location.getLocation;
      }
    });
    Object.defineProperty(exports, "printLocation", {
      enumerable: true,
      get: function get() {
        return _printLocation.printLocation;
      }
    });
    Object.defineProperty(exports, "printSourceLocation", {
      enumerable: true,
      get: function get() {
        return _printLocation.printSourceLocation;
      }
    });
    Object.defineProperty(exports, "Kind", {
      enumerable: true,
      get: function get() {
        return _kinds.Kind;
      }
    });
    Object.defineProperty(exports, "TokenKind", {
      enumerable: true,
      get: function get() {
        return _tokenKind.TokenKind;
      }
    });
    Object.defineProperty(exports, "Lexer", {
      enumerable: true,
      get: function get() {
        return _lexer.Lexer;
      }
    });
    Object.defineProperty(exports, "parse", {
      enumerable: true,
      get: function get() {
        return _parser.parse;
      }
    });
    Object.defineProperty(exports, "parseValue", {
      enumerable: true,
      get: function get() {
        return _parser.parseValue;
      }
    });
    Object.defineProperty(exports, "parseType", {
      enumerable: true,
      get: function get() {
        return _parser.parseType;
      }
    });
    Object.defineProperty(exports, "print", {
      enumerable: true,
      get: function get() {
        return _printer.print;
      }
    });
    Object.defineProperty(exports, "visit", {
      enumerable: true,
      get: function get() {
        return _visitor.visit;
      }
    });
    Object.defineProperty(exports, "visitInParallel", {
      enumerable: true,
      get: function get() {
        return _visitor.visitInParallel;
      }
    });
    Object.defineProperty(exports, "getVisitFn", {
      enumerable: true,
      get: function get() {
        return _visitor.getVisitFn;
      }
    });
    Object.defineProperty(exports, "BREAK", {
      enumerable: true,
      get: function get() {
        return _visitor.BREAK;
      }
    });
    Object.defineProperty(exports, "Location", {
      enumerable: true,
      get: function get() {
        return _ast.Location;
      }
    });
    Object.defineProperty(exports, "Token", {
      enumerable: true,
      get: function get() {
        return _ast.Token;
      }
    });
    Object.defineProperty(exports, "isDefinitionNode", {
      enumerable: true,
      get: function get() {
        return _predicates.isDefinitionNode;
      }
    });
    Object.defineProperty(exports, "isExecutableDefinitionNode", {
      enumerable: true,
      get: function get() {
        return _predicates.isExecutableDefinitionNode;
      }
    });
    Object.defineProperty(exports, "isSelectionNode", {
      enumerable: true,
      get: function get() {
        return _predicates.isSelectionNode;
      }
    });
    Object.defineProperty(exports, "isValueNode", {
      enumerable: true,
      get: function get() {
        return _predicates.isValueNode;
      }
    });
    Object.defineProperty(exports, "isTypeNode", {
      enumerable: true,
      get: function get() {
        return _predicates.isTypeNode;
      }
    });
    Object.defineProperty(exports, "isTypeSystemDefinitionNode", {
      enumerable: true,
      get: function get() {
        return _predicates.isTypeSystemDefinitionNode;
      }
    });
    Object.defineProperty(exports, "isTypeDefinitionNode", {
      enumerable: true,
      get: function get() {
        return _predicates.isTypeDefinitionNode;
      }
    });
    Object.defineProperty(exports, "isTypeSystemExtensionNode", {
      enumerable: true,
      get: function get() {
        return _predicates.isTypeSystemExtensionNode;
      }
    });
    Object.defineProperty(exports, "isTypeExtensionNode", {
      enumerable: true,
      get: function get() {
        return _predicates.isTypeExtensionNode;
      }
    });
    Object.defineProperty(exports, "DirectiveLocation", {
      enumerable: true,
      get: function get() {
        return _directiveLocation.DirectiveLocation;
      }
    });
    var _source = require_source();
    var _location = require_location();
    var _printLocation = require_printLocation();
    var _kinds = require_kinds();
    var _tokenKind = require_tokenKind();
    var _lexer = require_lexer();
    var _parser = require_parser();
    var _printer = require_printer();
    var _visitor = require_visitor();
    var _ast = require_ast();
    var _predicates = require_predicates();
    var _directiveLocation = require_directiveLocation();
  }
});

// node_modules/graphql/execution/index.js
var require_execution = __commonJS({
  "node_modules/graphql/execution/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "responsePathAsArray", {
      enumerable: true,
      get: function get() {
        return _Path.pathToArray;
      }
    });
    Object.defineProperty(exports, "execute", {
      enumerable: true,
      get: function get() {
        return _execute.execute;
      }
    });
    Object.defineProperty(exports, "executeSync", {
      enumerable: true,
      get: function get() {
        return _execute.executeSync;
      }
    });
    Object.defineProperty(exports, "defaultFieldResolver", {
      enumerable: true,
      get: function get() {
        return _execute.defaultFieldResolver;
      }
    });
    Object.defineProperty(exports, "defaultTypeResolver", {
      enumerable: true,
      get: function get() {
        return _execute.defaultTypeResolver;
      }
    });
    Object.defineProperty(exports, "getDirectiveValues", {
      enumerable: true,
      get: function get() {
        return _values.getDirectiveValues;
      }
    });
    var _Path = require_Path();
    var _execute = require_execute();
    var _values = require_values();
  }
});

// node_modules/graphql/jsutils/isAsyncIterable.js
var require_isAsyncIterable = __commonJS({
  "node_modules/graphql/jsutils/isAsyncIterable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isAsyncIterable2;
    var _symbols = require_symbols();
    function isAsyncIterable2(maybeAsyncIterable) {
      return typeof (maybeAsyncIterable === null || maybeAsyncIterable === void 0 ? void 0 : maybeAsyncIterable[_symbols.SYMBOL_ASYNC_ITERATOR]) === "function";
    }
  }
});

// node_modules/graphql/subscription/mapAsyncIterator.js
var require_mapAsyncIterator = __commonJS({
  "node_modules/graphql/subscription/mapAsyncIterator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = mapAsyncIterator;
    var _symbols = require_symbols();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function mapAsyncIterator(iterable, callback, rejectCallback) {
      var iteratorMethod = iterable[_symbols.SYMBOL_ASYNC_ITERATOR];
      var iterator = iteratorMethod.call(iterable);
      var $return;
      var abruptClose;
      if (typeof iterator.return === "function") {
        $return = iterator.return;
        abruptClose = function abruptClose2(error) {
          var rethrow = function rethrow2() {
            return Promise.reject(error);
          };
          return $return.call(iterator).then(rethrow, rethrow);
        };
      }
      function mapResult(result) {
        return result.done ? result : asyncMapValue(result.value, callback).then(iteratorResult, abruptClose);
      }
      var mapReject;
      if (rejectCallback) {
        var reject = rejectCallback;
        mapReject = function mapReject2(error) {
          return asyncMapValue(error, reject).then(iteratorResult, abruptClose);
        };
      }
      return _defineProperty({
        next: function next() {
          return iterator.next().then(mapResult, mapReject);
        },
        return: function _return() {
          return $return ? $return.call(iterator).then(mapResult, mapReject) : Promise.resolve({
            value: void 0,
            done: true
          });
        },
        throw: function _throw(error) {
          if (typeof iterator.throw === "function") {
            return iterator.throw(error).then(mapResult, mapReject);
          }
          return Promise.reject(error).catch(abruptClose);
        }
      }, _symbols.SYMBOL_ASYNC_ITERATOR, function() {
        return this;
      });
    }
    function asyncMapValue(value, callback) {
      return new Promise(function(resolve) {
        return resolve(callback(value));
      });
    }
    function iteratorResult(value) {
      return {
        value,
        done: false
      };
    }
  }
});

// node_modules/graphql/subscription/subscribe.js
var require_subscribe = __commonJS({
  "node_modules/graphql/subscription/subscribe.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.subscribe = subscribe;
    exports.createSourceEventStream = createSourceEventStream;
    var _inspect = _interopRequireDefault(require_inspect());
    var _isAsyncIterable = _interopRequireDefault(require_isAsyncIterable());
    var _Path = require_Path();
    var _GraphQLError = require_GraphQLError();
    var _locatedError = require_locatedError();
    var _values = require_values();
    var _execute = require_execute();
    var _getOperationRootType = require_getOperationRootType();
    var _mapAsyncIterator = _interopRequireDefault(require_mapAsyncIterator());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function subscribe(argsOrSchema, document2, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {
      return arguments.length === 1 ? subscribeImpl(argsOrSchema) : subscribeImpl({
        schema: argsOrSchema,
        document: document2,
        rootValue,
        contextValue,
        variableValues,
        operationName,
        fieldResolver,
        subscribeFieldResolver
      });
    }
    function reportGraphQLError(error) {
      if (error instanceof _GraphQLError.GraphQLError) {
        return {
          errors: [error]
        };
      }
      throw error;
    }
    function subscribeImpl(args) {
      var schema2 = args.schema, document2 = args.document, rootValue = args.rootValue, contextValue = args.contextValue, variableValues = args.variableValues, operationName = args.operationName, fieldResolver = args.fieldResolver, subscribeFieldResolver = args.subscribeFieldResolver;
      var sourcePromise = createSourceEventStream(schema2, document2, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver);
      var mapSourceToResponse = function mapSourceToResponse2(payload) {
        return (0, _execute.execute)({
          schema: schema2,
          document: document2,
          rootValue: payload,
          contextValue,
          variableValues,
          operationName,
          fieldResolver
        });
      };
      return sourcePromise.then(function(resultOrStream) {
        return (0, _isAsyncIterable.default)(resultOrStream) ? (0, _mapAsyncIterator.default)(resultOrStream, mapSourceToResponse, reportGraphQLError) : resultOrStream;
      });
    }
    function createSourceEventStream(schema2, document2, rootValue, contextValue, variableValues, operationName, fieldResolver) {
      (0, _execute.assertValidExecutionArguments)(schema2, document2, variableValues);
      return new Promise(function(resolve) {
        var exeContext = (0, _execute.buildExecutionContext)(schema2, document2, rootValue, contextValue, variableValues, operationName, fieldResolver);
        resolve(
          Array.isArray(exeContext) ? {
            errors: exeContext
          } : executeSubscription(exeContext)
        );
      }).catch(reportGraphQLError);
    }
    function executeSubscription(exeContext) {
      var schema2 = exeContext.schema, operation = exeContext.operation, variableValues = exeContext.variableValues, rootValue = exeContext.rootValue;
      var type = (0, _getOperationRootType.getOperationRootType)(schema2, operation);
      var fields = (0, _execute.collectFields)(exeContext, type, operation.selectionSet, /* @__PURE__ */ Object.create(null), /* @__PURE__ */ Object.create(null));
      var responseNames = Object.keys(fields);
      var responseName = responseNames[0];
      var fieldNodes = fields[responseName];
      var fieldNode = fieldNodes[0];
      var fieldName = fieldNode.name.value;
      var fieldDef = (0, _execute.getFieldDef)(schema2, type, fieldName);
      if (!fieldDef) {
        throw new _GraphQLError.GraphQLError('The subscription field "'.concat(fieldName, '" is not defined.'), fieldNodes);
      }
      var path = (0, _Path.addPath)(void 0, responseName, type.name);
      var info = (0, _execute.buildResolveInfo)(exeContext, fieldDef, fieldNodes, type, path);
      return new Promise(function(resolveResult) {
        var _fieldDef$subscribe;
        var args = (0, _values.getArgumentValues)(fieldDef, fieldNodes[0], variableValues);
        var contextValue = exeContext.contextValue;
        var resolveFn = (_fieldDef$subscribe = fieldDef.subscribe) !== null && _fieldDef$subscribe !== void 0 ? _fieldDef$subscribe : exeContext.fieldResolver;
        resolveResult(resolveFn(rootValue, args, contextValue, info));
      }).then(function(eventStream) {
        if (eventStream instanceof Error) {
          throw (0, _locatedError.locatedError)(eventStream, fieldNodes, (0, _Path.pathToArray)(path));
        }
        if (!(0, _isAsyncIterable.default)(eventStream)) {
          throw new Error("Subscription field must return Async Iterable. " + "Received: ".concat((0, _inspect.default)(eventStream), "."));
        }
        return eventStream;
      }, function(error) {
        throw (0, _locatedError.locatedError)(error, fieldNodes, (0, _Path.pathToArray)(path));
      });
    }
  }
});

// node_modules/graphql/subscription/index.js
var require_subscription = __commonJS({
  "node_modules/graphql/subscription/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "subscribe", {
      enumerable: true,
      get: function get() {
        return _subscribe.subscribe;
      }
    });
    Object.defineProperty(exports, "createSourceEventStream", {
      enumerable: true,
      get: function get() {
        return _subscribe.createSourceEventStream;
      }
    });
    var _subscribe = require_subscribe();
  }
});

// node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.js
var require_NoDeprecatedCustomRule = __commonJS({
  "node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.NoDeprecatedCustomRule = NoDeprecatedCustomRule;
    var _invariant = _interopRequireDefault(require_invariant());
    var _GraphQLError = require_GraphQLError();
    var _definition = require_definition();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function NoDeprecatedCustomRule(context) {
      return {
        Field: function Field(node) {
          var fieldDef = context.getFieldDef();
          var deprecationReason = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.deprecationReason;
          if (fieldDef && deprecationReason != null) {
            var parentType = context.getParentType();
            parentType != null || (0, _invariant.default)(0);
            context.reportError(new _GraphQLError.GraphQLError("The field ".concat(parentType.name, ".").concat(fieldDef.name, " is deprecated. ").concat(deprecationReason), node));
          }
        },
        Argument: function Argument(node) {
          var argDef = context.getArgument();
          var deprecationReason = argDef === null || argDef === void 0 ? void 0 : argDef.deprecationReason;
          if (argDef && deprecationReason != null) {
            var directiveDef = context.getDirective();
            if (directiveDef != null) {
              context.reportError(new _GraphQLError.GraphQLError('Directive "@'.concat(directiveDef.name, '" argument "').concat(argDef.name, '" is deprecated. ').concat(deprecationReason), node));
            } else {
              var parentType = context.getParentType();
              var fieldDef = context.getFieldDef();
              parentType != null && fieldDef != null || (0, _invariant.default)(0);
              context.reportError(new _GraphQLError.GraphQLError('Field "'.concat(parentType.name, ".").concat(fieldDef.name, '" argument "').concat(argDef.name, '" is deprecated. ').concat(deprecationReason), node));
            }
          }
        },
        ObjectField: function ObjectField(node) {
          var inputObjectDef = (0, _definition.getNamedType)(context.getParentInputType());
          if ((0, _definition.isInputObjectType)(inputObjectDef)) {
            var inputFieldDef = inputObjectDef.getFields()[node.name.value];
            var deprecationReason = inputFieldDef === null || inputFieldDef === void 0 ? void 0 : inputFieldDef.deprecationReason;
            if (deprecationReason != null) {
              context.reportError(new _GraphQLError.GraphQLError("The input field ".concat(inputObjectDef.name, ".").concat(inputFieldDef.name, " is deprecated. ").concat(deprecationReason), node));
            }
          }
        },
        EnumValue: function EnumValue(node) {
          var enumValueDef = context.getEnumValue();
          var deprecationReason = enumValueDef === null || enumValueDef === void 0 ? void 0 : enumValueDef.deprecationReason;
          if (enumValueDef && deprecationReason != null) {
            var enumTypeDef = (0, _definition.getNamedType)(context.getInputType());
            enumTypeDef != null || (0, _invariant.default)(0);
            context.reportError(new _GraphQLError.GraphQLError('The enum value "'.concat(enumTypeDef.name, ".").concat(enumValueDef.name, '" is deprecated. ').concat(deprecationReason), node));
          }
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/custom/NoSchemaIntrospectionCustomRule.js
var require_NoSchemaIntrospectionCustomRule = __commonJS({
  "node_modules/graphql/validation/rules/custom/NoSchemaIntrospectionCustomRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.NoSchemaIntrospectionCustomRule = NoSchemaIntrospectionCustomRule;
    var _GraphQLError = require_GraphQLError();
    var _definition = require_definition();
    var _introspection = require_introspection();
    function NoSchemaIntrospectionCustomRule(context) {
      return {
        Field: function Field(node) {
          var type = (0, _definition.getNamedType)(context.getType());
          if (type && (0, _introspection.isIntrospectionType)(type)) {
            context.reportError(new _GraphQLError.GraphQLError('GraphQL introspection has been disabled, but the requested query contained the field "'.concat(node.name.value, '".'), node));
          }
        }
      };
    }
  }
});

// node_modules/graphql/validation/index.js
var require_validation = __commonJS({
  "node_modules/graphql/validation/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "validate", {
      enumerable: true,
      get: function get() {
        return _validate.validate;
      }
    });
    Object.defineProperty(exports, "ValidationContext", {
      enumerable: true,
      get: function get() {
        return _ValidationContext.ValidationContext;
      }
    });
    Object.defineProperty(exports, "specifiedRules", {
      enumerable: true,
      get: function get() {
        return _specifiedRules.specifiedRules;
      }
    });
    Object.defineProperty(exports, "ExecutableDefinitionsRule", {
      enumerable: true,
      get: function get() {
        return _ExecutableDefinitionsRule.ExecutableDefinitionsRule;
      }
    });
    Object.defineProperty(exports, "FieldsOnCorrectTypeRule", {
      enumerable: true,
      get: function get() {
        return _FieldsOnCorrectTypeRule.FieldsOnCorrectTypeRule;
      }
    });
    Object.defineProperty(exports, "FragmentsOnCompositeTypesRule", {
      enumerable: true,
      get: function get() {
        return _FragmentsOnCompositeTypesRule.FragmentsOnCompositeTypesRule;
      }
    });
    Object.defineProperty(exports, "KnownArgumentNamesRule", {
      enumerable: true,
      get: function get() {
        return _KnownArgumentNamesRule.KnownArgumentNamesRule;
      }
    });
    Object.defineProperty(exports, "KnownDirectivesRule", {
      enumerable: true,
      get: function get() {
        return _KnownDirectivesRule.KnownDirectivesRule;
      }
    });
    Object.defineProperty(exports, "KnownFragmentNamesRule", {
      enumerable: true,
      get: function get() {
        return _KnownFragmentNamesRule.KnownFragmentNamesRule;
      }
    });
    Object.defineProperty(exports, "KnownTypeNamesRule", {
      enumerable: true,
      get: function get() {
        return _KnownTypeNamesRule.KnownTypeNamesRule;
      }
    });
    Object.defineProperty(exports, "LoneAnonymousOperationRule", {
      enumerable: true,
      get: function get() {
        return _LoneAnonymousOperationRule.LoneAnonymousOperationRule;
      }
    });
    Object.defineProperty(exports, "NoFragmentCyclesRule", {
      enumerable: true,
      get: function get() {
        return _NoFragmentCyclesRule.NoFragmentCyclesRule;
      }
    });
    Object.defineProperty(exports, "NoUndefinedVariablesRule", {
      enumerable: true,
      get: function get() {
        return _NoUndefinedVariablesRule.NoUndefinedVariablesRule;
      }
    });
    Object.defineProperty(exports, "NoUnusedFragmentsRule", {
      enumerable: true,
      get: function get() {
        return _NoUnusedFragmentsRule.NoUnusedFragmentsRule;
      }
    });
    Object.defineProperty(exports, "NoUnusedVariablesRule", {
      enumerable: true,
      get: function get() {
        return _NoUnusedVariablesRule.NoUnusedVariablesRule;
      }
    });
    Object.defineProperty(exports, "OverlappingFieldsCanBeMergedRule", {
      enumerable: true,
      get: function get() {
        return _OverlappingFieldsCanBeMergedRule.OverlappingFieldsCanBeMergedRule;
      }
    });
    Object.defineProperty(exports, "PossibleFragmentSpreadsRule", {
      enumerable: true,
      get: function get() {
        return _PossibleFragmentSpreadsRule.PossibleFragmentSpreadsRule;
      }
    });
    Object.defineProperty(exports, "ProvidedRequiredArgumentsRule", {
      enumerable: true,
      get: function get() {
        return _ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsRule;
      }
    });
    Object.defineProperty(exports, "ScalarLeafsRule", {
      enumerable: true,
      get: function get() {
        return _ScalarLeafsRule.ScalarLeafsRule;
      }
    });
    Object.defineProperty(exports, "SingleFieldSubscriptionsRule", {
      enumerable: true,
      get: function get() {
        return _SingleFieldSubscriptionsRule.SingleFieldSubscriptionsRule;
      }
    });
    Object.defineProperty(exports, "UniqueArgumentNamesRule", {
      enumerable: true,
      get: function get() {
        return _UniqueArgumentNamesRule.UniqueArgumentNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueDirectivesPerLocationRule", {
      enumerable: true,
      get: function get() {
        return _UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule;
      }
    });
    Object.defineProperty(exports, "UniqueFragmentNamesRule", {
      enumerable: true,
      get: function get() {
        return _UniqueFragmentNamesRule.UniqueFragmentNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueInputFieldNamesRule", {
      enumerable: true,
      get: function get() {
        return _UniqueInputFieldNamesRule.UniqueInputFieldNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueOperationNamesRule", {
      enumerable: true,
      get: function get() {
        return _UniqueOperationNamesRule.UniqueOperationNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueVariableNamesRule", {
      enumerable: true,
      get: function get() {
        return _UniqueVariableNamesRule.UniqueVariableNamesRule;
      }
    });
    Object.defineProperty(exports, "ValuesOfCorrectTypeRule", {
      enumerable: true,
      get: function get() {
        return _ValuesOfCorrectTypeRule.ValuesOfCorrectTypeRule;
      }
    });
    Object.defineProperty(exports, "VariablesAreInputTypesRule", {
      enumerable: true,
      get: function get() {
        return _VariablesAreInputTypesRule.VariablesAreInputTypesRule;
      }
    });
    Object.defineProperty(exports, "VariablesInAllowedPositionRule", {
      enumerable: true,
      get: function get() {
        return _VariablesInAllowedPositionRule.VariablesInAllowedPositionRule;
      }
    });
    Object.defineProperty(exports, "LoneSchemaDefinitionRule", {
      enumerable: true,
      get: function get() {
        return _LoneSchemaDefinitionRule.LoneSchemaDefinitionRule;
      }
    });
    Object.defineProperty(exports, "UniqueOperationTypesRule", {
      enumerable: true,
      get: function get() {
        return _UniqueOperationTypesRule.UniqueOperationTypesRule;
      }
    });
    Object.defineProperty(exports, "UniqueTypeNamesRule", {
      enumerable: true,
      get: function get() {
        return _UniqueTypeNamesRule.UniqueTypeNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueEnumValueNamesRule", {
      enumerable: true,
      get: function get() {
        return _UniqueEnumValueNamesRule.UniqueEnumValueNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueFieldDefinitionNamesRule", {
      enumerable: true,
      get: function get() {
        return _UniqueFieldDefinitionNamesRule.UniqueFieldDefinitionNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueDirectiveNamesRule", {
      enumerable: true,
      get: function get() {
        return _UniqueDirectiveNamesRule.UniqueDirectiveNamesRule;
      }
    });
    Object.defineProperty(exports, "PossibleTypeExtensionsRule", {
      enumerable: true,
      get: function get() {
        return _PossibleTypeExtensionsRule.PossibleTypeExtensionsRule;
      }
    });
    Object.defineProperty(exports, "NoDeprecatedCustomRule", {
      enumerable: true,
      get: function get() {
        return _NoDeprecatedCustomRule.NoDeprecatedCustomRule;
      }
    });
    Object.defineProperty(exports, "NoSchemaIntrospectionCustomRule", {
      enumerable: true,
      get: function get() {
        return _NoSchemaIntrospectionCustomRule.NoSchemaIntrospectionCustomRule;
      }
    });
    var _validate = require_validate2();
    var _ValidationContext = require_ValidationContext();
    var _specifiedRules = require_specifiedRules();
    var _ExecutableDefinitionsRule = require_ExecutableDefinitionsRule();
    var _FieldsOnCorrectTypeRule = require_FieldsOnCorrectTypeRule();
    var _FragmentsOnCompositeTypesRule = require_FragmentsOnCompositeTypesRule();
    var _KnownArgumentNamesRule = require_KnownArgumentNamesRule();
    var _KnownDirectivesRule = require_KnownDirectivesRule();
    var _KnownFragmentNamesRule = require_KnownFragmentNamesRule();
    var _KnownTypeNamesRule = require_KnownTypeNamesRule();
    var _LoneAnonymousOperationRule = require_LoneAnonymousOperationRule();
    var _NoFragmentCyclesRule = require_NoFragmentCyclesRule();
    var _NoUndefinedVariablesRule = require_NoUndefinedVariablesRule();
    var _NoUnusedFragmentsRule = require_NoUnusedFragmentsRule();
    var _NoUnusedVariablesRule = require_NoUnusedVariablesRule();
    var _OverlappingFieldsCanBeMergedRule = require_OverlappingFieldsCanBeMergedRule();
    var _PossibleFragmentSpreadsRule = require_PossibleFragmentSpreadsRule();
    var _ProvidedRequiredArgumentsRule = require_ProvidedRequiredArgumentsRule();
    var _ScalarLeafsRule = require_ScalarLeafsRule();
    var _SingleFieldSubscriptionsRule = require_SingleFieldSubscriptionsRule();
    var _UniqueArgumentNamesRule = require_UniqueArgumentNamesRule();
    var _UniqueDirectivesPerLocationRule = require_UniqueDirectivesPerLocationRule();
    var _UniqueFragmentNamesRule = require_UniqueFragmentNamesRule();
    var _UniqueInputFieldNamesRule = require_UniqueInputFieldNamesRule();
    var _UniqueOperationNamesRule = require_UniqueOperationNamesRule();
    var _UniqueVariableNamesRule = require_UniqueVariableNamesRule();
    var _ValuesOfCorrectTypeRule = require_ValuesOfCorrectTypeRule();
    var _VariablesAreInputTypesRule = require_VariablesAreInputTypesRule();
    var _VariablesInAllowedPositionRule = require_VariablesInAllowedPositionRule();
    var _LoneSchemaDefinitionRule = require_LoneSchemaDefinitionRule();
    var _UniqueOperationTypesRule = require_UniqueOperationTypesRule();
    var _UniqueTypeNamesRule = require_UniqueTypeNamesRule();
    var _UniqueEnumValueNamesRule = require_UniqueEnumValueNamesRule();
    var _UniqueFieldDefinitionNamesRule = require_UniqueFieldDefinitionNamesRule();
    var _UniqueDirectiveNamesRule = require_UniqueDirectiveNamesRule();
    var _PossibleTypeExtensionsRule = require_PossibleTypeExtensionsRule();
    var _NoDeprecatedCustomRule = require_NoDeprecatedCustomRule();
    var _NoSchemaIntrospectionCustomRule = require_NoSchemaIntrospectionCustomRule();
  }
});

// node_modules/graphql/error/formatError.js
var require_formatError = __commonJS({
  "node_modules/graphql/error/formatError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.formatError = formatError;
    var _devAssert = _interopRequireDefault(require_devAssert());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function formatError(error) {
      var _error$message;
      error || (0, _devAssert.default)(0, "Received null or undefined error.");
      var message = (_error$message = error.message) !== null && _error$message !== void 0 ? _error$message : "An unknown error occurred.";
      var locations = error.locations;
      var path = error.path;
      var extensions = error.extensions;
      return extensions && Object.keys(extensions).length > 0 ? {
        message,
        locations,
        path,
        extensions
      } : {
        message,
        locations,
        path
      };
    }
  }
});

// node_modules/graphql/error/index.js
var require_error = __commonJS({
  "node_modules/graphql/error/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "GraphQLError", {
      enumerable: true,
      get: function get() {
        return _GraphQLError.GraphQLError;
      }
    });
    Object.defineProperty(exports, "printError", {
      enumerable: true,
      get: function get() {
        return _GraphQLError.printError;
      }
    });
    Object.defineProperty(exports, "syntaxError", {
      enumerable: true,
      get: function get() {
        return _syntaxError.syntaxError;
      }
    });
    Object.defineProperty(exports, "locatedError", {
      enumerable: true,
      get: function get() {
        return _locatedError.locatedError;
      }
    });
    Object.defineProperty(exports, "formatError", {
      enumerable: true,
      get: function get() {
        return _formatError.formatError;
      }
    });
    var _GraphQLError = require_GraphQLError();
    var _syntaxError = require_syntaxError();
    var _locatedError = require_locatedError();
    var _formatError = require_formatError();
  }
});

// node_modules/graphql/utilities/getIntrospectionQuery.js
var require_getIntrospectionQuery = __commonJS({
  "node_modules/graphql/utilities/getIntrospectionQuery.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getIntrospectionQuery = getIntrospectionQuery;
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2] != null ? arguments[i2] : {};
        if (i2 % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function getIntrospectionQuery(options) {
      var optionsWithDefault = _objectSpread({
        descriptions: true,
        specifiedByUrl: false,
        directiveIsRepeatable: false,
        schemaDescription: false,
        inputValueDeprecation: false
      }, options);
      var descriptions = optionsWithDefault.descriptions ? "description" : "";
      var specifiedByUrl = optionsWithDefault.specifiedByUrl ? "specifiedByUrl" : "";
      var directiveIsRepeatable = optionsWithDefault.directiveIsRepeatable ? "isRepeatable" : "";
      var schemaDescription = optionsWithDefault.schemaDescription ? descriptions : "";
      function inputDeprecation(str) {
        return optionsWithDefault.inputValueDeprecation ? str : "";
      }
      return "\n    query IntrospectionQuery {\n      __schema {\n        ".concat(schemaDescription, "\n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          ").concat(descriptions, "\n          ").concat(directiveIsRepeatable, "\n          locations\n          args").concat(inputDeprecation("(includeDeprecated: true)"), " {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      ").concat(descriptions, "\n      ").concat(specifiedByUrl, "\n      fields(includeDeprecated: true) {\n        name\n        ").concat(descriptions, "\n        args").concat(inputDeprecation("(includeDeprecated: true)"), " {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields").concat(inputDeprecation("(includeDeprecated: true)"), " {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        ").concat(descriptions, "\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      ").concat(descriptions, "\n      type { ...TypeRef }\n      defaultValue\n      ").concat(inputDeprecation("isDeprecated"), "\n      ").concat(inputDeprecation("deprecationReason"), "\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ");
    }
  }
});

// node_modules/graphql/utilities/getOperationAST.js
var require_getOperationAST = __commonJS({
  "node_modules/graphql/utilities/getOperationAST.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getOperationAST = getOperationAST2;
    var _kinds = require_kinds();
    function getOperationAST2(documentAST, operationName) {
      var operation = null;
      for (var _i2 = 0, _documentAST$definiti2 = documentAST.definitions; _i2 < _documentAST$definiti2.length; _i2++) {
        var definition = _documentAST$definiti2[_i2];
        if (definition.kind === _kinds.Kind.OPERATION_DEFINITION) {
          var _definition$name;
          if (operationName == null) {
            if (operation) {
              return null;
            }
            operation = definition;
          } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName) {
            return definition;
          }
        }
      }
      return operation;
    }
  }
});

// node_modules/graphql/utilities/introspectionFromSchema.js
var require_introspectionFromSchema = __commonJS({
  "node_modules/graphql/utilities/introspectionFromSchema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.introspectionFromSchema = introspectionFromSchema;
    var _invariant = _interopRequireDefault(require_invariant());
    var _parser = require_parser();
    var _execute = require_execute();
    var _getIntrospectionQuery = require_getIntrospectionQuery();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2] != null ? arguments[i2] : {};
        if (i2 % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function introspectionFromSchema(schema2, options) {
      var optionsWithDefaults = _objectSpread({
        specifiedByUrl: true,
        directiveIsRepeatable: true,
        schemaDescription: true,
        inputValueDeprecation: true
      }, options);
      var document2 = (0, _parser.parse)((0, _getIntrospectionQuery.getIntrospectionQuery)(optionsWithDefaults));
      var result = (0, _execute.executeSync)({
        schema: schema2,
        document: document2
      });
      !result.errors && result.data || (0, _invariant.default)(0);
      return result.data;
    }
  }
});

// node_modules/graphql/utilities/buildClientSchema.js
var require_buildClientSchema = __commonJS({
  "node_modules/graphql/utilities/buildClientSchema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.buildClientSchema = buildClientSchema;
    var _objectValues = _interopRequireDefault(require_objectValues());
    var _inspect = _interopRequireDefault(require_inspect());
    var _devAssert = _interopRequireDefault(require_devAssert());
    var _keyValMap = _interopRequireDefault(require_keyValMap());
    var _isObjectLike = _interopRequireDefault(require_isObjectLike());
    var _parser = require_parser();
    var _schema = require_schema();
    var _directives = require_directives();
    var _scalars = require_scalars();
    var _introspection = require_introspection();
    var _definition = require_definition();
    var _valueFromAST = require_valueFromAST();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function buildClientSchema(introspection, options) {
      (0, _isObjectLike.default)(introspection) && (0, _isObjectLike.default)(introspection.__schema) || (0, _devAssert.default)(0, 'Invalid or incomplete introspection result. Ensure that you are passing "data" property of introspection response and no "errors" was returned alongside: '.concat((0, _inspect.default)(introspection), "."));
      var schemaIntrospection = introspection.__schema;
      var typeMap = (0, _keyValMap.default)(schemaIntrospection.types, function(typeIntrospection) {
        return typeIntrospection.name;
      }, function(typeIntrospection) {
        return buildType(typeIntrospection);
      });
      for (var _i2 = 0, _ref2 = [].concat(_scalars.specifiedScalarTypes, _introspection.introspectionTypes); _i2 < _ref2.length; _i2++) {
        var stdType = _ref2[_i2];
        if (typeMap[stdType.name]) {
          typeMap[stdType.name] = stdType;
        }
      }
      var queryType = schemaIntrospection.queryType ? getObjectType(schemaIntrospection.queryType) : null;
      var mutationType = schemaIntrospection.mutationType ? getObjectType(schemaIntrospection.mutationType) : null;
      var subscriptionType = schemaIntrospection.subscriptionType ? getObjectType(schemaIntrospection.subscriptionType) : null;
      var directives = schemaIntrospection.directives ? schemaIntrospection.directives.map(buildDirective) : [];
      return new _schema.GraphQLSchema({
        description: schemaIntrospection.description,
        query: queryType,
        mutation: mutationType,
        subscription: subscriptionType,
        types: (0, _objectValues.default)(typeMap),
        directives,
        assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid
      });
      function getType(typeRef) {
        if (typeRef.kind === _introspection.TypeKind.LIST) {
          var itemRef = typeRef.ofType;
          if (!itemRef) {
            throw new Error("Decorated type deeper than introspection query.");
          }
          return new _definition.GraphQLList(getType(itemRef));
        }
        if (typeRef.kind === _introspection.TypeKind.NON_NULL) {
          var nullableRef = typeRef.ofType;
          if (!nullableRef) {
            throw new Error("Decorated type deeper than introspection query.");
          }
          var nullableType = getType(nullableRef);
          return new _definition.GraphQLNonNull((0, _definition.assertNullableType)(nullableType));
        }
        return getNamedType(typeRef);
      }
      function getNamedType(typeRef) {
        var typeName = typeRef.name;
        if (!typeName) {
          throw new Error("Unknown type reference: ".concat((0, _inspect.default)(typeRef), "."));
        }
        var type = typeMap[typeName];
        if (!type) {
          throw new Error("Invalid or incomplete schema, unknown type: ".concat(typeName, ". Ensure that a full introspection query is used in order to build a client schema."));
        }
        return type;
      }
      function getObjectType(typeRef) {
        return (0, _definition.assertObjectType)(getNamedType(typeRef));
      }
      function getInterfaceType(typeRef) {
        return (0, _definition.assertInterfaceType)(getNamedType(typeRef));
      }
      function buildType(type) {
        if (type != null && type.name != null && type.kind != null) {
          switch (type.kind) {
            case _introspection.TypeKind.SCALAR:
              return buildScalarDef(type);
            case _introspection.TypeKind.OBJECT:
              return buildObjectDef(type);
            case _introspection.TypeKind.INTERFACE:
              return buildInterfaceDef(type);
            case _introspection.TypeKind.UNION:
              return buildUnionDef(type);
            case _introspection.TypeKind.ENUM:
              return buildEnumDef(type);
            case _introspection.TypeKind.INPUT_OBJECT:
              return buildInputObjectDef(type);
          }
        }
        var typeStr = (0, _inspect.default)(type);
        throw new Error("Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ".concat(typeStr, "."));
      }
      function buildScalarDef(scalarIntrospection) {
        return new _definition.GraphQLScalarType({
          name: scalarIntrospection.name,
          description: scalarIntrospection.description,
          specifiedByUrl: scalarIntrospection.specifiedByUrl
        });
      }
      function buildImplementationsList(implementingIntrospection) {
        if (implementingIntrospection.interfaces === null && implementingIntrospection.kind === _introspection.TypeKind.INTERFACE) {
          return [];
        }
        if (!implementingIntrospection.interfaces) {
          var implementingIntrospectionStr = (0, _inspect.default)(implementingIntrospection);
          throw new Error("Introspection result missing interfaces: ".concat(implementingIntrospectionStr, "."));
        }
        return implementingIntrospection.interfaces.map(getInterfaceType);
      }
      function buildObjectDef(objectIntrospection) {
        return new _definition.GraphQLObjectType({
          name: objectIntrospection.name,
          description: objectIntrospection.description,
          interfaces: function interfaces() {
            return buildImplementationsList(objectIntrospection);
          },
          fields: function fields() {
            return buildFieldDefMap(objectIntrospection);
          }
        });
      }
      function buildInterfaceDef(interfaceIntrospection) {
        return new _definition.GraphQLInterfaceType({
          name: interfaceIntrospection.name,
          description: interfaceIntrospection.description,
          interfaces: function interfaces() {
            return buildImplementationsList(interfaceIntrospection);
          },
          fields: function fields() {
            return buildFieldDefMap(interfaceIntrospection);
          }
        });
      }
      function buildUnionDef(unionIntrospection) {
        if (!unionIntrospection.possibleTypes) {
          var unionIntrospectionStr = (0, _inspect.default)(unionIntrospection);
          throw new Error("Introspection result missing possibleTypes: ".concat(unionIntrospectionStr, "."));
        }
        return new _definition.GraphQLUnionType({
          name: unionIntrospection.name,
          description: unionIntrospection.description,
          types: function types3() {
            return unionIntrospection.possibleTypes.map(getObjectType);
          }
        });
      }
      function buildEnumDef(enumIntrospection) {
        if (!enumIntrospection.enumValues) {
          var enumIntrospectionStr = (0, _inspect.default)(enumIntrospection);
          throw new Error("Introspection result missing enumValues: ".concat(enumIntrospectionStr, "."));
        }
        return new _definition.GraphQLEnumType({
          name: enumIntrospection.name,
          description: enumIntrospection.description,
          values: (0, _keyValMap.default)(enumIntrospection.enumValues, function(valueIntrospection) {
            return valueIntrospection.name;
          }, function(valueIntrospection) {
            return {
              description: valueIntrospection.description,
              deprecationReason: valueIntrospection.deprecationReason
            };
          })
        });
      }
      function buildInputObjectDef(inputObjectIntrospection) {
        if (!inputObjectIntrospection.inputFields) {
          var inputObjectIntrospectionStr = (0, _inspect.default)(inputObjectIntrospection);
          throw new Error("Introspection result missing inputFields: ".concat(inputObjectIntrospectionStr, "."));
        }
        return new _definition.GraphQLInputObjectType({
          name: inputObjectIntrospection.name,
          description: inputObjectIntrospection.description,
          fields: function fields() {
            return buildInputValueDefMap(inputObjectIntrospection.inputFields);
          }
        });
      }
      function buildFieldDefMap(typeIntrospection) {
        if (!typeIntrospection.fields) {
          throw new Error("Introspection result missing fields: ".concat((0, _inspect.default)(typeIntrospection), "."));
        }
        return (0, _keyValMap.default)(typeIntrospection.fields, function(fieldIntrospection) {
          return fieldIntrospection.name;
        }, buildField);
      }
      function buildField(fieldIntrospection) {
        var type = getType(fieldIntrospection.type);
        if (!(0, _definition.isOutputType)(type)) {
          var typeStr = (0, _inspect.default)(type);
          throw new Error("Introspection must provide output type for fields, but received: ".concat(typeStr, "."));
        }
        if (!fieldIntrospection.args) {
          var fieldIntrospectionStr = (0, _inspect.default)(fieldIntrospection);
          throw new Error("Introspection result missing field args: ".concat(fieldIntrospectionStr, "."));
        }
        return {
          description: fieldIntrospection.description,
          deprecationReason: fieldIntrospection.deprecationReason,
          type,
          args: buildInputValueDefMap(fieldIntrospection.args)
        };
      }
      function buildInputValueDefMap(inputValueIntrospections) {
        return (0, _keyValMap.default)(inputValueIntrospections, function(inputValue) {
          return inputValue.name;
        }, buildInputValue);
      }
      function buildInputValue(inputValueIntrospection) {
        var type = getType(inputValueIntrospection.type);
        if (!(0, _definition.isInputType)(type)) {
          var typeStr = (0, _inspect.default)(type);
          throw new Error("Introspection must provide input type for arguments, but received: ".concat(typeStr, "."));
        }
        var defaultValue = inputValueIntrospection.defaultValue != null ? (0, _valueFromAST.valueFromAST)((0, _parser.parseValue)(inputValueIntrospection.defaultValue), type) : void 0;
        return {
          description: inputValueIntrospection.description,
          type,
          defaultValue,
          deprecationReason: inputValueIntrospection.deprecationReason
        };
      }
      function buildDirective(directiveIntrospection) {
        if (!directiveIntrospection.args) {
          var directiveIntrospectionStr = (0, _inspect.default)(directiveIntrospection);
          throw new Error("Introspection result missing directive args: ".concat(directiveIntrospectionStr, "."));
        }
        if (!directiveIntrospection.locations) {
          var _directiveIntrospectionStr = (0, _inspect.default)(directiveIntrospection);
          throw new Error("Introspection result missing directive locations: ".concat(_directiveIntrospectionStr, "."));
        }
        return new _directives.GraphQLDirective({
          name: directiveIntrospection.name,
          description: directiveIntrospection.description,
          isRepeatable: directiveIntrospection.isRepeatable,
          locations: directiveIntrospection.locations.slice(),
          args: buildInputValueDefMap(directiveIntrospection.args)
        });
      }
    }
  }
});

// node_modules/graphql/utilities/extendSchema.js
var require_extendSchema = __commonJS({
  "node_modules/graphql/utilities/extendSchema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.extendSchema = extendSchema;
    exports.extendSchemaImpl = extendSchemaImpl;
    exports.getDescription = getDescription;
    var _objectValues = _interopRequireDefault(require_objectValues());
    var _keyMap = _interopRequireDefault(require_keyMap());
    var _inspect = _interopRequireDefault(require_inspect());
    var _mapValue = _interopRequireDefault(require_mapValue());
    var _invariant = _interopRequireDefault(require_invariant());
    var _devAssert = _interopRequireDefault(require_devAssert());
    var _kinds = require_kinds();
    var _tokenKind = require_tokenKind();
    var _blockString = require_blockString();
    var _predicates = require_predicates();
    var _validate = require_validate2();
    var _values = require_values();
    var _schema = require_schema();
    var _scalars = require_scalars();
    var _introspection = require_introspection();
    var _directives = require_directives();
    var _definition = require_definition();
    var _valueFromAST = require_valueFromAST();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2] != null ? arguments[i2] : {};
        if (i2 % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function extendSchema(schema2, documentAST, options) {
      (0, _schema.assertSchema)(schema2);
      documentAST != null && documentAST.kind === _kinds.Kind.DOCUMENT || (0, _devAssert.default)(0, "Must provide valid Document AST.");
      if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {
        (0, _validate.assertValidSDLExtension)(documentAST, schema2);
      }
      var schemaConfig = schema2.toConfig();
      var extendedConfig = extendSchemaImpl(schemaConfig, documentAST, options);
      return schemaConfig === extendedConfig ? schema2 : new _schema.GraphQLSchema(extendedConfig);
    }
    function extendSchemaImpl(schemaConfig, documentAST, options) {
      var _schemaDef, _schemaDef$descriptio, _schemaDef2, _options$assumeValid;
      var typeDefs = [];
      var typeExtensionsMap = /* @__PURE__ */ Object.create(null);
      var directiveDefs = [];
      var schemaDef;
      var schemaExtensions = [];
      for (var _i2 = 0, _documentAST$definiti2 = documentAST.definitions; _i2 < _documentAST$definiti2.length; _i2++) {
        var def = _documentAST$definiti2[_i2];
        if (def.kind === _kinds.Kind.SCHEMA_DEFINITION) {
          schemaDef = def;
        } else if (def.kind === _kinds.Kind.SCHEMA_EXTENSION) {
          schemaExtensions.push(def);
        } else if ((0, _predicates.isTypeDefinitionNode)(def)) {
          typeDefs.push(def);
        } else if ((0, _predicates.isTypeExtensionNode)(def)) {
          var extendedTypeName = def.name.value;
          var existingTypeExtensions = typeExtensionsMap[extendedTypeName];
          typeExtensionsMap[extendedTypeName] = existingTypeExtensions ? existingTypeExtensions.concat([def]) : [def];
        } else if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
          directiveDefs.push(def);
        }
      }
      if (Object.keys(typeExtensionsMap).length === 0 && typeDefs.length === 0 && directiveDefs.length === 0 && schemaExtensions.length === 0 && schemaDef == null) {
        return schemaConfig;
      }
      var typeMap = /* @__PURE__ */ Object.create(null);
      for (var _i4 = 0, _schemaConfig$types2 = schemaConfig.types; _i4 < _schemaConfig$types2.length; _i4++) {
        var existingType = _schemaConfig$types2[_i4];
        typeMap[existingType.name] = extendNamedType(existingType);
      }
      for (var _i6 = 0; _i6 < typeDefs.length; _i6++) {
        var _stdTypeMap$name;
        var typeNode = typeDefs[_i6];
        var name = typeNode.name.value;
        typeMap[name] = (_stdTypeMap$name = stdTypeMap[name]) !== null && _stdTypeMap$name !== void 0 ? _stdTypeMap$name : buildType(typeNode);
      }
      var operationTypes = _objectSpread(_objectSpread({
        query: schemaConfig.query && replaceNamedType(schemaConfig.query),
        mutation: schemaConfig.mutation && replaceNamedType(schemaConfig.mutation),
        subscription: schemaConfig.subscription && replaceNamedType(schemaConfig.subscription)
      }, schemaDef && getOperationTypes([schemaDef])), getOperationTypes(schemaExtensions));
      return _objectSpread(_objectSpread({
        description: (_schemaDef = schemaDef) === null || _schemaDef === void 0 ? void 0 : (_schemaDef$descriptio = _schemaDef.description) === null || _schemaDef$descriptio === void 0 ? void 0 : _schemaDef$descriptio.value
      }, operationTypes), {}, {
        types: (0, _objectValues.default)(typeMap),
        directives: [].concat(schemaConfig.directives.map(replaceDirective), directiveDefs.map(buildDirective)),
        extensions: void 0,
        astNode: (_schemaDef2 = schemaDef) !== null && _schemaDef2 !== void 0 ? _schemaDef2 : schemaConfig.astNode,
        extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExtensions),
        assumeValid: (_options$assumeValid = options === null || options === void 0 ? void 0 : options.assumeValid) !== null && _options$assumeValid !== void 0 ? _options$assumeValid : false
      });
      function replaceType(type) {
        if ((0, _definition.isListType)(type)) {
          return new _definition.GraphQLList(replaceType(type.ofType));
        }
        if ((0, _definition.isNonNullType)(type)) {
          return new _definition.GraphQLNonNull(replaceType(type.ofType));
        }
        return replaceNamedType(type);
      }
      function replaceNamedType(type) {
        return typeMap[type.name];
      }
      function replaceDirective(directive) {
        var config = directive.toConfig();
        return new _directives.GraphQLDirective(_objectSpread(_objectSpread({}, config), {}, {
          args: (0, _mapValue.default)(config.args, extendArg)
        }));
      }
      function extendNamedType(type) {
        if ((0, _introspection.isIntrospectionType)(type) || (0, _scalars.isSpecifiedScalarType)(type)) {
          return type;
        }
        if ((0, _definition.isScalarType)(type)) {
          return extendScalarType(type);
        }
        if ((0, _definition.isObjectType)(type)) {
          return extendObjectType(type);
        }
        if ((0, _definition.isInterfaceType)(type)) {
          return extendInterfaceType(type);
        }
        if ((0, _definition.isUnionType)(type)) {
          return extendUnionType(type);
        }
        if ((0, _definition.isEnumType)(type)) {
          return extendEnumType(type);
        }
        if ((0, _definition.isInputObjectType)(type)) {
          return extendInputObjectType(type);
        }
        (0, _invariant.default)(0, "Unexpected type: " + (0, _inspect.default)(type));
      }
      function extendInputObjectType(type) {
        var _typeExtensionsMap$co;
        var config = type.toConfig();
        var extensions = (_typeExtensionsMap$co = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co !== void 0 ? _typeExtensionsMap$co : [];
        return new _definition.GraphQLInputObjectType(_objectSpread(_objectSpread({}, config), {}, {
          fields: function fields() {
            return _objectSpread(_objectSpread({}, (0, _mapValue.default)(config.fields, function(field) {
              return _objectSpread(_objectSpread({}, field), {}, {
                type: replaceType(field.type)
              });
            })), buildInputFieldMap(extensions));
          },
          extensionASTNodes: config.extensionASTNodes.concat(extensions)
        }));
      }
      function extendEnumType(type) {
        var _typeExtensionsMap$ty;
        var config = type.toConfig();
        var extensions = (_typeExtensionsMap$ty = typeExtensionsMap[type.name]) !== null && _typeExtensionsMap$ty !== void 0 ? _typeExtensionsMap$ty : [];
        return new _definition.GraphQLEnumType(_objectSpread(_objectSpread({}, config), {}, {
          values: _objectSpread(_objectSpread({}, config.values), buildEnumValueMap(extensions)),
          extensionASTNodes: config.extensionASTNodes.concat(extensions)
        }));
      }
      function extendScalarType(type) {
        var _typeExtensionsMap$co2;
        var config = type.toConfig();
        var extensions = (_typeExtensionsMap$co2 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co2 !== void 0 ? _typeExtensionsMap$co2 : [];
        var specifiedByUrl = config.specifiedByUrl;
        for (var _i8 = 0; _i8 < extensions.length; _i8++) {
          var _getSpecifiedByUrl;
          var extensionNode = extensions[_i8];
          specifiedByUrl = (_getSpecifiedByUrl = getSpecifiedByUrl(extensionNode)) !== null && _getSpecifiedByUrl !== void 0 ? _getSpecifiedByUrl : specifiedByUrl;
        }
        return new _definition.GraphQLScalarType(_objectSpread(_objectSpread({}, config), {}, {
          specifiedByUrl,
          extensionASTNodes: config.extensionASTNodes.concat(extensions)
        }));
      }
      function extendObjectType(type) {
        var _typeExtensionsMap$co3;
        var config = type.toConfig();
        var extensions = (_typeExtensionsMap$co3 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co3 !== void 0 ? _typeExtensionsMap$co3 : [];
        return new _definition.GraphQLObjectType(_objectSpread(_objectSpread({}, config), {}, {
          interfaces: function interfaces() {
            return [].concat(type.getInterfaces().map(replaceNamedType), buildInterfaces(extensions));
          },
          fields: function fields() {
            return _objectSpread(_objectSpread({}, (0, _mapValue.default)(config.fields, extendField)), buildFieldMap(extensions));
          },
          extensionASTNodes: config.extensionASTNodes.concat(extensions)
        }));
      }
      function extendInterfaceType(type) {
        var _typeExtensionsMap$co4;
        var config = type.toConfig();
        var extensions = (_typeExtensionsMap$co4 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co4 !== void 0 ? _typeExtensionsMap$co4 : [];
        return new _definition.GraphQLInterfaceType(_objectSpread(_objectSpread({}, config), {}, {
          interfaces: function interfaces() {
            return [].concat(type.getInterfaces().map(replaceNamedType), buildInterfaces(extensions));
          },
          fields: function fields() {
            return _objectSpread(_objectSpread({}, (0, _mapValue.default)(config.fields, extendField)), buildFieldMap(extensions));
          },
          extensionASTNodes: config.extensionASTNodes.concat(extensions)
        }));
      }
      function extendUnionType(type) {
        var _typeExtensionsMap$co5;
        var config = type.toConfig();
        var extensions = (_typeExtensionsMap$co5 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co5 !== void 0 ? _typeExtensionsMap$co5 : [];
        return new _definition.GraphQLUnionType(_objectSpread(_objectSpread({}, config), {}, {
          types: function types3() {
            return [].concat(type.getTypes().map(replaceNamedType), buildUnionTypes(extensions));
          },
          extensionASTNodes: config.extensionASTNodes.concat(extensions)
        }));
      }
      function extendField(field) {
        return _objectSpread(_objectSpread({}, field), {}, {
          type: replaceType(field.type),
          args: (0, _mapValue.default)(field.args, extendArg)
        });
      }
      function extendArg(arg) {
        return _objectSpread(_objectSpread({}, arg), {}, {
          type: replaceType(arg.type)
        });
      }
      function getOperationTypes(nodes) {
        var opTypes = {};
        for (var _i10 = 0; _i10 < nodes.length; _i10++) {
          var _node$operationTypes;
          var node = nodes[_i10];
          var operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];
          for (var _i12 = 0; _i12 < operationTypesNodes.length; _i12++) {
            var operationType = operationTypesNodes[_i12];
            opTypes[operationType.operation] = getNamedType(operationType.type);
          }
        }
        return opTypes;
      }
      function getNamedType(node) {
        var _stdTypeMap$name2;
        var name2 = node.name.value;
        var type = (_stdTypeMap$name2 = stdTypeMap[name2]) !== null && _stdTypeMap$name2 !== void 0 ? _stdTypeMap$name2 : typeMap[name2];
        if (type === void 0) {
          throw new Error('Unknown type: "'.concat(name2, '".'));
        }
        return type;
      }
      function getWrappedType(node) {
        if (node.kind === _kinds.Kind.LIST_TYPE) {
          return new _definition.GraphQLList(getWrappedType(node.type));
        }
        if (node.kind === _kinds.Kind.NON_NULL_TYPE) {
          return new _definition.GraphQLNonNull(getWrappedType(node.type));
        }
        return getNamedType(node);
      }
      function buildDirective(node) {
        var locations = node.locations.map(function(_ref) {
          var value = _ref.value;
          return value;
        });
        return new _directives.GraphQLDirective({
          name: node.name.value,
          description: getDescription(node, options),
          locations,
          isRepeatable: node.repeatable,
          args: buildArgumentMap(node.arguments),
          astNode: node
        });
      }
      function buildFieldMap(nodes) {
        var fieldConfigMap = /* @__PURE__ */ Object.create(null);
        for (var _i14 = 0; _i14 < nodes.length; _i14++) {
          var _node$fields;
          var node = nodes[_i14];
          var nodeFields = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];
          for (var _i16 = 0; _i16 < nodeFields.length; _i16++) {
            var field = nodeFields[_i16];
            fieldConfigMap[field.name.value] = {
              type: getWrappedType(field.type),
              description: getDescription(field, options),
              args: buildArgumentMap(field.arguments),
              deprecationReason: getDeprecationReason(field),
              astNode: field
            };
          }
        }
        return fieldConfigMap;
      }
      function buildArgumentMap(args) {
        var argsNodes = args !== null && args !== void 0 ? args : [];
        var argConfigMap = /* @__PURE__ */ Object.create(null);
        for (var _i18 = 0; _i18 < argsNodes.length; _i18++) {
          var arg = argsNodes[_i18];
          var type = getWrappedType(arg.type);
          argConfigMap[arg.name.value] = {
            type,
            description: getDescription(arg, options),
            defaultValue: (0, _valueFromAST.valueFromAST)(arg.defaultValue, type),
            deprecationReason: getDeprecationReason(arg),
            astNode: arg
          };
        }
        return argConfigMap;
      }
      function buildInputFieldMap(nodes) {
        var inputFieldMap = /* @__PURE__ */ Object.create(null);
        for (var _i20 = 0; _i20 < nodes.length; _i20++) {
          var _node$fields2;
          var node = nodes[_i20];
          var fieldsNodes = (_node$fields2 = node.fields) !== null && _node$fields2 !== void 0 ? _node$fields2 : [];
          for (var _i22 = 0; _i22 < fieldsNodes.length; _i22++) {
            var field = fieldsNodes[_i22];
            var type = getWrappedType(field.type);
            inputFieldMap[field.name.value] = {
              type,
              description: getDescription(field, options),
              defaultValue: (0, _valueFromAST.valueFromAST)(field.defaultValue, type),
              deprecationReason: getDeprecationReason(field),
              astNode: field
            };
          }
        }
        return inputFieldMap;
      }
      function buildEnumValueMap(nodes) {
        var enumValueMap = /* @__PURE__ */ Object.create(null);
        for (var _i24 = 0; _i24 < nodes.length; _i24++) {
          var _node$values;
          var node = nodes[_i24];
          var valuesNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];
          for (var _i26 = 0; _i26 < valuesNodes.length; _i26++) {
            var value = valuesNodes[_i26];
            enumValueMap[value.name.value] = {
              description: getDescription(value, options),
              deprecationReason: getDeprecationReason(value),
              astNode: value
            };
          }
        }
        return enumValueMap;
      }
      function buildInterfaces(nodes) {
        var interfaces = [];
        for (var _i28 = 0; _i28 < nodes.length; _i28++) {
          var _node$interfaces;
          var node = nodes[_i28];
          var interfacesNodes = (_node$interfaces = node.interfaces) !== null && _node$interfaces !== void 0 ? _node$interfaces : [];
          for (var _i30 = 0; _i30 < interfacesNodes.length; _i30++) {
            var type = interfacesNodes[_i30];
            interfaces.push(getNamedType(type));
          }
        }
        return interfaces;
      }
      function buildUnionTypes(nodes) {
        var types3 = [];
        for (var _i32 = 0; _i32 < nodes.length; _i32++) {
          var _node$types;
          var node = nodes[_i32];
          var typeNodes = (_node$types = node.types) !== null && _node$types !== void 0 ? _node$types : [];
          for (var _i34 = 0; _i34 < typeNodes.length; _i34++) {
            var type = typeNodes[_i34];
            types3.push(getNamedType(type));
          }
        }
        return types3;
      }
      function buildType(astNode) {
        var _typeExtensionsMap$na;
        var name2 = astNode.name.value;
        var description = getDescription(astNode, options);
        var extensionNodes = (_typeExtensionsMap$na = typeExtensionsMap[name2]) !== null && _typeExtensionsMap$na !== void 0 ? _typeExtensionsMap$na : [];
        switch (astNode.kind) {
          case _kinds.Kind.OBJECT_TYPE_DEFINITION: {
            var extensionASTNodes = extensionNodes;
            var allNodes = [astNode].concat(extensionASTNodes);
            return new _definition.GraphQLObjectType({
              name: name2,
              description,
              interfaces: function interfaces() {
                return buildInterfaces(allNodes);
              },
              fields: function fields() {
                return buildFieldMap(allNodes);
              },
              astNode,
              extensionASTNodes
            });
          }
          case _kinds.Kind.INTERFACE_TYPE_DEFINITION: {
            var _extensionASTNodes = extensionNodes;
            var _allNodes = [astNode].concat(_extensionASTNodes);
            return new _definition.GraphQLInterfaceType({
              name: name2,
              description,
              interfaces: function interfaces() {
                return buildInterfaces(_allNodes);
              },
              fields: function fields() {
                return buildFieldMap(_allNodes);
              },
              astNode,
              extensionASTNodes: _extensionASTNodes
            });
          }
          case _kinds.Kind.ENUM_TYPE_DEFINITION: {
            var _extensionASTNodes2 = extensionNodes;
            var _allNodes2 = [astNode].concat(_extensionASTNodes2);
            return new _definition.GraphQLEnumType({
              name: name2,
              description,
              values: buildEnumValueMap(_allNodes2),
              astNode,
              extensionASTNodes: _extensionASTNodes2
            });
          }
          case _kinds.Kind.UNION_TYPE_DEFINITION: {
            var _extensionASTNodes3 = extensionNodes;
            var _allNodes3 = [astNode].concat(_extensionASTNodes3);
            return new _definition.GraphQLUnionType({
              name: name2,
              description,
              types: function types3() {
                return buildUnionTypes(_allNodes3);
              },
              astNode,
              extensionASTNodes: _extensionASTNodes3
            });
          }
          case _kinds.Kind.SCALAR_TYPE_DEFINITION: {
            var _extensionASTNodes4 = extensionNodes;
            return new _definition.GraphQLScalarType({
              name: name2,
              description,
              specifiedByUrl: getSpecifiedByUrl(astNode),
              astNode,
              extensionASTNodes: _extensionASTNodes4
            });
          }
          case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION: {
            var _extensionASTNodes5 = extensionNodes;
            var _allNodes4 = [astNode].concat(_extensionASTNodes5);
            return new _definition.GraphQLInputObjectType({
              name: name2,
              description,
              fields: function fields() {
                return buildInputFieldMap(_allNodes4);
              },
              astNode,
              extensionASTNodes: _extensionASTNodes5
            });
          }
        }
        (0, _invariant.default)(0, "Unexpected type definition node: " + (0, _inspect.default)(astNode));
      }
    }
    var stdTypeMap = (0, _keyMap.default)(_scalars.specifiedScalarTypes.concat(_introspection.introspectionTypes), function(type) {
      return type.name;
    });
    function getDeprecationReason(node) {
      var deprecated = (0, _values.getDirectiveValues)(_directives.GraphQLDeprecatedDirective, node);
      return deprecated === null || deprecated === void 0 ? void 0 : deprecated.reason;
    }
    function getSpecifiedByUrl(node) {
      var specifiedBy = (0, _values.getDirectiveValues)(_directives.GraphQLSpecifiedByDirective, node);
      return specifiedBy === null || specifiedBy === void 0 ? void 0 : specifiedBy.url;
    }
    function getDescription(node, options) {
      if (node.description) {
        return node.description.value;
      }
      if ((options === null || options === void 0 ? void 0 : options.commentDescriptions) === true) {
        var rawValue = getLeadingCommentBlock(node);
        if (rawValue !== void 0) {
          return (0, _blockString.dedentBlockStringValue)("\n" + rawValue);
        }
      }
    }
    function getLeadingCommentBlock(node) {
      var loc = node.loc;
      if (!loc) {
        return;
      }
      var comments = [];
      var token = loc.startToken.prev;
      while (token != null && token.kind === _tokenKind.TokenKind.COMMENT && token.next && token.prev && token.line + 1 === token.next.line && token.line !== token.prev.line) {
        var value = String(token.value);
        comments.push(value);
        token = token.prev;
      }
      return comments.length > 0 ? comments.reverse().join("\n") : void 0;
    }
  }
});

// node_modules/graphql/utilities/buildASTSchema.js
var require_buildASTSchema = __commonJS({
  "node_modules/graphql/utilities/buildASTSchema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.buildASTSchema = buildASTSchema;
    exports.buildSchema = buildSchema;
    var _devAssert = _interopRequireDefault(require_devAssert());
    var _kinds = require_kinds();
    var _parser = require_parser();
    var _validate = require_validate2();
    var _schema = require_schema();
    var _directives = require_directives();
    var _extendSchema = require_extendSchema();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function buildASTSchema(documentAST, options) {
      documentAST != null && documentAST.kind === _kinds.Kind.DOCUMENT || (0, _devAssert.default)(0, "Must provide valid Document AST.");
      if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {
        (0, _validate.assertValidSDL)(documentAST);
      }
      var emptySchemaConfig = {
        description: void 0,
        types: [],
        directives: [],
        extensions: void 0,
        extensionASTNodes: [],
        assumeValid: false
      };
      var config = (0, _extendSchema.extendSchemaImpl)(emptySchemaConfig, documentAST, options);
      if (config.astNode == null) {
        for (var _i2 = 0, _config$types2 = config.types; _i2 < _config$types2.length; _i2++) {
          var type = _config$types2[_i2];
          switch (type.name) {
            case "Query":
              config.query = type;
              break;
            case "Mutation":
              config.mutation = type;
              break;
            case "Subscription":
              config.subscription = type;
              break;
          }
        }
      }
      var directives = config.directives;
      var _loop = function _loop2(_i42) {
        var stdDirective = _directives.specifiedDirectives[_i42];
        if (directives.every(function(directive) {
          return directive.name !== stdDirective.name;
        })) {
          directives.push(stdDirective);
        }
      };
      for (var _i4 = 0; _i4 < _directives.specifiedDirectives.length; _i4++) {
        _loop(_i4);
      }
      return new _schema.GraphQLSchema(config);
    }
    function buildSchema(source, options) {
      var document2 = (0, _parser.parse)(source, {
        noLocation: options === null || options === void 0 ? void 0 : options.noLocation,
        allowLegacySDLEmptyFields: options === null || options === void 0 ? void 0 : options.allowLegacySDLEmptyFields,
        allowLegacySDLImplementsInterfaces: options === null || options === void 0 ? void 0 : options.allowLegacySDLImplementsInterfaces,
        experimentalFragmentVariables: options === null || options === void 0 ? void 0 : options.experimentalFragmentVariables
      });
      return buildASTSchema(document2, {
        commentDescriptions: options === null || options === void 0 ? void 0 : options.commentDescriptions,
        assumeValidSDL: options === null || options === void 0 ? void 0 : options.assumeValidSDL,
        assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid
      });
    }
  }
});

// node_modules/graphql/utilities/lexicographicSortSchema.js
var require_lexicographicSortSchema = __commonJS({
  "node_modules/graphql/utilities/lexicographicSortSchema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.lexicographicSortSchema = lexicographicSortSchema;
    var _objectValues = _interopRequireDefault(require_objectValues());
    var _inspect = _interopRequireDefault(require_inspect());
    var _invariant = _interopRequireDefault(require_invariant());
    var _keyValMap = _interopRequireDefault(require_keyValMap());
    var _naturalCompare = _interopRequireDefault(require_naturalCompare());
    var _schema = require_schema();
    var _directives = require_directives();
    var _introspection = require_introspection();
    var _definition = require_definition();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2] != null ? arguments[i2] : {};
        if (i2 % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function lexicographicSortSchema(schema2) {
      var schemaConfig = schema2.toConfig();
      var typeMap = (0, _keyValMap.default)(sortByName(schemaConfig.types), function(type) {
        return type.name;
      }, sortNamedType);
      return new _schema.GraphQLSchema(_objectSpread(_objectSpread({}, schemaConfig), {}, {
        types: (0, _objectValues.default)(typeMap),
        directives: sortByName(schemaConfig.directives).map(sortDirective),
        query: replaceMaybeType(schemaConfig.query),
        mutation: replaceMaybeType(schemaConfig.mutation),
        subscription: replaceMaybeType(schemaConfig.subscription)
      }));
      function replaceType(type) {
        if ((0, _definition.isListType)(type)) {
          return new _definition.GraphQLList(replaceType(type.ofType));
        } else if ((0, _definition.isNonNullType)(type)) {
          return new _definition.GraphQLNonNull(replaceType(type.ofType));
        }
        return replaceNamedType(type);
      }
      function replaceNamedType(type) {
        return typeMap[type.name];
      }
      function replaceMaybeType(maybeType) {
        return maybeType && replaceNamedType(maybeType);
      }
      function sortDirective(directive) {
        var config = directive.toConfig();
        return new _directives.GraphQLDirective(_objectSpread(_objectSpread({}, config), {}, {
          locations: sortBy(config.locations, function(x2) {
            return x2;
          }),
          args: sortArgs(config.args)
        }));
      }
      function sortArgs(args) {
        return sortObjMap(args, function(arg) {
          return _objectSpread(_objectSpread({}, arg), {}, {
            type: replaceType(arg.type)
          });
        });
      }
      function sortFields(fieldsMap) {
        return sortObjMap(fieldsMap, function(field) {
          return _objectSpread(_objectSpread({}, field), {}, {
            type: replaceType(field.type),
            args: sortArgs(field.args)
          });
        });
      }
      function sortInputFields(fieldsMap) {
        return sortObjMap(fieldsMap, function(field) {
          return _objectSpread(_objectSpread({}, field), {}, {
            type: replaceType(field.type)
          });
        });
      }
      function sortTypes(arr) {
        return sortByName(arr).map(replaceNamedType);
      }
      function sortNamedType(type) {
        if ((0, _definition.isScalarType)(type) || (0, _introspection.isIntrospectionType)(type)) {
          return type;
        }
        if ((0, _definition.isObjectType)(type)) {
          var config = type.toConfig();
          return new _definition.GraphQLObjectType(_objectSpread(_objectSpread({}, config), {}, {
            interfaces: function interfaces() {
              return sortTypes(config.interfaces);
            },
            fields: function fields() {
              return sortFields(config.fields);
            }
          }));
        }
        if ((0, _definition.isInterfaceType)(type)) {
          var _config = type.toConfig();
          return new _definition.GraphQLInterfaceType(_objectSpread(_objectSpread({}, _config), {}, {
            interfaces: function interfaces() {
              return sortTypes(_config.interfaces);
            },
            fields: function fields() {
              return sortFields(_config.fields);
            }
          }));
        }
        if ((0, _definition.isUnionType)(type)) {
          var _config2 = type.toConfig();
          return new _definition.GraphQLUnionType(_objectSpread(_objectSpread({}, _config2), {}, {
            types: function types3() {
              return sortTypes(_config2.types);
            }
          }));
        }
        if ((0, _definition.isEnumType)(type)) {
          var _config3 = type.toConfig();
          return new _definition.GraphQLEnumType(_objectSpread(_objectSpread({}, _config3), {}, {
            values: sortObjMap(_config3.values)
          }));
        }
        if ((0, _definition.isInputObjectType)(type)) {
          var _config4 = type.toConfig();
          return new _definition.GraphQLInputObjectType(_objectSpread(_objectSpread({}, _config4), {}, {
            fields: function fields() {
              return sortInputFields(_config4.fields);
            }
          }));
        }
        (0, _invariant.default)(0, "Unexpected type: " + (0, _inspect.default)(type));
      }
    }
    function sortObjMap(map, sortValueFn) {
      var sortedMap = /* @__PURE__ */ Object.create(null);
      var sortedKeys = sortBy(Object.keys(map), function(x2) {
        return x2;
      });
      for (var _i2 = 0; _i2 < sortedKeys.length; _i2++) {
        var key = sortedKeys[_i2];
        var value = map[key];
        sortedMap[key] = sortValueFn ? sortValueFn(value) : value;
      }
      return sortedMap;
    }
    function sortByName(array) {
      return sortBy(array, function(obj) {
        return obj.name;
      });
    }
    function sortBy(array, mapToKey) {
      return array.slice().sort(function(obj1, obj2) {
        var key1 = mapToKey(obj1);
        var key2 = mapToKey(obj2);
        return (0, _naturalCompare.default)(key1, key2);
      });
    }
  }
});

// node_modules/graphql/utilities/printSchema.js
var require_printSchema = __commonJS({
  "node_modules/graphql/utilities/printSchema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.printSchema = printSchema;
    exports.printIntrospectionSchema = printIntrospectionSchema;
    exports.printType = printType;
    var _objectValues = _interopRequireDefault(require_objectValues());
    var _inspect = _interopRequireDefault(require_inspect());
    var _invariant = _interopRequireDefault(require_invariant());
    var _printer = require_printer();
    var _blockString = require_blockString();
    var _introspection = require_introspection();
    var _scalars = require_scalars();
    var _directives = require_directives();
    var _definition = require_definition();
    var _astFromValue = require_astFromValue();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function printSchema(schema2, options) {
      return printFilteredSchema(schema2, function(n) {
        return !(0, _directives.isSpecifiedDirective)(n);
      }, isDefinedType, options);
    }
    function printIntrospectionSchema(schema2, options) {
      return printFilteredSchema(schema2, _directives.isSpecifiedDirective, _introspection.isIntrospectionType, options);
    }
    function isDefinedType(type) {
      return !(0, _scalars.isSpecifiedScalarType)(type) && !(0, _introspection.isIntrospectionType)(type);
    }
    function printFilteredSchema(schema2, directiveFilter, typeFilter, options) {
      var directives = schema2.getDirectives().filter(directiveFilter);
      var types3 = (0, _objectValues.default)(schema2.getTypeMap()).filter(typeFilter);
      return [printSchemaDefinition(schema2)].concat(directives.map(function(directive) {
        return printDirective(directive, options);
      }), types3.map(function(type) {
        return printType(type, options);
      })).filter(Boolean).join("\n\n") + "\n";
    }
    function printSchemaDefinition(schema2) {
      if (schema2.description == null && isSchemaOfCommonNames(schema2)) {
        return;
      }
      var operationTypes = [];
      var queryType = schema2.getQueryType();
      if (queryType) {
        operationTypes.push("  query: ".concat(queryType.name));
      }
      var mutationType = schema2.getMutationType();
      if (mutationType) {
        operationTypes.push("  mutation: ".concat(mutationType.name));
      }
      var subscriptionType = schema2.getSubscriptionType();
      if (subscriptionType) {
        operationTypes.push("  subscription: ".concat(subscriptionType.name));
      }
      return printDescription({}, schema2) + "schema {\n".concat(operationTypes.join("\n"), "\n}");
    }
    function isSchemaOfCommonNames(schema2) {
      var queryType = schema2.getQueryType();
      if (queryType && queryType.name !== "Query") {
        return false;
      }
      var mutationType = schema2.getMutationType();
      if (mutationType && mutationType.name !== "Mutation") {
        return false;
      }
      var subscriptionType = schema2.getSubscriptionType();
      if (subscriptionType && subscriptionType.name !== "Subscription") {
        return false;
      }
      return true;
    }
    function printType(type, options) {
      if ((0, _definition.isScalarType)(type)) {
        return printScalar(type, options);
      }
      if ((0, _definition.isObjectType)(type)) {
        return printObject(type, options);
      }
      if ((0, _definition.isInterfaceType)(type)) {
        return printInterface(type, options);
      }
      if ((0, _definition.isUnionType)(type)) {
        return printUnion(type, options);
      }
      if ((0, _definition.isEnumType)(type)) {
        return printEnum(type, options);
      }
      if ((0, _definition.isInputObjectType)(type)) {
        return printInputObject(type, options);
      }
      (0, _invariant.default)(0, "Unexpected type: " + (0, _inspect.default)(type));
    }
    function printScalar(type, options) {
      return printDescription(options, type) + "scalar ".concat(type.name) + printSpecifiedByUrl(type);
    }
    function printImplementedInterfaces(type) {
      var interfaces = type.getInterfaces();
      return interfaces.length ? " implements " + interfaces.map(function(i2) {
        return i2.name;
      }).join(" & ") : "";
    }
    function printObject(type, options) {
      return printDescription(options, type) + "type ".concat(type.name) + printImplementedInterfaces(type) + printFields(options, type);
    }
    function printInterface(type, options) {
      return printDescription(options, type) + "interface ".concat(type.name) + printImplementedInterfaces(type) + printFields(options, type);
    }
    function printUnion(type, options) {
      var types3 = type.getTypes();
      var possibleTypes = types3.length ? " = " + types3.join(" | ") : "";
      return printDescription(options, type) + "union " + type.name + possibleTypes;
    }
    function printEnum(type, options) {
      var values = type.getValues().map(function(value, i2) {
        return printDescription(options, value, "  ", !i2) + "  " + value.name + printDeprecated(value.deprecationReason);
      });
      return printDescription(options, type) + "enum ".concat(type.name) + printBlock(values);
    }
    function printInputObject(type, options) {
      var fields = (0, _objectValues.default)(type.getFields()).map(function(f3, i2) {
        return printDescription(options, f3, "  ", !i2) + "  " + printInputValue(f3);
      });
      return printDescription(options, type) + "input ".concat(type.name) + printBlock(fields);
    }
    function printFields(options, type) {
      var fields = (0, _objectValues.default)(type.getFields()).map(function(f3, i2) {
        return printDescription(options, f3, "  ", !i2) + "  " + f3.name + printArgs(options, f3.args, "  ") + ": " + String(f3.type) + printDeprecated(f3.deprecationReason);
      });
      return printBlock(fields);
    }
    function printBlock(items) {
      return items.length !== 0 ? " {\n" + items.join("\n") + "\n}" : "";
    }
    function printArgs(options, args) {
      var indentation = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
      if (args.length === 0) {
        return "";
      }
      if (args.every(function(arg) {
        return !arg.description;
      })) {
        return "(" + args.map(printInputValue).join(", ") + ")";
      }
      return "(\n" + args.map(function(arg, i2) {
        return printDescription(options, arg, "  " + indentation, !i2) + "  " + indentation + printInputValue(arg);
      }).join("\n") + "\n" + indentation + ")";
    }
    function printInputValue(arg) {
      var defaultAST = (0, _astFromValue.astFromValue)(arg.defaultValue, arg.type);
      var argDecl = arg.name + ": " + String(arg.type);
      if (defaultAST) {
        argDecl += " = ".concat((0, _printer.print)(defaultAST));
      }
      return argDecl + printDeprecated(arg.deprecationReason);
    }
    function printDirective(directive, options) {
      return printDescription(options, directive) + "directive @" + directive.name + printArgs(options, directive.args) + (directive.isRepeatable ? " repeatable" : "") + " on " + directive.locations.join(" | ");
    }
    function printDeprecated(reason) {
      if (reason == null) {
        return "";
      }
      var reasonAST = (0, _astFromValue.astFromValue)(reason, _scalars.GraphQLString);
      if (reasonAST && reason !== _directives.DEFAULT_DEPRECATION_REASON) {
        return " @deprecated(reason: " + (0, _printer.print)(reasonAST) + ")";
      }
      return " @deprecated";
    }
    function printSpecifiedByUrl(scalar) {
      if (scalar.specifiedByUrl == null) {
        return "";
      }
      var url = scalar.specifiedByUrl;
      var urlAST = (0, _astFromValue.astFromValue)(url, _scalars.GraphQLString);
      urlAST || (0, _invariant.default)(0, "Unexpected null value returned from `astFromValue` for specifiedByUrl");
      return " @specifiedBy(url: " + (0, _printer.print)(urlAST) + ")";
    }
    function printDescription(options, def) {
      var indentation = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
      var firstInBlock = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
      var description = def.description;
      if (description == null) {
        return "";
      }
      if ((options === null || options === void 0 ? void 0 : options.commentDescriptions) === true) {
        return printDescriptionWithComments(description, indentation, firstInBlock);
      }
      var preferMultipleLines = description.length > 70;
      var blockString = (0, _blockString.printBlockString)(description, "", preferMultipleLines);
      var prefix = indentation && !firstInBlock ? "\n" + indentation : indentation;
      return prefix + blockString.replace(/\n/g, "\n" + indentation) + "\n";
    }
    function printDescriptionWithComments(description, indentation, firstInBlock) {
      var prefix = indentation && !firstInBlock ? "\n" : "";
      var comment = description.split("\n").map(function(line) {
        return indentation + (line !== "" ? "# " + line : "#");
      }).join("\n");
      return prefix + comment + "\n";
    }
  }
});

// node_modules/graphql/utilities/concatAST.js
var require_concatAST = __commonJS({
  "node_modules/graphql/utilities/concatAST.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.concatAST = concatAST;
    function concatAST(documents) {
      var definitions = [];
      for (var _i2 = 0; _i2 < documents.length; _i2++) {
        var doc = documents[_i2];
        definitions = definitions.concat(doc.definitions);
      }
      return {
        kind: "Document",
        definitions
      };
    }
  }
});

// node_modules/graphql/utilities/separateOperations.js
var require_separateOperations = __commonJS({
  "node_modules/graphql/utilities/separateOperations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.separateOperations = separateOperations;
    var _kinds = require_kinds();
    var _visitor = require_visitor();
    function separateOperations(documentAST) {
      var operations = [];
      var depGraph = /* @__PURE__ */ Object.create(null);
      for (var _i2 = 0, _documentAST$definiti2 = documentAST.definitions; _i2 < _documentAST$definiti2.length; _i2++) {
        var definitionNode = _documentAST$definiti2[_i2];
        switch (definitionNode.kind) {
          case _kinds.Kind.OPERATION_DEFINITION:
            operations.push(definitionNode);
            break;
          case _kinds.Kind.FRAGMENT_DEFINITION:
            depGraph[definitionNode.name.value] = collectDependencies(definitionNode.selectionSet);
            break;
        }
      }
      var separatedDocumentASTs = /* @__PURE__ */ Object.create(null);
      var _loop = function _loop2(_i42) {
        var operation = operations[_i42];
        var dependencies = /* @__PURE__ */ new Set();
        for (var _i6 = 0, _collectDependencies2 = collectDependencies(operation.selectionSet); _i6 < _collectDependencies2.length; _i6++) {
          var fragmentName = _collectDependencies2[_i6];
          collectTransitiveDependencies(dependencies, depGraph, fragmentName);
        }
        var operationName = operation.name ? operation.name.value : "";
        separatedDocumentASTs[operationName] = {
          kind: _kinds.Kind.DOCUMENT,
          definitions: documentAST.definitions.filter(function(node) {
            return node === operation || node.kind === _kinds.Kind.FRAGMENT_DEFINITION && dependencies.has(node.name.value);
          })
        };
      };
      for (var _i4 = 0; _i4 < operations.length; _i4++) {
        _loop(_i4);
      }
      return separatedDocumentASTs;
    }
    function collectTransitiveDependencies(collected, depGraph, fromName) {
      if (!collected.has(fromName)) {
        collected.add(fromName);
        var immediateDeps = depGraph[fromName];
        if (immediateDeps !== void 0) {
          for (var _i8 = 0; _i8 < immediateDeps.length; _i8++) {
            var toName = immediateDeps[_i8];
            collectTransitiveDependencies(collected, depGraph, toName);
          }
        }
      }
    }
    function collectDependencies(selectionSet) {
      var dependencies = [];
      (0, _visitor.visit)(selectionSet, {
        FragmentSpread: function FragmentSpread(node) {
          dependencies.push(node.name.value);
        }
      });
      return dependencies;
    }
  }
});

// node_modules/graphql/utilities/stripIgnoredCharacters.js
var require_stripIgnoredCharacters = __commonJS({
  "node_modules/graphql/utilities/stripIgnoredCharacters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.stripIgnoredCharacters = stripIgnoredCharacters;
    var _source = require_source();
    var _tokenKind = require_tokenKind();
    var _lexer = require_lexer();
    var _blockString = require_blockString();
    function stripIgnoredCharacters(source) {
      var sourceObj = (0, _source.isSource)(source) ? source : new _source.Source(source);
      var body = sourceObj.body;
      var lexer = new _lexer.Lexer(sourceObj);
      var strippedBody = "";
      var wasLastAddedTokenNonPunctuator = false;
      while (lexer.advance().kind !== _tokenKind.TokenKind.EOF) {
        var currentToken = lexer.token;
        var tokenKind = currentToken.kind;
        var isNonPunctuator = !(0, _lexer.isPunctuatorTokenKind)(currentToken.kind);
        if (wasLastAddedTokenNonPunctuator) {
          if (isNonPunctuator || currentToken.kind === _tokenKind.TokenKind.SPREAD) {
            strippedBody += " ";
          }
        }
        var tokenBody = body.slice(currentToken.start, currentToken.end);
        if (tokenKind === _tokenKind.TokenKind.BLOCK_STRING) {
          strippedBody += dedentBlockString(tokenBody);
        } else {
          strippedBody += tokenBody;
        }
        wasLastAddedTokenNonPunctuator = isNonPunctuator;
      }
      return strippedBody;
    }
    function dedentBlockString(blockStr) {
      var rawStr = blockStr.slice(3, -3);
      var body = (0, _blockString.dedentBlockStringValue)(rawStr);
      if ((0, _blockString.getBlockStringIndentation)(body) > 0) {
        body = "\n" + body;
      }
      var lastChar = body[body.length - 1];
      var hasTrailingQuote = lastChar === '"' && body.slice(-4) !== '\\"""';
      if (hasTrailingQuote || lastChar === "\\") {
        body += "\n";
      }
      return '"""' + body + '"""';
    }
  }
});

// node_modules/graphql/utilities/findBreakingChanges.js
var require_findBreakingChanges = __commonJS({
  "node_modules/graphql/utilities/findBreakingChanges.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.findBreakingChanges = findBreakingChanges;
    exports.findDangerousChanges = findDangerousChanges;
    exports.DangerousChangeType = exports.BreakingChangeType = void 0;
    var _objectValues = _interopRequireDefault(require_objectValues());
    var _keyMap = _interopRequireDefault(require_keyMap());
    var _inspect = _interopRequireDefault(require_inspect());
    var _invariant = _interopRequireDefault(require_invariant());
    var _naturalCompare = _interopRequireDefault(require_naturalCompare());
    var _printer = require_printer();
    var _visitor = require_visitor();
    var _scalars = require_scalars();
    var _definition = require_definition();
    var _astFromValue = require_astFromValue();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2] != null ? arguments[i2] : {};
        if (i2 % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var BreakingChangeType = Object.freeze({
      TYPE_REMOVED: "TYPE_REMOVED",
      TYPE_CHANGED_KIND: "TYPE_CHANGED_KIND",
      TYPE_REMOVED_FROM_UNION: "TYPE_REMOVED_FROM_UNION",
      VALUE_REMOVED_FROM_ENUM: "VALUE_REMOVED_FROM_ENUM",
      REQUIRED_INPUT_FIELD_ADDED: "REQUIRED_INPUT_FIELD_ADDED",
      IMPLEMENTED_INTERFACE_REMOVED: "IMPLEMENTED_INTERFACE_REMOVED",
      FIELD_REMOVED: "FIELD_REMOVED",
      FIELD_CHANGED_KIND: "FIELD_CHANGED_KIND",
      REQUIRED_ARG_ADDED: "REQUIRED_ARG_ADDED",
      ARG_REMOVED: "ARG_REMOVED",
      ARG_CHANGED_KIND: "ARG_CHANGED_KIND",
      DIRECTIVE_REMOVED: "DIRECTIVE_REMOVED",
      DIRECTIVE_ARG_REMOVED: "DIRECTIVE_ARG_REMOVED",
      REQUIRED_DIRECTIVE_ARG_ADDED: "REQUIRED_DIRECTIVE_ARG_ADDED",
      DIRECTIVE_REPEATABLE_REMOVED: "DIRECTIVE_REPEATABLE_REMOVED",
      DIRECTIVE_LOCATION_REMOVED: "DIRECTIVE_LOCATION_REMOVED"
    });
    exports.BreakingChangeType = BreakingChangeType;
    var DangerousChangeType = Object.freeze({
      VALUE_ADDED_TO_ENUM: "VALUE_ADDED_TO_ENUM",
      TYPE_ADDED_TO_UNION: "TYPE_ADDED_TO_UNION",
      OPTIONAL_INPUT_FIELD_ADDED: "OPTIONAL_INPUT_FIELD_ADDED",
      OPTIONAL_ARG_ADDED: "OPTIONAL_ARG_ADDED",
      IMPLEMENTED_INTERFACE_ADDED: "IMPLEMENTED_INTERFACE_ADDED",
      ARG_DEFAULT_VALUE_CHANGE: "ARG_DEFAULT_VALUE_CHANGE"
    });
    exports.DangerousChangeType = DangerousChangeType;
    function findBreakingChanges(oldSchema, newSchema) {
      var breakingChanges = findSchemaChanges(oldSchema, newSchema).filter(function(change) {
        return change.type in BreakingChangeType;
      });
      return breakingChanges;
    }
    function findDangerousChanges(oldSchema, newSchema) {
      var dangerousChanges = findSchemaChanges(oldSchema, newSchema).filter(function(change) {
        return change.type in DangerousChangeType;
      });
      return dangerousChanges;
    }
    function findSchemaChanges(oldSchema, newSchema) {
      return [].concat(findTypeChanges(oldSchema, newSchema), findDirectiveChanges(oldSchema, newSchema));
    }
    function findDirectiveChanges(oldSchema, newSchema) {
      var schemaChanges = [];
      var directivesDiff = diff(oldSchema.getDirectives(), newSchema.getDirectives());
      for (var _i2 = 0, _directivesDiff$remov2 = directivesDiff.removed; _i2 < _directivesDiff$remov2.length; _i2++) {
        var oldDirective = _directivesDiff$remov2[_i2];
        schemaChanges.push({
          type: BreakingChangeType.DIRECTIVE_REMOVED,
          description: "".concat(oldDirective.name, " was removed.")
        });
      }
      for (var _i4 = 0, _directivesDiff$persi2 = directivesDiff.persisted; _i4 < _directivesDiff$persi2.length; _i4++) {
        var _ref2 = _directivesDiff$persi2[_i4];
        var _oldDirective = _ref2[0];
        var newDirective = _ref2[1];
        var argsDiff = diff(_oldDirective.args, newDirective.args);
        for (var _i6 = 0, _argsDiff$added2 = argsDiff.added; _i6 < _argsDiff$added2.length; _i6++) {
          var newArg = _argsDiff$added2[_i6];
          if ((0, _definition.isRequiredArgument)(newArg)) {
            schemaChanges.push({
              type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,
              description: "A required arg ".concat(newArg.name, " on directive ").concat(_oldDirective.name, " was added.")
            });
          }
        }
        for (var _i8 = 0, _argsDiff$removed2 = argsDiff.removed; _i8 < _argsDiff$removed2.length; _i8++) {
          var oldArg = _argsDiff$removed2[_i8];
          schemaChanges.push({
            type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,
            description: "".concat(oldArg.name, " was removed from ").concat(_oldDirective.name, ".")
          });
        }
        if (_oldDirective.isRepeatable && !newDirective.isRepeatable) {
          schemaChanges.push({
            type: BreakingChangeType.DIRECTIVE_REPEATABLE_REMOVED,
            description: "Repeatable flag was removed from ".concat(_oldDirective.name, ".")
          });
        }
        for (var _i10 = 0, _oldDirective$locatio2 = _oldDirective.locations; _i10 < _oldDirective$locatio2.length; _i10++) {
          var location = _oldDirective$locatio2[_i10];
          if (newDirective.locations.indexOf(location) === -1) {
            schemaChanges.push({
              type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,
              description: "".concat(location, " was removed from ").concat(_oldDirective.name, ".")
            });
          }
        }
      }
      return schemaChanges;
    }
    function findTypeChanges(oldSchema, newSchema) {
      var schemaChanges = [];
      var typesDiff = diff((0, _objectValues.default)(oldSchema.getTypeMap()), (0, _objectValues.default)(newSchema.getTypeMap()));
      for (var _i12 = 0, _typesDiff$removed2 = typesDiff.removed; _i12 < _typesDiff$removed2.length; _i12++) {
        var oldType = _typesDiff$removed2[_i12];
        schemaChanges.push({
          type: BreakingChangeType.TYPE_REMOVED,
          description: (0, _scalars.isSpecifiedScalarType)(oldType) ? "Standard scalar ".concat(oldType.name, " was removed because it is not referenced anymore.") : "".concat(oldType.name, " was removed.")
        });
      }
      for (var _i14 = 0, _typesDiff$persisted2 = typesDiff.persisted; _i14 < _typesDiff$persisted2.length; _i14++) {
        var _ref4 = _typesDiff$persisted2[_i14];
        var _oldType = _ref4[0];
        var newType = _ref4[1];
        if ((0, _definition.isEnumType)(_oldType) && (0, _definition.isEnumType)(newType)) {
          schemaChanges.push.apply(schemaChanges, findEnumTypeChanges(_oldType, newType));
        } else if ((0, _definition.isUnionType)(_oldType) && (0, _definition.isUnionType)(newType)) {
          schemaChanges.push.apply(schemaChanges, findUnionTypeChanges(_oldType, newType));
        } else if ((0, _definition.isInputObjectType)(_oldType) && (0, _definition.isInputObjectType)(newType)) {
          schemaChanges.push.apply(schemaChanges, findInputObjectTypeChanges(_oldType, newType));
        } else if ((0, _definition.isObjectType)(_oldType) && (0, _definition.isObjectType)(newType)) {
          schemaChanges.push.apply(schemaChanges, findFieldChanges(_oldType, newType).concat(findImplementedInterfacesChanges(_oldType, newType)));
        } else if ((0, _definition.isInterfaceType)(_oldType) && (0, _definition.isInterfaceType)(newType)) {
          schemaChanges.push.apply(schemaChanges, findFieldChanges(_oldType, newType).concat(findImplementedInterfacesChanges(_oldType, newType)));
        } else if (_oldType.constructor !== newType.constructor) {
          schemaChanges.push({
            type: BreakingChangeType.TYPE_CHANGED_KIND,
            description: "".concat(_oldType.name, " changed from ") + "".concat(typeKindName(_oldType), " to ").concat(typeKindName(newType), ".")
          });
        }
      }
      return schemaChanges;
    }
    function findInputObjectTypeChanges(oldType, newType) {
      var schemaChanges = [];
      var fieldsDiff = diff((0, _objectValues.default)(oldType.getFields()), (0, _objectValues.default)(newType.getFields()));
      for (var _i16 = 0, _fieldsDiff$added2 = fieldsDiff.added; _i16 < _fieldsDiff$added2.length; _i16++) {
        var newField = _fieldsDiff$added2[_i16];
        if ((0, _definition.isRequiredInputField)(newField)) {
          schemaChanges.push({
            type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,
            description: "A required field ".concat(newField.name, " on input type ").concat(oldType.name, " was added.")
          });
        } else {
          schemaChanges.push({
            type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,
            description: "An optional field ".concat(newField.name, " on input type ").concat(oldType.name, " was added.")
          });
        }
      }
      for (var _i18 = 0, _fieldsDiff$removed2 = fieldsDiff.removed; _i18 < _fieldsDiff$removed2.length; _i18++) {
        var oldField = _fieldsDiff$removed2[_i18];
        schemaChanges.push({
          type: BreakingChangeType.FIELD_REMOVED,
          description: "".concat(oldType.name, ".").concat(oldField.name, " was removed.")
        });
      }
      for (var _i20 = 0, _fieldsDiff$persisted2 = fieldsDiff.persisted; _i20 < _fieldsDiff$persisted2.length; _i20++) {
        var _ref6 = _fieldsDiff$persisted2[_i20];
        var _oldField = _ref6[0];
        var _newField = _ref6[1];
        var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldField.type, _newField.type);
        if (!isSafe) {
          schemaChanges.push({
            type: BreakingChangeType.FIELD_CHANGED_KIND,
            description: "".concat(oldType.name, ".").concat(_oldField.name, " changed type from ") + "".concat(String(_oldField.type), " to ").concat(String(_newField.type), ".")
          });
        }
      }
      return schemaChanges;
    }
    function findUnionTypeChanges(oldType, newType) {
      var schemaChanges = [];
      var possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());
      for (var _i22 = 0, _possibleTypesDiff$ad2 = possibleTypesDiff.added; _i22 < _possibleTypesDiff$ad2.length; _i22++) {
        var newPossibleType = _possibleTypesDiff$ad2[_i22];
        schemaChanges.push({
          type: DangerousChangeType.TYPE_ADDED_TO_UNION,
          description: "".concat(newPossibleType.name, " was added to union type ").concat(oldType.name, ".")
        });
      }
      for (var _i24 = 0, _possibleTypesDiff$re2 = possibleTypesDiff.removed; _i24 < _possibleTypesDiff$re2.length; _i24++) {
        var oldPossibleType = _possibleTypesDiff$re2[_i24];
        schemaChanges.push({
          type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,
          description: "".concat(oldPossibleType.name, " was removed from union type ").concat(oldType.name, ".")
        });
      }
      return schemaChanges;
    }
    function findEnumTypeChanges(oldType, newType) {
      var schemaChanges = [];
      var valuesDiff = diff(oldType.getValues(), newType.getValues());
      for (var _i26 = 0, _valuesDiff$added2 = valuesDiff.added; _i26 < _valuesDiff$added2.length; _i26++) {
        var newValue = _valuesDiff$added2[_i26];
        schemaChanges.push({
          type: DangerousChangeType.VALUE_ADDED_TO_ENUM,
          description: "".concat(newValue.name, " was added to enum type ").concat(oldType.name, ".")
        });
      }
      for (var _i28 = 0, _valuesDiff$removed2 = valuesDiff.removed; _i28 < _valuesDiff$removed2.length; _i28++) {
        var oldValue = _valuesDiff$removed2[_i28];
        schemaChanges.push({
          type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,
          description: "".concat(oldValue.name, " was removed from enum type ").concat(oldType.name, ".")
        });
      }
      return schemaChanges;
    }
    function findImplementedInterfacesChanges(oldType, newType) {
      var schemaChanges = [];
      var interfacesDiff = diff(oldType.getInterfaces(), newType.getInterfaces());
      for (var _i30 = 0, _interfacesDiff$added2 = interfacesDiff.added; _i30 < _interfacesDiff$added2.length; _i30++) {
        var newInterface = _interfacesDiff$added2[_i30];
        schemaChanges.push({
          type: DangerousChangeType.IMPLEMENTED_INTERFACE_ADDED,
          description: "".concat(newInterface.name, " added to interfaces implemented by ").concat(oldType.name, ".")
        });
      }
      for (var _i32 = 0, _interfacesDiff$remov2 = interfacesDiff.removed; _i32 < _interfacesDiff$remov2.length; _i32++) {
        var oldInterface = _interfacesDiff$remov2[_i32];
        schemaChanges.push({
          type: BreakingChangeType.IMPLEMENTED_INTERFACE_REMOVED,
          description: "".concat(oldType.name, " no longer implements interface ").concat(oldInterface.name, ".")
        });
      }
      return schemaChanges;
    }
    function findFieldChanges(oldType, newType) {
      var schemaChanges = [];
      var fieldsDiff = diff((0, _objectValues.default)(oldType.getFields()), (0, _objectValues.default)(newType.getFields()));
      for (var _i34 = 0, _fieldsDiff$removed4 = fieldsDiff.removed; _i34 < _fieldsDiff$removed4.length; _i34++) {
        var oldField = _fieldsDiff$removed4[_i34];
        schemaChanges.push({
          type: BreakingChangeType.FIELD_REMOVED,
          description: "".concat(oldType.name, ".").concat(oldField.name, " was removed.")
        });
      }
      for (var _i36 = 0, _fieldsDiff$persisted4 = fieldsDiff.persisted; _i36 < _fieldsDiff$persisted4.length; _i36++) {
        var _ref8 = _fieldsDiff$persisted4[_i36];
        var _oldField2 = _ref8[0];
        var newField = _ref8[1];
        schemaChanges.push.apply(schemaChanges, findArgChanges(oldType, _oldField2, newField));
        var isSafe = isChangeSafeForObjectOrInterfaceField(_oldField2.type, newField.type);
        if (!isSafe) {
          schemaChanges.push({
            type: BreakingChangeType.FIELD_CHANGED_KIND,
            description: "".concat(oldType.name, ".").concat(_oldField2.name, " changed type from ") + "".concat(String(_oldField2.type), " to ").concat(String(newField.type), ".")
          });
        }
      }
      return schemaChanges;
    }
    function findArgChanges(oldType, oldField, newField) {
      var schemaChanges = [];
      var argsDiff = diff(oldField.args, newField.args);
      for (var _i38 = 0, _argsDiff$removed4 = argsDiff.removed; _i38 < _argsDiff$removed4.length; _i38++) {
        var oldArg = _argsDiff$removed4[_i38];
        schemaChanges.push({
          type: BreakingChangeType.ARG_REMOVED,
          description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(oldArg.name, " was removed.")
        });
      }
      for (var _i40 = 0, _argsDiff$persisted2 = argsDiff.persisted; _i40 < _argsDiff$persisted2.length; _i40++) {
        var _ref10 = _argsDiff$persisted2[_i40];
        var _oldArg = _ref10[0];
        var newArg = _ref10[1];
        var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldArg.type, newArg.type);
        if (!isSafe) {
          schemaChanges.push({
            type: BreakingChangeType.ARG_CHANGED_KIND,
            description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(_oldArg.name, " has changed type from ") + "".concat(String(_oldArg.type), " to ").concat(String(newArg.type), ".")
          });
        } else if (_oldArg.defaultValue !== void 0) {
          if (newArg.defaultValue === void 0) {
            schemaChanges.push({
              type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,
              description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(_oldArg.name, " defaultValue was removed.")
            });
          } else {
            var oldValueStr = stringifyValue(_oldArg.defaultValue, _oldArg.type);
            var newValueStr = stringifyValue(newArg.defaultValue, newArg.type);
            if (oldValueStr !== newValueStr) {
              schemaChanges.push({
                type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,
                description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(_oldArg.name, " has changed defaultValue from ").concat(oldValueStr, " to ").concat(newValueStr, ".")
              });
            }
          }
        }
      }
      for (var _i42 = 0, _argsDiff$added4 = argsDiff.added; _i42 < _argsDiff$added4.length; _i42++) {
        var _newArg = _argsDiff$added4[_i42];
        if ((0, _definition.isRequiredArgument)(_newArg)) {
          schemaChanges.push({
            type: BreakingChangeType.REQUIRED_ARG_ADDED,
            description: "A required arg ".concat(_newArg.name, " on ").concat(oldType.name, ".").concat(oldField.name, " was added.")
          });
        } else {
          schemaChanges.push({
            type: DangerousChangeType.OPTIONAL_ARG_ADDED,
            description: "An optional arg ".concat(_newArg.name, " on ").concat(oldType.name, ".").concat(oldField.name, " was added.")
          });
        }
      }
      return schemaChanges;
    }
    function isChangeSafeForObjectOrInterfaceField(oldType, newType) {
      if ((0, _definition.isListType)(oldType)) {
        return (0, _definition.isListType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType) || (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType);
      }
      if ((0, _definition.isNonNullType)(oldType)) {
        return (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType);
      }
      return (0, _definition.isNamedType)(newType) && oldType.name === newType.name || (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType);
    }
    function isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {
      if ((0, _definition.isListType)(oldType)) {
        return (0, _definition.isListType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType);
      }
      if ((0, _definition.isNonNullType)(oldType)) {
        return (0, _definition.isNonNullType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType) || !(0, _definition.isNonNullType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType);
      }
      return (0, _definition.isNamedType)(newType) && oldType.name === newType.name;
    }
    function typeKindName(type) {
      if ((0, _definition.isScalarType)(type)) {
        return "a Scalar type";
      }
      if ((0, _definition.isObjectType)(type)) {
        return "an Object type";
      }
      if ((0, _definition.isInterfaceType)(type)) {
        return "an Interface type";
      }
      if ((0, _definition.isUnionType)(type)) {
        return "a Union type";
      }
      if ((0, _definition.isEnumType)(type)) {
        return "an Enum type";
      }
      if ((0, _definition.isInputObjectType)(type)) {
        return "an Input type";
      }
      (0, _invariant.default)(0, "Unexpected type: " + (0, _inspect.default)(type));
    }
    function stringifyValue(value, type) {
      var ast = (0, _astFromValue.astFromValue)(value, type);
      ast != null || (0, _invariant.default)(0);
      var sortedAST = (0, _visitor.visit)(ast, {
        ObjectValue: function ObjectValue(objectNode) {
          var fields = [].concat(objectNode.fields);
          fields.sort(function(fieldA, fieldB) {
            return (0, _naturalCompare.default)(fieldA.name.value, fieldB.name.value);
          });
          return _objectSpread(_objectSpread({}, objectNode), {}, {
            fields
          });
        }
      });
      return (0, _printer.print)(sortedAST);
    }
    function diff(oldArray, newArray) {
      var added = [];
      var removed = [];
      var persisted = [];
      var oldMap = (0, _keyMap.default)(oldArray, function(_ref11) {
        var name = _ref11.name;
        return name;
      });
      var newMap = (0, _keyMap.default)(newArray, function(_ref12) {
        var name = _ref12.name;
        return name;
      });
      for (var _i44 = 0; _i44 < oldArray.length; _i44++) {
        var oldItem = oldArray[_i44];
        var newItem = newMap[oldItem.name];
        if (newItem === void 0) {
          removed.push(oldItem);
        } else {
          persisted.push([oldItem, newItem]);
        }
      }
      for (var _i46 = 0; _i46 < newArray.length; _i46++) {
        var _newItem = newArray[_i46];
        if (oldMap[_newItem.name] === void 0) {
          added.push(_newItem);
        }
      }
      return {
        added,
        persisted,
        removed
      };
    }
  }
});

// node_modules/graphql/utilities/findDeprecatedUsages.js
var require_findDeprecatedUsages = __commonJS({
  "node_modules/graphql/utilities/findDeprecatedUsages.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.findDeprecatedUsages = findDeprecatedUsages;
    var _validate = require_validate2();
    var _NoDeprecatedCustomRule = require_NoDeprecatedCustomRule();
    function findDeprecatedUsages(schema2, ast) {
      return (0, _validate.validate)(schema2, ast, [_NoDeprecatedCustomRule.NoDeprecatedCustomRule]);
    }
  }
});

// node_modules/graphql/utilities/index.js
var require_utilities = __commonJS({
  "node_modules/graphql/utilities/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "getIntrospectionQuery", {
      enumerable: true,
      get: function get() {
        return _getIntrospectionQuery.getIntrospectionQuery;
      }
    });
    Object.defineProperty(exports, "getOperationAST", {
      enumerable: true,
      get: function get() {
        return _getOperationAST.getOperationAST;
      }
    });
    Object.defineProperty(exports, "getOperationRootType", {
      enumerable: true,
      get: function get() {
        return _getOperationRootType.getOperationRootType;
      }
    });
    Object.defineProperty(exports, "introspectionFromSchema", {
      enumerable: true,
      get: function get() {
        return _introspectionFromSchema.introspectionFromSchema;
      }
    });
    Object.defineProperty(exports, "buildClientSchema", {
      enumerable: true,
      get: function get() {
        return _buildClientSchema.buildClientSchema;
      }
    });
    Object.defineProperty(exports, "buildASTSchema", {
      enumerable: true,
      get: function get() {
        return _buildASTSchema.buildASTSchema;
      }
    });
    Object.defineProperty(exports, "buildSchema", {
      enumerable: true,
      get: function get() {
        return _buildASTSchema.buildSchema;
      }
    });
    Object.defineProperty(exports, "extendSchema", {
      enumerable: true,
      get: function get() {
        return _extendSchema.extendSchema;
      }
    });
    Object.defineProperty(exports, "getDescription", {
      enumerable: true,
      get: function get() {
        return _extendSchema.getDescription;
      }
    });
    Object.defineProperty(exports, "lexicographicSortSchema", {
      enumerable: true,
      get: function get() {
        return _lexicographicSortSchema.lexicographicSortSchema;
      }
    });
    Object.defineProperty(exports, "printSchema", {
      enumerable: true,
      get: function get() {
        return _printSchema.printSchema;
      }
    });
    Object.defineProperty(exports, "printType", {
      enumerable: true,
      get: function get() {
        return _printSchema.printType;
      }
    });
    Object.defineProperty(exports, "printIntrospectionSchema", {
      enumerable: true,
      get: function get() {
        return _printSchema.printIntrospectionSchema;
      }
    });
    Object.defineProperty(exports, "typeFromAST", {
      enumerable: true,
      get: function get() {
        return _typeFromAST.typeFromAST;
      }
    });
    Object.defineProperty(exports, "valueFromAST", {
      enumerable: true,
      get: function get() {
        return _valueFromAST.valueFromAST;
      }
    });
    Object.defineProperty(exports, "valueFromASTUntyped", {
      enumerable: true,
      get: function get() {
        return _valueFromASTUntyped.valueFromASTUntyped;
      }
    });
    Object.defineProperty(exports, "astFromValue", {
      enumerable: true,
      get: function get() {
        return _astFromValue.astFromValue;
      }
    });
    Object.defineProperty(exports, "TypeInfo", {
      enumerable: true,
      get: function get() {
        return _TypeInfo.TypeInfo;
      }
    });
    Object.defineProperty(exports, "visitWithTypeInfo", {
      enumerable: true,
      get: function get() {
        return _TypeInfo.visitWithTypeInfo;
      }
    });
    Object.defineProperty(exports, "coerceInputValue", {
      enumerable: true,
      get: function get() {
        return _coerceInputValue.coerceInputValue;
      }
    });
    Object.defineProperty(exports, "concatAST", {
      enumerable: true,
      get: function get() {
        return _concatAST.concatAST;
      }
    });
    Object.defineProperty(exports, "separateOperations", {
      enumerable: true,
      get: function get() {
        return _separateOperations.separateOperations;
      }
    });
    Object.defineProperty(exports, "stripIgnoredCharacters", {
      enumerable: true,
      get: function get() {
        return _stripIgnoredCharacters.stripIgnoredCharacters;
      }
    });
    Object.defineProperty(exports, "isEqualType", {
      enumerable: true,
      get: function get() {
        return _typeComparators.isEqualType;
      }
    });
    Object.defineProperty(exports, "isTypeSubTypeOf", {
      enumerable: true,
      get: function get() {
        return _typeComparators.isTypeSubTypeOf;
      }
    });
    Object.defineProperty(exports, "doTypesOverlap", {
      enumerable: true,
      get: function get() {
        return _typeComparators.doTypesOverlap;
      }
    });
    Object.defineProperty(exports, "assertValidName", {
      enumerable: true,
      get: function get() {
        return _assertValidName.assertValidName;
      }
    });
    Object.defineProperty(exports, "isValidNameError", {
      enumerable: true,
      get: function get() {
        return _assertValidName.isValidNameError;
      }
    });
    Object.defineProperty(exports, "BreakingChangeType", {
      enumerable: true,
      get: function get() {
        return _findBreakingChanges.BreakingChangeType;
      }
    });
    Object.defineProperty(exports, "DangerousChangeType", {
      enumerable: true,
      get: function get() {
        return _findBreakingChanges.DangerousChangeType;
      }
    });
    Object.defineProperty(exports, "findBreakingChanges", {
      enumerable: true,
      get: function get() {
        return _findBreakingChanges.findBreakingChanges;
      }
    });
    Object.defineProperty(exports, "findDangerousChanges", {
      enumerable: true,
      get: function get() {
        return _findBreakingChanges.findDangerousChanges;
      }
    });
    Object.defineProperty(exports, "findDeprecatedUsages", {
      enumerable: true,
      get: function get() {
        return _findDeprecatedUsages.findDeprecatedUsages;
      }
    });
    var _getIntrospectionQuery = require_getIntrospectionQuery();
    var _getOperationAST = require_getOperationAST();
    var _getOperationRootType = require_getOperationRootType();
    var _introspectionFromSchema = require_introspectionFromSchema();
    var _buildClientSchema = require_buildClientSchema();
    var _buildASTSchema = require_buildASTSchema();
    var _extendSchema = require_extendSchema();
    var _lexicographicSortSchema = require_lexicographicSortSchema();
    var _printSchema = require_printSchema();
    var _typeFromAST = require_typeFromAST();
    var _valueFromAST = require_valueFromAST();
    var _valueFromASTUntyped = require_valueFromASTUntyped();
    var _astFromValue = require_astFromValue();
    var _TypeInfo = require_TypeInfo();
    var _coerceInputValue = require_coerceInputValue();
    var _concatAST = require_concatAST();
    var _separateOperations = require_separateOperations();
    var _stripIgnoredCharacters = require_stripIgnoredCharacters();
    var _typeComparators = require_typeComparators();
    var _assertValidName = require_assertValidName();
    var _findBreakingChanges = require_findBreakingChanges();
    var _findDeprecatedUsages = require_findDeprecatedUsages();
  }
});

// node_modules/graphql/index.js
var require_graphql2 = __commonJS({
  "node_modules/graphql/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "version", {
      enumerable: true,
      get: function get() {
        return _version.version;
      }
    });
    Object.defineProperty(exports, "versionInfo", {
      enumerable: true,
      get: function get() {
        return _version.versionInfo;
      }
    });
    Object.defineProperty(exports, "graphql", {
      enumerable: true,
      get: function get() {
        return _graphql.graphql;
      }
    });
    Object.defineProperty(exports, "graphqlSync", {
      enumerable: true,
      get: function get() {
        return _graphql.graphqlSync;
      }
    });
    Object.defineProperty(exports, "GraphQLSchema", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLSchema;
      }
    });
    Object.defineProperty(exports, "GraphQLDirective", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLDirective;
      }
    });
    Object.defineProperty(exports, "GraphQLScalarType", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLScalarType;
      }
    });
    Object.defineProperty(exports, "GraphQLObjectType", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLObjectType;
      }
    });
    Object.defineProperty(exports, "GraphQLInterfaceType", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLInterfaceType;
      }
    });
    Object.defineProperty(exports, "GraphQLUnionType", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLUnionType;
      }
    });
    Object.defineProperty(exports, "GraphQLEnumType", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLEnumType;
      }
    });
    Object.defineProperty(exports, "GraphQLInputObjectType", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLInputObjectType;
      }
    });
    Object.defineProperty(exports, "GraphQLList", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLList;
      }
    });
    Object.defineProperty(exports, "GraphQLNonNull", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLNonNull;
      }
    });
    Object.defineProperty(exports, "specifiedScalarTypes", {
      enumerable: true,
      get: function get() {
        return _index.specifiedScalarTypes;
      }
    });
    Object.defineProperty(exports, "GraphQLInt", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLInt;
      }
    });
    Object.defineProperty(exports, "GraphQLFloat", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLFloat;
      }
    });
    Object.defineProperty(exports, "GraphQLString", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLString;
      }
    });
    Object.defineProperty(exports, "GraphQLBoolean", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLBoolean;
      }
    });
    Object.defineProperty(exports, "GraphQLID", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLID;
      }
    });
    Object.defineProperty(exports, "specifiedDirectives", {
      enumerable: true,
      get: function get() {
        return _index.specifiedDirectives;
      }
    });
    Object.defineProperty(exports, "GraphQLIncludeDirective", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLIncludeDirective;
      }
    });
    Object.defineProperty(exports, "GraphQLSkipDirective", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLSkipDirective;
      }
    });
    Object.defineProperty(exports, "GraphQLDeprecatedDirective", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLDeprecatedDirective;
      }
    });
    Object.defineProperty(exports, "GraphQLSpecifiedByDirective", {
      enumerable: true,
      get: function get() {
        return _index.GraphQLSpecifiedByDirective;
      }
    });
    Object.defineProperty(exports, "TypeKind", {
      enumerable: true,
      get: function get() {
        return _index.TypeKind;
      }
    });
    Object.defineProperty(exports, "DEFAULT_DEPRECATION_REASON", {
      enumerable: true,
      get: function get() {
        return _index.DEFAULT_DEPRECATION_REASON;
      }
    });
    Object.defineProperty(exports, "introspectionTypes", {
      enumerable: true,
      get: function get() {
        return _index.introspectionTypes;
      }
    });
    Object.defineProperty(exports, "__Schema", {
      enumerable: true,
      get: function get() {
        return _index.__Schema;
      }
    });
    Object.defineProperty(exports, "__Directive", {
      enumerable: true,
      get: function get() {
        return _index.__Directive;
      }
    });
    Object.defineProperty(exports, "__DirectiveLocation", {
      enumerable: true,
      get: function get() {
        return _index.__DirectiveLocation;
      }
    });
    Object.defineProperty(exports, "__Type", {
      enumerable: true,
      get: function get() {
        return _index.__Type;
      }
    });
    Object.defineProperty(exports, "__Field", {
      enumerable: true,
      get: function get() {
        return _index.__Field;
      }
    });
    Object.defineProperty(exports, "__InputValue", {
      enumerable: true,
      get: function get() {
        return _index.__InputValue;
      }
    });
    Object.defineProperty(exports, "__EnumValue", {
      enumerable: true,
      get: function get() {
        return _index.__EnumValue;
      }
    });
    Object.defineProperty(exports, "__TypeKind", {
      enumerable: true,
      get: function get() {
        return _index.__TypeKind;
      }
    });
    Object.defineProperty(exports, "SchemaMetaFieldDef", {
      enumerable: true,
      get: function get() {
        return _index.SchemaMetaFieldDef;
      }
    });
    Object.defineProperty(exports, "TypeMetaFieldDef", {
      enumerable: true,
      get: function get() {
        return _index.TypeMetaFieldDef;
      }
    });
    Object.defineProperty(exports, "TypeNameMetaFieldDef", {
      enumerable: true,
      get: function get() {
        return _index.TypeNameMetaFieldDef;
      }
    });
    Object.defineProperty(exports, "isSchema", {
      enumerable: true,
      get: function get() {
        return _index.isSchema;
      }
    });
    Object.defineProperty(exports, "isDirective", {
      enumerable: true,
      get: function get() {
        return _index.isDirective;
      }
    });
    Object.defineProperty(exports, "isType", {
      enumerable: true,
      get: function get() {
        return _index.isType;
      }
    });
    Object.defineProperty(exports, "isScalarType", {
      enumerable: true,
      get: function get() {
        return _index.isScalarType;
      }
    });
    Object.defineProperty(exports, "isObjectType", {
      enumerable: true,
      get: function get() {
        return _index.isObjectType;
      }
    });
    Object.defineProperty(exports, "isInterfaceType", {
      enumerable: true,
      get: function get() {
        return _index.isInterfaceType;
      }
    });
    Object.defineProperty(exports, "isUnionType", {
      enumerable: true,
      get: function get() {
        return _index.isUnionType;
      }
    });
    Object.defineProperty(exports, "isEnumType", {
      enumerable: true,
      get: function get() {
        return _index.isEnumType;
      }
    });
    Object.defineProperty(exports, "isInputObjectType", {
      enumerable: true,
      get: function get() {
        return _index.isInputObjectType;
      }
    });
    Object.defineProperty(exports, "isListType", {
      enumerable: true,
      get: function get() {
        return _index.isListType;
      }
    });
    Object.defineProperty(exports, "isNonNullType", {
      enumerable: true,
      get: function get() {
        return _index.isNonNullType;
      }
    });
    Object.defineProperty(exports, "isInputType", {
      enumerable: true,
      get: function get() {
        return _index.isInputType;
      }
    });
    Object.defineProperty(exports, "isOutputType", {
      enumerable: true,
      get: function get() {
        return _index.isOutputType;
      }
    });
    Object.defineProperty(exports, "isLeafType", {
      enumerable: true,
      get: function get() {
        return _index.isLeafType;
      }
    });
    Object.defineProperty(exports, "isCompositeType", {
      enumerable: true,
      get: function get() {
        return _index.isCompositeType;
      }
    });
    Object.defineProperty(exports, "isAbstractType", {
      enumerable: true,
      get: function get() {
        return _index.isAbstractType;
      }
    });
    Object.defineProperty(exports, "isWrappingType", {
      enumerable: true,
      get: function get() {
        return _index.isWrappingType;
      }
    });
    Object.defineProperty(exports, "isNullableType", {
      enumerable: true,
      get: function get() {
        return _index.isNullableType;
      }
    });
    Object.defineProperty(exports, "isNamedType", {
      enumerable: true,
      get: function get() {
        return _index.isNamedType;
      }
    });
    Object.defineProperty(exports, "isRequiredArgument", {
      enumerable: true,
      get: function get() {
        return _index.isRequiredArgument;
      }
    });
    Object.defineProperty(exports, "isRequiredInputField", {
      enumerable: true,
      get: function get() {
        return _index.isRequiredInputField;
      }
    });
    Object.defineProperty(exports, "isSpecifiedScalarType", {
      enumerable: true,
      get: function get() {
        return _index.isSpecifiedScalarType;
      }
    });
    Object.defineProperty(exports, "isIntrospectionType", {
      enumerable: true,
      get: function get() {
        return _index.isIntrospectionType;
      }
    });
    Object.defineProperty(exports, "isSpecifiedDirective", {
      enumerable: true,
      get: function get() {
        return _index.isSpecifiedDirective;
      }
    });
    Object.defineProperty(exports, "assertSchema", {
      enumerable: true,
      get: function get() {
        return _index.assertSchema;
      }
    });
    Object.defineProperty(exports, "assertDirective", {
      enumerable: true,
      get: function get() {
        return _index.assertDirective;
      }
    });
    Object.defineProperty(exports, "assertType", {
      enumerable: true,
      get: function get() {
        return _index.assertType;
      }
    });
    Object.defineProperty(exports, "assertScalarType", {
      enumerable: true,
      get: function get() {
        return _index.assertScalarType;
      }
    });
    Object.defineProperty(exports, "assertObjectType", {
      enumerable: true,
      get: function get() {
        return _index.assertObjectType;
      }
    });
    Object.defineProperty(exports, "assertInterfaceType", {
      enumerable: true,
      get: function get() {
        return _index.assertInterfaceType;
      }
    });
    Object.defineProperty(exports, "assertUnionType", {
      enumerable: true,
      get: function get() {
        return _index.assertUnionType;
      }
    });
    Object.defineProperty(exports, "assertEnumType", {
      enumerable: true,
      get: function get() {
        return _index.assertEnumType;
      }
    });
    Object.defineProperty(exports, "assertInputObjectType", {
      enumerable: true,
      get: function get() {
        return _index.assertInputObjectType;
      }
    });
    Object.defineProperty(exports, "assertListType", {
      enumerable: true,
      get: function get() {
        return _index.assertListType;
      }
    });
    Object.defineProperty(exports, "assertNonNullType", {
      enumerable: true,
      get: function get() {
        return _index.assertNonNullType;
      }
    });
    Object.defineProperty(exports, "assertInputType", {
      enumerable: true,
      get: function get() {
        return _index.assertInputType;
      }
    });
    Object.defineProperty(exports, "assertOutputType", {
      enumerable: true,
      get: function get() {
        return _index.assertOutputType;
      }
    });
    Object.defineProperty(exports, "assertLeafType", {
      enumerable: true,
      get: function get() {
        return _index.assertLeafType;
      }
    });
    Object.defineProperty(exports, "assertCompositeType", {
      enumerable: true,
      get: function get() {
        return _index.assertCompositeType;
      }
    });
    Object.defineProperty(exports, "assertAbstractType", {
      enumerable: true,
      get: function get() {
        return _index.assertAbstractType;
      }
    });
    Object.defineProperty(exports, "assertWrappingType", {
      enumerable: true,
      get: function get() {
        return _index.assertWrappingType;
      }
    });
    Object.defineProperty(exports, "assertNullableType", {
      enumerable: true,
      get: function get() {
        return _index.assertNullableType;
      }
    });
    Object.defineProperty(exports, "assertNamedType", {
      enumerable: true,
      get: function get() {
        return _index.assertNamedType;
      }
    });
    Object.defineProperty(exports, "getNullableType", {
      enumerable: true,
      get: function get() {
        return _index.getNullableType;
      }
    });
    Object.defineProperty(exports, "getNamedType", {
      enumerable: true,
      get: function get() {
        return _index.getNamedType;
      }
    });
    Object.defineProperty(exports, "validateSchema", {
      enumerable: true,
      get: function get() {
        return _index.validateSchema;
      }
    });
    Object.defineProperty(exports, "assertValidSchema", {
      enumerable: true,
      get: function get() {
        return _index.assertValidSchema;
      }
    });
    Object.defineProperty(exports, "Token", {
      enumerable: true,
      get: function get() {
        return _index2.Token;
      }
    });
    Object.defineProperty(exports, "Source", {
      enumerable: true,
      get: function get() {
        return _index2.Source;
      }
    });
    Object.defineProperty(exports, "Location", {
      enumerable: true,
      get: function get() {
        return _index2.Location;
      }
    });
    Object.defineProperty(exports, "getLocation", {
      enumerable: true,
      get: function get() {
        return _index2.getLocation;
      }
    });
    Object.defineProperty(exports, "printLocation", {
      enumerable: true,
      get: function get() {
        return _index2.printLocation;
      }
    });
    Object.defineProperty(exports, "printSourceLocation", {
      enumerable: true,
      get: function get() {
        return _index2.printSourceLocation;
      }
    });
    Object.defineProperty(exports, "Lexer", {
      enumerable: true,
      get: function get() {
        return _index2.Lexer;
      }
    });
    Object.defineProperty(exports, "TokenKind", {
      enumerable: true,
      get: function get() {
        return _index2.TokenKind;
      }
    });
    Object.defineProperty(exports, "parse", {
      enumerable: true,
      get: function get() {
        return _index2.parse;
      }
    });
    Object.defineProperty(exports, "parseValue", {
      enumerable: true,
      get: function get() {
        return _index2.parseValue;
      }
    });
    Object.defineProperty(exports, "parseType", {
      enumerable: true,
      get: function get() {
        return _index2.parseType;
      }
    });
    Object.defineProperty(exports, "print", {
      enumerable: true,
      get: function get() {
        return _index2.print;
      }
    });
    Object.defineProperty(exports, "visit", {
      enumerable: true,
      get: function get() {
        return _index2.visit;
      }
    });
    Object.defineProperty(exports, "visitInParallel", {
      enumerable: true,
      get: function get() {
        return _index2.visitInParallel;
      }
    });
    Object.defineProperty(exports, "getVisitFn", {
      enumerable: true,
      get: function get() {
        return _index2.getVisitFn;
      }
    });
    Object.defineProperty(exports, "BREAK", {
      enumerable: true,
      get: function get() {
        return _index2.BREAK;
      }
    });
    Object.defineProperty(exports, "Kind", {
      enumerable: true,
      get: function get() {
        return _index2.Kind;
      }
    });
    Object.defineProperty(exports, "DirectiveLocation", {
      enumerable: true,
      get: function get() {
        return _index2.DirectiveLocation;
      }
    });
    Object.defineProperty(exports, "isDefinitionNode", {
      enumerable: true,
      get: function get() {
        return _index2.isDefinitionNode;
      }
    });
    Object.defineProperty(exports, "isExecutableDefinitionNode", {
      enumerable: true,
      get: function get() {
        return _index2.isExecutableDefinitionNode;
      }
    });
    Object.defineProperty(exports, "isSelectionNode", {
      enumerable: true,
      get: function get() {
        return _index2.isSelectionNode;
      }
    });
    Object.defineProperty(exports, "isValueNode", {
      enumerable: true,
      get: function get() {
        return _index2.isValueNode;
      }
    });
    Object.defineProperty(exports, "isTypeNode", {
      enumerable: true,
      get: function get() {
        return _index2.isTypeNode;
      }
    });
    Object.defineProperty(exports, "isTypeSystemDefinitionNode", {
      enumerable: true,
      get: function get() {
        return _index2.isTypeSystemDefinitionNode;
      }
    });
    Object.defineProperty(exports, "isTypeDefinitionNode", {
      enumerable: true,
      get: function get() {
        return _index2.isTypeDefinitionNode;
      }
    });
    Object.defineProperty(exports, "isTypeSystemExtensionNode", {
      enumerable: true,
      get: function get() {
        return _index2.isTypeSystemExtensionNode;
      }
    });
    Object.defineProperty(exports, "isTypeExtensionNode", {
      enumerable: true,
      get: function get() {
        return _index2.isTypeExtensionNode;
      }
    });
    Object.defineProperty(exports, "execute", {
      enumerable: true,
      get: function get() {
        return _index3.execute;
      }
    });
    Object.defineProperty(exports, "executeSync", {
      enumerable: true,
      get: function get() {
        return _index3.executeSync;
      }
    });
    Object.defineProperty(exports, "defaultFieldResolver", {
      enumerable: true,
      get: function get() {
        return _index3.defaultFieldResolver;
      }
    });
    Object.defineProperty(exports, "defaultTypeResolver", {
      enumerable: true,
      get: function get() {
        return _index3.defaultTypeResolver;
      }
    });
    Object.defineProperty(exports, "responsePathAsArray", {
      enumerable: true,
      get: function get() {
        return _index3.responsePathAsArray;
      }
    });
    Object.defineProperty(exports, "getDirectiveValues", {
      enumerable: true,
      get: function get() {
        return _index3.getDirectiveValues;
      }
    });
    Object.defineProperty(exports, "subscribe", {
      enumerable: true,
      get: function get() {
        return _index4.subscribe;
      }
    });
    Object.defineProperty(exports, "createSourceEventStream", {
      enumerable: true,
      get: function get() {
        return _index4.createSourceEventStream;
      }
    });
    Object.defineProperty(exports, "validate", {
      enumerable: true,
      get: function get() {
        return _index5.validate;
      }
    });
    Object.defineProperty(exports, "ValidationContext", {
      enumerable: true,
      get: function get() {
        return _index5.ValidationContext;
      }
    });
    Object.defineProperty(exports, "specifiedRules", {
      enumerable: true,
      get: function get() {
        return _index5.specifiedRules;
      }
    });
    Object.defineProperty(exports, "ExecutableDefinitionsRule", {
      enumerable: true,
      get: function get() {
        return _index5.ExecutableDefinitionsRule;
      }
    });
    Object.defineProperty(exports, "FieldsOnCorrectTypeRule", {
      enumerable: true,
      get: function get() {
        return _index5.FieldsOnCorrectTypeRule;
      }
    });
    Object.defineProperty(exports, "FragmentsOnCompositeTypesRule", {
      enumerable: true,
      get: function get() {
        return _index5.FragmentsOnCompositeTypesRule;
      }
    });
    Object.defineProperty(exports, "KnownArgumentNamesRule", {
      enumerable: true,
      get: function get() {
        return _index5.KnownArgumentNamesRule;
      }
    });
    Object.defineProperty(exports, "KnownDirectivesRule", {
      enumerable: true,
      get: function get() {
        return _index5.KnownDirectivesRule;
      }
    });
    Object.defineProperty(exports, "KnownFragmentNamesRule", {
      enumerable: true,
      get: function get() {
        return _index5.KnownFragmentNamesRule;
      }
    });
    Object.defineProperty(exports, "KnownTypeNamesRule", {
      enumerable: true,
      get: function get() {
        return _index5.KnownTypeNamesRule;
      }
    });
    Object.defineProperty(exports, "LoneAnonymousOperationRule", {
      enumerable: true,
      get: function get() {
        return _index5.LoneAnonymousOperationRule;
      }
    });
    Object.defineProperty(exports, "NoFragmentCyclesRule", {
      enumerable: true,
      get: function get() {
        return _index5.NoFragmentCyclesRule;
      }
    });
    Object.defineProperty(exports, "NoUndefinedVariablesRule", {
      enumerable: true,
      get: function get() {
        return _index5.NoUndefinedVariablesRule;
      }
    });
    Object.defineProperty(exports, "NoUnusedFragmentsRule", {
      enumerable: true,
      get: function get() {
        return _index5.NoUnusedFragmentsRule;
      }
    });
    Object.defineProperty(exports, "NoUnusedVariablesRule", {
      enumerable: true,
      get: function get() {
        return _index5.NoUnusedVariablesRule;
      }
    });
    Object.defineProperty(exports, "OverlappingFieldsCanBeMergedRule", {
      enumerable: true,
      get: function get() {
        return _index5.OverlappingFieldsCanBeMergedRule;
      }
    });
    Object.defineProperty(exports, "PossibleFragmentSpreadsRule", {
      enumerable: true,
      get: function get() {
        return _index5.PossibleFragmentSpreadsRule;
      }
    });
    Object.defineProperty(exports, "ProvidedRequiredArgumentsRule", {
      enumerable: true,
      get: function get() {
        return _index5.ProvidedRequiredArgumentsRule;
      }
    });
    Object.defineProperty(exports, "ScalarLeafsRule", {
      enumerable: true,
      get: function get() {
        return _index5.ScalarLeafsRule;
      }
    });
    Object.defineProperty(exports, "SingleFieldSubscriptionsRule", {
      enumerable: true,
      get: function get() {
        return _index5.SingleFieldSubscriptionsRule;
      }
    });
    Object.defineProperty(exports, "UniqueArgumentNamesRule", {
      enumerable: true,
      get: function get() {
        return _index5.UniqueArgumentNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueDirectivesPerLocationRule", {
      enumerable: true,
      get: function get() {
        return _index5.UniqueDirectivesPerLocationRule;
      }
    });
    Object.defineProperty(exports, "UniqueFragmentNamesRule", {
      enumerable: true,
      get: function get() {
        return _index5.UniqueFragmentNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueInputFieldNamesRule", {
      enumerable: true,
      get: function get() {
        return _index5.UniqueInputFieldNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueOperationNamesRule", {
      enumerable: true,
      get: function get() {
        return _index5.UniqueOperationNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueVariableNamesRule", {
      enumerable: true,
      get: function get() {
        return _index5.UniqueVariableNamesRule;
      }
    });
    Object.defineProperty(exports, "ValuesOfCorrectTypeRule", {
      enumerable: true,
      get: function get() {
        return _index5.ValuesOfCorrectTypeRule;
      }
    });
    Object.defineProperty(exports, "VariablesAreInputTypesRule", {
      enumerable: true,
      get: function get() {
        return _index5.VariablesAreInputTypesRule;
      }
    });
    Object.defineProperty(exports, "VariablesInAllowedPositionRule", {
      enumerable: true,
      get: function get() {
        return _index5.VariablesInAllowedPositionRule;
      }
    });
    Object.defineProperty(exports, "LoneSchemaDefinitionRule", {
      enumerable: true,
      get: function get() {
        return _index5.LoneSchemaDefinitionRule;
      }
    });
    Object.defineProperty(exports, "UniqueOperationTypesRule", {
      enumerable: true,
      get: function get() {
        return _index5.UniqueOperationTypesRule;
      }
    });
    Object.defineProperty(exports, "UniqueTypeNamesRule", {
      enumerable: true,
      get: function get() {
        return _index5.UniqueTypeNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueEnumValueNamesRule", {
      enumerable: true,
      get: function get() {
        return _index5.UniqueEnumValueNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueFieldDefinitionNamesRule", {
      enumerable: true,
      get: function get() {
        return _index5.UniqueFieldDefinitionNamesRule;
      }
    });
    Object.defineProperty(exports, "UniqueDirectiveNamesRule", {
      enumerable: true,
      get: function get() {
        return _index5.UniqueDirectiveNamesRule;
      }
    });
    Object.defineProperty(exports, "PossibleTypeExtensionsRule", {
      enumerable: true,
      get: function get() {
        return _index5.PossibleTypeExtensionsRule;
      }
    });
    Object.defineProperty(exports, "NoDeprecatedCustomRule", {
      enumerable: true,
      get: function get() {
        return _index5.NoDeprecatedCustomRule;
      }
    });
    Object.defineProperty(exports, "NoSchemaIntrospectionCustomRule", {
      enumerable: true,
      get: function get() {
        return _index5.NoSchemaIntrospectionCustomRule;
      }
    });
    Object.defineProperty(exports, "GraphQLError", {
      enumerable: true,
      get: function get() {
        return _index6.GraphQLError;
      }
    });
    Object.defineProperty(exports, "syntaxError", {
      enumerable: true,
      get: function get() {
        return _index6.syntaxError;
      }
    });
    Object.defineProperty(exports, "locatedError", {
      enumerable: true,
      get: function get() {
        return _index6.locatedError;
      }
    });
    Object.defineProperty(exports, "printError", {
      enumerable: true,
      get: function get() {
        return _index6.printError;
      }
    });
    Object.defineProperty(exports, "formatError", {
      enumerable: true,
      get: function get() {
        return _index6.formatError;
      }
    });
    Object.defineProperty(exports, "getIntrospectionQuery", {
      enumerable: true,
      get: function get() {
        return _index7.getIntrospectionQuery;
      }
    });
    Object.defineProperty(exports, "getOperationAST", {
      enumerable: true,
      get: function get() {
        return _index7.getOperationAST;
      }
    });
    Object.defineProperty(exports, "getOperationRootType", {
      enumerable: true,
      get: function get() {
        return _index7.getOperationRootType;
      }
    });
    Object.defineProperty(exports, "introspectionFromSchema", {
      enumerable: true,
      get: function get() {
        return _index7.introspectionFromSchema;
      }
    });
    Object.defineProperty(exports, "buildClientSchema", {
      enumerable: true,
      get: function get() {
        return _index7.buildClientSchema;
      }
    });
    Object.defineProperty(exports, "buildASTSchema", {
      enumerable: true,
      get: function get() {
        return _index7.buildASTSchema;
      }
    });
    Object.defineProperty(exports, "buildSchema", {
      enumerable: true,
      get: function get() {
        return _index7.buildSchema;
      }
    });
    Object.defineProperty(exports, "getDescription", {
      enumerable: true,
      get: function get() {
        return _index7.getDescription;
      }
    });
    Object.defineProperty(exports, "extendSchema", {
      enumerable: true,
      get: function get() {
        return _index7.extendSchema;
      }
    });
    Object.defineProperty(exports, "lexicographicSortSchema", {
      enumerable: true,
      get: function get() {
        return _index7.lexicographicSortSchema;
      }
    });
    Object.defineProperty(exports, "printSchema", {
      enumerable: true,
      get: function get() {
        return _index7.printSchema;
      }
    });
    Object.defineProperty(exports, "printType", {
      enumerable: true,
      get: function get() {
        return _index7.printType;
      }
    });
    Object.defineProperty(exports, "printIntrospectionSchema", {
      enumerable: true,
      get: function get() {
        return _index7.printIntrospectionSchema;
      }
    });
    Object.defineProperty(exports, "typeFromAST", {
      enumerable: true,
      get: function get() {
        return _index7.typeFromAST;
      }
    });
    Object.defineProperty(exports, "valueFromAST", {
      enumerable: true,
      get: function get() {
        return _index7.valueFromAST;
      }
    });
    Object.defineProperty(exports, "valueFromASTUntyped", {
      enumerable: true,
      get: function get() {
        return _index7.valueFromASTUntyped;
      }
    });
    Object.defineProperty(exports, "astFromValue", {
      enumerable: true,
      get: function get() {
        return _index7.astFromValue;
      }
    });
    Object.defineProperty(exports, "TypeInfo", {
      enumerable: true,
      get: function get() {
        return _index7.TypeInfo;
      }
    });
    Object.defineProperty(exports, "visitWithTypeInfo", {
      enumerable: true,
      get: function get() {
        return _index7.visitWithTypeInfo;
      }
    });
    Object.defineProperty(exports, "coerceInputValue", {
      enumerable: true,
      get: function get() {
        return _index7.coerceInputValue;
      }
    });
    Object.defineProperty(exports, "concatAST", {
      enumerable: true,
      get: function get() {
        return _index7.concatAST;
      }
    });
    Object.defineProperty(exports, "separateOperations", {
      enumerable: true,
      get: function get() {
        return _index7.separateOperations;
      }
    });
    Object.defineProperty(exports, "stripIgnoredCharacters", {
      enumerable: true,
      get: function get() {
        return _index7.stripIgnoredCharacters;
      }
    });
    Object.defineProperty(exports, "isEqualType", {
      enumerable: true,
      get: function get() {
        return _index7.isEqualType;
      }
    });
    Object.defineProperty(exports, "isTypeSubTypeOf", {
      enumerable: true,
      get: function get() {
        return _index7.isTypeSubTypeOf;
      }
    });
    Object.defineProperty(exports, "doTypesOverlap", {
      enumerable: true,
      get: function get() {
        return _index7.doTypesOverlap;
      }
    });
    Object.defineProperty(exports, "assertValidName", {
      enumerable: true,
      get: function get() {
        return _index7.assertValidName;
      }
    });
    Object.defineProperty(exports, "isValidNameError", {
      enumerable: true,
      get: function get() {
        return _index7.isValidNameError;
      }
    });
    Object.defineProperty(exports, "BreakingChangeType", {
      enumerable: true,
      get: function get() {
        return _index7.BreakingChangeType;
      }
    });
    Object.defineProperty(exports, "DangerousChangeType", {
      enumerable: true,
      get: function get() {
        return _index7.DangerousChangeType;
      }
    });
    Object.defineProperty(exports, "findBreakingChanges", {
      enumerable: true,
      get: function get() {
        return _index7.findBreakingChanges;
      }
    });
    Object.defineProperty(exports, "findDangerousChanges", {
      enumerable: true,
      get: function get() {
        return _index7.findDangerousChanges;
      }
    });
    Object.defineProperty(exports, "findDeprecatedUsages", {
      enumerable: true,
      get: function get() {
        return _index7.findDeprecatedUsages;
      }
    });
    var _version = require_version();
    var _graphql = require_graphql();
    var _index = require_type();
    var _index2 = require_language();
    var _index3 = require_execution();
    var _index4 = require_subscription();
    var _index5 = require_validation();
    var _index6 = require_error();
    var _index7 = require_utilities();
  }
});

// node_modules/graphql-compose/lib/graphql.js
var require_graphql3 = __commonJS({
  "node_modules/graphql-compose/lib/graphql.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m2, k);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m2[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m2, exports2) {
      for (var p in m2)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m2, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_graphql2(), exports);
  }
});

// node_modules/graphql-compose/lib/utils/deprecate.js
var require_deprecate = __commonJS({
  "node_modules/graphql-compose/lib/utils/deprecate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function deprecate3(msg) {
      let stack;
      let stackStr = "";
      const error = new Error();
      if (error.stack) {
        stack = error.stack.replace(/^\s+at\s+/gm, "").split("\n");
        stack.slice(2, 7).forEach((s2, i2) => {
          stackStr += i2 === 1 ? "\n--> " : "\n    ";
          stackStr += s2;
        });
      }
      console.log(`GRAPHQL-COMPOSE DEPRECATION: ${msg} ${stackStr}

`);
    }
    exports.default = deprecate3;
  }
});

// node_modules/graphql-compose/lib/utils/is.js
var require_is = __commonJS({
  "node_modules/graphql-compose/lib/utils/is.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isFunction = exports.isObject = exports.isString = void 0;
    function isString(value) {
      return typeof value === "string";
    }
    exports.isString = isString;
    function isObject(value) {
      return typeof value === "object" && !Array.isArray(value) && value !== null;
    }
    exports.isObject = isObject;
    function isFunction(value) {
      return !!(value && value.constructor && value.call && typeof value === "function" && value.apply);
    }
    exports.isFunction = isFunction;
  }
});

// node_modules/graphql-compose/lib/utils/pluralize.js
var require_pluralize = __commonJS({
  "node_modules/graphql-compose/lib/utils/pluralize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pluralize = void 0;
    var rules = [
      [/(m)an$/gi, "$1en"],
      [/(pe)rson$/gi, "$1ople"],
      [/(child)$/gi, "$1ren"],
      [/^(ox)$/gi, "$1en"],
      [/(ax|test)is$/gi, "$1es"],
      [/(octop|vir)us$/gi, "$1i"],
      [/(alias|status)$/gi, "$1es"],
      [/(bu)s$/gi, "$1ses"],
      [/(buffal|tomat|potat)o$/gi, "$1oes"],
      [/([ti])um$/gi, "$1a"],
      [/sis$/gi, "ses"],
      [/(?:([^f])fe|([lr])f)$/gi, "$1$2ves"],
      [/(hive)$/gi, "$1s"],
      [/([^aeiouy]|qu)y$/gi, "$1ies"],
      [/(x|ch|ss|sh)$/gi, "$1es"],
      [/(matr|vert|ind)ix|ex$/gi, "$1ices"],
      [/([m|l])ouse$/gi, "$1ice"],
      [/(kn|w|l)ife$/gi, "$1ives"],
      [/(quiz)$/gi, "$1zes"],
      [/s$/gi, "s"],
      [/([^a-z])$/, "$1"],
      [/$/gi, "s"]
    ];
    var uncountable = [
      "advice",
      "energy",
      "excretion",
      "digestion",
      "cooperation",
      "health",
      "justice",
      "labour",
      "machinery",
      "equipment",
      "information",
      "pollution",
      "sewage",
      "paper",
      "money",
      "species",
      "series",
      "rain",
      "rice",
      "fish",
      "sheep",
      "moose",
      "deer",
      "news",
      "expertise",
      "status",
      "media"
    ];
    function pluralize(str) {
      let found;
      if (!~uncountable.indexOf(str.toLowerCase())) {
        found = rules.filter((rule) => str.match(rule[0]));
        if (found[0]) {
          return str.replace(found[0][0], found[0][1]);
        }
      }
      return str;
    }
    exports.pluralize = pluralize;
  }
});

// node_modules/graphql-compose/lib/utils/misc.js
var require_misc = __commonJS({
  "node_modules/graphql-compose/lib/utils/misc.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.invariant = exports.keyMap = exports.keyValMap = exports.mapEachKey = exports.forEachKey = exports.inspect = exports.only = exports.omit = exports.clearName = exports.upperFirst = exports.getPluralName = exports.camelCase = exports.resolveMaybeThunk = void 0;
    var is_1 = require_is();
    var pluralize_1 = require_pluralize();
    function resolveMaybeThunk(thingOrThunk) {
      return typeof thingOrThunk === "function" ? thingOrThunk() : thingOrThunk;
    }
    exports.resolveMaybeThunk = resolveMaybeThunk;
    function camelCase(str) {
      return str.replace(/(?:^\w|[A-Z]|\b\w)/g, (letter, index) => index === 0 ? letter.toLowerCase() : letter.toUpperCase()).replace(/\s+/g, "");
    }
    exports.camelCase = camelCase;
    function getPluralName(name) {
      return (0, pluralize_1.pluralize)(camelCase(name));
    }
    exports.getPluralName = getPluralName;
    function upperFirst(str) {
      return str.charAt(0).toUpperCase() + str.slice(1);
    }
    exports.upperFirst = upperFirst;
    function clearName(str) {
      return str.replace(/[^_a-zA-Z0-9]/g, "");
    }
    exports.clearName = clearName;
    function omit(obj, keys) {
      if (!obj) {
        return {};
      }
      const result = Object.assign({}, obj);
      if (Array.isArray(keys)) {
        keys.forEach((k) => {
          delete result[k];
        });
      } else {
        delete result[keys];
      }
      return result;
    }
    exports.omit = omit;
    function only(obj, keys) {
      if (!obj) {
        return {};
      }
      const result = {};
      if (Array.isArray(keys)) {
        keys.forEach((k) => {
          if ({}.hasOwnProperty.call(obj, k)) {
            result[k] = obj[k];
          }
        });
      } else if ({}.hasOwnProperty.call(obj, keys)) {
        result[keys] = obj[keys];
      }
      return result;
    }
    exports.only = only;
    function inspectObject(value) {
      let name;
      if (value && value.constructor && value.constructor.name) {
        name = value.constructor.name;
      }
      const props = `{ ${Object.keys(value).filter((n) => n !== "loc").map((k) => `${k}: ${inspect(value[k])}`).join(", ")} }`;
      return name ? `${name}(${props})` : props;
    }
    function inspect(value) {
      return value && typeof value === "object" ? typeof value.inspect === "function" ? value.inspect() : Array.isArray(value) ? `[${value.map(inspect).join(", ")}]` : inspectObject(value) : typeof value === "string" ? `"${value}"` : typeof value === "function" ? `[function ${value.name}]` : String(value);
    }
    exports.inspect = inspect;
    function forEachKey(obj, callback) {
      Object.keys(obj).forEach((key) => {
        callback(obj[key], key);
      });
    }
    exports.forEachKey = forEachKey;
    function mapEachKey(obj, callback) {
      if (!(0, is_1.isObject)(obj))
        return obj;
      const result = {};
      Object.keys(obj).forEach((key) => {
        result[key] = callback(obj[key], key);
      });
      return result;
    }
    exports.mapEachKey = mapEachKey;
    function keyValMap(list, keyFn, valFn) {
      const result = /* @__PURE__ */ Object.create(null);
      for (const item of list) {
        result[keyFn(item)] = valFn(item);
      }
      return result;
    }
    exports.keyValMap = keyValMap;
    function keyMap(list, keyFn) {
      const result = /* @__PURE__ */ Object.create(null);
      for (const item of list) {
        result[keyFn(item)] = item;
      }
      return result;
    }
    exports.keyMap = keyMap;
    function invariant(condition, message) {
      const booleanCondition = Boolean(condition);
      if (!booleanCondition) {
        throw new Error(message != null ? message : "Unexpected invariant triggered.");
      }
    }
    exports.invariant = invariant;
  }
});

// node_modules/graphql-compose/lib/TypeStorage.js
var require_TypeStorage = __commonJS({
  "node_modules/graphql-compose/lib/TypeStorage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TypeStorage = void 0;
    var is_1 = require_is();
    var misc_1 = require_misc();
    var TypeStorage = class {
      constructor() {
        this.types = /* @__PURE__ */ new Map();
      }
      get size() {
        return this.types.size;
      }
      clear() {
        this.types.clear();
      }
      delete(typeName) {
        return this.types.delete(typeName);
      }
      entries() {
        return this.types.entries();
      }
      forEach(callbackfn, thisArg) {
        return this.types.forEach(callbackfn, thisArg);
      }
      get(typeName) {
        const v = this.types.get(typeName);
        if (!v) {
          throw new Error(`Type with name ${(0, misc_1.inspect)(typeName)} does not exists`);
        }
        return v;
      }
      has(typeName) {
        return this.types.has(typeName);
      }
      keys() {
        return this.types.keys();
      }
      set(typeName, value) {
        this.types.set(typeName, value);
        return this;
      }
      values() {
        return this.types.values();
      }
      add(value) {
        if (value) {
          let typeName;
          if (value.getTypeName && value.getTypeName.call) {
            typeName = value.getTypeName();
          } else if (value.name) {
            typeName = value.name;
          }
          if (typeName) {
            this.set(typeName, value);
            return typeName;
          }
        }
        return null;
      }
      hasInstance(typeName, ClassObj) {
        if (!this.has(typeName))
          return false;
        const existedType = this.get(typeName);
        if (existedType && existedType instanceof ClassObj) {
          return true;
        }
        return false;
      }
      getOrSet(typeName, typeOrThunk) {
        const existedType = this.types.get(typeName);
        if (existedType) {
          return existedType;
        }
        const gqType = (0, is_1.isFunction)(typeOrThunk) ? typeOrThunk(this) : typeOrThunk;
        if (gqType) {
          this.set(typeName, gqType);
        }
        return gqType;
      }
    };
    exports.TypeStorage = TypeStorage;
  }
});

// node_modules/graphql-type-json/lib/index.js
var require_lib = __commonJS({
  "node_modules/graphql-type-json/lib/index.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.GraphQLJSONObject = exports["default"] = exports.GraphQLJSON = void 0;
    var _graphql = require_graphql2();
    var _language = require_language();
    function identity(value) {
      return value;
    }
    function ensureObject(value) {
      if (typeof value !== "object" || value === null || Array.isArray(value)) {
        throw new TypeError("JSONObject cannot represent non-object value: " + value);
      }
      return value;
    }
    function parseObject(typeName, ast, variables) {
      var value = /* @__PURE__ */ Object.create(null);
      ast.fields.forEach(function(field) {
        value[field.name.value] = _parseLiteral(typeName, field.value, variables);
      });
      return value;
    }
    function _parseLiteral(typeName, ast, variables) {
      switch (ast.kind) {
        case _language.Kind.STRING:
        case _language.Kind.BOOLEAN:
          return ast.value;
        case _language.Kind.INT:
        case _language.Kind.FLOAT:
          return parseFloat(ast.value);
        case _language.Kind.OBJECT:
          return parseObject(typeName, ast, variables);
        case _language.Kind.LIST:
          return ast.values.map(function(n) {
            return _parseLiteral(typeName, n, variables);
          });
        case _language.Kind.NULL:
          return null;
        case _language.Kind.VARIABLE:
          return variables ? variables[ast.name.value] : void 0;
        default:
          throw new TypeError(typeName + " cannot represent value: " + (0, _language.print)(ast));
      }
    }
    var GraphQLJSON = new _graphql.GraphQLScalarType({
      name: "JSON",
      description: "The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).",
      specifiedByUrl: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf",
      serialize: identity,
      parseValue: identity,
      parseLiteral: function parseLiteral(ast, variables) {
        return _parseLiteral("JSON", ast, variables);
      }
    });
    exports.GraphQLJSON = GraphQLJSON;
    var _default = GraphQLJSON;
    exports["default"] = _default;
    var GraphQLJSONObject = new _graphql.GraphQLScalarType({
      name: "JSONObject",
      description: "The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).",
      specifiedByUrl: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf",
      serialize: ensureObject,
      parseValue: ensureObject,
      parseLiteral: function parseLiteral(ast, variables) {
        if (ast.kind !== _language.Kind.OBJECT) {
          throw new TypeError("JSONObject cannot represent non-object value: " + (0, _language.print)(ast));
        }
        return parseObject("JSONObject", ast, variables);
      }
    });
    exports.GraphQLJSONObject = GraphQLJSONObject;
  }
});

// node_modules/graphql-compose/lib/type/date.js
var require_date = __commonJS({
  "node_modules/graphql-compose/lib/type/date.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var graphql_1 = require_graphql3();
    exports.default = new graphql_1.GraphQLScalarType({
      name: "Date",
      serialize(value) {
        if (typeof value === "string" && /^(\d{4})-(\d{2})-(\d{2})(T((\d{2}):(\d{2}):(\d{2}))(\.(\d{1,3}))?Z)?$/.test(value)) {
          return value;
        }
        if (typeof value === "number" && Number.isFinite(value)) {
          return new Date(value).toJSON();
        }
        if (!(value instanceof Date)) {
          throw new TypeError("Field error: value is not an instance of Date");
        }
        if (Number.isNaN(value.getTime())) {
          throw new TypeError("Field error: value is an invalid Date");
        }
        return value.toJSON();
      },
      parseValue(value) {
        const date = new Date(value);
        if (Number.isNaN(date.getTime())) {
          throw new TypeError("Field error: value is an invalid Date");
        }
        return date;
      },
      parseLiteral(ast) {
        if (ast.kind === graphql_1.Kind.INT) {
          return new Date(parseInt(ast.value, 10));
        }
        if (ast.kind !== graphql_1.Kind.STRING) {
          throw new graphql_1.GraphQLError(`Query error: Can only parse string or integer to Date but got a: ${ast.kind}`, [ast]);
        }
        const result = new Date(ast.value);
        if (Number.isNaN(result.getTime())) {
          throw new graphql_1.GraphQLError("Query error: Invalid date", [ast]);
        }
        return result;
      }
    });
  }
});

// node_modules/graphql-compose/lib/type/buffer.js
var require_buffer = __commonJS({
  "node_modules/graphql-compose/lib/type/buffer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var graphql_1 = require_graphql3();
    exports.default = new graphql_1.GraphQLScalarType({
      name: "Buffer",
      serialize(value) {
        if (!(value instanceof Buffer)) {
          throw new TypeError("Field error: value is not an instance of Buffer");
        }
        return value.toString();
      },
      parseValue(value) {
        if (typeof value !== "string") {
          throw new Error("Field error: value must be a String");
        }
        return Buffer.from(value);
      },
      parseLiteral(ast) {
        if (ast.kind !== graphql_1.Kind.STRING) {
          throw new graphql_1.GraphQLError(`Query error: Can only parse strings to buffers but got a: ${ast.kind}`, [ast]);
        }
        const result = Buffer.from(ast.value);
        if (ast.value !== result.toString()) {
          throw new graphql_1.GraphQLError("Query error: Invalid buffer encoding", [ast]);
        }
        return result;
      }
    });
  }
});

// node_modules/graphql-compose/lib/type/index.js
var require_type2 = __commonJS({
  "node_modules/graphql-compose/lib/type/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GraphQLJSONObject = exports.GraphQLJSON = exports.GraphQLBuffer = exports.GraphQLDate = void 0;
    var graphql_type_json_1 = require_lib();
    var date_1 = __importDefault(require_date());
    exports.GraphQLDate = date_1.default;
    var buffer_1 = __importDefault(require_buffer());
    exports.GraphQLBuffer = buffer_1.default;
    var GraphQLJSON = graphql_type_json_1.GraphQLJSON;
    exports.GraphQLJSON = GraphQLJSON;
    var GraphQLJSONObject = graphql_type_json_1.GraphQLJSONObject;
    exports.GraphQLJSONObject = GraphQLJSONObject;
  }
});

// node_modules/graphql-compose/lib/utils/dedent.js
var require_dedent = __commonJS({
  "node_modules/graphql-compose/lib/utils/dedent.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.dedent = void 0;
    function dedent(strings, ...values) {
      const raw = typeof strings === "string" ? [strings] : strings.raw;
      let result = "";
      for (let i2 = 0; i2 < raw.length; i2++) {
        result += raw[i2].replace(/\\\n[ \t]*/g, "").replace(/\\`/g, "`");
        if (i2 < values.length) {
          result += values[i2];
        }
      }
      const lines = result.split("\n");
      let mindent = null;
      lines.forEach((l) => {
        const m2 = l.match(/^(\s+)\S+/);
        if (m2) {
          const indent = m2[1].length;
          if (!mindent) {
            mindent = indent;
          } else {
            mindent = Math.min(mindent, indent);
          }
        }
      });
      if (mindent !== null) {
        const m2 = mindent;
        result = lines.map((l) => l[0] === " " ? l.slice(m2) : l).join("\n");
      }
      return result.trim().replace(/\\n/g, "\n");
    }
    exports.dedent = dedent;
  }
});

// node_modules/graphql-compose/lib/NonNullComposer.js
var require_NonNullComposer = __commonJS({
  "node_modules/graphql-compose/lib/NonNullComposer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NonNullComposer = void 0;
    var graphql_1 = require_graphql3();
    var typeHelpers_1 = require_typeHelpers();
    var ListComposer_1 = require_ListComposer();
    var misc_1 = require_misc();
    var NonNullComposer = class {
      constructor(type) {
        (0, misc_1.invariant)(!(type instanceof NonNullComposer), "You provide NonNull value to NonNullComposer constructor. Nesting NonNull is not allowed.");
        this.ofType = type;
      }
      getType() {
        return new graphql_1.GraphQLNonNull(this.ofType.getType());
      }
      getTypeName() {
        return `${this.ofType.getTypeName()}!`;
      }
      getUnwrappedTC() {
        let tc = this;
        while (!(0, typeHelpers_1.isNamedTypeComposer)(tc)) {
          tc = tc.ofType;
        }
        return tc;
      }
      getTypePlural() {
        return new ListComposer_1.ListComposer(this);
      }
      getTypeNonNull() {
        return this;
      }
      get List() {
        return new ListComposer_1.ListComposer(this);
      }
      get NonNull() {
        return this;
      }
      cloneTo(anotherSchemaComposer, cloneMap = /* @__PURE__ */ new Map()) {
        return new NonNullComposer(this.ofType.cloneTo(anotherSchemaComposer, cloneMap));
      }
    };
    exports.NonNullComposer = NonNullComposer;
  }
});

// node_modules/graphql-compose/lib/utils/graphqlVersion.js
var require_graphqlVersion = __commonJS({
  "node_modules/graphql-compose/lib/utils/graphqlVersion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.graphqlVersion = exports.getGraphqlVersion = void 0;
    function getGraphqlVersion() {
      var _a, _b, _c;
      const graphql = require_graphql3();
      if ((_a = graphql === null || graphql === void 0 ? void 0 : graphql.versionInfo) === null || _a === void 0 ? void 0 : _a.major) {
        return parseFloat(`${(_b = graphql === null || graphql === void 0 ? void 0 : graphql.versionInfo) === null || _b === void 0 ? void 0 : _b.major}.${(_c = graphql === null || graphql === void 0 ? void 0 : graphql.versionInfo) === null || _c === void 0 ? void 0 : _c.minor}`);
      } else if (graphql.getOperationRootType) {
        return 14;
      } else if (graphql.lexicographicSortSchema) {
        return 13;
      } else if (graphql.lexographicSortSchema) {
        return 13;
      }
      return 11;
    }
    exports.getGraphqlVersion = getGraphqlVersion;
    exports.graphqlVersion = getGraphqlVersion();
  }
});

// node_modules/graphql-compose/lib/utils/getFromSchema.js
var require_getFromSchema = __commonJS({
  "node_modules/graphql-compose/lib/utils/getFromSchema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDirectivesFromSchema = exports.getTypesFromSchema = void 0;
    var SchemaComposer_1 = require_SchemaComposer();
    var ObjectTypeComposer_1 = require_ObjectTypeComposer();
    var InputTypeComposer_1 = require_InputTypeComposer();
    var InterfaceTypeComposer_1 = require_InterfaceTypeComposer();
    var UnionTypeComposer_1 = require_UnionTypeComposer();
    function getTypesFromSchema(sc, filter) {
      const { exclude = [], include, omitDirectiveDefinitions } = filter || {};
      const rootTypes = /* @__PURE__ */ new Set();
      if (Array.isArray(include) && include.length) {
        include.forEach((s2) => {
          if (s2 && typeof s2 === "string") {
            rootTypes.add(sc.getAnyTC(s2));
          }
        });
      } else {
        if (sc.has("Query"))
          rootTypes.add(sc.getOTC("Query"));
        if (sc.has("Mutation"))
          rootTypes.add(sc.getOTC("Mutation"));
        if (sc.has("Subscription"))
          rootTypes.add(sc.getOTC("Subscription"));
      }
      if (!omitDirectiveDefinitions) {
        const directives = sc._directives.filter((d) => !SchemaComposer_1.BUILT_IN_DIRECTIVES.includes(d));
        directives.forEach((d) => {
          if (!Array.isArray(d.args))
            return;
          d.args.forEach((ac) => {
            const tc = sc.getAnyTC(ac.type);
            if (!exclude.includes(tc.getTypeName())) {
              rootTypes.add(tc);
            }
          });
        });
      }
      const typeSet = /* @__PURE__ */ new Set();
      rootTypes.forEach((tc) => {
        if (tc instanceof ObjectTypeComposer_1.ObjectTypeComposer || tc instanceof InputTypeComposer_1.InputTypeComposer || tc instanceof InterfaceTypeComposer_1.InterfaceTypeComposer || tc instanceof UnionTypeComposer_1.UnionTypeComposer) {
          typeSet.add(tc);
          tc.getNestedTCs({ exclude }, typeSet);
        } else {
          typeSet.add(tc);
        }
      });
      return typeSet;
    }
    exports.getTypesFromSchema = getTypesFromSchema;
    function getDirectivesFromSchema(sc) {
      return sc._directives.filter((d) => !SchemaComposer_1.BUILT_IN_DIRECTIVES.includes(d));
    }
    exports.getDirectivesFromSchema = getDirectivesFromSchema;
  }
});

// node_modules/graphql-compose/lib/ThunkComposer.js
var require_ThunkComposer = __commonJS({
  "node_modules/graphql-compose/lib/ThunkComposer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ThunkComposer = void 0;
    var is_1 = require_is();
    var ListComposer_1 = require_ListComposer();
    var NonNullComposer_1 = require_NonNullComposer();
    var misc_1 = require_misc();
    var ThunkComposer = class {
      constructor(thunk, typeName) {
        this._thunk = thunk;
        if (typeName && typeof typeName === "string") {
          this._typeName = typeName;
        }
      }
      get ofType() {
        if (!this._typeFromThunk) {
          this._typeFromThunk = this._thunk();
        }
        if (!this._typeFromThunk) {
          throw new Error(`ThunkComposer(${this._typeName || ""}) returns empty value: ${(0, misc_1.inspect)(this._typeFromThunk)}`);
        }
        return this._typeFromThunk;
      }
      getUnwrappedTC() {
        return this.ofType;
      }
      getType() {
        return this.ofType.getType();
      }
      getTypeName() {
        if (this._typeFromThunk && (0, is_1.isFunction)(this._typeFromThunk.getTypeName)) {
          return this._typeFromThunk.getTypeName();
        } else if (this._typeName) {
          return this._typeName;
        }
        return this.getUnwrappedTC().getTypeName();
      }
      getTypePlural() {
        return new ListComposer_1.ListComposer(this);
      }
      getTypeNonNull() {
        return new NonNullComposer_1.NonNullComposer(this);
      }
      get List() {
        return new ListComposer_1.ListComposer(this);
      }
      get NonNull() {
        return new NonNullComposer_1.NonNullComposer(this);
      }
      cloneTo(anotherSchemaComposer, cloneMap = /* @__PURE__ */ new Map()) {
        const cloned = this.ofType.cloneTo(anotherSchemaComposer, cloneMap);
        return new ThunkComposer(() => cloned, this._typeName);
      }
    };
    exports.ThunkComposer = ThunkComposer;
  }
});

// node_modules/graphql-compose/lib/utils/configToDefine.js
var require_configToDefine = __commonJS({
  "node_modules/graphql-compose/lib/utils/configToDefine.js"(exports) {
    "use strict";
    var __rest = exports && exports.__rest || function(s2, e2) {
      var t2 = {};
      for (var p in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p) && e2.indexOf(p) < 0)
          t2[p] = s2[p];
      if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i2 = 0, p = Object.getOwnPropertySymbols(s2); i2 < p.length; i2++) {
          if (e2.indexOf(p[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i2]))
            t2[p[i2]] = s2[p[i2]];
        }
      return t2;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertInterfaceArrayAsThunk = exports.convertObjectTypeArrayAsThunk = exports.convertInputFieldMapToConfig = exports.defineInputFieldMap = exports.convertEnumValuesToConfig = exports.defineEnumValues = exports.convertObjectFieldMapToConfig = exports.defineFieldMap = void 0;
    var misc_1 = require_misc();
    var is_1 = require_is();
    var ThunkComposer_1 = require_ThunkComposer();
    var ObjectTypeComposer_1 = require_ObjectTypeComposer();
    var InterfaceTypeComposer_1 = require_InterfaceTypeComposer();
    var typeHelpers_1 = require_typeHelpers();
    function isPlainObj(obj) {
      return obj && typeof obj === "object" && !Array.isArray(obj);
    }
    function defineFieldMap(config, fieldMap, parentAstNode) {
      var _a, _b, _c;
      (0, misc_1.invariant)(isPlainObj(fieldMap), `${config.name} fields must be an object with field names as keys or a function which returns such an object.`);
      const fieldAstNodeMap = /* @__PURE__ */ Object.create(null);
      const argAstNodeMap = /* @__PURE__ */ Object.create(null);
      for (const fieldNode of (_a = parentAstNode === null || parentAstNode === void 0 ? void 0 : parentAstNode.fields) !== null && _a !== void 0 ? _a : []) {
        if (!fieldAstNodeMap[fieldNode.name.value]) {
          fieldAstNodeMap[fieldNode.name.value] = fieldNode;
          argAstNodeMap[fieldNode.name.value] = /* @__PURE__ */ Object.create(null);
        }
        for (const argAstNode of (_b = fieldNode === null || fieldNode === void 0 ? void 0 : fieldNode.arguments) !== null && _b !== void 0 ? _b : []) {
          if (!argAstNodeMap[fieldNode.name.value][argAstNode.name.value]) {
            argAstNodeMap[fieldNode.name.value][argAstNode.name.value] = argAstNode;
          }
        }
      }
      const resultFieldMap = /* @__PURE__ */ Object.create(null);
      for (const fieldName of Object.keys(fieldMap)) {
        const fieldConfig = fieldMap[fieldName];
        const fieldNodeAst = fieldAstNodeMap[fieldName];
        (0, misc_1.invariant)(isPlainObj(fieldConfig), `${config.name}.${fieldName} field config must be an object`);
        const field = Object.assign(Object.assign({}, fieldConfig), { isDeprecated: Boolean(fieldConfig.deprecationReason), name: fieldName, astNode: fieldNodeAst });
        (0, misc_1.invariant)(field.resolve == null || typeof field.resolve === "function", `${config.name}.${fieldName} field resolver must be a function if provided, but got: ${(0, misc_1.inspect)(field.resolve)}.`);
        const argsConfig = fieldConfig.args;
        if (!argsConfig) {
          field.args = [];
        } else {
          (0, misc_1.invariant)(isPlainObj(argsConfig), `${config.name}.${fieldName} args must be an object with argument names as keys.`);
          const fieldArgNodeMap = (_c = argAstNodeMap[fieldName]) !== null && _c !== void 0 ? _c : {};
          field.args = Object.keys(argsConfig).map((argName) => {
            const arg = argsConfig[argName];
            return {
              name: argName,
              description: arg.description === void 0 ? null : arg.description,
              type: arg.type,
              isDeprecated: Boolean(fieldConfig.deprecationReason),
              deprecationReason: arg === null || arg === void 0 ? void 0 : arg.deprecationReason,
              defaultValue: arg.defaultValue,
              astNode: fieldArgNodeMap[argName]
            };
          });
        }
        resultFieldMap[fieldName] = field;
      }
      return resultFieldMap;
    }
    exports.defineFieldMap = defineFieldMap;
    function convertObjectFieldMapToConfig(fieldMap, sc) {
      const fields = {};
      const isThunk = (0, is_1.isFunction)(fieldMap);
      const _fields = isThunk ? fieldMap(sc) : fieldMap;
      if (!(0, is_1.isObject)(_fields))
        return {};
      Object.keys(_fields).forEach((n) => {
        var _a;
        const _b = _fields[n], { name, isDeprecated } = _b, fc = __rest(_b, ["name", "isDeprecated"]);
        const args = {};
        if (Array.isArray(fc.args)) {
          fc.args.forEach((arg) => {
            var _a2;
            const { name: argName } = arg, ac = __rest(arg, ["name"]);
            args[argName] = Object.assign(Object.assign({}, ac), { type: isThunk ? new ThunkComposer_1.ThunkComposer(() => sc.typeMapper.convertInputTypeDefinition(ac.type || arg)) : sc.typeMapper.convertInputTypeDefinition(ac.type || arg), directives: sc.typeMapper.parseDirectives((_a2 = ac === null || ac === void 0 ? void 0 : ac.astNode) === null || _a2 === void 0 ? void 0 : _a2.directives) });
          });
          fc.args = args;
        } else if ((0, is_1.isObject)(fc.args)) {
          Object.keys(fc.args).forEach((argName) => {
            const sourceArgs = fc.args;
            args[argName] = Object.assign(Object.assign({}, (0, is_1.isObject)(sourceArgs[argName]) ? sourceArgs[argName] : null), { type: isThunk ? new ThunkComposer_1.ThunkComposer(() => sc.typeMapper.convertInputTypeDefinition(sourceArgs[argName].type || sourceArgs[argName])) : sc.typeMapper.convertInputTypeDefinition(sourceArgs[argName].type || sourceArgs[argName]) });
          });
          fc.args = args;
        }
        fields[n] = Object.assign(Object.assign({}, fc), { type: isThunk ? new ThunkComposer_1.ThunkComposer(() => sc.typeMapper.convertOutputTypeDefinition(fc.type || _fields[n])) : sc.typeMapper.convertOutputTypeDefinition(fc.type || _fields[n]), directives: sc.typeMapper.parseDirectives((_a = fc === null || fc === void 0 ? void 0 : fc.astNode) === null || _a === void 0 ? void 0 : _a.directives) });
      });
      return fields;
    }
    exports.convertObjectFieldMapToConfig = convertObjectFieldMapToConfig;
    function defineEnumValues(type, valueMap, parentAstNode) {
      var _a;
      (0, misc_1.invariant)(isPlainObj(valueMap), `${type.name} values must be an object with value names as keys.`);
      const astNodeMap = /* @__PURE__ */ Object.create(null);
      for (const valueNode of (_a = parentAstNode === null || parentAstNode === void 0 ? void 0 : parentAstNode.values) !== null && _a !== void 0 ? _a : []) {
        astNodeMap[valueNode.name.value] = valueNode;
      }
      return Object.keys(valueMap).map((valueName) => {
        const value = valueMap[valueName];
        (0, misc_1.invariant)(isPlainObj(value), `${type.name}.${valueName} must refer to an object with a "value" key representing an internal value but got: ${(0, misc_1.inspect)(value)}.`);
        (0, misc_1.invariant)(!value.hasOwnProperty("isDeprecated"), `${type.name}.${valueName} should provide "deprecationReason" instead of "isDeprecated".`);
        return {
          name: valueName,
          description: value.description,
          isDeprecated: Boolean(value.deprecationReason),
          deprecationReason: value.deprecationReason,
          astNode: astNodeMap[valueName],
          value: value.hasOwnProperty("value") ? value.value : valueName,
          extensions: {}
        };
      });
    }
    exports.defineEnumValues = defineEnumValues;
    function convertEnumValuesToConfig(values, schemaComposer2) {
      const fields = {};
      values.forEach((_a) => {
        var _b;
        var { name, isDeprecated } = _a, fc = __rest(_a, ["name", "isDeprecated"]);
        fields[name] = fc;
        if ((_b = fc === null || fc === void 0 ? void 0 : fc.astNode) === null || _b === void 0 ? void 0 : _b.directives) {
          const directives = schemaComposer2.typeMapper.parseDirectives(fc.astNode.directives);
          if (directives) {
            fields[name].directives = directives;
          }
        }
      });
      return fields;
    }
    exports.convertEnumValuesToConfig = convertEnumValuesToConfig;
    function defineInputFieldMap(config, fieldMap, parentAstNode) {
      var _a;
      (0, misc_1.invariant)(isPlainObj(fieldMap), `${config.name} fields must be an object with field names as keys or a function which returns such an object.`);
      const astNodeMap = /* @__PURE__ */ Object.create(null);
      for (const fieldNode of (_a = parentAstNode === null || parentAstNode === void 0 ? void 0 : parentAstNode.fields) !== null && _a !== void 0 ? _a : []) {
        astNodeMap[fieldNode.name.value] = fieldNode;
      }
      const resultFieldMap = /* @__PURE__ */ Object.create(null);
      for (const fieldName of Object.keys(fieldMap)) {
        const field = Object.assign(Object.assign({}, fieldMap[fieldName]), { name: fieldName, astNode: astNodeMap[fieldName] });
        (0, misc_1.invariant)(!field.hasOwnProperty("resolve"), `${config.name}.${fieldName} field has a resolve property, but Input Types cannot define resolvers.`);
        resultFieldMap[fieldName] = field;
      }
      return resultFieldMap;
    }
    exports.defineInputFieldMap = defineInputFieldMap;
    function convertInputFieldMapToConfig(fieldMap, sc) {
      const fields = {};
      const isThunk = (0, is_1.isFunction)(fieldMap);
      const _fields = isThunk ? fieldMap(sc) : fieldMap;
      Object.keys(_fields).forEach((n) => {
        var _a;
        const _b = _fields[n], { name, isDeprecated } = _b, fc = __rest(_b, ["name", "isDeprecated"]);
        fields[n] = Object.assign(Object.assign({}, fc), { type: isThunk ? new ThunkComposer_1.ThunkComposer(() => sc.typeMapper.convertInputTypeDefinition(fc.type || _fields[n])) : sc.typeMapper.convertInputTypeDefinition(fc.type || _fields[n]), directives: sc.typeMapper.parseDirectives((_a = fc === null || fc === void 0 ? void 0 : fc.astNode) === null || _a === void 0 ? void 0 : _a.directives) });
      });
      return fields;
    }
    exports.convertInputFieldMapToConfig = convertInputFieldMapToConfig;
    function convertObjectTypeArrayAsThunk(types3, sc) {
      const isThunk = (0, is_1.isFunction)(types3);
      const t2 = isThunk ? types3(sc) : types3;
      if (!Array.isArray(t2))
        return [];
      return t2.map((type) => {
        if (type instanceof ObjectTypeComposer_1.ObjectTypeComposer || type instanceof ThunkComposer_1.ThunkComposer) {
          return type;
        }
        const tc = sc.typeMapper.convertOutputTypeDefinition(type);
        if (!tc && isThunk) {
          return new ThunkComposer_1.ThunkComposer(() => sc.typeMapper.convertOutputTypeDefinition(type), (0, typeHelpers_1.getComposeTypeName)(type, sc));
        }
        if (!(tc instanceof ObjectTypeComposer_1.ObjectTypeComposer) && !(tc instanceof ThunkComposer_1.ThunkComposer)) {
          throw new Error(`Should be provided ObjectType but received ${(0, misc_1.inspect)(type)}`);
        }
        return tc;
      });
    }
    exports.convertObjectTypeArrayAsThunk = convertObjectTypeArrayAsThunk;
    function convertInterfaceArrayAsThunk(types3, sc) {
      const isThunk = (0, is_1.isFunction)(types3);
      const t2 = isThunk ? types3(sc) : types3;
      if (!Array.isArray(t2))
        return [];
      return t2.map((type) => {
        if (type instanceof InterfaceTypeComposer_1.InterfaceTypeComposer || type instanceof ThunkComposer_1.ThunkComposer) {
          return type;
        }
        return isThunk ? new ThunkComposer_1.ThunkComposer(() => sc.typeMapper.convertInterfaceTypeDefinition(type), (0, typeHelpers_1.getComposeTypeName)(type, sc)) : sc.typeMapper.convertInterfaceTypeDefinition(type);
      });
    }
    exports.convertInterfaceArrayAsThunk = convertInterfaceArrayAsThunk;
  }
});

// node_modules/graphql-compose/lib/utils/definitionNode.js
var require_definitionNode = __commonJS({
  "node_modules/graphql-compose/lib/utils/definitionNode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseValueNode = exports.getEnumValueDefinitionNodes = exports.getNameNode = exports.getInputValueDefinitionNodes = exports.getFieldDefinitionNodes = exports.getArgumentsDefinitionNodes = exports.getTypeNode = exports.getInterfaceNodes = exports.getDirectiveNodes = exports.getDescriptionNode = exports.getUnionTypeDefinitionNode = exports.getScalarTypeDefinitionNode = exports.getInterfaceTypeDefinitionNode = exports.getEnumTypeDefinitionNode = exports.getInputObjectTypeDefinitionNode = exports.getObjectTypeDefinitionNode = void 0;
    var ThunkComposer_1 = require_ThunkComposer();
    var NonNullComposer_1 = require_NonNullComposer();
    var ListComposer_1 = require_ListComposer();
    var misc_1 = require_misc();
    var graphql_1 = require_graphql2();
    function getObjectTypeDefinitionNode(tc) {
      return {
        kind: graphql_1.Kind.OBJECT_TYPE_DEFINITION,
        name: getNameNode(tc.getTypeName()),
        description: getDescriptionNode(tc.getDescription()),
        directives: getDirectiveNodes(tc.getDirectives(), tc.schemaComposer),
        interfaces: getInterfaceNodes(tc.getInterfaces()),
        fields: getFieldDefinitionNodes(tc)
      };
    }
    exports.getObjectTypeDefinitionNode = getObjectTypeDefinitionNode;
    function getInputObjectTypeDefinitionNode(tc) {
      return {
        kind: graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION,
        name: getNameNode(tc.getTypeName()),
        directives: getDirectiveNodes(tc.getDirectives(), tc.schemaComposer),
        description: getDescriptionNode(tc.getDescription()),
        fields: getInputValueDefinitionNodes(tc)
      };
    }
    exports.getInputObjectTypeDefinitionNode = getInputObjectTypeDefinitionNode;
    function getEnumTypeDefinitionNode(tc) {
      return {
        kind: graphql_1.Kind.ENUM_TYPE_DEFINITION,
        name: getNameNode(tc.getTypeName()),
        description: getDescriptionNode(tc.getDescription()),
        directives: getDirectiveNodes(tc.getDirectives(), tc.schemaComposer),
        values: getEnumValueDefinitionNodes(tc) || []
      };
    }
    exports.getEnumTypeDefinitionNode = getEnumTypeDefinitionNode;
    function getInterfaceTypeDefinitionNode(tc) {
      return {
        kind: graphql_1.Kind.INTERFACE_TYPE_DEFINITION,
        name: getNameNode(tc.getTypeName()),
        description: getDescriptionNode(tc.getDescription()),
        directives: getDirectiveNodes(tc.getDirectives(), tc.schemaComposer),
        fields: getFieldDefinitionNodes(tc)
      };
    }
    exports.getInterfaceTypeDefinitionNode = getInterfaceTypeDefinitionNode;
    function getScalarTypeDefinitionNode(tc) {
      return {
        kind: graphql_1.Kind.SCALAR_TYPE_DEFINITION,
        name: getNameNode(tc.getTypeName()),
        description: getDescriptionNode(tc.getDescription()),
        directives: getDirectiveNodes(tc.getDirectives(), tc.schemaComposer)
      };
    }
    exports.getScalarTypeDefinitionNode = getScalarTypeDefinitionNode;
    function getUnionTypeDefinitionNode(tc) {
      return {
        kind: graphql_1.Kind.UNION_TYPE_DEFINITION,
        name: getNameNode(tc.getTypeName()),
        description: getDescriptionNode(tc.getDescription()),
        directives: getDirectiveNodes(tc.getDirectives(), tc.schemaComposer),
        types: tc.getTypeNames().map((value) => ({
          kind: graphql_1.Kind.NAMED_TYPE,
          name: getNameNode(value)
        }))
      };
    }
    exports.getUnionTypeDefinitionNode = getUnionTypeDefinitionNode;
    function getDescriptionNode(value) {
      if (!value)
        return;
      return {
        kind: graphql_1.Kind.STRING,
        value
      };
    }
    exports.getDescriptionNode = getDescriptionNode;
    function toValueNode(value) {
      switch (typeof value) {
        case "string":
          return { kind: graphql_1.Kind.STRING, value };
        case "number":
          if (Number.isInteger(value))
            return { kind: graphql_1.Kind.INT, value: value.toString() };
          return { kind: graphql_1.Kind.FLOAT, value: value.toString() };
        case "boolean":
          return { kind: graphql_1.Kind.BOOLEAN, value };
        case "object":
          if (value === null) {
            return { kind: graphql_1.Kind.NULL };
          } else if (Array.isArray(value)) {
            return {
              kind: graphql_1.Kind.LIST,
              values: value.map((v) => toValueNode(v))
            };
          } else {
            return {
              kind: graphql_1.Kind.OBJECT,
              fields: Object.keys(value).map((k) => ({
                kind: graphql_1.Kind.OBJECT_FIELD,
                name: getNameNode(k),
                value: toValueNode(value[k])
              }))
            };
          }
        default:
          console.log(`Cannot determine astNode in toValueNode() method: ${(0, misc_1.inspect)(value)}`);
          return { kind: graphql_1.Kind.NULL };
      }
    }
    function getDirectiveArgumentNodes(data, directive) {
      const keys = Object.keys(data);
      if (!keys.length)
        return;
      const args = [];
      keys.forEach((k) => {
        var _a;
        let argumentType;
        if (directive) {
          argumentType = (_a = directive.args.find((d) => d.name === k)) === null || _a === void 0 ? void 0 : _a.type;
        }
        const argNode = {
          kind: graphql_1.Kind.ARGUMENT,
          name: getNameNode(k),
          value: argumentType ? (0, graphql_1.astFromValue)(data[k], argumentType) || { kind: graphql_1.Kind.NULL } : toValueNode(data[k])
        };
        args.push(argNode);
      });
      return args;
    }
    function getDirectiveNodes(values, sc) {
      if (!values || !values.length)
        return;
      return values.map((v) => ({
        kind: graphql_1.Kind.DIRECTIVE,
        name: getNameNode(v.name),
        arguments: v.args && getDirectiveArgumentNodes(v.args, sc._getDirective(v.name))
      }));
    }
    exports.getDirectiveNodes = getDirectiveNodes;
    function getInterfaceNodes(ifaces) {
      return ifaces.map((iface) => {
        if (!iface || !iface.getTypeName)
          return;
        return {
          kind: graphql_1.Kind.NAMED_TYPE,
          name: getNameNode(iface.getTypeName())
        };
      }).filter(Boolean);
    }
    exports.getInterfaceNodes = getInterfaceNodes;
    function getTypeNode(atc) {
      if (atc instanceof ThunkComposer_1.ThunkComposer) {
        return getTypeNode(atc.ofType);
      } else if (atc instanceof ListComposer_1.ListComposer) {
        const subType = getTypeNode(atc.ofType);
        if (!subType)
          return;
        return {
          kind: graphql_1.Kind.LIST_TYPE,
          type: subType
        };
      } else if (atc instanceof NonNullComposer_1.NonNullComposer) {
        const subType = getTypeNode(atc.ofType);
        if (!subType)
          return;
        return {
          kind: graphql_1.Kind.NON_NULL_TYPE,
          type: subType
        };
      } else if (atc && atc.getTypeName) {
        return {
          kind: graphql_1.Kind.NAMED_TYPE,
          name: getNameNode(atc.getTypeName())
        };
      }
      return void 0;
    }
    exports.getTypeNode = getTypeNode;
    function getArgumentsDefinitionNodes(tc, fieldName) {
      const argNames = tc.getFieldArgNames(fieldName);
      if (!argNames.length)
        return;
      return argNames.map((argName) => {
        const ac = tc.getFieldArg(fieldName, argName);
        const type = getTypeNode(ac.type);
        if (!type)
          return;
        return {
          kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,
          name: getNameNode(argName),
          type,
          description: getDescriptionNode(ac.description),
          directives: getDirectiveNodes(tc.getFieldArgDirectives(fieldName, argName), tc.schemaComposer),
          defaultValue: ac.defaultValue !== void 0 && astFromValueSafe(ac.defaultValue, tc.getFieldArgType(fieldName, argName)) || void 0
        };
      }).filter(Boolean);
    }
    exports.getArgumentsDefinitionNodes = getArgumentsDefinitionNodes;
    function getFieldDefinitionNodes(tc) {
      const fieldNames = tc.getFieldNames();
      if (!fieldNames.length)
        return;
      return fieldNames.map((fieldName) => {
        const fc = tc.getField(fieldName);
        const type = getTypeNode(fc.type);
        if (!type)
          return;
        return {
          kind: graphql_1.Kind.FIELD_DEFINITION,
          name: getNameNode(fieldName),
          type,
          arguments: getArgumentsDefinitionNodes(tc, fieldName),
          description: getDescriptionNode(fc.description),
          directives: getDirectiveNodes(tc.getFieldDirectives(fieldName), tc.schemaComposer)
        };
      }).filter(Boolean);
    }
    exports.getFieldDefinitionNodes = getFieldDefinitionNodes;
    function getInputValueDefinitionNodes(tc) {
      const fieldNames = tc.getFieldNames();
      if (!fieldNames.length)
        return;
      return fieldNames.map((fieldName) => {
        const fc = tc.getField(fieldName);
        const type = getTypeNode(fc.type);
        if (!type)
          return;
        return {
          kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,
          name: getNameNode(fieldName),
          type,
          description: getDescriptionNode(fc.description),
          directives: getDirectiveNodes(tc.getFieldDirectives(fieldName), tc.schemaComposer),
          defaultValue: fc.defaultValue !== void 0 && astFromValueSafe(fc.defaultValue, tc.getFieldType(fieldName)) || void 0
        };
      }).filter(Boolean);
    }
    exports.getInputValueDefinitionNodes = getInputValueDefinitionNodes;
    function getNameNode(value) {
      return { kind: graphql_1.Kind.NAME, value };
    }
    exports.getNameNode = getNameNode;
    function getEnumValueDefinitionNodes(tc) {
      const fieldNames = tc.getFieldNames();
      if (!fieldNames.length)
        return;
      return fieldNames.map((fieldName) => {
        const fc = tc.getField(fieldName);
        return {
          kind: graphql_1.Kind.ENUM_VALUE_DEFINITION,
          name: getNameNode(fieldName),
          description: getDescriptionNode(fc.description),
          directives: getDirectiveNodes(tc.getFieldDirectives(fieldName), tc.schemaComposer)
        };
      });
    }
    exports.getEnumValueDefinitionNodes = getEnumValueDefinitionNodes;
    function parseValueNode(ast, variables = {}, typeName) {
      switch (ast.kind) {
        case graphql_1.Kind.STRING:
        case graphql_1.Kind.BOOLEAN:
          return ast.value;
        case graphql_1.Kind.INT:
        case graphql_1.Kind.FLOAT:
          return parseFloat(ast.value);
        case graphql_1.Kind.OBJECT:
          const value = /* @__PURE__ */ Object.create(null);
          ast.fields.forEach((field) => {
            value[field.name.value] = parseValueNode(field.value, variables, typeName);
          });
          return value;
        case graphql_1.Kind.LIST:
          return ast.values.map((n) => parseValueNode(n, variables, typeName));
        case graphql_1.Kind.NULL:
          return null;
        case graphql_1.Kind.VARIABLE:
          return variables ? variables[ast.name.value] : void 0;
        default:
          throw new TypeError(`${typeName} cannot represent value: ${(0, misc_1.inspect)(ast)}`);
      }
    }
    exports.parseValueNode = parseValueNode;
    function astFromValueSafe(value, type) {
      try {
        return (0, graphql_1.astFromValue)(value, type);
      } catch (e2) {
        return toValueNode(value);
      }
    }
  }
});

// node_modules/graphql-compose/lib/EnumTypeComposer.js
var require_EnumTypeComposer = __commonJS({
  "node_modules/graphql-compose/lib/EnumTypeComposer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EnumTypeComposer = void 0;
    var graphql_1 = require_graphql3();
    var is_1 = require_is();
    var misc_1 = require_misc();
    var configToDefine_1 = require_configToDefine();
    var graphqlVersion_1 = require_graphqlVersion();
    var SchemaComposer_1 = require_SchemaComposer();
    var ListComposer_1 = require_ListComposer();
    var NonNullComposer_1 = require_NonNullComposer();
    var typeHelpers_1 = require_typeHelpers();
    var schemaPrinter_1 = require_schemaPrinter();
    var definitionNode_1 = require_definitionNode();
    var EnumTypeComposer = class {
      constructor(graphqlType, schemaComposer2) {
        if (!(schemaComposer2 instanceof SchemaComposer_1.SchemaComposer)) {
          throw new Error("You must provide SchemaComposer instance as a second argument for `new EnumTypeComposer(GraphQLEnumType, SchemaComposer)`");
        }
        if (!(graphqlType instanceof graphql_1.GraphQLEnumType)) {
          throw new Error("EnumTypeComposer accept only GraphQLEnumType in constructor");
        }
        this.schemaComposer = schemaComposer2;
        this._gqType = graphqlType;
        this.schemaComposer.set(graphqlType, this);
        this.schemaComposer.set(graphqlType.name, this);
        this._gqcFields = (0, configToDefine_1.convertEnumValuesToConfig)(this._gqType.getValues(), this.schemaComposer);
        if (!this._gqType.astNode) {
          this._gqType.astNode = (0, definitionNode_1.getEnumTypeDefinitionNode)(this);
        }
        this._gqcIsModified = false;
      }
      static create(typeDef, schemaComposer2) {
        if (!(schemaComposer2 instanceof SchemaComposer_1.SchemaComposer)) {
          throw new Error("You must provide SchemaComposer instance as a second argument for `EnumTypeComposer.create(typeDef, schemaComposer)`");
        }
        if (schemaComposer2.hasInstance(typeDef, EnumTypeComposer)) {
          return schemaComposer2.getETC(typeDef);
        }
        const etc = this.createTemp(typeDef, schemaComposer2);
        if (schemaComposer2)
          schemaComposer2.add(etc);
        return etc;
      }
      static createTemp(typeDef, schemaComposer2) {
        const sc = schemaComposer2 || new SchemaComposer_1.SchemaComposer();
        let ETC;
        if ((0, is_1.isString)(typeDef)) {
          const typeName = typeDef;
          if ((0, typeHelpers_1.isTypeNameString)(typeName)) {
            ETC = new EnumTypeComposer(new graphql_1.GraphQLEnumType({
              name: typeName,
              values: graphqlVersion_1.graphqlVersion < 13 ? { _OldGraphqlStubValue_: {} } : {}
            }), sc);
          } else {
            ETC = sc.typeMapper.convertSDLTypeDefinition(typeName);
            if (!(ETC instanceof EnumTypeComposer)) {
              throw new Error("You should provide correct GraphQLEnumType type definition. Eg. `enum MyType { KEY1 KEY2 KEY3 }`");
            }
          }
        } else if (typeDef instanceof graphql_1.GraphQLEnumType) {
          ETC = new EnumTypeComposer(typeDef, sc);
        } else if ((0, is_1.isObject)(typeDef)) {
          const type = new graphql_1.GraphQLEnumType(Object.assign({}, typeDef));
          ETC = new EnumTypeComposer(type, sc);
          ETC.setFields(typeDef.values || {});
          ETC.setExtensions(typeDef.extensions);
          if (Array.isArray(typeDef === null || typeDef === void 0 ? void 0 : typeDef.directives)) {
            ETC.setDirectives(typeDef.directives);
          }
        } else {
          throw new Error(`You should provide GraphQLEnumTypeConfig or string with enum name or SDL. Provided:
${(0, misc_1.inspect)(typeDef)}`);
        }
        return ETC;
      }
      hasField(name) {
        const values = this.getFields();
        return !!values[name];
      }
      getFields() {
        return this._gqcFields;
      }
      getField(name) {
        const values = this.getFields();
        if (!values[name]) {
          throw new Error(`Cannot get value '${name}' from enum type '${this.getTypeName()}'. Value with such name does not exist.`);
        }
        return values[name];
      }
      getFieldNames() {
        return Object.keys(this._gqcFields);
      }
      setFields(values) {
        this._gqcFields = {};
        Object.keys(values).forEach((valueName) => {
          this.setField(valueName, values[valueName]);
        });
        return this;
      }
      setField(name, valueConfig) {
        this._gqcFields[name] = {
          value: valueConfig.hasOwnProperty("value") ? valueConfig.value : name,
          description: valueConfig.description,
          deprecationReason: valueConfig.deprecationReason,
          extensions: valueConfig.extensions || {},
          directives: valueConfig.directives || []
        };
        this._gqcIsModified = true;
        return this;
      }
      addFields(newValues) {
        Object.keys(newValues).forEach((valueName) => {
          this.setField(valueName, newValues[valueName]);
        });
        return this;
      }
      removeField(nameOrArray) {
        const valueNames = Array.isArray(nameOrArray) ? nameOrArray : [nameOrArray];
        valueNames.forEach((valueName) => {
          delete this._gqcFields[valueName];
          this._gqcIsModified = true;
        });
        return this;
      }
      removeOtherFields(fieldNameOrArray) {
        const keepFieldNames = Array.isArray(fieldNameOrArray) ? fieldNameOrArray : [fieldNameOrArray];
        Object.keys(this._gqcFields).forEach((fieldName) => {
          if (keepFieldNames.indexOf(fieldName) === -1) {
            delete this._gqcFields[fieldName];
            this._gqcIsModified = true;
          }
        });
        return this;
      }
      reorderFields(names) {
        const orderedFields = {};
        const fields = this._gqcFields;
        names.forEach((name) => {
          if (fields[name]) {
            orderedFields[name] = fields[name];
            delete fields[name];
          }
        });
        this._gqcFields = Object.assign(Object.assign({}, orderedFields), fields);
        this._gqcIsModified = true;
        return this;
      }
      extendField(name, partialValueConfig) {
        let prevValueConfig;
        try {
          prevValueConfig = this.getField(name);
        } catch (e2) {
          throw new Error(`Cannot extend value '${name}' from enum '${this.getTypeName()}'. Value does not exist.`);
        }
        this.setField(name, Object.assign(Object.assign(Object.assign({}, prevValueConfig), partialValueConfig), { extensions: Object.assign(Object.assign({}, prevValueConfig.extensions || {}), partialValueConfig.extensions || {}), directives: [...prevValueConfig.directives || [], ...partialValueConfig.directives || []] }));
        return this;
      }
      deprecateFields(fields) {
        const existedFieldNames = this.getFieldNames();
        if (typeof fields === "string") {
          if (existedFieldNames.indexOf(fields) === -1) {
            throw new Error(`Cannot deprecate non-existent value '${fields}' from enum '${this.getTypeName()}'`);
          }
          this.extendField(fields, { deprecationReason: "deprecated" });
        } else if (Array.isArray(fields)) {
          fields.forEach((field) => {
            if (existedFieldNames.indexOf(field) === -1) {
              throw new Error(`Cannot deprecate non-existent value '${field}' from enum '${this.getTypeName()}'`);
            }
            this.extendField(field, { deprecationReason: "deprecated" });
          });
        } else {
          const fieldMap = fields;
          Object.keys(fieldMap).forEach((field) => {
            if (existedFieldNames.indexOf(field) === -1) {
              throw new Error(`Cannot deprecate non-existent value '${field}' from enum '${this.getTypeName()}'`);
            }
            const deprecationReason = fieldMap[field];
            this.extendField(field, { deprecationReason });
          });
        }
        return this;
      }
      getType() {
        const gqType = this._gqType;
        if (this._gqcIsModified) {
          this._gqcIsModified = false;
          gqType.astNode = (0, definitionNode_1.getEnumTypeDefinitionNode)(this);
          if (graphqlVersion_1.graphqlVersion >= 14) {
            gqType._values = (0, configToDefine_1.defineEnumValues)(gqType, this._gqcFields, gqType.astNode);
            gqType._valueLookup = new Map(gqType._values.map((enumValue) => [enumValue.value, enumValue]));
            gqType._nameLookup = (0, misc_1.keyMap)(gqType._values, (value) => value.name);
          } else {
            delete gqType._valueLookup;
            delete gqType._nameLookup;
            gqType._values = (0, configToDefine_1.defineEnumValues)(gqType, this._gqcFields, gqType.astNode);
          }
        }
        return gqType;
      }
      getTypePlural() {
        return new ListComposer_1.ListComposer(this);
      }
      getTypeNonNull() {
        return new NonNullComposer_1.NonNullComposer(this);
      }
      get List() {
        return new ListComposer_1.ListComposer(this);
      }
      get NonNull() {
        return new NonNullComposer_1.NonNullComposer(this);
      }
      getTypeName() {
        return this._gqType.name;
      }
      setTypeName(name) {
        this._gqType.name = name;
        this._gqcIsModified = true;
        this.schemaComposer.add(this);
        return this;
      }
      getDescription() {
        return this._gqType.description || "";
      }
      setDescription(description) {
        this._gqType.description = description;
        this._gqcIsModified = true;
        return this;
      }
      clone(newTypeNameOrTC) {
        if (!newTypeNameOrTC) {
          throw new Error("You should provide newTypeName:string for EnumTypeComposer.clone()");
        }
        const cloned = newTypeNameOrTC instanceof EnumTypeComposer ? newTypeNameOrTC : EnumTypeComposer.create(newTypeNameOrTC, this.schemaComposer);
        cloned._gqcFields = (0, misc_1.mapEachKey)(this._gqcFields, (fieldConfig) => Object.assign(Object.assign({}, fieldConfig), { extensions: Object.assign({}, fieldConfig.extensions), directives: fieldConfig.directives && [...fieldConfig.directives || []] }));
        cloned._gqcExtensions = Object.assign({}, this._gqcExtensions);
        cloned.setDescription(this.getDescription());
        cloned.setDirectives(this.getDirectives());
        return cloned;
      }
      cloneTo(anotherSchemaComposer, cloneMap = /* @__PURE__ */ new Map()) {
        if (!anotherSchemaComposer) {
          throw new Error("You should provide SchemaComposer for EnumTypeComposer.cloneTo()");
        }
        if (cloneMap.has(this))
          return cloneMap.get(this);
        const cloned = EnumTypeComposer.create(this.getTypeName(), anotherSchemaComposer);
        cloneMap.set(this, cloned);
        return this.clone(cloned);
      }
      merge(type) {
        let tc;
        if (type instanceof graphql_1.GraphQLEnumType) {
          tc = EnumTypeComposer.createTemp(type, this.schemaComposer);
        } else if (type instanceof EnumTypeComposer) {
          tc = type;
        } else {
          throw new Error(`Cannot merge ${(0, misc_1.inspect)(type)} with EnumType(${this.getTypeName()}). Provided type should be GraphQLEnumType or EnumTypeComposer.`);
        }
        this.addFields(tc.getFields());
        return this;
      }
      getExtensions() {
        if (!this._gqcExtensions) {
          return {};
        } else {
          return this._gqcExtensions;
        }
      }
      setExtensions(extensions) {
        this._gqcExtensions = extensions;
        this._gqcIsModified = true;
        return this;
      }
      extendExtensions(extensions) {
        const current = this.getExtensions();
        this.setExtensions(Object.assign(Object.assign({}, current), extensions));
        return this;
      }
      clearExtensions() {
        this.setExtensions({});
        return this;
      }
      getExtension(extensionName) {
        const extensions = this.getExtensions();
        return extensions[extensionName];
      }
      hasExtension(extensionName) {
        const extensions = this.getExtensions();
        return extensionName in extensions;
      }
      setExtension(extensionName, value) {
        this.extendExtensions({
          [extensionName]: value
        });
        return this;
      }
      removeExtension(extensionName) {
        const extensions = Object.assign({}, this.getExtensions());
        delete extensions[extensionName];
        this.setExtensions(extensions);
        return this;
      }
      getFieldExtensions(fieldName) {
        const field = this.getField(fieldName);
        return field.extensions || {};
      }
      setFieldExtensions(fieldName, extensions) {
        const field = this.getField(fieldName);
        this.setField(fieldName, Object.assign(Object.assign({}, field), { extensions }));
        return this;
      }
      extendFieldExtensions(fieldName, extensions) {
        const current = this.getFieldExtensions(fieldName);
        this.setFieldExtensions(fieldName, Object.assign(Object.assign({}, current), extensions));
        return this;
      }
      clearFieldExtensions(fieldName) {
        this.setFieldExtensions(fieldName, {});
        return this;
      }
      getFieldExtension(fieldName, extensionName) {
        const extensions = this.getFieldExtensions(fieldName);
        return extensions[extensionName];
      }
      hasFieldExtension(fieldName, extensionName) {
        const extensions = this.getFieldExtensions(fieldName);
        return extensionName in extensions;
      }
      setFieldExtension(fieldName, extensionName, value) {
        this.extendFieldExtensions(fieldName, {
          [extensionName]: value
        });
        return this;
      }
      removeFieldExtension(fieldName, extensionName) {
        const extensions = Object.assign({}, this.getFieldExtensions(fieldName));
        delete extensions[extensionName];
        this.setFieldExtensions(fieldName, extensions);
        return this;
      }
      getDirectives() {
        return this._gqcDirectives || [];
      }
      setDirectives(directives) {
        this._gqcDirectives = directives;
        this._gqcIsModified = true;
        return this;
      }
      getDirectiveNames() {
        return this.getDirectives().map((d) => d.name);
      }
      getDirectiveByName(directiveName) {
        const directive = this.getDirectives().find((d) => d.name === directiveName);
        if (!directive)
          return void 0;
        return directive.args;
      }
      setDirectiveByName(directiveName, args) {
        const directives = this.getDirectives();
        const idx = directives.findIndex((d) => d.name === directiveName);
        if (idx >= 0) {
          directives[idx].args = args;
        } else {
          directives.push({ name: directiveName, args });
        }
        this.setDirectives(directives);
        return this;
      }
      getDirectiveById(idx) {
        const directive = this.getDirectives()[idx];
        if (!directive)
          return void 0;
        return directive.args;
      }
      getFieldDirectives(fieldName) {
        return this.getField(fieldName).directives || [];
      }
      setFieldDirectives(fieldName, directives) {
        const fc = this.getField(fieldName);
        fc.directives = directives;
        this._gqcIsModified = true;
        return this;
      }
      getFieldDirectiveNames(fieldName) {
        return this.getFieldDirectives(fieldName).map((d) => d.name);
      }
      getFieldDirectiveByName(fieldName, directiveName) {
        const directive = this.getFieldDirectives(fieldName).find((d) => d.name === directiveName);
        if (!directive)
          return void 0;
        return directive.args;
      }
      setFieldDirectiveByName(fieldName, directiveName, args) {
        const directives = this.getFieldDirectives(fieldName);
        const idx = directives.findIndex((d) => d.name === directiveName);
        if (idx >= 0) {
          directives[idx].args = args;
        } else {
          directives.push({ name: directiveName, args });
        }
        this.setFieldDirectives(fieldName, directives);
        return this;
      }
      getFieldDirectiveById(fieldName, idx) {
        const directive = this.getFieldDirectives(fieldName)[idx];
        if (!directive)
          return void 0;
        return directive.args;
      }
      toSDL(opts) {
        return (0, schemaPrinter_1.printEnum)(this.getType(), opts);
      }
    };
    exports.EnumTypeComposer = EnumTypeComposer;
  }
});

// node_modules/graphql-compose/lib/utils/schemaPrinterSortTypes.js
var require_schemaPrinterSortTypes = __commonJS({
  "node_modules/graphql-compose/lib/utils/schemaPrinterSortTypes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSortMethodFromOption = exports.fnPrintSortByType = exports.printSortAlpha = void 0;
    var ScalarTypeComposer_1 = require_ScalarTypeComposer();
    var EnumTypeComposer_1 = require_EnumTypeComposer();
    var InterfaceTypeComposer_1 = require_InterfaceTypeComposer();
    var InputTypeComposer_1 = require_InputTypeComposer();
    var ObjectTypeComposer_1 = require_ObjectTypeComposer();
    var UnionTypeComposer_1 = require_UnionTypeComposer();
    var is_1 = require_is();
    var rootOrderDefault = ["Query", "Mutation", "Subscription"];
    function printSortAlpha(tc1, tc2) {
      const comp = tc1.getTypeName().localeCompare(tc2.getTypeName());
      return comp;
    }
    exports.printSortAlpha = printSortAlpha;
    function sortGetPositionOfType(tc, rootTypes = []) {
      switch (true) {
        case tc instanceof ScalarTypeComposer_1.ScalarTypeComposer:
          return [2];
        case tc instanceof EnumTypeComposer_1.EnumTypeComposer:
          return [3];
        case tc instanceof UnionTypeComposer_1.UnionTypeComposer:
          return [4];
        case tc instanceof InterfaceTypeComposer_1.InterfaceTypeComposer:
          return [5];
        case tc instanceof ObjectTypeComposer_1.ObjectTypeComposer:
          const rootPos = rootTypes.indexOf(tc.getTypeName());
          if (rootPos !== -1) {
            return [1, rootPos];
          } else {
            return [6];
          }
        case tc instanceof InputTypeComposer_1.InputTypeComposer:
          return [7];
      }
      throw new Error(`Unknown kind of type ${tc.getTypeName()}`);
    }
    function comparePositionLists(p1, p2) {
      const common = Math.min(p1.length, p2.length);
      for (let i2 = 0; i2 < common; i2++) {
        if (p1[i2] < p2[i2])
          return -1;
        if (p1[i2] > p2[i2])
          return 1;
      }
      return 0;
    }
    function fnPrintSortByType(opt) {
      const rootTypes = (opt === null || opt === void 0 ? void 0 : opt.include) || rootOrderDefault;
      return function(tc1, tc2) {
        const pos1 = sortGetPositionOfType(tc1, rootTypes);
        const pos2 = sortGetPositionOfType(tc2, rootTypes);
        const diff = comparePositionLists(pos1, pos2);
        return diff || printSortAlpha(tc1, tc2);
      };
    }
    exports.fnPrintSortByType = fnPrintSortByType;
    function getSortMethodFromOption(sortOption, printFilter) {
      if (sortOption === void 0 || sortOption === null || sortOption === true || sortOption === "ALPHABETIC") {
        return printSortAlpha;
      } else if (sortOption === "GROUP_BY_TYPE") {
        return fnPrintSortByType(printFilter);
      } else if ((0, is_1.isFunction)(sortOption)) {
        return sortOption;
      }
      return;
    }
    exports.getSortMethodFromOption = getSortMethodFromOption;
  }
});

// node_modules/graphql-compose/lib/utils/schemaPrinter.js
var require_schemaPrinter = __commonJS({
  "node_modules/graphql-compose/lib/utils/schemaPrinter.js"(exports) {
    "use strict";
    var __rest = exports && exports.__rest || function(s2, e2) {
      var t2 = {};
      for (var p in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p) && e2.indexOf(p) < 0)
          t2[p] = s2[p];
      if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i2 = 0, p = Object.getOwnPropertySymbols(s2); i2 < p.length; i2++) {
          if (e2.indexOf(p[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i2]))
            t2[p[i2]] = s2[p[i2]];
        }
      return t2;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.printDescriptionWithComments = exports.printDescription = exports.printNodeDirectives = exports.printDirective = exports.printInputValue = exports.printArgs = exports.printBlock = exports.printFields = exports.printInputObject = exports.printEnum = exports.printUnion = exports.printInterface = exports.printObject = exports.printImplementedInterfaces = exports.printScalar = exports.printType = exports.isSchemaOfCommonNames = exports.printSchemaDefinition = exports.printFilteredSchema = exports.isDefinedType = exports.printIntrospectionSchema = exports.printSchema = exports.printSchemaComposer = void 0;
    var misc_1 = require_misc();
    var printer_1 = require_printer();
    var blockString_1 = require_blockString();
    var introspection_1 = require_introspection();
    var scalars_1 = require_scalars();
    var directives_1 = require_directives();
    var definition_1 = require_definition();
    var astFromValue_1 = require_astFromValue();
    var getFromSchema_1 = require_getFromSchema();
    var schemaPrinterSortTypes_1 = require_schemaPrinterSortTypes();
    var graphqlVersion_1 = require_graphqlVersion();
    var printBlockStringLegacy;
    if (graphqlVersion_1.graphqlVersion >= 16) {
      printBlockStringLegacy = blockString_1.printBlockString;
    } else {
      printBlockStringLegacy = (value, preferMultipleLines) => blockString_1.printBlockString(value, "", preferMultipleLines);
    }
    function splitOptionsFilterPrinter(options) {
      const _a = options || {}, { exclude = [], include, omitDirectiveDefinitions } = _a, optPrinter = __rest(_a, ["exclude", "include", "omitDirectiveDefinitions"]);
      const optFilter = { exclude, include, omitDirectiveDefinitions };
      return { optPrinter, optFilter };
    }
    function printSchemaComposer(sc, options) {
      const { optPrinter, optFilter } = splitOptionsFilterPrinter(options);
      const printTypes = Array.from((0, getFromSchema_1.getTypesFromSchema)(sc, optFilter));
      const sortMethod = (0, schemaPrinterSortTypes_1.getSortMethodFromOption)(optPrinter === null || optPrinter === void 0 ? void 0 : optPrinter.sortTypes, optFilter);
      if (sortMethod)
        printTypes.sort(sortMethod);
      const res = [];
      if (!optFilter.omitDirectiveDefinitions) {
        res.push(...(0, getFromSchema_1.getDirectivesFromSchema)(sc).map((d) => printDirective(d, optPrinter)));
      }
      res.push(...printTypes.map((tc) => tc.toSDL(optPrinter)));
      return res.filter(Boolean).join("\n\n");
    }
    exports.printSchemaComposer = printSchemaComposer;
    function printSchema(schema2, options) {
      return printFilteredSchema(schema2, (n) => !(0, directives_1.isSpecifiedDirective)(n), isDefinedType, options);
    }
    exports.printSchema = printSchema;
    function printIntrospectionSchema(schema2, options) {
      return printFilteredSchema(schema2, directives_1.isSpecifiedDirective, introspection_1.isIntrospectionType, options);
    }
    exports.printIntrospectionSchema = printIntrospectionSchema;
    function isDefinedType(type) {
      return !(0, scalars_1.isSpecifiedScalarType)(type) && !(0, introspection_1.isIntrospectionType)(type);
    }
    exports.isDefinedType = isDefinedType;
    function printFilteredSchema(schema2, directiveFilter, typeFilter, options) {
      const directives = schema2.getDirectives().filter(directiveFilter);
      const typeMap = schema2.getTypeMap();
      const types3 = Object.values(typeMap).sort((type1, type2) => type1.name.localeCompare(type2.name)).filter(typeFilter);
      return `${[printSchemaDefinition(schema2)].concat(directives.map((directive) => printDirective(directive, options)), types3.map((type) => printType(type, options))).filter(Boolean).join("\n\n")}
`;
    }
    exports.printFilteredSchema = printFilteredSchema;
    function printSchemaDefinition(schema2) {
      if (isSchemaOfCommonNames(schema2)) {
        return "";
      }
      const operationTypes = [];
      const queryType = schema2.getQueryType();
      if (queryType) {
        operationTypes.push(`  query: ${queryType.name}`);
      }
      const mutationType = schema2.getMutationType();
      if (mutationType) {
        operationTypes.push(`  mutation: ${mutationType.name}`);
      }
      const subscriptionType = schema2.getSubscriptionType();
      if (subscriptionType) {
        operationTypes.push(`  subscription: ${subscriptionType.name}`);
      }
      return `schema {
${operationTypes.join("\n")}
}`;
    }
    exports.printSchemaDefinition = printSchemaDefinition;
    function isSchemaOfCommonNames(schema2) {
      const queryType = schema2.getQueryType();
      if (queryType && queryType.name !== "Query") {
        return false;
      }
      const mutationType = schema2.getMutationType();
      if (mutationType && mutationType.name !== "Mutation") {
        return false;
      }
      const subscriptionType = schema2.getSubscriptionType();
      if (subscriptionType && subscriptionType.name !== "Subscription") {
        return false;
      }
      return true;
    }
    exports.isSchemaOfCommonNames = isSchemaOfCommonNames;
    function printType(type, options) {
      if ((0, definition_1.isScalarType)(type)) {
        return printScalar(type, options);
      } else if ((0, definition_1.isObjectType)(type)) {
        return printObject(type, options);
      } else if ((0, definition_1.isInterfaceType)(type)) {
        return printInterface(type, options);
      } else if ((0, definition_1.isUnionType)(type)) {
        return printUnion(type, options);
      } else if ((0, definition_1.isEnumType)(type)) {
        return printEnum(type, options);
      } else if ((0, definition_1.isInputObjectType)(type)) {
        return printInputObject(type, options);
      }
      (0, misc_1.invariant)(false, `Unexpected type: ${(0, misc_1.inspect)(type)}`);
      return "";
    }
    exports.printType = printType;
    function printScalar(type, options) {
      if (options === null || options === void 0 ? void 0 : options.omitScalars)
        return "";
      return `${printDescription(type, options)}scalar ${type.name}${printNodeDirectives(type.astNode)}`;
    }
    exports.printScalar = printScalar;
    function printImplementedInterfaces(type, options) {
      const interfaces = type.getInterfaces ? type.getInterfaces() : [];
      if (!interfaces.length)
        return "";
      if ((options === null || options === void 0 ? void 0 : options.sortAll) || (options === null || options === void 0 ? void 0 : options.sortInterfaces)) {
        return ` implements ${interfaces.map((i2) => i2.name).sort().join(" & ")}`;
      }
      return ` implements ${interfaces.map((i2) => i2.name).join(" & ")}`;
    }
    exports.printImplementedInterfaces = printImplementedInterfaces;
    function printObject(type, options) {
      return `${printDescription(type, options)}type ${type.name}${printImplementedInterfaces(type, options)}${printNodeDirectives(type.astNode)}${printFields(type, options)}`;
    }
    exports.printObject = printObject;
    function printInterface(type, options) {
      return `${printDescription(type, options)}interface ${type.name}${printImplementedInterfaces(type, options)}${printNodeDirectives(type.astNode)}${printFields(type, options)}`;
    }
    exports.printInterface = printInterface;
    function printUnion(type, options) {
      let types3 = type.getTypes();
      if ((options === null || options === void 0 ? void 0 : options.sortAll) || (options === null || options === void 0 ? void 0 : options.sortUnions)) {
        types3 = [...types3].sort();
      }
      const possibleTypes = types3.length ? ` = ${types3.join(" | ")}` : "";
      return `${printDescription(type, options)}union ${type.name}${printNodeDirectives(type.astNode)}${possibleTypes}`;
    }
    exports.printUnion = printUnion;
    function printEnum(type, options) {
      let values = type.getValues();
      if ((options === null || options === void 0 ? void 0 : options.sortAll) || (options === null || options === void 0 ? void 0 : options.sortEnums)) {
        values = [...values].sort((a, b) => a.name.localeCompare(b.name));
      }
      const valuesList = values.map((value, i2) => `${printDescription(value, options, "  ", !i2)}  ${value.name}${printNodeDirectives(value.astNode)}`);
      return `${printDescription(type, options)}enum ${type.name}${printNodeDirectives(type.astNode)}${printBlock(valuesList)}`;
    }
    exports.printEnum = printEnum;
    function printInputObject(type, options) {
      let fields = Object.values(type.getFields());
      if ((options === null || options === void 0 ? void 0 : options.sortAll) || (options === null || options === void 0 ? void 0 : options.sortFields)) {
        fields = fields.sort((a, b) => a.name.localeCompare(b.name));
      }
      const fieldsList = fields.map((f3, i2) => `${printDescription(f3, options, "  ", !i2)}  ${printInputValue(f3)}`);
      return `${printDescription(type, options)}input ${type.name}${printNodeDirectives(type.astNode)}${printBlock(fieldsList)}`;
    }
    exports.printInputObject = printInputObject;
    function printFields(type, options) {
      let fields = Object.values(type.getFields());
      if ((options === null || options === void 0 ? void 0 : options.sortAll) || (options === null || options === void 0 ? void 0 : options.sortFields)) {
        fields = fields.sort((a, b) => a.name.localeCompare(b.name));
      }
      const fieldsList = fields.map((f3, i2) => `${printDescription(f3, options, "  ", !i2)}  ${f3.name}${printArgs(f3.args, options, "  ")}: ${String(f3.type)}${printNodeDirectives(f3.astNode)}`);
      return printBlock(fieldsList);
    }
    exports.printFields = printFields;
    function printBlock(items) {
      return items.length !== 0 ? ` {
${items.join("\n")}
}` : "";
    }
    exports.printBlock = printBlock;
    function printArgs(_args, options, indentation = "") {
      if (_args.length === 0) {
        return "";
      }
      const args = (options === null || options === void 0 ? void 0 : options.sortAll) || (options === null || options === void 0 ? void 0 : options.sortArgs) ? [..._args].sort((a, b) => a.name.localeCompare(b.name)) : _args;
      if (args.every((arg) => !arg.description)) {
        return `(${args.map(printInputValue).join(", ")})`;
      }
      return `(
${args.map((arg, i2) => `${printDescription(arg, options, `  ${indentation}`, !i2)}  ${indentation}${printInputValue(arg)}`).join("\n")}
${indentation})`;
    }
    exports.printArgs = printArgs;
    function printInputValue(arg) {
      const defaultAST = (0, astFromValue_1.astFromValue)(arg.defaultValue, arg.type);
      let argDecl = `${arg.name}: ${String(arg.type)}`;
      if (defaultAST) {
        argDecl += ` = ${(0, printer_1.print)(defaultAST)}`;
      }
      return `${argDecl}${printNodeDirectives(arg.astNode)}`;
    }
    exports.printInputValue = printInputValue;
    function printDirective(directive, options) {
      return `${printDescription(directive, options)}directive @${directive.name}${printArgs(directive.args, options)}${directive.isRepeatable ? " repeatable" : ""} on ${directive.locations.join(" | ")}`;
    }
    exports.printDirective = printDirective;
    function printNodeDirectives(node) {
      if (!node || !node.directives || !node.directives.length)
        return "";
      return ` ${node.directives.map((d) => {
        let args = "";
        if (d.arguments && d.arguments.length) {
          args = `(${d.arguments.map((a) => `${a.name.value}: ${(0, printer_1.print)(a.value)}`).join(", ")})`;
        }
        return `@${d.name.value}${args}`;
      }).join(" ")}`;
    }
    exports.printNodeDirectives = printNodeDirectives;
    function printDescription(def, options, indentation = "", firstInBlock = true) {
      let { description } = def;
      if (description == null || (options === null || options === void 0 ? void 0 : options.omitDescriptions)) {
        return "";
      }
      description = description.trimRight();
      if (options && options.commentDescriptions) {
        return printDescriptionWithComments(description, indentation, firstInBlock);
      }
      const preferMultipleLines = description.length > 70;
      const blockString = printBlockStringLegacy(description, preferMultipleLines);
      const prefix = indentation && !firstInBlock ? `
${indentation}` : indentation;
      return `${prefix + blockString.replace(/\n/g, `
${indentation}`)}
`;
    }
    exports.printDescription = printDescription;
    function printDescriptionWithComments(description, indentation, firstInBlock) {
      const prefix = indentation && !firstInBlock ? "\n" : "";
      const comment = description.split("\n").map((line) => indentation + (line !== "" ? `# ${line}` : "#")).join("\n");
      return `${prefix + comment}
`;
    }
    exports.printDescriptionWithComments = printDescriptionWithComments;
  }
});

// node_modules/graphql-compose/lib/ScalarTypeComposer.js
var require_ScalarTypeComposer = __commonJS({
  "node_modules/graphql-compose/lib/ScalarTypeComposer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ScalarTypeComposer = void 0;
    var graphql_1 = require_graphql3();
    var is_1 = require_is();
    var SchemaComposer_1 = require_SchemaComposer();
    var ListComposer_1 = require_ListComposer();
    var NonNullComposer_1 = require_NonNullComposer();
    var typeHelpers_1 = require_typeHelpers();
    var misc_1 = require_misc();
    var graphqlVersion_1 = require_graphqlVersion();
    var schemaPrinter_1 = require_schemaPrinter();
    var definitionNode_1 = require_definitionNode();
    var ScalarTypeComposer = class {
      constructor(graphqlType, schemaComposer2) {
        if (!(schemaComposer2 instanceof SchemaComposer_1.SchemaComposer)) {
          throw new Error("You must provide SchemaComposer instance as a second argument for `new ScalarTypeComposer(GraphQLScalarType, SchemaComposer)`");
        }
        if (!(graphqlType instanceof graphql_1.GraphQLScalarType)) {
          throw new Error("ScalarTypeComposer accept only GraphQLScalarType in constructor");
        }
        this.schemaComposer = schemaComposer2;
        this._gqType = graphqlType;
        this.schemaComposer.set(graphqlType, this);
        this.schemaComposer.set(graphqlType.name, this);
        let serialize;
        let parseValue;
        let parseLiteral;
        if (graphqlVersion_1.graphqlVersion >= 14) {
          serialize = this._gqType.serialize;
          parseValue = this._gqType.parseValue;
          parseLiteral = this._gqType.parseLiteral;
        } else {
          serialize = this._gqType._scalarConfig.serialize;
          parseValue = this._gqType._scalarConfig.parseValue;
          parseLiteral = this._gqType._scalarConfig.parseLiteral;
        }
        this.setSerialize(serialize);
        this.setParseValue(parseValue);
        this.setParseLiteral(parseLiteral);
        if (this._gqType.specifiedByUrl) {
          this.setDirectiveByName("specifiedBy", { url: this._gqType.specifiedByUrl });
        }
        if (this._gqType.specifiedByURL) {
          this.setDirectiveByName("specifiedBy", { url: this._gqType.specifiedByURL });
        }
        if (!this._gqType.astNode) {
          this._gqType.astNode = (0, definitionNode_1.getScalarTypeDefinitionNode)(this);
        }
        this._gqcIsModified = false;
      }
      static create(typeDef, schemaComposer2) {
        if (!(schemaComposer2 instanceof SchemaComposer_1.SchemaComposer)) {
          throw new Error("You must provide SchemaComposer instance as a second argument for `ScalarTypeComposer.create(typeDef, schemaComposer)`");
        }
        if (schemaComposer2.hasInstance(typeDef, ScalarTypeComposer)) {
          return schemaComposer2.getSTC(typeDef);
        }
        const stc = this.createTemp(typeDef, schemaComposer2);
        schemaComposer2.add(stc);
        return stc;
      }
      static createTemp(typeDef, schemaComposer2) {
        const sc = schemaComposer2 || new SchemaComposer_1.SchemaComposer();
        let STC;
        if ((0, is_1.isString)(typeDef)) {
          const typeName = typeDef;
          if ((0, typeHelpers_1.isTypeNameString)(typeName)) {
            STC = new ScalarTypeComposer(new graphql_1.GraphQLScalarType({
              name: typeName,
              serialize: () => {
              }
            }), sc);
          } else {
            STC = sc.typeMapper.convertSDLTypeDefinition(typeName);
            if (!(STC instanceof ScalarTypeComposer)) {
              throw new Error("You should provide correct GraphQLScalarType type definition. Eg. `scalar UInt`");
            }
          }
        } else if (typeDef instanceof graphql_1.GraphQLScalarType) {
          STC = new ScalarTypeComposer(typeDef, sc);
        } else if ((0, is_1.isObject)(typeDef)) {
          const type = new graphql_1.GraphQLScalarType(Object.assign({}, typeDef));
          STC = new ScalarTypeComposer(type, sc);
          STC.setExtensions(typeDef.extensions);
          if (Array.isArray(typeDef === null || typeDef === void 0 ? void 0 : typeDef.directives)) {
            STC.setDirectives(typeDef.directives);
          }
        } else {
          throw new Error(`You should provide GraphQLScalarTypeConfig or string with scalar name or SDL. Provided:
${(0, misc_1.inspect)(typeDef)}`);
        }
        return STC;
      }
      setSerialize(fn) {
        this._gqcSerialize = fn;
        this._gqcIsModified = true;
        return this;
      }
      getSerialize() {
        return this._gqcSerialize;
      }
      setParseValue(fn) {
        this._gqcParseValue = fn || ((value) => value);
        this._gqcIsModified = true;
        return this;
      }
      getParseValue() {
        return this._gqcParseValue;
      }
      setParseLiteral(fn) {
        this._gqcParseLiteral = fn || graphql_1.valueFromASTUntyped;
        this._gqcIsModified = true;
        return this;
      }
      getParseLiteral() {
        return this._gqcParseLiteral;
      }
      getType() {
        if (this._gqcIsModified) {
          this._gqcIsModified = false;
          this._gqType.astNode = (0, definitionNode_1.getScalarTypeDefinitionNode)(this);
          if (graphqlVersion_1.graphqlVersion >= 14) {
            this._gqType.specifiedByUrl = this.getSpecifiedByUrl();
            this._gqType.specifiedByURL = this.getSpecifiedByUrl();
            this._gqType.serialize = this._gqcSerialize;
            this._gqType.parseValue = this._gqcParseValue;
            this._gqType.parseLiteral = this._gqcParseLiteral;
          } else {
            this._gqType._scalarConfig = Object.assign(Object.assign({}, this._gqType._scalarConfig), { serialize: this._gqcSerialize, parseValue: this._gqcParseValue, parseLiteral: this._gqcParseLiteral });
          }
        }
        return this._gqType;
      }
      getTypePlural() {
        return new ListComposer_1.ListComposer(this);
      }
      getTypeNonNull() {
        return new NonNullComposer_1.NonNullComposer(this);
      }
      get List() {
        return new ListComposer_1.ListComposer(this);
      }
      get NonNull() {
        return new NonNullComposer_1.NonNullComposer(this);
      }
      getTypeName() {
        return this._gqType.name;
      }
      setTypeName(name) {
        this._gqType.name = name;
        this._gqcIsModified = true;
        this.schemaComposer.add(this);
        return this;
      }
      getDescription() {
        return this._gqType.description || "";
      }
      setDescription(description) {
        this._gqType.description = description;
        this._gqcIsModified = true;
        return this;
      }
      getSpecifiedByUrl() {
        var _a;
        return (_a = this.getDirectiveByName("specifiedBy")) === null || _a === void 0 ? void 0 : _a.url;
      }
      setSpecifiedByUrl(url) {
        this.setDirectiveByName("specifiedBy", { url });
        return this;
      }
      clone(newTypeNameOrTC) {
        if (!newTypeNameOrTC) {
          throw new Error("You should provide newTypeName:string for ScalarTypeComposer.clone()");
        }
        const cloned = newTypeNameOrTC instanceof ScalarTypeComposer ? newTypeNameOrTC : ScalarTypeComposer.create(newTypeNameOrTC, this.schemaComposer);
        cloned._gqcSerialize = this._gqcSerialize;
        cloned._gqcParseValue = this._gqcParseValue;
        cloned._gqcParseLiteral = this._gqcParseLiteral;
        cloned._gqcExtensions = Object.assign({}, this._gqcExtensions);
        cloned.setDescription(this.getDescription());
        cloned.setDirectives(this.getDirectives());
        return cloned;
      }
      cloneTo(anotherSchemaComposer, cloneMap = /* @__PURE__ */ new Map()) {
        if (!anotherSchemaComposer) {
          throw new Error("You should provide SchemaComposer for ObjectTypeComposer.cloneTo()");
        }
        if (cloneMap.has(this))
          return cloneMap.get(this);
        cloneMap.set(this, this);
        if (!anotherSchemaComposer.has(this.getTypeName())) {
          anotherSchemaComposer.add(this);
        }
        return this;
      }
      merge(type) {
        let tc;
        if (type instanceof graphql_1.GraphQLScalarType) {
          tc = ScalarTypeComposer.createTemp(type, this.schemaComposer);
        } else if (type instanceof ScalarTypeComposer) {
          tc = type;
        }
        if (tc) {
          this.setSerialize(tc.getSerialize());
          this.setParseValue(tc.getParseValue());
          this.setParseLiteral(tc.getParseLiteral());
        } else {
          throw new Error(`Cannot merge ${(0, misc_1.inspect)(type)} with ScalarType(${this.getTypeName()}). Provided type should be GraphQLScalarType or ScalarTypeComposer.`);
        }
        return this;
      }
      getExtensions() {
        if (!this._gqcExtensions) {
          return {};
        } else {
          return this._gqcExtensions;
        }
      }
      setExtensions(extensions) {
        this._gqcExtensions = extensions || void 0;
        this._gqcIsModified = true;
        return this;
      }
      extendExtensions(extensions) {
        const current = this.getExtensions();
        this.setExtensions(Object.assign(Object.assign({}, current), extensions));
        return this;
      }
      clearExtensions() {
        this.setExtensions({});
        return this;
      }
      getExtension(extensionName) {
        const extensions = this.getExtensions();
        return extensions[extensionName];
      }
      hasExtension(extensionName) {
        const extensions = this.getExtensions();
        return extensionName in extensions;
      }
      setExtension(extensionName, value) {
        this.extendExtensions({
          [extensionName]: value
        });
        return this;
      }
      removeExtension(extensionName) {
        const extensions = Object.assign({}, this.getExtensions());
        delete extensions[extensionName];
        this.setExtensions(extensions);
        return this;
      }
      getDirectives() {
        return this._gqcDirectives || [];
      }
      setDirectives(directives) {
        this._gqcDirectives = directives;
        this._gqcIsModified = true;
        return this;
      }
      getDirectiveNames() {
        return this.getDirectives().map((d) => d.name);
      }
      getDirectiveByName(directiveName) {
        const directive = this.getDirectives().find((d) => d.name === directiveName);
        if (!directive)
          return void 0;
        return directive.args;
      }
      setDirectiveByName(directiveName, args) {
        const directives = this.getDirectives();
        const idx = directives.findIndex((d) => d.name === directiveName);
        if (idx >= 0) {
          directives[idx].args = args;
        } else {
          directives.push({ name: directiveName, args });
        }
        this.setDirectives(directives);
        return this;
      }
      getDirectiveById(idx) {
        const directive = this.getDirectives()[idx];
        if (!directive)
          return void 0;
        return directive.args;
      }
      toSDL(opts) {
        return (0, schemaPrinter_1.printScalar)(this.getType(), opts);
      }
    };
    exports.ScalarTypeComposer = ScalarTypeComposer;
  }
});

// node_modules/graphql-compose/lib/utils/deepmerge.js
var require_deepmerge = __commonJS({
  "node_modules/graphql-compose/lib/utils/deepmerge.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deepmerge = void 0;
    function deepmerge(target, src) {
      const array = Array.isArray(src);
      let dst = array && [] || {};
      if (array) {
        target = target || [];
        dst = dst.concat(target);
        src.forEach((e2, i2) => {
          if (typeof dst[i2] === "undefined") {
            dst[i2] = e2;
          } else if (typeof e2 === "object") {
            dst[i2] = deepmerge(target[i2], e2);
          } else {
            if (target.indexOf(e2) === -1) {
              dst.push(e2);
            }
          }
        });
      } else {
        if (target && typeof target === "object") {
          Object.keys(target).forEach((key) => {
            dst[key] = target[key];
          });
        }
        Object.keys(src).forEach((key) => {
          const v = src[key];
          if (typeof v !== "object" || !v) {
            dst[key] = v;
          } else {
            if (!target[key]) {
              dst[key] = v;
            } else {
              dst[key] = deepmerge(target[key], v);
            }
          }
        });
      }
      return dst;
    }
    exports.deepmerge = deepmerge;
  }
});

// node_modules/graphql-compose/lib/utils/filterByDotPaths.js
var require_filterByDotPaths = __commonJS({
  "node_modules/graphql-compose/lib/utils/filterByDotPaths.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hideField = exports.partialCloneSubpath = exports.isPresentInDotFilter = exports.hideComplexValue = exports.preparePathsFilter = exports.filterByDotPaths = void 0;
    function filterByDotPaths(obj, pathsFilter, opts) {
      let result;
      const dottedPaths = preparePathsFilter(pathsFilter);
      if (dottedPaths) {
        result = {};
        dottedPaths.forEach((dottedPath) => {
          let k = obj;
          dottedPath.split(".").forEach((part) => {
            k = k === null || k === void 0 ? void 0 : k[part];
          });
          result[dottedPath] = k;
        });
      } else {
        result = Object.assign({}, obj);
      }
      if (opts && opts.hideFields) {
        const hiddenFields = [];
        const optsHideFields = opts.hideFields;
        Object.keys(optsHideFields).forEach((key) => {
          const msg = optsHideFields[key];
          hiddenFields.push(...hideField(result, key, msg, pathsFilter));
        });
        if (hiddenFields.length > 0 && opts.hideFieldsNote) {
          result["[debug note]"] = opts.hideFieldsNote.replace("%fieldNames%", hiddenFields.join(" "));
        }
      }
      return result;
    }
    exports.filterByDotPaths = filterByDotPaths;
    function preparePathsFilter(pathsFilter) {
      if (!pathsFilter)
        return null;
      if (Array.isArray(pathsFilter))
        return pathsFilter;
      const tmp = pathsFilter.split(/\s|,/).filter((s2) => s2 !== "");
      if (tmp.length > 0)
        return tmp;
      return null;
    }
    exports.preparePathsFilter = preparePathsFilter;
    function hideComplexValue(val, msg = "was hidden") {
      if (val === null || val === void 0)
        return val;
      const t2 = typeof val;
      if (t2 === "boolean" || t2 === "number") {
        return val;
      }
      if (t2 === "string") {
        if (val.length < 500) {
          return val;
        }
        return `String(length:${val.length}) ${msg}`;
      }
      if (t2 === "object" && val.constructor) {
        if (val.constructor.name === "Array") {
          return `Array(length:${val.length}) ${msg}`;
        }
        if (val.constructor.name === "Object") {
          return `Object {} ${msg}`;
        }
        return `Object(${val.constructor.name}) ${msg}`;
      }
      return t2;
    }
    exports.hideComplexValue = hideComplexValue;
    function isPresentInDotFilter(name, pathsFilter) {
      if (!pathsFilter)
        return false;
      if (Array.isArray(pathsFilter)) {
        for (let i2 = 0; i2 < pathsFilter.length; i2++) {
          if (pathsFilter[i2] === name || pathsFilter[i2].indexOf(`${name}.`) === 0)
            return true;
        }
      } else {
        return pathsFilter === name || pathsFilter.indexOf(`${name}.`) === 0;
      }
      return false;
    }
    exports.isPresentInDotFilter = isPresentInDotFilter;
    function partialCloneSubpath(res, path) {
      if (!res)
        return;
      let key = path.shift();
      const idx = parseInt(key, 10);
      key = idx >= 0 ? idx : key;
      if (!res[key])
        return;
      if (Array.isArray(res[key])) {
        res[key] = res[key].slice(0);
        partialCloneSubpath(res[key], path);
      } else if (typeof res[key] === "object") {
        res[key] = Object.assign({}, res[key]);
        partialCloneSubpath(res[key], path);
      }
    }
    exports.partialCloneSubpath = partialCloneSubpath;
    function hideField(result, key, msg, pathsFilter) {
      const hiddenFields = [];
      const wildcardMatch = key.match(/(.*)\.\*$/);
      if (wildcardMatch) {
        const k = wildcardMatch[1];
        const parts = k.split(".");
        partialCloneSubpath(result, [...parts]);
        let v = result;
        parts.forEach((part) => {
          v = v === null || v === void 0 ? void 0 : v[part];
        });
        const res = v !== null && v !== void 0 ? v : result[k];
        if (res && typeof res === "object") {
          Object.keys(res).forEach((kk) => {
            if (res[kk] && !isPresentInDotFilter(`${k}.${kk}`, pathsFilter)) {
              const tmp = hideComplexValue(res[kk], msg ? msg.replace(new RegExp(`${k}.*`.replace(/([.*])/g, "\\$1"), "g"), `${k}.${kk}`) : msg);
              if (tmp !== res[kk]) {
                res[kk] = tmp;
                hiddenFields.push(`${k}.${kk}`);
              }
            }
          });
          return hiddenFields;
        }
      }
      if (result[key] && !isPresentInDotFilter(key, pathsFilter)) {
        const tmp = hideComplexValue(result[key], msg);
        if (tmp !== result[key]) {
          result[key] = tmp;
          hiddenFields.push(key);
        }
      }
      return hiddenFields;
    }
    exports.hideField = hideField;
  }
});

// node_modules/graphql-compose/lib/utils/projection.js
var require_projection = __commonJS({
  "node_modules/graphql-compose/lib/utils/projection.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.extendByFieldProjection = exports.getFlatProjectionFromAST = exports.getProjectionFromASTquery = exports.getProjectionFromASTQuery = exports.getProjectionFromAST = void 0;
    var graphql_1 = require_graphql3();
    var deepmerge_1 = require_deepmerge();
    var { FIELD, FRAGMENT_SPREAD, INLINE_FRAGMENT } = graphql_1.Kind;
    function getProjectionFromAST(info, fieldNode) {
      if (!info) {
        return {};
      }
      const queryProjection = getProjectionFromASTQuery(info, fieldNode);
      const queryExtProjection = extendByFieldProjection(info.returnType, queryProjection);
      return queryExtProjection;
    }
    exports.getProjectionFromAST = getProjectionFromAST;
    function getProjectionFromASTQuery(info, fieldNode) {
      if (!info) {
        return {};
      }
      let selections;
      if (fieldNode) {
        if (fieldNode.selectionSet) {
          selections = fieldNode.selectionSet.selections;
        }
      } else if (Array.isArray(info.fieldNodes)) {
        selections = info.fieldNodes.reduce((result, source) => {
          if (source.selectionSet) {
            result.push(...source.selectionSet.selections);
          }
          return result;
        }, []);
      }
      const projection = (selections || []).reduce((res, ast) => {
        switch (ast.kind) {
          case FIELD: {
            const { value } = ast.name;
            if (res[value]) {
              res[value] = (0, deepmerge_1.deepmerge)(res[value], getProjectionFromASTQuery(info, ast) || true);
            } else {
              res[value] = getProjectionFromASTQuery(info, ast) || true;
            }
            return res;
          }
          case INLINE_FRAGMENT:
            return (0, deepmerge_1.deepmerge)(res, getProjectionFromASTQuery(info, ast));
          case FRAGMENT_SPREAD:
            return (0, deepmerge_1.deepmerge)(res, getProjectionFromASTQuery(info, info.fragments[ast.name.value]));
          default:
            throw new Error("Unsupported query selection");
        }
      }, {});
      return projection;
    }
    exports.getProjectionFromASTQuery = getProjectionFromASTQuery;
    exports.getProjectionFromASTquery = getProjectionFromASTQuery;
    function getFlatProjectionFromAST(info, fieldNodes) {
      const projection = getProjectionFromAST(info, fieldNodes) || {};
      const flatProjection = {};
      Object.keys(projection).forEach((key) => {
        flatProjection[key] = !!projection[key];
      });
      return flatProjection;
    }
    exports.getFlatProjectionFromAST = getFlatProjectionFromAST;
    function extendByFieldProjection(returnType, projection) {
      let type = returnType;
      while (type instanceof graphql_1.GraphQLList || type instanceof graphql_1.GraphQLNonNull) {
        type = type.ofType;
      }
      if (!(type instanceof graphql_1.GraphQLObjectType || type instanceof graphql_1.GraphQLInterfaceType)) {
        return projection;
      }
      let proj = projection;
      Object.keys(proj).forEach((key) => {
        const field = type.getFields()[key];
        if (!field)
          return;
        if (field.projection)
          proj = (0, deepmerge_1.deepmerge)(proj, field.projection);
        if (field.extensions && field.extensions.projection) {
          proj = (0, deepmerge_1.deepmerge)(proj, field.extensions.projection);
        }
        proj[key] = extendByFieldProjection(field.type, proj[key]);
      });
      return proj;
    }
    exports.extendByFieldProjection = extendByFieldProjection;
  }
});

// node_modules/graphql-compose/lib/Resolver.js
var require_Resolver = __commonJS({
  "node_modules/graphql-compose/lib/Resolver.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Resolver = void 0;
    var ObjectTypeComposer_1 = require_ObjectTypeComposer();
    var InputTypeComposer_1 = require_InputTypeComposer();
    var EnumTypeComposer_1 = require_EnumTypeComposer();
    var SchemaComposer_1 = require_SchemaComposer();
    var deepmerge_1 = require_deepmerge();
    var misc_1 = require_misc();
    var is_1 = require_is();
    var filterByDotPaths_1 = require_filterByDotPaths();
    var projection_1 = require_projection();
    var typeByPath_1 = require_typeByPath();
    var typeHelpers_1 = require_typeHelpers();
    var type_1 = require_type2();
    var NonNullComposer_1 = require_NonNullComposer();
    var ListComposer_1 = require_ListComposer();
    var Resolver = class {
      constructor(opts, schemaComposer2) {
        this.resolve = () => Promise.resolve();
        if (!(schemaComposer2 instanceof SchemaComposer_1.SchemaComposer)) {
          throw new Error("You must provide SchemaComposer instance as a second argument for `new Resolver(opts, SchemaComposer)`");
        }
        this.schemaComposer = schemaComposer2;
        if (!opts.name) {
          throw new Error("For Resolver constructor the `opts.name` is required option.");
        }
        this.name = opts.name;
        this.displayName = opts.displayName;
        this.parent = opts.parent;
        this.kind = opts.kind;
        this.description = opts.description;
        this.deprecationReason = opts.deprecationReason;
        this.projection = opts.projection || {};
        this.extensions = opts.extensions;
        if (opts.type) {
          this.setType(opts.type);
        }
        this.setArgs(opts.args || {});
        if (opts.resolve) {
          this.resolve = opts.resolve;
        }
        if (opts.directives) {
          this.directives = opts.directives;
        }
      }
      getType() {
        if (!this.type) {
          return type_1.GraphQLJSON;
        }
        return this.type.getType();
      }
      getTypeName() {
        return this.type.getTypeName();
      }
      getTypeComposer() {
        const anyTC = this.type;
        return (0, typeHelpers_1.unwrapOutputTC)(anyTC);
      }
      getOTC() {
        const anyTC = this.getTypeComposer();
        if (!(anyTC instanceof ObjectTypeComposer_1.ObjectTypeComposer)) {
          throw new Error(`Resolver ${this.name} cannot return its output type as ObjectTypeComposer instance. Cause '${this.type.toString()}' does not instance of ${anyTC.constructor.name}.`);
        }
        return anyTC;
      }
      setType(typeDef) {
        const tc = this.schemaComposer.typeMapper.convertOutputTypeDefinition(typeDef, "setType", "Resolver");
        if (!tc) {
          throw new Error(`Cannot convert to ObjectType following value: ${(0, misc_1.inspect)(typeDef)}`);
        }
        this.type = tc;
        return this;
      }
      hasArg(argName) {
        return !!this.args[argName];
      }
      getArg(argName) {
        if (!this.hasArg(argName)) {
          throw new Error(`Cannot get arg '${argName}' for resolver ${this.name}. Argument does not exist.`);
        }
        let arg = this.args[argName];
        if ((0, is_1.isFunction)(arg))
          arg = arg(this.schemaComposer);
        if (typeof arg === "string" || (0, typeHelpers_1.isComposeInputType)(arg) || Array.isArray(arg)) {
          return { type: arg };
        }
        return arg;
      }
      getArgConfig(argName) {
        const ac = this.getArg(argName);
        return Object.assign(Object.assign({}, ac), { type: ac.type.getType() });
      }
      getArgType(argName) {
        const ac = this.getArgConfig(argName);
        return ac.type;
      }
      getArgTypeName(fieldName) {
        return this.getArg(fieldName).type.getTypeName();
      }
      getArgs() {
        return this.args;
      }
      getArgNames() {
        return Object.keys(this.args);
      }
      setArgs(args) {
        this.args = this.schemaComposer.typeMapper.convertArgConfigMap(args, this.name, "Resolver");
        return this;
      }
      setArg(argName, argConfig) {
        this.args[argName] = this.schemaComposer.typeMapper.convertArgConfig(argConfig, argName, this.name, "Resolver");
        return this;
      }
      setArgType(argName, typeDef) {
        const ac = this.getArg(argName);
        const tc = this.schemaComposer.typeMapper.convertInputTypeDefinition(typeDef, argName, "Resolver.args");
        if (!tc) {
          throw new Error(`Cannot create InputType from ${(0, misc_1.inspect)(typeDef)}`);
        }
        ac.type = tc;
        return this;
      }
      extendArg(argName, partialArgConfig) {
        let prevArgConfig;
        try {
          prevArgConfig = this.getArgConfig(argName);
        } catch (e2) {
          throw new Error(`Cannot extend arg '${argName}' in Resolver '${this.name}'. Argument does not exist.`);
        }
        this.setArg(argName, Object.assign(Object.assign({}, prevArgConfig), partialArgConfig));
        return this;
      }
      addArgs(newArgs) {
        this.setArgs(Object.assign(Object.assign({}, this.getArgs()), newArgs));
        return this;
      }
      removeArg(argNameOrArray) {
        const argNames = Array.isArray(argNameOrArray) ? argNameOrArray : [argNameOrArray];
        argNames.forEach((argName) => {
          delete this.args[argName];
        });
        return this;
      }
      removeOtherArgs(argNameOrArray) {
        const keepArgNames = Array.isArray(argNameOrArray) ? argNameOrArray : [argNameOrArray];
        Object.keys(this.args).forEach((argName) => {
          if (keepArgNames.indexOf(argName) === -1) {
            delete this.args[argName];
          }
        });
        return this;
      }
      reorderArgs(names) {
        const orderedArgs = {};
        names.forEach((name) => {
          if (this.args[name]) {
            orderedArgs[name] = this.args[name];
            delete this.args[name];
          }
        });
        this.args = Object.assign(Object.assign({}, orderedArgs), this.args);
        return this;
      }
      getArgTC(argName) {
        const argType = this.getArg(argName).type;
        return (0, typeHelpers_1.unwrapInputTC)(argType);
      }
      getArgITC(argName) {
        const tc = this.getArgTC(argName);
        if (!(tc instanceof InputTypeComposer_1.InputTypeComposer)) {
          throw new Error(`Resolver(${this.name}).getArgITC('${argName}') must be InputTypeComposer, but received ${tc.constructor.name}. Maybe you need to use 'getArgTC()' method which returns any type composer?`);
        }
        return tc;
      }
      isArgNonNull(argName) {
        return this.getArg(argName).type instanceof NonNullComposer_1.NonNullComposer;
      }
      makeArgNonNull(argNameOrArray) {
        const argNames = Array.isArray(argNameOrArray) ? argNameOrArray : [argNameOrArray];
        argNames.forEach((argName) => {
          if (this.hasArg(argName)) {
            const argTC = this.getArg(argName).type;
            if (!(argTC instanceof NonNullComposer_1.NonNullComposer)) {
              this.setArgType(argName, new NonNullComposer_1.NonNullComposer(argTC));
            }
          }
        });
        return this;
      }
      makeRequired(argNameOrArray) {
        return this.makeArgNonNull(argNameOrArray);
      }
      makeArgNullable(argNameOrArray) {
        const argNames = Array.isArray(argNameOrArray) ? argNameOrArray : [argNameOrArray];
        argNames.forEach((argName) => {
          if (this.hasArg(argName)) {
            const argTC = this.getArg(argName).type;
            if (argTC instanceof NonNullComposer_1.NonNullComposer) {
              this.setArgType(argName, argTC.ofType);
            }
          }
        });
        return this;
      }
      makeOptional(argNameOrArray) {
        return this.makeArgNullable(argNameOrArray);
      }
      isArgPlural(argName) {
        const type = this.getArg(argName).type;
        return type instanceof ListComposer_1.ListComposer || type instanceof NonNullComposer_1.NonNullComposer && type.ofType instanceof ListComposer_1.ListComposer;
      }
      makeArgPlural(argNameOrArray) {
        const argNames = Array.isArray(argNameOrArray) ? argNameOrArray : [argNameOrArray];
        argNames.forEach((argName) => {
          const ac = this.args[argName];
          if (ac && !(ac.type instanceof ListComposer_1.ListComposer)) {
            ac.type = new ListComposer_1.ListComposer(ac.type);
          }
        });
        return this;
      }
      makeArgNonPlural(argNameOrArray) {
        const argNames = Array.isArray(argNameOrArray) ? argNameOrArray : [argNameOrArray];
        argNames.forEach((argName) => {
          const ac = this.args[argName];
          if (ac) {
            if (ac.type instanceof ListComposer_1.ListComposer) {
              ac.type = ac.type.ofType;
            } else if (ac.type instanceof NonNullComposer_1.NonNullComposer && ac.type.ofType instanceof ListComposer_1.ListComposer) {
              ac.type = ac.type.ofType.ofType instanceof NonNullComposer_1.NonNullComposer ? ac.type.ofType.ofType : new NonNullComposer_1.NonNullComposer(ac.type.ofType.ofType);
            }
          }
        });
        return this;
      }
      cloneArg(argName, newTypeName) {
        if (!{}.hasOwnProperty.call(this.args, argName)) {
          throw new Error(`Can not clone arg ${(0, misc_1.inspect)(argName)} for resolver ${this.name}. Argument does not exist.`);
        }
        const argTC = this.getArg(argName).type;
        const clonedTC = (0, typeHelpers_1.replaceTC)(argTC, (unwrappedTC) => {
          if (!(unwrappedTC instanceof InputTypeComposer_1.InputTypeComposer)) {
            throw new Error(`Cannot clone arg ${(0, misc_1.inspect)(argName)} for resolver ${(0, misc_1.inspect)(this.name)}. Argument should be InputObjectType, but received: ${(0, misc_1.inspect)(unwrappedTC)}.`);
          }
          if (!newTypeName || newTypeName !== (0, misc_1.clearName)(newTypeName)) {
            throw new Error("You should provide new type name as second argument");
          }
          if (newTypeName === unwrappedTC.getTypeName()) {
            throw new Error(`You should provide new type name. It is equal to current name: ${(0, misc_1.inspect)(newTypeName)}.`);
          }
          return unwrappedTC.clone(newTypeName);
        });
        if (clonedTC)
          this.setArgType(argName, clonedTC);
        return this;
      }
      addFilterArg(opts) {
        if (!opts.name) {
          throw new Error("For Resolver.addFilterArg the arg name `opts.name` is required.");
        }
        if (!opts.type) {
          throw new Error("For Resolver.addFilterArg the arg type `opts.type` is required.");
        }
        const resolver = this.wrap(null, { name: "addFilterArg" });
        let filterITC;
        if (resolver.hasArg("filter")) {
          filterITC = resolver.getArgTC("filter");
        }
        if (!(filterITC instanceof InputTypeComposer_1.InputTypeComposer)) {
          if (!opts.filterTypeNameFallback || !(0, is_1.isString)(opts.filterTypeNameFallback)) {
            throw new Error("For Resolver.addFilterArg needs to provide `opts.filterTypeNameFallback: string`. This string will be used as unique name for `filter` type of input argument. Eg. FilterXXXXXInput");
          }
          filterITC = InputTypeComposer_1.InputTypeComposer.create(opts.filterTypeNameFallback, this.schemaComposer);
          resolver.args.filter = {
            type: filterITC
          };
        }
        const { name, type, defaultValue, description } = opts;
        filterITC.setField(name, { type, description });
        if (defaultValue !== void 0) {
          resolver.args.filter.defaultValue = resolver.args.filter.defaultValue || {};
          resolver.args.filter.defaultValue[name] = defaultValue;
        }
        const resolveNext = resolver.getResolve();
        const query = opts.query;
        if (query && (0, is_1.isFunction)(query)) {
          resolver.setResolve((resolveParams) => __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const value = (_b = (_a = resolveParams === null || resolveParams === void 0 ? void 0 : resolveParams.args) === null || _a === void 0 ? void 0 : _a.filter) === null || _b === void 0 ? void 0 : _b[name];
            if (value !== null && value !== void 0) {
              if (!resolveParams.rawQuery) {
                resolveParams.rawQuery = {};
              }
              yield query(resolveParams.rawQuery, value, resolveParams);
            }
            return resolveNext(resolveParams);
          }));
        }
        return resolver;
      }
      addSortArg(opts) {
        if (!opts.name) {
          throw new Error("For Resolver.addSortArg the `opts.name` is required.");
        }
        if (!opts.value) {
          throw new Error("For Resolver.addSortArg the `opts.value` is required.");
        }
        const resolver = this.wrap(null, { name: "addSortArg" });
        let sortETC;
        if (resolver.hasArg("sort")) {
          sortETC = resolver.getArgTC("sort");
        }
        if (!sortETC) {
          if (!opts.sortTypeNameFallback || !(0, is_1.isString)(opts.sortTypeNameFallback)) {
            throw new Error("For Resolver.addSortArg needs to provide `opts.sortTypeNameFallback: string`. This string will be used as unique name for `sort` type of input argument. Eg. SortXXXXXEnum");
          }
          sortETC = EnumTypeComposer_1.EnumTypeComposer.create(opts.sortTypeNameFallback, this.schemaComposer);
          resolver.args.sort = {
            type: sortETC
          };
        }
        if (!(sortETC instanceof EnumTypeComposer_1.EnumTypeComposer)) {
          throw new Error(`Resolver must have 'sort' arg with EnumType, but got: ${(0, misc_1.inspect)(sortETC)} `);
        }
        const { name, description, deprecationReason, value } = opts;
        sortETC.setField(name, {
          description,
          deprecationReason,
          value
        });
        const resolveNext = resolver.getResolve();
        if ((0, is_1.isFunction)(value)) {
          sortETC.extendField(name, { value: name });
          const getValue = value;
          resolver.setResolve((resolveParams) => {
            var _a;
            const v = (_a = resolveParams === null || resolveParams === void 0 ? void 0 : resolveParams.args) === null || _a === void 0 ? void 0 : _a.sort;
            if (v === name) {
              const newSortValue = getValue(resolveParams);
              resolveParams.args.sort = newSortValue;
            }
            return resolveNext(resolveParams);
          });
        }
        return resolver;
      }
      getResolve() {
        return this.resolve;
      }
      setResolve(resolve) {
        this.resolve = resolve;
        return this;
      }
      withMiddlewares(middlewares) {
        if (!Array.isArray(middlewares)) {
          throw new Error(`You should provide array of middlewares '(resolve, source, args, context, info) => any', but provided ${(0, misc_1.inspect)(middlewares)}.`);
        }
        let resolver = this;
        middlewares.reverse().forEach((mw) => {
          let name;
          if (mw.name) {
            name = mw.name;
          } else if (mw.constructor && mw.constructor.name) {
            name = mw.constructor.name;
          } else {
            name = "middleware";
          }
          const newResolver = this.clone({ name, parent: resolver });
          const resolve = resolver.getResolve();
          newResolver.setResolve((rp) => mw((source, args, context, info) => {
            return resolve(Object.assign(Object.assign({}, rp), { source, args, context, info }));
          }, rp.source, rp.args, rp.context, rp.info));
          resolver = newResolver;
        });
        return resolver;
      }
      wrap(cb, newResolverOpts = {}) {
        const prevResolver = this;
        const newResolver = this.clone(Object.assign({ name: "wrap", parent: prevResolver }, newResolverOpts));
        if ((0, is_1.isFunction)(cb)) {
          const resolver = cb(newResolver, prevResolver);
          if (resolver)
            return resolver;
        }
        return newResolver;
      }
      wrapResolve(cb, wrapperName = "wrapResolve") {
        return this.wrap((newResolver, prevResolver) => {
          const newResolve = cb(prevResolver.getResolve());
          newResolver.setResolve(newResolve);
          return newResolver;
        }, { name: wrapperName });
      }
      wrapArgs(cb, wrapperName = "wrapArgs") {
        return this.wrap((newResolver, prevResolver) => {
          const prevArgs = Object.assign({}, prevResolver.getArgs());
          const newArgs = cb(prevArgs) || prevArgs;
          newResolver.setArgs(newArgs);
          return newResolver;
        }, { name: wrapperName });
      }
      wrapCloneArg(argName, newTypeName) {
        return this.wrap((newResolver) => newResolver.cloneArg(argName, newTypeName), {
          name: "cloneFilterArg"
        });
      }
      wrapType(cb, wrapperName = "wrapType") {
        return this.wrap((newResolver, prevResolver) => {
          const prevType = prevResolver.type;
          const newType = cb(prevType) || prevType;
          newResolver.setType(newType);
          return newResolver;
        }, { name: wrapperName });
      }
      getFieldConfig(opts = {}) {
        const fc = {
          type: this.getType(),
          args: (0, misc_1.mapEachKey)(this.getArgs(), (ac) => Object.assign(Object.assign({}, ac), { type: ac.type.getType() })),
          resolve: this.getFieldResolver(opts)
        };
        if (this.description)
          fc.description = this.description;
        if (this.deprecationReason)
          fc.deprecationReason = this.deprecationReason;
        return fc;
      }
      getFieldResolver(opts = {}) {
        const resolve = this.getResolve();
        return (source, args, context, info) => {
          let projection = (0, projection_1.getProjectionFromAST)(info);
          if (this.projection) {
            projection = (0, deepmerge_1.deepmerge)(projection, this.projection);
          }
          if (opts.projection) {
            projection = (0, deepmerge_1.deepmerge)(projection, opts.projection);
          }
          return resolve({ source, args, context, info, projection });
        };
      }
      getKind() {
        return this.kind;
      }
      setKind(kind) {
        if (kind !== "query" && kind !== "mutation" && kind !== "subscription") {
          throw new Error(`You provide incorrect value '${kind}' for Resolver.setKind method. Valid values are: query | mutation | subscription`);
        }
        this.kind = kind;
        return this;
      }
      getDescription() {
        return this.description;
      }
      setDescription(description) {
        this.description = description;
        return this;
      }
      getDeprecationReason() {
        return this.deprecationReason;
      }
      setDeprecationReason(reason) {
        this.deprecationReason = reason;
        return this;
      }
      get(path) {
        return (0, typeByPath_1.typeByPath)(this, path);
      }
      clone(opts = {}) {
        const oldOpts = {};
        const self2 = this;
        for (const key in self2) {
          if (self2.hasOwnProperty(key)) {
            oldOpts[key] = self2[key];
          }
        }
        oldOpts.displayName = void 0;
        oldOpts.args = Object.assign({}, this.args);
        if (this.projection) {
          oldOpts.projection = Object.assign({}, this.projection);
        }
        return new Resolver(Object.assign(Object.assign({}, oldOpts), opts), this.schemaComposer);
      }
      cloneTo(anotherSchemaComposer, cloneMap = /* @__PURE__ */ new Map()) {
        if (!anotherSchemaComposer) {
          throw new Error("You should provide SchemaComposer for InterfaceTypeComposer.cloneTo()");
        }
        if (cloneMap.has(this))
          return cloneMap.get(this);
        const cloned = new Resolver({
          name: this.name,
          displayName: this.displayName,
          kind: this.kind,
          description: this.description,
          deprecationReason: this.deprecationReason,
          projection: Object.assign({}, this.projection),
          extensions: Object.assign({}, this.extensions),
          resolve: this.resolve
        }, anotherSchemaComposer);
        cloneMap.set(this, cloned);
        if (this.type) {
          cloned.type = this.type.cloneTo(anotherSchemaComposer, cloneMap);
        }
        if (this.parent) {
          cloned.parent = this.parent.cloneTo(anotherSchemaComposer, cloneMap);
        }
        cloned.args = (0, misc_1.mapEachKey)(this.args, (argConfig) => Object.assign(Object.assign({}, argConfig), { type: (0, typeHelpers_1.cloneTypeTo)(argConfig.type, anotherSchemaComposer, cloneMap), extensions: Object.assign({}, argConfig.extensions) }));
        return cloned;
      }
      getExtensions() {
        if (!this.extensions) {
          return {};
        } else {
          return this.extensions;
        }
      }
      setExtensions(extensions) {
        this.extensions = extensions;
        return this;
      }
      extendExtensions(extensions) {
        const current = this.getExtensions();
        this.setExtensions(Object.assign(Object.assign({}, current), extensions));
        return this;
      }
      clearExtensions() {
        this.setExtensions({});
        return this;
      }
      getExtension(extensionName) {
        const extensions = this.getExtensions();
        return extensions[extensionName];
      }
      hasExtension(extensionName) {
        const extensions = this.getExtensions();
        return extensionName in extensions;
      }
      setExtension(extensionName, value) {
        this.extendExtensions({
          [extensionName]: value
        });
        return this;
      }
      removeExtension(extensionName) {
        const extensions = Object.assign({}, this.getExtensions());
        delete extensions[extensionName];
        this.setExtensions(extensions);
        return this;
      }
      getNestedName() {
        const name = this.displayName || this.name;
        if (this.parent) {
          return `${name}(${this.parent.getNestedName()})`;
        }
        return name;
      }
      toString() {
        return (0, misc_1.inspect)(this.toDebugStructure()).replace(/\\n/g, "\n");
      }
      setDisplayName(name) {
        this.displayName = name;
        return this;
      }
      toDebugStructure() {
        const info = {
          name: this.name,
          displayName: this.displayName,
          type: (0, misc_1.inspect)(this.type),
          args: this.args,
          resolve: this.resolve ? this.resolve.toString() : this.resolve
        };
        if (this.parent) {
          info.resolve = [info.resolve, { "Parent resolver": this.parent.toDebugStructure() }];
        }
        return info;
      }
      debugExecTime() {
        return this.wrapResolve((next) => (rp) => __awaiter(this, void 0, void 0, function* () {
          const name = `Execution time for ${this.getNestedName()}`;
          console.time(name);
          const res = yield next(rp);
          console.timeEnd(name);
          return res;
        }), "debugExecTime");
      }
      debugParams(filterPaths, opts = { colors: true, depth: 5 }) {
        return this.wrapResolve((next) => (rp) => {
          var _a, _b, _c;
          console.log(`ResolverResolveParams for ${this.getNestedName()}:`);
          const data = (0, filterByDotPaths_1.filterByDotPaths)(rp, filterPaths, {
            hideFields: (rp === null || rp === void 0 ? void 0 : rp.context) && ((_a = rp.context) === null || _a === void 0 ? void 0 : _a.res) && ((_b = rp.context) === null || _b === void 0 ? void 0 : _b.params) && ((_c = rp.context) === null || _c === void 0 ? void 0 : _c.headers) ? {
              info: "[[hidden]]",
              context: "[[hidden]]"
            } : {
              info: "[[hidden]]",
              "context.*": "[[hidden]]"
            },
            hideFieldsNote: 'Some data was [[hidden]] to display this fields use debugParams("%fieldNames%")'
          });
          console.dir(data, opts);
          return next(rp);
        }, "debugParams");
      }
      debugPayload(filterPaths, opts = { colors: true, depth: 5 }) {
        return this.wrapResolve((next) => (rp) => __awaiter(this, void 0, void 0, function* () {
          try {
            const res = yield next(rp);
            console.log(`Resolved Payload for ${this.getNestedName()}:`);
            if (Array.isArray(res) && res.length > 3 && !filterPaths) {
              console.dir([
                filterPaths ? (0, filterByDotPaths_1.filterByDotPaths)(res[0], filterPaths) : res[0],
                `[debug note]: Other ${res.length - 1} records was [[hidden]]. Use debugPayload("0 1 2 3 4") or debug({ payload: "0 1 2 3 4" }) for display this records`
              ], opts);
            } else {
              console.dir(filterPaths ? (0, filterByDotPaths_1.filterByDotPaths)(res, filterPaths) : res, opts);
            }
            return res;
          } catch (e2) {
            console.log(`Rejected Payload for ${this.getNestedName()}:`);
            console.log(e2);
            throw e2;
          }
        }), "debugPayload");
      }
      debug(filterDotPaths, opts = { colors: true, depth: 2 }) {
        return this.debugExecTime().debugParams(filterDotPaths ? filterDotPaths.params : null, opts).debugPayload(filterDotPaths ? filterDotPaths.payload : null, opts);
      }
    };
    exports.Resolver = Resolver;
  }
});

// node_modules/graphql-compose/lib/utils/typeHelpers.js
var require_typeHelpers = __commonJS({
  "node_modules/graphql-compose/lib/utils/typeHelpers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cloneTypeTo = exports.unwrapTypeNameString = exports.replaceTC = exports.changeUnwrappedTC = exports.unwrapOutputTC = exports.unwrapInputTC = exports.unwrapTC = exports.getComposeTypeName = exports.getGraphQLType = exports.isTypeComposer = exports.isNamedTypeComposer = exports.isComposeInputType = exports.isComposeOutputType = exports.isComposeType = exports.isComposeNamedType = exports.isSomeInputTypeComposer = exports.isSomeOutputTypeComposer = exports.isUnionTypeDefinitionString = exports.isInterfaceTypeDefinitionString = exports.isScalarTypeDefinitionString = exports.isEnumTypeDefinitionString = exports.isInputTypeDefinitionString = exports.isOutputTypeDefinitionString = exports.isSomeInputTypeDefinitionString = exports.isSomeOutputTypeDefinitionString = exports.isTypeDefinitionString = exports.isWrappedTypeNameString = exports.isTypeNameString = void 0;
    var graphql_1 = require_graphql3();
    var is_1 = require_is();
    var misc_1 = require_misc();
    var dedent_1 = require_dedent();
    var ObjectTypeComposer_1 = require_ObjectTypeComposer();
    var InputTypeComposer_1 = require_InputTypeComposer();
    var ScalarTypeComposer_1 = require_ScalarTypeComposer();
    var EnumTypeComposer_1 = require_EnumTypeComposer();
    var InterfaceTypeComposer_1 = require_InterfaceTypeComposer();
    var UnionTypeComposer_1 = require_UnionTypeComposer();
    var Resolver_1 = require_Resolver();
    var NonNullComposer_1 = require_NonNullComposer();
    var ListComposer_1 = require_ListComposer();
    var ThunkComposer_1 = require_ThunkComposer();
    var deprecate_1 = __importDefault(require_deprecate());
    function isTypeNameString(str) {
      return /^[_A-Za-z][_0-9A-Za-z]*$/.test(str);
    }
    exports.isTypeNameString = isTypeNameString;
    function isWrappedTypeNameString(str) {
      return isTypeNameString(unwrapTypeNameString(str));
    }
    exports.isWrappedTypeNameString = isWrappedTypeNameString;
    function isTypeDefinitionString(str) {
      return isOutputTypeDefinitionString(str) || isInputTypeDefinitionString(str) || isEnumTypeDefinitionString(str) || isScalarTypeDefinitionString(str) || isInterfaceTypeDefinitionString(str) || isUnionTypeDefinitionString(str);
    }
    exports.isTypeDefinitionString = isTypeDefinitionString;
    function isSomeOutputTypeDefinitionString(str) {
      return isOutputTypeDefinitionString(str) || isEnumTypeDefinitionString(str) || isScalarTypeDefinitionString(str) || isInterfaceTypeDefinitionString(str) || isUnionTypeDefinitionString(str);
    }
    exports.isSomeOutputTypeDefinitionString = isSomeOutputTypeDefinitionString;
    function isSomeInputTypeDefinitionString(str) {
      return isInputTypeDefinitionString(str) || isEnumTypeDefinitionString(str) || isScalarTypeDefinitionString(str);
    }
    exports.isSomeInputTypeDefinitionString = isSomeInputTypeDefinitionString;
    function isOutputTypeDefinitionString(str) {
      return /type\s[^{]+\{[^}]+\}/im.test(str);
    }
    exports.isOutputTypeDefinitionString = isOutputTypeDefinitionString;
    function isInputTypeDefinitionString(str) {
      return /input\s[^{]+\{[^}]+\}/im.test(str);
    }
    exports.isInputTypeDefinitionString = isInputTypeDefinitionString;
    function isEnumTypeDefinitionString(str) {
      return /enum\s[^{]+\{[^}]+\}/im.test(str);
    }
    exports.isEnumTypeDefinitionString = isEnumTypeDefinitionString;
    function isScalarTypeDefinitionString(str) {
      return /scalar\s/im.test(str);
    }
    exports.isScalarTypeDefinitionString = isScalarTypeDefinitionString;
    function isInterfaceTypeDefinitionString(str) {
      return /interface\s/im.test(str);
    }
    exports.isInterfaceTypeDefinitionString = isInterfaceTypeDefinitionString;
    function isUnionTypeDefinitionString(str) {
      return /union\s/im.test(str);
    }
    exports.isUnionTypeDefinitionString = isUnionTypeDefinitionString;
    function isSomeOutputTypeComposer(type) {
      return type instanceof ObjectTypeComposer_1.ObjectTypeComposer || type instanceof InterfaceTypeComposer_1.InterfaceTypeComposer || type instanceof EnumTypeComposer_1.EnumTypeComposer || type instanceof UnionTypeComposer_1.UnionTypeComposer || type instanceof ScalarTypeComposer_1.ScalarTypeComposer || type instanceof NonNullComposer_1.NonNullComposer && isSomeOutputTypeComposer(type.ofType) || type instanceof ListComposer_1.ListComposer && isSomeOutputTypeComposer(type.ofType) || type instanceof ThunkComposer_1.ThunkComposer;
    }
    exports.isSomeOutputTypeComposer = isSomeOutputTypeComposer;
    function isSomeInputTypeComposer(type) {
      return type instanceof InputTypeComposer_1.InputTypeComposer || type instanceof EnumTypeComposer_1.EnumTypeComposer || type instanceof ScalarTypeComposer_1.ScalarTypeComposer || type instanceof NonNullComposer_1.NonNullComposer && isSomeInputTypeComposer(type.ofType) || type instanceof ListComposer_1.ListComposer && isSomeInputTypeComposer(type.ofType) || type instanceof ThunkComposer_1.ThunkComposer;
    }
    exports.isSomeInputTypeComposer = isSomeInputTypeComposer;
    function isComposeNamedType(type) {
      return (0, graphql_1.isNamedType)(type) || type instanceof ObjectTypeComposer_1.ObjectTypeComposer || type instanceof InputTypeComposer_1.InputTypeComposer || type instanceof InterfaceTypeComposer_1.InterfaceTypeComposer || type instanceof EnumTypeComposer_1.EnumTypeComposer || type instanceof UnionTypeComposer_1.UnionTypeComposer || type instanceof ScalarTypeComposer_1.ScalarTypeComposer;
    }
    exports.isComposeNamedType = isComposeNamedType;
    function isComposeType(type) {
      return isComposeNamedType(type) || Array.isArray(type) && isComposeType(type[0]) || type instanceof NonNullComposer_1.NonNullComposer || type instanceof ListComposer_1.ListComposer || type instanceof ThunkComposer_1.ThunkComposer || type instanceof Resolver_1.Resolver || (0, graphql_1.isType)(type);
    }
    exports.isComposeType = isComposeType;
    function isComposeOutputType(type) {
      return (0, graphql_1.isOutputType)(type) || Array.isArray(type) && isComposeOutputType(type[0]) || isSomeOutputTypeComposer(type) || type instanceof Resolver_1.Resolver;
    }
    exports.isComposeOutputType = isComposeOutputType;
    function isComposeInputType(type) {
      return (0, graphql_1.isInputType)(type) || Array.isArray(type) && isComposeInputType(type[0]) || isSomeInputTypeComposer(type);
    }
    exports.isComposeInputType = isComposeInputType;
    function isNamedTypeComposer(type) {
      return type instanceof ObjectTypeComposer_1.ObjectTypeComposer || type instanceof InputTypeComposer_1.InputTypeComposer || type instanceof ScalarTypeComposer_1.ScalarTypeComposer || type instanceof EnumTypeComposer_1.EnumTypeComposer || type instanceof InterfaceTypeComposer_1.InterfaceTypeComposer || type instanceof UnionTypeComposer_1.UnionTypeComposer;
    }
    exports.isNamedTypeComposer = isNamedTypeComposer;
    function isTypeComposer(type) {
      return isNamedTypeComposer(type) || type instanceof ListComposer_1.ListComposer || type instanceof NonNullComposer_1.NonNullComposer || type instanceof ThunkComposer_1.ThunkComposer;
    }
    exports.isTypeComposer = isTypeComposer;
    function getGraphQLType(anyType) {
      let type = anyType;
      if (type && (0, is_1.isFunction)(type.getType)) {
        type = type.getType();
      }
      if (!(0, graphql_1.isType)(type)) {
        throw new Error(`You provide incorrect type for 'getGraphQLType' method: ${(0, misc_1.inspect)(type)}`);
      }
      return type;
    }
    exports.getGraphQLType = getGraphQLType;
    function getComposeTypeName(type, sc) {
      if (typeof type === "string") {
        if (/^[_a-zA-Z][_a-zA-Z0-9]*$/.test(type)) {
          return type;
        } else {
          const docNode = (0, graphql_1.parse)(type);
          if (docNode.definitions[0] && docNode.definitions[0].name && typeof docNode.definitions[0].name.value === "string") {
            return docNode.definitions[0].name.value;
          }
        }
        throw new Error(`Cannot get type name from string: ${(0, misc_1.inspect)(type)}`);
      } else if ((0, is_1.isFunction)(type)) {
        return getComposeTypeName(type(sc), sc);
      } else if (isNamedTypeComposer(type)) {
        return type.getTypeName();
      } else {
        try {
          const gqlType = getGraphQLType(type);
          if (typeof gqlType.name === "string") {
            return gqlType.name;
          }
        } catch (e2) {
          throw new Error(`Cannot get type name from ${(0, misc_1.inspect)(type)}`);
        }
      }
      throw new Error(`Cannot get type name from ${(0, misc_1.inspect)(type)}`);
    }
    exports.getComposeTypeName = getComposeTypeName;
    function unwrapTC(anyTC) {
      if (anyTC instanceof NonNullComposer_1.NonNullComposer || anyTC instanceof ListComposer_1.ListComposer || anyTC instanceof ThunkComposer_1.ThunkComposer) {
        const unwrappedTC = anyTC.getUnwrappedTC();
        return unwrapTC(unwrappedTC);
      }
      return anyTC;
    }
    exports.unwrapTC = unwrapTC;
    function unwrapInputTC(inputTC) {
      return unwrapTC(inputTC);
    }
    exports.unwrapInputTC = unwrapInputTC;
    function unwrapOutputTC(outputTC) {
      return unwrapTC(outputTC);
    }
    exports.unwrapOutputTC = unwrapOutputTC;
    function changeUnwrappedTC(anyTC, cb) {
      (0, deprecate_1.default)("Please use `replaceTC()` function instead.");
      return replaceTC(anyTC, cb);
    }
    exports.changeUnwrappedTC = changeUnwrappedTC;
    function replaceTC(anyTC, replaceByTC) {
      let tc = anyTC;
      const wrappers = [];
      while (tc instanceof ListComposer_1.ListComposer || tc instanceof NonNullComposer_1.NonNullComposer || tc instanceof ThunkComposer_1.ThunkComposer) {
        if (tc instanceof ThunkComposer_1.ThunkComposer) {
          tc = tc.getUnwrappedTC();
        } else {
          wrappers.unshift(tc.constructor);
          tc = tc.ofType;
        }
      }
      tc = (0, is_1.isFunction)(replaceByTC) ? replaceByTC(tc) : replaceByTC;
      if (tc) {
        tc = wrappers.reduce((type, Wrapper) => new Wrapper(type), tc);
      }
      return tc;
    }
    exports.replaceTC = replaceTC;
    function unwrapTypeNameString(str) {
      if (str.endsWith("!")) {
        return unwrapTypeNameString(str.slice(0, -1));
      } else if (str.startsWith("[") && str.endsWith("]")) {
        return unwrapTypeNameString(str.slice(1, -1));
      }
      return str;
    }
    exports.unwrapTypeNameString = unwrapTypeNameString;
    function cloneTypeTo(type, anotherSchemaComposer, cloneMap = /* @__PURE__ */ new Map()) {
      if (cloneMap.has(type)) {
        return cloneMap.get(type);
      } else if (typeof type === "string") {
        return type;
      } else if (isComposeType(type)) {
        if (Array.isArray(type))
          return type[0].cloneTo(anotherSchemaComposer, cloneMap);
        else
          return type.cloneTo(anotherSchemaComposer, cloneMap);
      } else if ((0, graphql_1.isType)(type)) {
        const tc = anotherSchemaComposer.typeMapper.convertGraphQLTypeToComposer(type);
        cloneMap.set(type, tc);
        return tc;
      } else {
        throw new Error((0, dedent_1.dedent)`
      Something strange was provided to utils cloneTypeTo() method:
        ${(0, misc_1.inspect)(type)}
    `);
      }
    }
    exports.cloneTypeTo = cloneTypeTo;
  }
});

// node_modules/graphql-compose/lib/ListComposer.js
var require_ListComposer = __commonJS({
  "node_modules/graphql-compose/lib/ListComposer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListComposer = void 0;
    var graphql_1 = require_graphql3();
    var typeHelpers_1 = require_typeHelpers();
    var NonNullComposer_1 = require_NonNullComposer();
    var ListComposer = class {
      constructor(type) {
        this.ofType = type;
      }
      getType() {
        return new graphql_1.GraphQLList(this.ofType.getType());
      }
      getTypeName() {
        return `[${this.ofType.getTypeName()}]`;
      }
      getUnwrappedTC() {
        let tc = this;
        while (!(0, typeHelpers_1.isNamedTypeComposer)(tc)) {
          tc = tc.ofType;
        }
        return tc;
      }
      getTypePlural() {
        return new ListComposer(this);
      }
      getTypeNonNull() {
        return new NonNullComposer_1.NonNullComposer(this);
      }
      get List() {
        return new ListComposer(this);
      }
      get NonNull() {
        return new NonNullComposer_1.NonNullComposer(this);
      }
      cloneTo(anotherSchemaComposer, cloneMap = /* @__PURE__ */ new Map()) {
        return new ListComposer(this.ofType.cloneTo(anotherSchemaComposer, cloneMap));
      }
    };
    exports.ListComposer = ListComposer;
  }
});

// node_modules/graphql-compose/lib/UnionTypeComposer.js
var require_UnionTypeComposer = __commonJS({
  "node_modules/graphql-compose/lib/UnionTypeComposer.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __rest = exports && exports.__rest || function(s2, e2) {
      var t2 = {};
      for (var p in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p) && e2.indexOf(p) < 0)
          t2[p] = s2[p];
      if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i2 = 0, p = Object.getOwnPropertySymbols(s2); i2 < p.length; i2++) {
          if (e2.indexOf(p[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i2]))
            t2[p[i2]] = s2[p[i2]];
        }
      return t2;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UnionTypeComposer = void 0;
    var graphql_1 = require_graphql3();
    var is_1 = require_is();
    var misc_1 = require_misc();
    var ObjectTypeComposer_1 = require_ObjectTypeComposer();
    var SchemaComposer_1 = require_SchemaComposer();
    var ListComposer_1 = require_ListComposer();
    var NonNullComposer_1 = require_NonNullComposer();
    var ThunkComposer_1 = require_ThunkComposer();
    var configToDefine_1 = require_configToDefine();
    var typeHelpers_1 = require_typeHelpers();
    var graphqlVersion_1 = require_graphqlVersion();
    var schemaPrinter_1 = require_schemaPrinter();
    var definitionNode_1 = require_definitionNode();
    var schemaPrinterSortTypes_1 = require_schemaPrinterSortTypes();
    var UnionTypeComposer = class {
      constructor(graphqlType, schemaComposer2) {
        this._gqcFallbackResolveType = null;
        if (!(schemaComposer2 instanceof SchemaComposer_1.SchemaComposer)) {
          throw new Error("You must provide SchemaComposer instance as a second argument for `new UnionTypeComposer(GraphQLUnionType, SchemaComposer)`");
        }
        if (!(graphqlType instanceof graphql_1.GraphQLUnionType)) {
          throw new Error("UnionTypeComposer accept only GraphQLUnionType in constructor. Try to use more flexible method `UnionTypeComposer.create()`.");
        }
        this.schemaComposer = schemaComposer2;
        this._gqType = graphqlType;
        this.schemaComposer.set(graphqlType, this);
        this.schemaComposer.set(graphqlType.name, this);
        let types3 = [];
        if (graphqlVersion_1.graphqlVersion >= 14) {
          types3 = this._gqType._types;
        } else {
          types3 = this._gqType._types || this._gqType._typeConfig.types;
        }
        types3 = (0, configToDefine_1.convertObjectTypeArrayAsThunk)(types3, this.schemaComposer);
        this._gqcTypes = /* @__PURE__ */ new Set();
        types3.forEach((type) => {
          this._gqcTypes.add(type);
        });
        this._gqcTypeResolvers = /* @__PURE__ */ new Map();
        if (!this._gqType.astNode) {
          this._gqType.astNode = (0, definitionNode_1.getUnionTypeDefinitionNode)(this);
        }
        this._gqcIsModified = false;
      }
      static create(typeDef, schemaComposer2) {
        if (!(schemaComposer2 instanceof SchemaComposer_1.SchemaComposer)) {
          throw new Error("You must provide SchemaComposer instance as a second argument for `UnionTypeComposer.create(typeDef, schemaComposer)`");
        }
        if (schemaComposer2.hasInstance(typeDef, UnionTypeComposer)) {
          return schemaComposer2.getUTC(typeDef);
        }
        const utc = this.createTemp(typeDef, schemaComposer2);
        schemaComposer2.add(utc);
        return utc;
      }
      static createTemp(typeDef, schemaComposer2) {
        const sc = schemaComposer2 || new SchemaComposer_1.SchemaComposer();
        let UTC;
        if ((0, is_1.isString)(typeDef)) {
          const typeName = typeDef;
          if ((0, typeHelpers_1.isTypeNameString)(typeName)) {
            UTC = new UnionTypeComposer(new graphql_1.GraphQLUnionType({
              name: typeName,
              types: () => []
            }), sc);
          } else {
            UTC = sc.typeMapper.convertSDLTypeDefinition(typeName);
            if (!(UTC instanceof UnionTypeComposer)) {
              throw new Error("You should provide correct GraphQLUnionType type definition. Eg. `union MyType = Photo | Person`");
            }
          }
        } else if (typeDef instanceof graphql_1.GraphQLUnionType) {
          UTC = new UnionTypeComposer(typeDef, sc);
        } else if ((0, is_1.isObject)(typeDef)) {
          const type = new graphql_1.GraphQLUnionType(Object.assign(Object.assign({}, typeDef), { types: () => [] }));
          UTC = new UnionTypeComposer(type, sc);
          const types3 = typeDef.types;
          if (Array.isArray(types3))
            UTC.setTypes(types3);
          else if ((0, is_1.isFunction)(types3)) {
            UTC.setTypes((0, configToDefine_1.convertObjectTypeArrayAsThunk)(types3, sc));
          }
          UTC.setExtensions(typeDef.extensions);
          if (Array.isArray(typeDef === null || typeDef === void 0 ? void 0 : typeDef.directives)) {
            UTC.setDirectives(typeDef.directives);
          }
        } else {
          throw new Error(`You should provide GraphQLUnionTypeConfig or string with union name or SDL definition. Provided:
${(0, misc_1.inspect)(typeDef)}`);
        }
        return UTC;
      }
      hasType(name) {
        const typeName = (0, typeHelpers_1.getComposeTypeName)(name, this.schemaComposer);
        for (const type of this._gqcTypes) {
          if (type.getTypeName() === typeName) {
            return true;
          }
        }
        return false;
      }
      getTypes() {
        return Array.from(this._gqcTypes.values());
      }
      getTypeComposers() {
        return this.getTypes().map((t2) => (0, typeHelpers_1.unwrapOutputTC)(t2));
      }
      getTypeNames() {
        return this.getTypes().map((t2) => t2.getTypeName());
      }
      clearTypes() {
        this._gqcTypes.clear();
        this._gqcIsModified = true;
        return this;
      }
      setTypes(types3) {
        const tcs = (0, configToDefine_1.convertObjectTypeArrayAsThunk)(types3, this.schemaComposer);
        this._gqcTypes = new Set(tcs);
        this._gqcIsModified = true;
        return this;
      }
      addType(type) {
        const tc = this._convertObjectType(type);
        this.removeType(tc.getTypeName());
        this._gqcTypes.add(tc);
        this._gqcIsModified = true;
        return this;
      }
      addTypes(types3) {
        if (!Array.isArray(types3)) {
          throw new Error(`UnionTypeComposer[${this.getTypeName()}].addType() accepts only array`);
        }
        types3.forEach((type) => this.addType(type));
        return this;
      }
      removeType(nameOrArray) {
        const typeNames = Array.isArray(nameOrArray) ? nameOrArray : [nameOrArray];
        typeNames.forEach((typeName) => {
          for (const type of this._gqcTypes) {
            if (type.getTypeName() === typeName) {
              this._gqcTypes.delete(type);
              this._gqcIsModified = true;
            }
          }
        });
        return this;
      }
      removeOtherTypes(nameOrArray) {
        const keepTypeNames = Array.isArray(nameOrArray) ? nameOrArray : [nameOrArray];
        for (const type of this._gqcTypes) {
          if (keepTypeNames.indexOf(type.getTypeName()) === -1) {
            this._gqcTypes.delete(type);
            this._gqcIsModified = true;
          }
        }
        return this;
      }
      getType() {
        if (this._gqcIsModified) {
          this._gqcIsModified = false;
          this._gqType.astNode = (0, definitionNode_1.getUnionTypeDefinitionNode)(this);
          const prepareTypes = () => {
            try {
              return this.getTypes().map((tc) => tc.getType());
            } catch (e2) {
              e2.message = `UnionError[${this.getTypeName()}]: ${e2.message}`;
              throw e2;
            }
          };
          if (graphqlVersion_1.graphqlVersion >= 14) {
            this._gqType._types = prepareTypes;
          } else {
            this._gqType._types = null;
            this._gqType._typeConfig.types = prepareTypes;
          }
        }
        return this._gqType;
      }
      getTypePlural() {
        return new ListComposer_1.ListComposer(this);
      }
      getTypeNonNull() {
        return new NonNullComposer_1.NonNullComposer(this);
      }
      get List() {
        return new ListComposer_1.ListComposer(this);
      }
      get NonNull() {
        return new NonNullComposer_1.NonNullComposer(this);
      }
      getTypeName() {
        return this._gqType.name;
      }
      setTypeName(name) {
        this._gqType.name = name;
        this._gqcIsModified = true;
        this.schemaComposer.add(this);
        return this;
      }
      getDescription() {
        return this._gqType.description || "";
      }
      setDescription(description) {
        this._gqType.description = description;
        this._gqcIsModified = true;
        return this;
      }
      clone(newTypeNameOrTC) {
        if (!newTypeNameOrTC) {
          throw new Error("You should provide newTypeName:string for UnionTypeComposer.clone()");
        }
        const cloned = newTypeNameOrTC instanceof UnionTypeComposer ? newTypeNameOrTC : UnionTypeComposer.create(newTypeNameOrTC, this.schemaComposer);
        cloned._gqcExtensions = Object.assign({}, this._gqcExtensions);
        cloned._gqcTypes = new Set(this._gqcTypes);
        cloned._gqcTypeResolvers = new Map(this._gqcTypeResolvers);
        cloned._gqcFallbackResolveType = this._gqcFallbackResolveType;
        cloned.setDescription(this.getDescription());
        cloned.setDirectives(this.getDirectives());
        return cloned;
      }
      cloneTo(anotherSchemaComposer, cloneMap = /* @__PURE__ */ new Map()) {
        if (!anotherSchemaComposer) {
          throw new Error("You should provide SchemaComposer for ObjectTypeComposer.cloneTo()");
        }
        if (cloneMap.has(this))
          return this;
        const cloned = UnionTypeComposer.create(this.getTypeName(), anotherSchemaComposer);
        cloneMap.set(this, cloned);
        cloned._gqcExtensions = Object.assign({}, this._gqcExtensions);
        cloned.setDescription(this.getDescription());
        const typeResolversMap = this.getTypeResolvers();
        if (typeResolversMap.size > 0) {
          const clonedTypeResolvers = /* @__PURE__ */ new Map();
          typeResolversMap.forEach((fn, tc) => {
            const clonedTC = (0, typeHelpers_1.cloneTypeTo)(tc, anotherSchemaComposer, cloneMap);
            clonedTypeResolvers.set(clonedTC, fn);
          });
          cloned.setTypeResolvers(clonedTypeResolvers);
        }
        if (this._gqcFallbackResolveType) {
          cloned._gqcFallbackResolveType = (0, typeHelpers_1.cloneTypeTo)(this._gqcFallbackResolveType, anotherSchemaComposer, cloneMap);
        }
        const types3 = this.getTypes();
        if (types3.length > 0) {
          cloned.setTypes(types3.map((tc) => (0, typeHelpers_1.cloneTypeTo)(tc, anotherSchemaComposer, cloneMap)));
        }
        return cloned;
      }
      merge(type) {
        let tc;
        if (type instanceof graphql_1.GraphQLUnionType) {
          tc = UnionTypeComposer.createTemp(type, this.schemaComposer);
        } else if (type instanceof UnionTypeComposer) {
          tc = type;
        } else {
          throw new Error(`Cannot merge ${(0, misc_1.inspect)(type)} with UnionType(${this.getTypeName()}). Provided type should be GraphQLUnionType or UnionTypeComposer.`);
        }
        this.addTypes(tc.getTypes().map((t2) => t2.getTypeName()));
        return this;
      }
      getResolveType() {
        return this._gqType.resolveType;
      }
      setResolveType(fn) {
        this._gqType.resolveType = fn;
        this._gqcIsModified = true;
        return this;
      }
      hasTypeResolver(type) {
        const typeResolversMap = this.getTypeResolvers();
        const tc = this._convertObjectType(type);
        return typeResolversMap.has(tc);
      }
      getTypeResolvers() {
        return this._gqcTypeResolvers;
      }
      getTypeResolverCheckFn(type) {
        const typeResolversMap = this.getTypeResolvers();
        const tc = this._convertObjectType(type);
        if (!typeResolversMap.has(tc)) {
          throw new Error(`Type resolve function in union '${this.getTypeName()}' is not defined for type ${(0, misc_1.inspect)(type)}.`);
        }
        return typeResolversMap.get(tc);
      }
      getTypeResolverNames() {
        const typeResolversMap = this.getTypeResolvers();
        const names = [];
        typeResolversMap.forEach((_, tc) => {
          names.push(tc.getTypeName());
        });
        return names;
      }
      getTypeResolverTypes() {
        const typeResolversMap = this.getTypeResolvers();
        return Array.from(typeResolversMap.keys());
      }
      setTypeResolvers(typeResolversMap) {
        this._gqcTypeResolvers = this._convertTypeResolvers(typeResolversMap);
        this._gqcIsModified = true;
        this._initResolveTypeFn();
        return this;
      }
      _initResolveTypeFn() {
        const fallbackType = this._gqcFallbackResolveType ? (0, typeHelpers_1.getGraphQLType)(this._gqcFallbackResolveType) : void 0;
        const fastEntries = [];
        if (graphqlVersion_1.graphqlVersion >= 16) {
          for (const [composeType, checkFn] of this._gqcTypeResolvers.entries()) {
            fastEntries.push([(0, typeHelpers_1.getComposeTypeName)(composeType, this.schemaComposer), checkFn]);
            this.addType(composeType);
          }
        } else {
          for (const [composeType, checkFn] of this._gqcTypeResolvers.entries()) {
            fastEntries.push([(0, typeHelpers_1.getGraphQLType)(composeType), checkFn]);
            this.addType(composeType);
          }
        }
        let resolveType;
        const isAsyncRuntime = this._isTypeResolversAsync(this._gqcTypeResolvers);
        if (isAsyncRuntime) {
          resolveType = (value, context, info) => __awaiter(this, void 0, void 0, function* () {
            for (const [_gqType, checkFn] of fastEntries) {
              if (yield checkFn(value, context, info))
                return _gqType;
            }
            return fallbackType;
          });
        } else {
          resolveType = (value, context, info) => {
            for (const [_gqType, checkFn] of fastEntries) {
              if (checkFn(value, context, info))
                return _gqType;
            }
            return fallbackType;
          };
        }
        this.setResolveType(resolveType);
        return this;
      }
      _convertObjectType(type) {
        const tc = this.schemaComposer.typeMapper.convertOutputTypeDefinition(type);
        if (tc instanceof ObjectTypeComposer_1.ObjectTypeComposer || tc instanceof ThunkComposer_1.ThunkComposer) {
          return tc;
        }
        throw new Error(`Should be provided ObjectType but received ${(0, misc_1.inspect)(type)}`);
      }
      _convertTypeResolvers(typeResolversMap) {
        if (!(typeResolversMap instanceof Map)) {
          throw new Error(`For union ${this.getTypeName()} you should provide Map object for type resolvers.`);
        }
        const result = /* @__PURE__ */ new Map();
        for (const [composeType, checkFn] of typeResolversMap.entries()) {
          try {
            result.set(this._convertObjectType(composeType), checkFn);
          } catch (e2) {
            throw new Error(`For union type resolver ${this.getTypeName()} you must provide GraphQLObjectType or ObjectTypeComposer, but provided ${(0, misc_1.inspect)(composeType)}`);
          }
          if (!(0, is_1.isFunction)(checkFn)) {
            throw new Error(`Union ${this.getTypeName()} has invalid check function for type ${(0, misc_1.inspect)(composeType)}`);
          }
        }
        return result;
      }
      _isTypeResolversAsync(typeResolversMap) {
        let res = false;
        for (const [, checkFn] of typeResolversMap.entries()) {
          try {
            const r2 = checkFn({}, {}, {});
            if (r2 instanceof Promise) {
              r2.catch(() => {
              });
              res = true;
            }
          } catch (e2) {
          }
        }
        return res;
      }
      addTypeResolver(type, checkFn) {
        const typeResolversMap = this.getTypeResolvers();
        const tc = this._convertObjectType(type);
        typeResolversMap.set(tc, checkFn);
        this.schemaComposer.addSchemaMustHaveType(tc);
        this.setTypeResolvers(typeResolversMap);
        return this;
      }
      removeTypeResolver(type) {
        const typeResolversMap = this.getTypeResolvers();
        const tc = this._convertObjectType(type);
        typeResolversMap.delete(tc);
        this.setTypeResolvers(typeResolversMap);
        return this;
      }
      setTypeResolverFallback(type) {
        if (type) {
          this.addType(type);
          this.schemaComposer.addSchemaMustHaveType(type);
        }
        this._gqcFallbackResolveType = type;
        this._gqcIsModified = true;
        this._initResolveTypeFn();
        return this;
      }
      getExtensions() {
        if (!this._gqcExtensions) {
          return {};
        } else {
          return this._gqcExtensions;
        }
      }
      setExtensions(extensions) {
        this._gqcExtensions = extensions;
        this._gqcIsModified = true;
        return this;
      }
      extendExtensions(extensions) {
        const current = this.getExtensions();
        this.setExtensions(Object.assign(Object.assign({}, current), extensions));
        return this;
      }
      clearExtensions() {
        this.setExtensions({});
        return this;
      }
      getExtension(extensionName) {
        const extensions = this.getExtensions();
        return extensions[extensionName];
      }
      hasExtension(extensionName) {
        const extensions = this.getExtensions();
        return extensionName in extensions;
      }
      setExtension(extensionName, value) {
        this.extendExtensions({
          [extensionName]: value
        });
        return this;
      }
      removeExtension(extensionName) {
        const extensions = Object.assign({}, this.getExtensions());
        delete extensions[extensionName];
        this.setExtensions(extensions);
        return this;
      }
      getDirectives() {
        return this._gqcDirectives || [];
      }
      setDirectives(directives) {
        this._gqcDirectives = directives;
        this._gqcIsModified = true;
        return this;
      }
      getDirectiveNames() {
        return this.getDirectives().map((d) => d.name);
      }
      getDirectiveByName(directiveName) {
        const directive = this.getDirectives().find((d) => d.name === directiveName);
        if (!directive)
          return void 0;
        return directive.args;
      }
      setDirectiveByName(directiveName, args) {
        const directives = this.getDirectives();
        const idx = directives.findIndex((d) => d.name === directiveName);
        if (idx >= 0) {
          directives[idx].args = args;
        } else {
          directives.push({ name: directiveName, args });
        }
        this.setDirectives(directives);
        return this;
      }
      getDirectiveById(idx) {
        const directive = this.getDirectives()[idx];
        if (!directive)
          return void 0;
        return directive.args;
      }
      getNestedTCs(opts = {}, passedTypes = /* @__PURE__ */ new Set()) {
        const exclude = Array.isArray(opts.exclude) ? opts.exclude : [];
        this.getTypeComposers().forEach((tc) => {
          if (!passedTypes.has(tc) && !exclude.includes(tc.getTypeName())) {
            passedTypes.add(tc);
            if (tc instanceof ObjectTypeComposer_1.ObjectTypeComposer) {
              tc.getNestedTCs(opts, passedTypes);
            }
          }
        });
        return passedTypes;
      }
      toSDL(opts) {
        const _a = opts || {}, { deep } = _a, innerOpts = __rest(_a, ["deep"]);
        innerOpts.sortTypes = innerOpts.sortTypes || false;
        const exclude = Array.isArray(innerOpts.exclude) ? innerOpts.exclude : [];
        if (deep) {
          let r2 = "";
          r2 += (0, schemaPrinter_1.printUnion)(this.getType(), innerOpts);
          const nestedTypes = Array.from(this.getNestedTCs({ exclude }));
          const sortMethod = (0, schemaPrinterSortTypes_1.getSortMethodFromOption)(innerOpts.sortAll || innerOpts.sortTypes);
          if (sortMethod) {
            nestedTypes.sort(sortMethod);
          }
          nestedTypes.forEach((t2) => {
            if (t2 !== this && !exclude.includes(t2.getTypeName())) {
              const sdl = t2.toSDL(innerOpts);
              if (sdl)
                r2 += `

${sdl}`;
            }
          });
          return r2;
        }
        return (0, schemaPrinter_1.printUnion)(this.getType(), innerOpts);
      }
    };
    exports.UnionTypeComposer = UnionTypeComposer;
  }
});

// node_modules/graphql-compose/lib/utils/toInputType.js
var require_toInputType = __commonJS({
  "node_modules/graphql-compose/lib/utils/toInputType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertInputObjectField = exports.toInputObjectType = exports.toInputType = void 0;
    var ObjectTypeComposer_1 = require_ObjectTypeComposer();
    var NonNullComposer_1 = require_NonNullComposer();
    var ListComposer_1 = require_ListComposer();
    var ThunkComposer_1 = require_ThunkComposer();
    var InterfaceTypeComposer_1 = require_InterfaceTypeComposer();
    var typeHelpers_1 = require_typeHelpers();
    var misc_1 = require_misc();
    var UnionTypeComposer_1 = require_UnionTypeComposer();
    function toInputType(anyTC, opts) {
      let tc = anyTC;
      const wrappers = [];
      while (tc instanceof ListComposer_1.ListComposer || tc instanceof NonNullComposer_1.NonNullComposer || tc instanceof ThunkComposer_1.ThunkComposer) {
        if (tc instanceof ThunkComposer_1.ThunkComposer) {
          tc = tc.getUnwrappedTC();
        } else {
          wrappers.unshift(tc.constructor);
          tc = tc.ofType;
        }
      }
      if (!(0, typeHelpers_1.isSomeInputTypeComposer)(tc)) {
        if (tc instanceof ObjectTypeComposer_1.ObjectTypeComposer || tc instanceof InterfaceTypeComposer_1.InterfaceTypeComposer) {
          tc = toInputObjectType(tc, opts);
        } else {
          if (opts === null || opts === void 0 ? void 0 : opts.fallbackType)
            return opts.fallbackType;
          if (tc instanceof UnionTypeComposer_1.UnionTypeComposer) {
            throw new Error(`Cannot convert UnionTypeComposer(${tc.getTypeName()}) to Input type. Please use 'fallbackType' option for removing this error.`);
          } else {
            throw new Error(`Cannot convert '${(0, misc_1.inspect)(tc)}' to InputType. Please use 'fallbackType' option for removing this error.`);
          }
        }
      }
      if (tc) {
        tc = wrappers.reduce((type, Wrapper) => new Wrapper(type), tc);
      }
      return tc;
    }
    exports.toInputType = toInputType;
    function toInputObjectType(tc, opts) {
      if (tc.hasInputTypeComposer()) {
        return tc.getInputTypeComposer();
      }
      const prefix = (opts === null || opts === void 0 ? void 0 : opts.prefix) || "";
      const postfix = (opts === null || opts === void 0 ? void 0 : opts.postfix) || "Input";
      const inputTypeName = `${prefix}${tc.getTypeName()}${postfix}`;
      const inputTypeComposer = tc.schemaComposer.createInputTC(inputTypeName);
      tc.setInputTypeComposer(inputTypeComposer);
      const fieldNames = tc.getFieldNames();
      fieldNames.forEach((fieldName) => {
        const fc = tc.getField(fieldName);
        let fieldInputType;
        try {
          fieldInputType = toInputType(fc.type, opts);
        } catch (e2) {
          if ((opts === null || opts === void 0 ? void 0 : opts.fallbackType) || (opts === null || opts === void 0 ? void 0 : opts.fallbackType) === null) {
            fieldInputType = opts === null || opts === void 0 ? void 0 : opts.fallbackType;
          } else {
            throw new Error(`${`Can not convert field '${tc.getTypeName()}.${fieldName}' to InputType
It should be ObjectType or InterfaceType, but got 
`}${(0, misc_1.inspect)(fc.type)}`);
          }
        }
        if (fieldInputType) {
          inputTypeComposer.setField(fieldName, {
            type: fieldInputType,
            description: fc.description
          });
        }
      });
      return inputTypeComposer;
    }
    exports.toInputObjectType = toInputObjectType;
    function convertInputObjectField(field, opts) {
      return toInputType(field, opts);
    }
    exports.convertInputObjectField = convertInputObjectField;
  }
});

// node_modules/graphql-compose/lib/InterfaceTypeComposer.js
var require_InterfaceTypeComposer = __commonJS({
  "node_modules/graphql-compose/lib/InterfaceTypeComposer.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __rest = exports && exports.__rest || function(s2, e2) {
      var t2 = {};
      for (var p in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p) && e2.indexOf(p) < 0)
          t2[p] = s2[p];
      if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i2 = 0, p = Object.getOwnPropertySymbols(s2); i2 < p.length; i2++) {
          if (e2.indexOf(p[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i2]))
            t2[p[i2]] = s2[p[i2]];
        }
      return t2;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InterfaceTypeComposer = void 0;
    var graphql_1 = require_graphql3();
    var is_1 = require_is();
    var misc_1 = require_misc();
    var ObjectTypeComposer_1 = require_ObjectTypeComposer();
    var InputTypeComposer_1 = require_InputTypeComposer();
    var UnionTypeComposer_1 = require_UnionTypeComposer();
    var EnumTypeComposer_1 = require_EnumTypeComposer();
    var SchemaComposer_1 = require_SchemaComposer();
    var ListComposer_1 = require_ListComposer();
    var NonNullComposer_1 = require_NonNullComposer();
    var ThunkComposer_1 = require_ThunkComposer();
    var toInputType_1 = require_toInputType();
    var typeByPath_1 = require_typeByPath();
    var typeHelpers_1 = require_typeHelpers();
    var configToDefine_1 = require_configToDefine();
    var graphqlVersion_1 = require_graphqlVersion();
    var schemaPrinter_1 = require_schemaPrinter();
    var definitionNode_1 = require_definitionNode();
    var schemaPrinterSortTypes_1 = require_schemaPrinterSortTypes();
    var InterfaceTypeComposer = class {
      constructor(graphqlType, schemaComposer2) {
        this._gqcInterfaces = [];
        this._gqcFallbackResolveType = null;
        if (!(schemaComposer2 instanceof SchemaComposer_1.SchemaComposer)) {
          throw new Error("You must provide SchemaComposer instance as a second argument for `new InterfaceTypeComposer(GraphQLInterfaceType, SchemaComposer)`");
        }
        if (!(graphqlType instanceof graphql_1.GraphQLInterfaceType)) {
          throw new Error("InterfaceTypeComposer accept only GraphQLInterfaceType in constructor");
        }
        this.schemaComposer = schemaComposer2;
        this._gqType = graphqlType;
        this.schemaComposer.set(graphqlType, this);
        this.schemaComposer.set(graphqlType.name, this);
        if (graphqlVersion_1.graphqlVersion >= 15) {
          this._gqcFields = (0, configToDefine_1.convertObjectFieldMapToConfig)(this._gqType._fields, this.schemaComposer);
          this._gqcInterfaces = (0, configToDefine_1.convertInterfaceArrayAsThunk)(this._gqType._interfaces, this.schemaComposer);
        } else if (graphqlVersion_1.graphqlVersion >= 14) {
          this._gqcFields = (0, configToDefine_1.convertObjectFieldMapToConfig)(this._gqType._fields, this.schemaComposer);
        } else {
          const fields = this._gqType._typeConfig.fields;
          this._gqcFields = this.schemaComposer.typeMapper.convertOutputFieldConfigMap((0, misc_1.resolveMaybeThunk)(fields) || {}, this.getTypeName());
        }
        if (!this._gqType.astNode) {
          this._gqType.astNode = (0, definitionNode_1.getInterfaceTypeDefinitionNode)(this);
        }
        this._gqcIsModified = false;
      }
      static create(typeDef, schemaComposer2) {
        if (!(schemaComposer2 instanceof SchemaComposer_1.SchemaComposer)) {
          throw new Error("You must provide SchemaComposer instance as a second argument for `InterfaceTypeComposer.create(typeDef, schemaComposer)`");
        }
        if (schemaComposer2.hasInstance(typeDef, InterfaceTypeComposer)) {
          return schemaComposer2.getIFTC(typeDef);
        }
        const iftc = this.createTemp(typeDef, schemaComposer2);
        schemaComposer2.add(iftc);
        return iftc;
      }
      static createTemp(typeDef, schemaComposer2) {
        const sc = schemaComposer2 || new SchemaComposer_1.SchemaComposer();
        let IFTC;
        if ((0, is_1.isString)(typeDef)) {
          const typeName = typeDef;
          if ((0, typeHelpers_1.isTypeNameString)(typeName)) {
            IFTC = new InterfaceTypeComposer(new graphql_1.GraphQLInterfaceType({
              name: typeName,
              fields: () => ({})
            }), sc);
          } else {
            IFTC = sc.typeMapper.convertSDLTypeDefinition(typeName);
            if (!(IFTC instanceof InterfaceTypeComposer)) {
              throw new Error("You should provide correct GraphQLInterfaceType type definition. Eg. `interface MyType { id: ID!, name: String! }`");
            }
          }
        } else if (typeDef instanceof graphql_1.GraphQLInterfaceType) {
          IFTC = new InterfaceTypeComposer(typeDef, sc);
        } else if (typeDef instanceof InterfaceTypeComposer) {
          IFTC = typeDef;
        } else if ((0, is_1.isObject)(typeDef) && !(typeDef instanceof InterfaceTypeComposer)) {
          const type = new graphql_1.GraphQLInterfaceType(Object.assign(Object.assign({}, typeDef), { fields: () => ({}) }));
          IFTC = new InterfaceTypeComposer(type, sc);
          const fields = typeDef.fields;
          if ((0, is_1.isFunction)(fields)) {
            IFTC.addFields((0, configToDefine_1.convertObjectFieldMapToConfig)(fields, sc));
          } else if ((0, is_1.isObject)(fields)) {
            IFTC.addFields(fields);
          }
          const interfaces = typeDef.interfaces;
          if (Array.isArray(interfaces))
            IFTC.setInterfaces(interfaces);
          else if ((0, is_1.isFunction)(interfaces)) {
            IFTC.setInterfaces((0, configToDefine_1.convertInterfaceArrayAsThunk)(interfaces, sc));
          }
          IFTC.setExtensions(typeDef.extensions);
          if (Array.isArray(typeDef === null || typeDef === void 0 ? void 0 : typeDef.directives)) {
            IFTC.setDirectives(typeDef.directives);
          }
        } else {
          throw new Error(`You should provide GraphQLInterfaceTypeConfig or string with interface name or SDL definition. Provided:
${(0, misc_1.inspect)(typeDef)}`);
        }
        return IFTC;
      }
      getFields() {
        return this._gqcFields;
      }
      getFieldNames() {
        return Object.keys(this._gqcFields);
      }
      getField(fieldName) {
        if ((0, is_1.isFunction)(this._gqcFields[fieldName])) {
          const unwrappedFieldConfig = this._gqcFields[fieldName](this.schemaComposer);
          this.setField(fieldName, unwrappedFieldConfig);
        }
        const field = this._gqcFields[fieldName];
        if (!field) {
          throw new Error(`Cannot get field '${fieldName}' from type '${this.getTypeName()}'. Field does not exist.`);
        }
        return field;
      }
      hasField(fieldName) {
        return !!this._gqcFields[fieldName];
      }
      setFields(fields) {
        this._gqcFields = {};
        Object.keys(fields).forEach((name) => {
          this.setField(name, fields[name]);
        });
        return this;
      }
      setField(fieldName, fieldConfig) {
        this._gqcFields[fieldName] = (0, is_1.isFunction)(fieldConfig) ? fieldConfig : this.schemaComposer.typeMapper.convertOutputFieldConfig(fieldConfig, fieldName, this.getTypeName());
        this._gqcIsModified = true;
        return this;
      }
      addFields(newFields) {
        Object.keys(newFields).forEach((name) => {
          this.setField(name, newFields[name]);
        });
        return this;
      }
      removeField(fieldNameOrArray) {
        const fieldNames = Array.isArray(fieldNameOrArray) ? fieldNameOrArray : [fieldNameOrArray];
        fieldNames.forEach((fieldName) => {
          const names = fieldName.split(".");
          const name = names.shift();
          if (!name)
            return;
          if (names.length === 0) {
            delete this._gqcFields[name];
            this._gqcIsModified = true;
          } else {
            if (this.hasField(name)) {
              const subTC = this.getFieldTC(name);
              if (subTC instanceof ObjectTypeComposer_1.ObjectTypeComposer || subTC instanceof EnumTypeComposer_1.EnumTypeComposer) {
                subTC.removeField(names.join("."));
              }
            }
          }
        });
        return this;
      }
      removeOtherFields(fieldNameOrArray) {
        const keepFieldNames = Array.isArray(fieldNameOrArray) ? fieldNameOrArray : [fieldNameOrArray];
        Object.keys(this._gqcFields).forEach((fieldName) => {
          if (keepFieldNames.indexOf(fieldName) === -1) {
            delete this._gqcFields[fieldName];
            this._gqcIsModified = true;
          }
        });
        return this;
      }
      reorderFields(names) {
        const orderedFields = {};
        const fields = this._gqcFields;
        names.forEach((name) => {
          if (fields[name]) {
            orderedFields[name] = fields[name];
            delete fields[name];
          }
        });
        this._gqcFields = Object.assign(Object.assign({}, orderedFields), fields);
        this._gqcIsModified = true;
        return this;
      }
      extendField(fieldName, partialFieldConfig) {
        let prevFieldConfig;
        try {
          prevFieldConfig = this.getField(fieldName);
        } catch (e2) {
          throw new Error(`Cannot extend field '${fieldName}' from type '${this.getTypeName()}'. Field does not exist.`);
        }
        this.setField(fieldName, Object.assign(Object.assign(Object.assign({}, prevFieldConfig), partialFieldConfig), { extensions: Object.assign(Object.assign({}, prevFieldConfig.extensions || {}), partialFieldConfig.extensions || {}), directives: [...prevFieldConfig.directives || [], ...partialFieldConfig.directives || []] }));
        return this;
      }
      getFieldConfig(fieldName) {
        const _a = this.getField(fieldName), { type, args } = _a, rest = __rest(_a, ["type", "args"]);
        return Object.assign({ type: type.getType(), args: args && (0, misc_1.mapEachKey)(args, (ac) => Object.assign(Object.assign({}, ac), { type: ac.type.getType() })) }, rest);
      }
      getFieldType(fieldName) {
        return this.getField(fieldName).type.getType();
      }
      getFieldTypeName(fieldName) {
        return this.getField(fieldName).type.getTypeName();
      }
      getFieldTC(fieldName) {
        const anyTC = this.getField(fieldName).type;
        return (0, typeHelpers_1.unwrapOutputTC)(anyTC);
      }
      getFieldOTC(fieldName) {
        const tc = this.getFieldTC(fieldName);
        if (!(tc instanceof ObjectTypeComposer_1.ObjectTypeComposer)) {
          throw new Error(`${this.getTypeName()}.getFieldOTC('${fieldName}') must be ObjectTypeComposer, but received ${tc.constructor.name}. Maybe you need to use 'getFieldTC()' method which returns any type composer?`);
        }
        return tc;
      }
      isFieldNonNull(fieldName) {
        return this.getField(fieldName).type instanceof NonNullComposer_1.NonNullComposer;
      }
      makeFieldNonNull(fieldNameOrArray) {
        const fieldNames = Array.isArray(fieldNameOrArray) ? fieldNameOrArray : [fieldNameOrArray];
        fieldNames.forEach((fieldName) => {
          const fc = this._gqcFields[fieldName];
          if (fc && !(fc.type instanceof NonNullComposer_1.NonNullComposer)) {
            fc.type = new NonNullComposer_1.NonNullComposer(fc.type);
            this._gqcIsModified = true;
          }
        });
        return this;
      }
      makeFieldNullable(fieldNameOrArray) {
        const fieldNames = Array.isArray(fieldNameOrArray) ? fieldNameOrArray : [fieldNameOrArray];
        fieldNames.forEach((fieldName) => {
          const fc = this._gqcFields[fieldName];
          if (fc && fc.type instanceof NonNullComposer_1.NonNullComposer) {
            fc.type = fc.type.ofType;
            this._gqcIsModified = true;
          }
        });
        return this;
      }
      isFieldPlural(fieldName) {
        const type = this.getField(fieldName).type;
        return type instanceof ListComposer_1.ListComposer || type instanceof NonNullComposer_1.NonNullComposer && type.ofType instanceof ListComposer_1.ListComposer;
      }
      makeFieldPlural(fieldNameOrArray) {
        const fieldNames = Array.isArray(fieldNameOrArray) ? fieldNameOrArray : [fieldNameOrArray];
        fieldNames.forEach((fieldName) => {
          const fc = this._gqcFields[fieldName];
          if (fc && !(fc.type instanceof ListComposer_1.ListComposer)) {
            fc.type = new ListComposer_1.ListComposer(fc.type);
            this._gqcIsModified = true;
          }
        });
        return this;
      }
      makeFieldNonPlural(fieldNameOrArray) {
        const fieldNames = Array.isArray(fieldNameOrArray) ? fieldNameOrArray : [fieldNameOrArray];
        fieldNames.forEach((fieldName) => {
          const fc = this._gqcFields[fieldName];
          if (fc) {
            if (fc.type instanceof ListComposer_1.ListComposer) {
              fc.type = fc.type.ofType;
              this._gqcIsModified = true;
            } else if (fc.type instanceof NonNullComposer_1.NonNullComposer && fc.type.ofType instanceof ListComposer_1.ListComposer) {
              fc.type = fc.type.ofType.ofType instanceof NonNullComposer_1.NonNullComposer ? fc.type.ofType.ofType : new NonNullComposer_1.NonNullComposer(fc.type.ofType.ofType);
              this._gqcIsModified = true;
            }
          }
        });
        return this;
      }
      deprecateFields(fields) {
        const existedFieldNames = this.getFieldNames();
        if (typeof fields === "string") {
          if (existedFieldNames.indexOf(fields) === -1) {
            throw new Error(`Cannot deprecate non-existent field '${fields}' from interface type '${this.getTypeName()}'`);
          }
          this.extendField(fields, { deprecationReason: "deprecated" });
        } else if (Array.isArray(fields)) {
          fields.forEach((field) => {
            if (existedFieldNames.indexOf(field) === -1) {
              throw new Error(`Cannot deprecate non-existent field '${field}' from interface type '${this.getTypeName()}'`);
            }
            this.extendField(field, { deprecationReason: "deprecated" });
          });
        } else {
          const fieldMap = fields;
          Object.keys(fieldMap).forEach((field) => {
            if (existedFieldNames.indexOf(field) === -1) {
              throw new Error(`Cannot deprecate non-existent field '${field}' from interface type '${this.getTypeName()}'`);
            }
            const deprecationReason = fieldMap[field];
            this.extendField(field, { deprecationReason });
          });
        }
        return this;
      }
      getFieldArgs(fieldName) {
        try {
          const fc = this.getField(fieldName);
          return fc.args || {};
        } catch (e2) {
          throw new Error(`Cannot get field args. Field '${fieldName}' from type '${this.getTypeName()}' does not exist.`);
        }
      }
      getFieldArgNames(fieldName) {
        return Object.keys(this.getFieldArgs(fieldName));
      }
      hasFieldArg(fieldName, argName) {
        try {
          const fieldArgs = this.getFieldArgs(fieldName);
          return !!fieldArgs[argName];
        } catch (e2) {
          return false;
        }
      }
      getFieldArg(fieldName, argName) {
        const fieldArgs = this.getFieldArgs(fieldName);
        const arg = fieldArgs[argName];
        if (!arg) {
          throw new Error(`Cannot get '${this.getTypeName()}.${fieldName}@${argName}'. Argument does not exist.`);
        }
        return arg;
      }
      getFieldArgType(fieldName, argName) {
        const ac = this.getFieldArg(fieldName, argName);
        return ac.type.getType();
      }
      getFieldArgTypeName(fieldName, argName) {
        const ac = this.getFieldArg(fieldName, argName);
        return ac.type.getTypeName();
      }
      getFieldArgTC(fieldName, argName) {
        const anyTC = this.getFieldArg(fieldName, argName).type;
        return (0, typeHelpers_1.unwrapInputTC)(anyTC);
      }
      getFieldArgITC(fieldName, argName) {
        const tc = this.getFieldArgTC(fieldName, argName);
        if (!(tc instanceof InputTypeComposer_1.InputTypeComposer)) {
          throw new Error(`${this.getTypeName()}.getFieldArgITC('${fieldName}', '${argName}') must be InputTypeComposer, but received ${tc.constructor.name}. Maybe you need to use 'getFieldArgTC()' method which returns any type composer?`);
        }
        return tc;
      }
      setFieldArgs(fieldName, args) {
        const fc = this.getField(fieldName);
        fc.args = this.schemaComposer.typeMapper.convertArgConfigMap(args, fieldName, this.getTypeName());
        this._gqcIsModified = true;
        return this;
      }
      addFieldArgs(fieldName, newArgs) {
        const fc = this.getField(fieldName);
        fc.args = Object.assign(Object.assign({}, fc.args), this.schemaComposer.typeMapper.convertArgConfigMap(newArgs, fieldName, this.getTypeName()));
        this._gqcIsModified = true;
        return this;
      }
      setFieldArg(fieldName, argName, argConfig) {
        const fc = this.getField(fieldName);
        fc.args = fc.args || {};
        fc.args[argName] = this.schemaComposer.typeMapper.convertArgConfig(argConfig, argName, fieldName, this.getTypeName());
        this._gqcIsModified = true;
        return this;
      }
      isFieldArgPlural(fieldName, argName) {
        const type = this.getFieldArg(fieldName, argName).type;
        return type instanceof ListComposer_1.ListComposer || type instanceof NonNullComposer_1.NonNullComposer && type.ofType instanceof ListComposer_1.ListComposer;
      }
      makeFieldArgPlural(fieldName, argNameOrArray) {
        const args = this.getField(fieldName).args;
        if (!args)
          return this;
        const argNames = Array.isArray(argNameOrArray) ? argNameOrArray : [argNameOrArray];
        argNames.forEach((argName) => {
          const ac = args[argName];
          if (ac && !(ac.type instanceof ListComposer_1.ListComposer)) {
            ac.type = new ListComposer_1.ListComposer(ac.type);
            this._gqcIsModified = true;
          }
        });
        return this;
      }
      makeFieldArgNonPlural(fieldName, argNameOrArray) {
        const args = this.getField(fieldName).args;
        if (!args)
          return this;
        const argNames = Array.isArray(argNameOrArray) ? argNameOrArray : [argNameOrArray];
        argNames.forEach((argName) => {
          const ac = args[argName];
          if (ac) {
            if (ac.type instanceof ListComposer_1.ListComposer) {
              ac.type = ac.type.ofType;
              this._gqcIsModified = true;
            } else if (ac.type instanceof NonNullComposer_1.NonNullComposer && ac.type.ofType instanceof ListComposer_1.ListComposer) {
              ac.type = ac.type.ofType.ofType instanceof NonNullComposer_1.NonNullComposer ? ac.type.ofType.ofType : new NonNullComposer_1.NonNullComposer(ac.type.ofType.ofType);
              this._gqcIsModified = true;
            }
          }
        });
        return this;
      }
      isFieldArgNonNull(fieldName, argName) {
        const type = this.getFieldArg(fieldName, argName).type;
        return type instanceof NonNullComposer_1.NonNullComposer;
      }
      makeFieldArgNonNull(fieldName, argNameOrArray) {
        const args = this.getField(fieldName).args;
        if (!args)
          return this;
        const argNames = Array.isArray(argNameOrArray) ? argNameOrArray : [argNameOrArray];
        argNames.forEach((argName) => {
          const ac = args[argName];
          if (ac && !(ac.type instanceof NonNullComposer_1.NonNullComposer)) {
            ac.type = new NonNullComposer_1.NonNullComposer(ac.type);
            this._gqcIsModified = true;
          }
        });
        return this;
      }
      makeFieldArgNullable(fieldName, argNameOrArray) {
        const args = this.getField(fieldName).args;
        if (!args)
          return this;
        const argNames = Array.isArray(argNameOrArray) ? argNameOrArray : [argNameOrArray];
        argNames.forEach((argName) => {
          const ac = args[argName];
          if (ac && ac.type instanceof NonNullComposer_1.NonNullComposer) {
            ac.type = ac.type.ofType;
            this._gqcIsModified = true;
          }
        });
        return this;
      }
      getType() {
        if (this._gqcIsModified) {
          this._gqcIsModified = false;
          this._gqType.astNode = (0, definitionNode_1.getInterfaceTypeDefinitionNode)(this);
          if (graphqlVersion_1.graphqlVersion >= 15) {
            this._gqType._fields = () => (0, configToDefine_1.defineFieldMap)(this._gqType, (0, misc_1.mapEachKey)(this._gqcFields, (_, name) => this.getFieldConfig(name)), this._gqType.astNode);
            this._gqType._interfaces = () => this.getInterfacesTypes();
          } else if (graphqlVersion_1.graphqlVersion >= 14) {
            this._gqType._fields = () => (0, configToDefine_1.defineFieldMap)(this._gqType, (0, misc_1.mapEachKey)(this._gqcFields, (_, name) => this.getFieldConfig(name)), this._gqType.astNode);
          } else {
            this._gqType._typeConfig.fields = () => {
              return (0, misc_1.mapEachKey)(this._gqcFields, (_, name) => this.getFieldConfig(name));
            };
            this._gqType._fields = {};
          }
        }
        return this._gqType;
      }
      getTypePlural() {
        return new ListComposer_1.ListComposer(this);
      }
      getTypeNonNull() {
        return new NonNullComposer_1.NonNullComposer(this);
      }
      get List() {
        return new ListComposer_1.ListComposer(this);
      }
      get NonNull() {
        return new NonNullComposer_1.NonNullComposer(this);
      }
      getTypeName() {
        return this._gqType.name;
      }
      setTypeName(name) {
        this._gqType.name = name;
        this._gqcIsModified = true;
        this.schemaComposer.add(this);
        return this;
      }
      getDescription() {
        return this._gqType.description || "";
      }
      setDescription(description) {
        this._gqType.description = description;
        this._gqcIsModified = true;
        return this;
      }
      clone(newTypeNameOrTC) {
        if (!newTypeNameOrTC) {
          throw new Error("You should provide newTypeName:string for InterfaceTypeComposer.clone()");
        }
        const cloned = newTypeNameOrTC instanceof InterfaceTypeComposer ? newTypeNameOrTC : InterfaceTypeComposer.create(newTypeNameOrTC, this.schemaComposer);
        cloned._gqcFields = (0, misc_1.mapEachKey)(this._gqcFields, (fieldConfig) => Object.assign(Object.assign({}, fieldConfig), { args: (0, misc_1.mapEachKey)(fieldConfig.args, (argConfig) => Object.assign(Object.assign({}, argConfig), { extensions: Object.assign({}, argConfig.extensions), directives: [...argConfig.directives || []] })), extensions: Object.assign({}, fieldConfig.extensions), directives: [...fieldConfig.directives || []] }));
        cloned._gqcInterfaces = [...this._gqcInterfaces];
        if (this._gqcTypeResolvers) {
          cloned._gqcTypeResolvers = new Map(this._gqcTypeResolvers);
        }
        cloned._gqcFallbackResolveType = this._gqcFallbackResolveType;
        cloned._gqcExtensions = Object.assign({}, this._gqcExtensions);
        cloned.setDescription(this.getDescription());
        cloned.setDirectives(this.getDirectives());
        return cloned;
      }
      cloneTo(anotherSchemaComposer, cloneMap = /* @__PURE__ */ new Map()) {
        if (!anotherSchemaComposer) {
          throw new Error("You should provide SchemaComposer for InterfaceTypeComposer.cloneTo()");
        }
        if (cloneMap.has(this))
          return cloneMap.get(this);
        const cloned = InterfaceTypeComposer.create(this.getTypeName(), anotherSchemaComposer);
        cloneMap.set(this, cloned);
        cloned._gqcFields = (0, misc_1.mapEachKey)(this._gqcFields, (fieldConfig) => Object.assign(Object.assign({}, fieldConfig), { type: (0, typeHelpers_1.cloneTypeTo)(fieldConfig.type, anotherSchemaComposer, cloneMap), args: (0, misc_1.mapEachKey)(fieldConfig.args, (argConfig) => Object.assign(Object.assign({}, argConfig), { type: (0, typeHelpers_1.cloneTypeTo)(argConfig.type, anotherSchemaComposer, cloneMap), extensions: Object.assign({}, argConfig.extensions), directives: [...argConfig.directives || []] })), extensions: Object.assign({}, fieldConfig.extensions), directives: [...fieldConfig.directives || []] }));
        cloned._gqcInterfaces = this._gqcInterfaces.map((i2) => i2.cloneTo(anotherSchemaComposer, cloneMap));
        cloned._gqcExtensions = Object.assign({}, this._gqcExtensions);
        cloned.setDescription(this.getDescription());
        const typeResolversMap = this.getTypeResolvers();
        if (typeResolversMap.size > 0) {
          const clonedTypeResolvers = /* @__PURE__ */ new Map();
          typeResolversMap.forEach((fn, tc) => {
            const clonedTC = (0, typeHelpers_1.cloneTypeTo)(tc, anotherSchemaComposer, cloneMap);
            clonedTypeResolvers.set(clonedTC, fn);
          });
          cloned.setTypeResolvers(clonedTypeResolvers);
        }
        if (this._gqcFallbackResolveType) {
          cloned._gqcFallbackResolveType = (0, typeHelpers_1.cloneTypeTo)(this._gqcFallbackResolveType, anotherSchemaComposer, cloneMap);
        }
        return cloned;
      }
      merge(type) {
        let tc;
        if (type instanceof ObjectTypeComposer_1.ObjectTypeComposer || type instanceof InterfaceTypeComposer) {
          tc = type;
        } else if (type instanceof graphql_1.GraphQLObjectType) {
          tc = ObjectTypeComposer_1.ObjectTypeComposer.createTemp(type, this.schemaComposer);
        } else if (type instanceof graphql_1.GraphQLInterfaceType) {
          tc = InterfaceTypeComposer.createTemp(type, this.schemaComposer);
        } else {
          throw new Error(`Cannot merge ${(0, misc_1.inspect)(type)} with InterfaceType(${this.getTypeName()}). Provided type should be GraphQLInterfaceType, GraphQLObjectType, InterfaceTypeComposer or ObjectTypeComposer.`);
        }
        const fields = Object.assign({}, tc.getFields());
        Object.keys(fields).forEach((fieldName) => {
          fields[fieldName] = Object.assign(Object.assign({}, fields[fieldName]), { args: Object.assign({}, fields[fieldName].args), type: tc.getFieldTypeName(fieldName) });
          tc.getFieldArgNames(fieldName).forEach((argName) => {
            fields[fieldName].args[argName] = Object.assign(Object.assign({}, fields[fieldName].args[argName]), { type: tc.getFieldArgTypeName(fieldName, argName) });
          });
        });
        this.addFields(fields);
        this.addInterfaces(tc.getInterfaces().map((i2) => i2.getTypeName()));
        return this;
      }
      getInputType() {
        return this.getInputTypeComposer().getType();
      }
      hasInputTypeComposer() {
        return !!this._gqcInputTypeComposer;
      }
      setInputTypeComposer(itc) {
        this._gqcInputTypeComposer = itc;
        return this;
      }
      getInputTypeComposer(opts) {
        if (!this._gqcInputTypeComposer) {
          this._gqcInputTypeComposer = (0, toInputType_1.toInputObjectType)(this, opts);
        }
        return this._gqcInputTypeComposer;
      }
      getITC(opts) {
        return this.getInputTypeComposer(opts);
      }
      removeInputTypeComposer() {
        this._gqcInputTypeComposer = void 0;
        return this;
      }
      getResolveType() {
        return this._gqType.resolveType;
      }
      setResolveType(fn) {
        this._gqType.resolveType = fn;
        this._gqcIsModified = true;
        return this;
      }
      hasTypeResolver(type) {
        const typeResolversMap = this.getTypeResolvers();
        return typeResolversMap.has(type);
      }
      getTypeResolvers() {
        if (!this._gqcTypeResolvers) {
          this._gqcTypeResolvers = /* @__PURE__ */ new Map();
        }
        return this._gqcTypeResolvers;
      }
      getTypeResolverCheckFn(type) {
        const typeResolversMap = this.getTypeResolvers();
        if (!typeResolversMap.has(type)) {
          throw new Error(`Type resolve function in interface '${this.getTypeName()}' is not defined for type ${(0, misc_1.inspect)(type)}.`);
        }
        return typeResolversMap.get(type);
      }
      getTypeResolverNames() {
        const typeResolversMap = this.getTypeResolvers();
        const names = [];
        typeResolversMap.forEach((_, composeType) => {
          if (composeType instanceof ObjectTypeComposer_1.ObjectTypeComposer) {
            names.push(composeType.getTypeName());
          } else if (composeType && composeType.name) {
            names.push(composeType.name);
          }
        });
        return names;
      }
      getTypeResolverTypes() {
        const typeResolversMap = this.getTypeResolvers();
        const types3 = [];
        typeResolversMap.forEach((_, composeType) => {
          types3.push((0, typeHelpers_1.getGraphQLType)(composeType));
        });
        return types3;
      }
      setTypeResolvers(typeResolversMap) {
        this._isTypeResolversValid(typeResolversMap);
        this._gqcTypeResolvers = typeResolversMap;
        this._initResolveTypeFn();
        return this;
      }
      _initResolveTypeFn() {
        const typeResolversMap = this._gqcTypeResolvers || /* @__PURE__ */ new Map();
        const fallbackType = this._gqcFallbackResolveType ? (0, typeHelpers_1.getGraphQLType)(this._gqcFallbackResolveType) : null;
        const fastEntries = [];
        if (graphqlVersion_1.graphqlVersion >= 16) {
          for (const [composeType, checkFn] of typeResolversMap.entries()) {
            fastEntries.push([(0, typeHelpers_1.getComposeTypeName)(composeType, this.schemaComposer), checkFn]);
          }
        } else {
          for (const [composeType, checkFn] of typeResolversMap.entries()) {
            fastEntries.push([(0, typeHelpers_1.getGraphQLType)(composeType), checkFn]);
          }
        }
        let resolveType;
        const isAsyncRuntime = this._isTypeResolversAsync(typeResolversMap);
        if (isAsyncRuntime) {
          resolveType = (value, context, info) => __awaiter(this, void 0, void 0, function* () {
            for (const [_gqType, checkFn] of fastEntries) {
              if (yield checkFn(value, context, info))
                return _gqType;
            }
            return fallbackType;
          });
        } else {
          resolveType = (value, context, info) => {
            for (const [_gqType, checkFn] of fastEntries) {
              if (checkFn(value, context, info))
                return _gqType;
            }
            return fallbackType;
          };
        }
        this.setResolveType(resolveType);
        return this;
      }
      _isTypeResolversValid(typeResolversMap) {
        if (!(typeResolversMap instanceof Map)) {
          throw new Error(`For interface ${this.getTypeName()} you should provide Map object for type resolvers.`);
        }
        for (const [composeType, checkFn] of typeResolversMap.entries()) {
          this._isTypeResolverValid(composeType, checkFn);
        }
        return true;
      }
      _isTypeResolverValid(composeType, checkFn) {
        try {
          const type = (0, typeHelpers_1.getGraphQLType)(composeType);
          if (!(type instanceof graphql_1.GraphQLObjectType))
            throw new Error("Must be GraphQLObjectType");
        } catch (e2) {
          throw new Error(`For interface type resolver ${this.getTypeName()} you must provide GraphQLObjectType or ObjectTypeComposer, but provided ${(0, misc_1.inspect)(composeType)}`);
        }
        if (!(0, is_1.isFunction)(checkFn)) {
          throw new Error(`Interface ${this.getTypeName()} has invalid check function for type ${(0, misc_1.inspect)(composeType)}`);
        }
        return true;
      }
      _isTypeResolversAsync(typeResolversMap) {
        let res = false;
        for (const [, checkFn] of typeResolversMap.entries()) {
          try {
            const r2 = checkFn({}, {}, {});
            if (r2 instanceof Promise) {
              r2.catch(() => {
              });
              res = true;
            }
          } catch (e2) {
          }
        }
        return res;
      }
      addTypeResolver(type, checkFn) {
        const typeResolversMap = this.getTypeResolvers();
        this._isTypeResolverValid(type, checkFn);
        typeResolversMap.set(type, checkFn);
        this._initResolveTypeFn();
        if (type instanceof ObjectTypeComposer_1.ObjectTypeComposer) {
          type.addInterface(this);
        }
        this.schemaComposer.addSchemaMustHaveType(type);
        return this;
      }
      removeTypeResolver(type) {
        const typeResolversMap = this.getTypeResolvers();
        typeResolversMap.delete(type);
        this._initResolveTypeFn();
        return this;
      }
      setTypeResolverFallback(type) {
        if (type) {
          if (type instanceof ObjectTypeComposer_1.ObjectTypeComposer) {
            type.addInterface(this);
          }
          this.schemaComposer.addSchemaMustHaveType(type);
        }
        this._gqcFallbackResolveType = type;
        this._initResolveTypeFn();
        return this;
      }
      getInterfaces() {
        return this._gqcInterfaces;
      }
      getInterfacesTypes() {
        return this._gqcInterfaces.map((i2) => i2.getType());
      }
      setInterfaces(interfaces) {
        this._gqcInterfaces = (0, configToDefine_1.convertInterfaceArrayAsThunk)(interfaces, this.schemaComposer);
        this._gqcIsModified = true;
        return this;
      }
      hasInterface(iface) {
        const typeName = (0, typeHelpers_1.getComposeTypeName)(iface, this.schemaComposer);
        return !!this._gqcInterfaces.find((i2) => i2.getTypeName() === typeName);
      }
      addInterface(iface) {
        if (!this.hasInterface(iface)) {
          this._gqcInterfaces.push(this.schemaComposer.typeMapper.convertInterfaceTypeDefinition(iface));
          this._gqcIsModified = true;
        }
        return this;
      }
      addInterfaces(ifaces) {
        if (!Array.isArray(ifaces)) {
          throw new Error(`InterfaceTypeComposer[${this.getTypeName()}].addInterfaces() accepts only array`);
        }
        ifaces.forEach((iface) => this.addInterface(iface));
        return this;
      }
      removeInterface(iface) {
        const typeName = (0, typeHelpers_1.getComposeTypeName)(iface, this.schemaComposer);
        this._gqcInterfaces = this._gqcInterfaces.filter((i2) => i2.getTypeName() !== typeName);
        this._gqcIsModified = true;
        return this;
      }
      getExtensions() {
        if (!this._gqcExtensions) {
          return {};
        } else {
          return this._gqcExtensions;
        }
      }
      setExtensions(extensions) {
        this._gqcExtensions = extensions;
        this._gqcIsModified = true;
        return this;
      }
      extendExtensions(extensions) {
        const current = this.getExtensions();
        this.setExtensions(Object.assign(Object.assign({}, current), extensions));
        return this;
      }
      clearExtensions() {
        this.setExtensions({});
        return this;
      }
      getExtension(extensionName) {
        const extensions = this.getExtensions();
        return extensions[extensionName];
      }
      hasExtension(extensionName) {
        const extensions = this.getExtensions();
        return extensionName in extensions;
      }
      setExtension(extensionName, value) {
        this.extendExtensions({
          [extensionName]: value
        });
        return this;
      }
      removeExtension(extensionName) {
        const extensions = Object.assign({}, this.getExtensions());
        delete extensions[extensionName];
        this.setExtensions(extensions);
        return this;
      }
      getFieldExtensions(fieldName) {
        const field = this.getField(fieldName);
        return field.extensions || {};
      }
      setFieldExtensions(fieldName, extensions) {
        const field = this.getField(fieldName);
        this.setField(fieldName, Object.assign(Object.assign({}, field), { extensions }));
        return this;
      }
      extendFieldExtensions(fieldName, extensions) {
        const current = this.getFieldExtensions(fieldName);
        this.setFieldExtensions(fieldName, Object.assign(Object.assign({}, current), extensions));
        return this;
      }
      clearFieldExtensions(fieldName) {
        this.setFieldExtensions(fieldName, {});
        return this;
      }
      getFieldExtension(fieldName, extensionName) {
        const extensions = this.getFieldExtensions(fieldName);
        return extensions[extensionName];
      }
      hasFieldExtension(fieldName, extensionName) {
        const extensions = this.getFieldExtensions(fieldName);
        return extensionName in extensions;
      }
      setFieldExtension(fieldName, extensionName, value) {
        this.extendFieldExtensions(fieldName, {
          [extensionName]: value
        });
        return this;
      }
      removeFieldExtension(fieldName, extensionName) {
        const extensions = Object.assign({}, this.getFieldExtensions(fieldName));
        delete extensions[extensionName];
        this.setFieldExtensions(fieldName, extensions);
        return this;
      }
      getFieldArgExtensions(fieldName, argName) {
        const ac = this.getFieldArg(fieldName, argName);
        return ac.extensions || {};
      }
      setFieldArgExtensions(fieldName, argName, extensions) {
        const ac = this.getFieldArg(fieldName, argName);
        this.setFieldArg(fieldName, argName, Object.assign(Object.assign({}, ac), { extensions }));
        return this;
      }
      extendFieldArgExtensions(fieldName, argName, extensions) {
        const current = this.getFieldArgExtensions(fieldName, argName);
        this.setFieldArgExtensions(fieldName, argName, Object.assign(Object.assign({}, current), extensions));
        return this;
      }
      clearFieldArgExtensions(fieldName, argName) {
        this.setFieldArgExtensions(fieldName, argName, {});
        return this;
      }
      getFieldArgExtension(fieldName, argName, extensionName) {
        const extensions = this.getFieldArgExtensions(fieldName, argName);
        return extensions[extensionName];
      }
      hasFieldArgExtension(fieldName, argName, extensionName) {
        const extensions = this.getFieldArgExtensions(fieldName, argName);
        return extensionName in extensions;
      }
      setFieldArgExtension(fieldName, argName, extensionName, value) {
        this.extendFieldArgExtensions(fieldName, argName, {
          [extensionName]: value
        });
        return this;
      }
      removeFieldArgExtension(fieldName, argName, extensionName) {
        const extensions = Object.assign({}, this.getFieldArgExtensions(fieldName, argName));
        delete extensions[extensionName];
        this.setFieldArgExtensions(fieldName, argName, extensions);
        return this;
      }
      getDirectives() {
        return this._gqcDirectives || [];
      }
      setDirectives(directives) {
        this._gqcDirectives = directives;
        this._gqcIsModified = true;
        return this;
      }
      getDirectiveNames() {
        return this.getDirectives().map((d) => d.name);
      }
      getDirectiveByName(directiveName) {
        const directive = this.getDirectives().find((d) => d.name === directiveName);
        if (!directive)
          return void 0;
        return directive.args;
      }
      setDirectiveByName(directiveName, args) {
        const directives = this.getDirectives();
        const idx = directives.findIndex((d) => d.name === directiveName);
        if (idx >= 0) {
          directives[idx].args = args;
        } else {
          directives.push({ name: directiveName, args });
        }
        this.setDirectives(directives);
        return this;
      }
      getDirectiveById(idx) {
        const directive = this.getDirectives()[idx];
        if (!directive)
          return void 0;
        return directive.args;
      }
      getFieldDirectives(fieldName) {
        return this.getField(fieldName).directives || [];
      }
      setFieldDirectives(fieldName, directives) {
        const fc = this.getField(fieldName);
        fc.directives = directives;
        this._gqcIsModified = true;
        return this;
      }
      getFieldDirectiveNames(fieldName) {
        return this.getFieldDirectives(fieldName).map((d) => d.name);
      }
      getFieldDirectiveByName(fieldName, directiveName) {
        const directive = this.getFieldDirectives(fieldName).find((d) => d.name === directiveName);
        if (!directive)
          return void 0;
        return directive.args;
      }
      setFieldDirectiveByName(fieldName, directiveName, args) {
        const directives = this.getFieldDirectives(fieldName);
        const idx = directives.findIndex((d) => d.name === directiveName);
        if (idx >= 0) {
          directives[idx].args = args;
        } else {
          directives.push({ name: directiveName, args });
        }
        this.setFieldDirectives(fieldName, directives);
        return this;
      }
      getFieldDirectiveById(fieldName, idx) {
        const directive = this.getFieldDirectives(fieldName)[idx];
        if (!directive)
          return void 0;
        return directive.args;
      }
      getFieldArgDirectives(fieldName, argName) {
        return this.getFieldArg(fieldName, argName).directives || [];
      }
      setFieldArgDirectives(fieldName, argName, directives) {
        const ac = this.getFieldArg(fieldName, argName);
        ac.directives = directives;
        this._gqcIsModified = true;
        return this;
      }
      getFieldArgDirectiveNames(fieldName, argName) {
        return this.getFieldArgDirectives(fieldName, argName).map((d) => d.name);
      }
      getFieldArgDirectiveByName(fieldName, argName, directiveName) {
        const directive = this.getFieldArgDirectives(fieldName, argName).find((d) => d.name === directiveName);
        if (!directive)
          return void 0;
        return directive.args;
      }
      setFieldArgDirectiveByName(fieldName, argName, directiveName, args) {
        const directives = this.getFieldArgDirectives(fieldName, argName);
        const idx = directives.findIndex((d) => d.name === directiveName);
        if (idx >= 0) {
          directives[idx].args = args;
        } else {
          directives.push({ name: directiveName, args });
        }
        this.setFieldArgDirectives(fieldName, argName, directives);
        return this;
      }
      getFieldArgDirectiveById(fieldName, argName, idx) {
        const directive = this.getFieldArgDirectives(fieldName, argName)[idx];
        if (!directive)
          return void 0;
        return directive.args;
      }
      get(path) {
        return (0, typeByPath_1.typeByPath)(this, path);
      }
      getNestedTCs(opts = {}, passedTypes = /* @__PURE__ */ new Set()) {
        const exclude = Array.isArray(opts.exclude) ? opts.exclude : [];
        this.getFieldNames().forEach((fieldName) => {
          const tc = this.getFieldTC(fieldName);
          if (!passedTypes.has(tc) && !exclude.includes(tc.getTypeName())) {
            passedTypes.add(tc);
            if (tc instanceof ObjectTypeComposer_1.ObjectTypeComposer || tc instanceof UnionTypeComposer_1.UnionTypeComposer) {
              tc.getNestedTCs(opts, passedTypes);
            }
          }
          this.getFieldArgNames(fieldName).forEach((argName) => {
            const itc = this.getFieldArgTC(fieldName, argName);
            if (!passedTypes.has(itc) && !exclude.includes(itc.getTypeName())) {
              passedTypes.add(itc);
              if (itc instanceof InputTypeComposer_1.InputTypeComposer) {
                itc.getNestedTCs(opts, passedTypes);
              }
            }
          });
          this.getInterfaces().forEach((t2) => {
            const iftc = t2 instanceof ThunkComposer_1.ThunkComposer ? t2.ofType : t2;
            if (!passedTypes.has(iftc) && !exclude.includes(iftc.getTypeName())) {
              passedTypes.add(iftc);
              iftc.getNestedTCs(opts, passedTypes);
            }
          });
        });
        return passedTypes;
      }
      toSDL(opts) {
        const _a = opts || {}, { deep } = _a, innerOpts = __rest(_a, ["deep"]);
        innerOpts.sortTypes = innerOpts.sortTypes || false;
        const exclude = Array.isArray(innerOpts.exclude) ? innerOpts.exclude : [];
        if (deep) {
          let r2 = "";
          r2 += (0, schemaPrinter_1.printInterface)(this.getType(), innerOpts);
          const nestedTypes = Array.from(this.getNestedTCs({ exclude }));
          const sortMethod = (0, schemaPrinterSortTypes_1.getSortMethodFromOption)(innerOpts.sortAll || innerOpts.sortTypes);
          if (sortMethod) {
            nestedTypes.sort(sortMethod);
          }
          nestedTypes.forEach((t2) => {
            if (t2 !== this && !exclude.includes(t2.getTypeName())) {
              const sdl = t2.toSDL(innerOpts);
              if (sdl)
                r2 += `

${sdl}`;
            }
          });
          return r2;
        }
        return (0, schemaPrinter_1.printInterface)(this.getType(), innerOpts);
      }
    };
    exports.InterfaceTypeComposer = InterfaceTypeComposer;
  }
});

// node_modules/graphql-compose/lib/utils/typeByPath.js
var require_typeByPath = __commonJS({
  "node_modules/graphql-compose/lib/utils/typeByPath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.processType = exports.typeByPathIFTC = exports.typeByPathRSV = exports.typeByPathITC = exports.typeByPathTC = exports.typeByPath = void 0;
    var ObjectTypeComposer_1 = require_ObjectTypeComposer();
    var InputTypeComposer_1 = require_InputTypeComposer();
    var InterfaceTypeComposer_1 = require_InterfaceTypeComposer();
    var Resolver_1 = require_Resolver();
    var typeHelpers_1 = require_typeHelpers();
    function typeByPath(src, path) {
      const parts = Array.isArray(path) ? path : String(path).split(".");
      if (parts.length === 0) {
        return src;
      }
      if (src instanceof ObjectTypeComposer_1.ObjectTypeComposer) {
        return typeByPathTC(src, parts);
      } else if (src instanceof InputTypeComposer_1.InputTypeComposer) {
        return typeByPathITC(src, parts);
      } else if (src instanceof Resolver_1.Resolver) {
        return typeByPathRSV(src, parts);
      } else if (src instanceof InterfaceTypeComposer_1.InterfaceTypeComposer) {
        return typeByPathIFTC(src, parts);
      }
      return src;
    }
    exports.typeByPath = typeByPath;
    function typeByPathTC(tc, parts) {
      if (!tc)
        return void 0;
      if (parts.length === 0)
        return tc;
      const name = parts[0];
      if (!name)
        return void 0;
      const nextName = parts[1];
      if (name.startsWith("$")) {
        const restParts = parts.slice(1);
        const resolver = tc.getResolver(name.substring(1));
        if (resolver) {
          if (restParts.length > 0) {
            return typeByPathRSV(resolver, restParts);
          }
          return resolver;
        }
        return void 0;
      }
      if (nextName && nextName.startsWith("@")) {
        const argTC = tc.getFieldArg(name, nextName.substring(1)).type;
        return processType(argTC, parts.slice(2));
      }
      const fieldTC = tc.getField(name).type;
      return processType(fieldTC, parts.slice(1));
    }
    exports.typeByPathTC = typeByPathTC;
    function typeByPathITC(itc, parts) {
      if (!itc)
        return void 0;
      if (parts.length === 0)
        return itc;
      const fieldTC = itc.getField(parts[0]).type;
      return processType(fieldTC, parts.slice(1));
    }
    exports.typeByPathITC = typeByPathITC;
    function typeByPathRSV(rsv, parts) {
      if (!rsv)
        return void 0;
      if (parts.length === 0)
        return rsv;
      const name = parts[0];
      if (!name)
        return void 0;
      if (name.startsWith("@")) {
        const argName = name.substring(1);
        const arg = rsv.getArg(argName);
        if (!arg)
          return void 0;
        const argTC = rsv.getArg(argName).type;
        return processType(argTC, parts.slice(1));
      }
      return processType(rsv.type, parts);
    }
    exports.typeByPathRSV = typeByPathRSV;
    function typeByPathIFTC(tc, parts) {
      if (!tc)
        return void 0;
      if (parts.length === 0)
        return tc;
      const name = parts[0];
      if (!name)
        return void 0;
      const nextName = parts[1];
      if (name.startsWith("$")) {
        return void 0;
      }
      if (nextName && nextName.startsWith("@")) {
        const argTC = tc.getFieldArg(name, nextName.substring(1)).type;
        return processType(argTC, parts.slice(2));
      }
      const fieldTC = tc.getField(name).type;
      return processType(fieldTC, parts.slice(1));
    }
    exports.typeByPathIFTC = typeByPathIFTC;
    function processType(type, restParts) {
      if (!type)
        return void 0;
      const tc = (0, typeHelpers_1.unwrapTC)(type);
      if (tc instanceof ObjectTypeComposer_1.ObjectTypeComposer) {
        if (restParts.length > 0) {
          return typeByPathTC(tc, restParts);
        }
        return tc;
      } else if (tc instanceof InputTypeComposer_1.InputTypeComposer) {
        if (restParts.length > 0) {
          return typeByPathITC(tc, restParts);
        }
        return tc;
      } else if (tc instanceof InterfaceTypeComposer_1.InterfaceTypeComposer) {
        if (restParts.length > 0) {
          return typeByPathIFTC(tc, restParts);
        }
        return tc;
      }
      if (restParts.length > 0) {
        return void 0;
      }
      return tc;
    }
    exports.processType = processType;
  }
});

// node_modules/graphql-compose/lib/InputTypeComposer.js
var require_InputTypeComposer = __commonJS({
  "node_modules/graphql-compose/lib/InputTypeComposer.js"(exports) {
    "use strict";
    var __rest = exports && exports.__rest || function(s2, e2) {
      var t2 = {};
      for (var p in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p) && e2.indexOf(p) < 0)
          t2[p] = s2[p];
      if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i2 = 0, p = Object.getOwnPropertySymbols(s2); i2 < p.length; i2++) {
          if (e2.indexOf(p[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i2]))
            t2[p[i2]] = s2[p[i2]];
        }
      return t2;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InputTypeComposer = void 0;
    var graphql_1 = require_graphql3();
    var misc_1 = require_misc();
    var is_1 = require_is();
    var typeByPath_1 = require_typeByPath();
    var SchemaComposer_1 = require_SchemaComposer();
    var ListComposer_1 = require_ListComposer();
    var NonNullComposer_1 = require_NonNullComposer();
    var graphqlVersion_1 = require_graphqlVersion();
    var configToDefine_1 = require_configToDefine();
    var typeHelpers_1 = require_typeHelpers();
    var schemaPrinter_1 = require_schemaPrinter();
    var definitionNode_1 = require_definitionNode();
    var schemaPrinterSortTypes_1 = require_schemaPrinterSortTypes();
    var InputTypeComposer = class {
      constructor(graphqlType, schemaComposer2) {
        if (!(schemaComposer2 instanceof SchemaComposer_1.SchemaComposer)) {
          throw new Error("You must provide SchemaComposer instance as a second argument for `new InputTypeComposer(GraphQLInputType, SchemaComposer)`");
        }
        if (!(graphqlType instanceof graphql_1.GraphQLInputObjectType)) {
          throw new Error("InputTypeComposer accept only GraphQLInputObjectType in constructor");
        }
        this.schemaComposer = schemaComposer2;
        this._gqType = graphqlType;
        this.schemaComposer.set(graphqlType, this);
        this.schemaComposer.set(graphqlType.name, this);
        if (graphqlVersion_1.graphqlVersion >= 14) {
          this._gqcFields = (0, configToDefine_1.convertInputFieldMapToConfig)(this._gqType._fields, this.schemaComposer);
        } else {
          const fields = this._gqType._typeConfig.fields;
          this._gqcFields = this.schemaComposer.typeMapper.convertInputFieldConfigMap((0, misc_1.resolveMaybeThunk)(fields) || {}, this.getTypeName());
        }
        if (!this._gqType.astNode) {
          this._gqType.astNode = (0, definitionNode_1.getInputObjectTypeDefinitionNode)(this);
        }
        this._gqcIsModified = false;
      }
      static create(typeDef, schemaComposer2) {
        if (!(schemaComposer2 instanceof SchemaComposer_1.SchemaComposer)) {
          throw new Error("You must provide SchemaComposer instance as a second argument for `InputTypeComposer.create(typeDef, schemaComposer)`");
        }
        if (schemaComposer2.hasInstance(typeDef, InputTypeComposer)) {
          return schemaComposer2.getITC(typeDef);
        }
        const itc = this.createTemp(typeDef, schemaComposer2);
        schemaComposer2.add(itc);
        return itc;
      }
      static createTemp(typeDef, schemaComposer2) {
        const sc = schemaComposer2 || new SchemaComposer_1.SchemaComposer();
        let ITC;
        if ((0, is_1.isString)(typeDef)) {
          const typeName = typeDef;
          if ((0, typeHelpers_1.isTypeNameString)(typeName)) {
            ITC = new InputTypeComposer(new graphql_1.GraphQLInputObjectType({
              name: typeName,
              fields: () => ({})
            }), sc);
          } else {
            ITC = sc.typeMapper.convertSDLTypeDefinition(typeName);
            if (!(ITC instanceof InputTypeComposer)) {
              throw new Error("You should provide correct GraphQLInputObjectType type definition. Eg. `input MyInputType { name: String! }`");
            }
          }
        } else if (typeDef instanceof graphql_1.GraphQLInputObjectType) {
          ITC = new InputTypeComposer(typeDef, sc);
        } else if ((0, is_1.isObject)(typeDef)) {
          const type = new graphql_1.GraphQLInputObjectType({
            name: typeDef.name,
            description: typeDef.description,
            fields: () => ({})
          });
          ITC = new InputTypeComposer(type, sc);
          const fields = typeDef.fields;
          if ((0, is_1.isFunction)(fields)) {
            ITC.addFields((0, configToDefine_1.convertInputFieldMapToConfig)(fields, sc));
          }
          if ((0, is_1.isObject)(fields))
            ITC.addFields(fields);
          ITC.setExtensions(typeDef.extensions || void 0);
          if (Array.isArray(typeDef === null || typeDef === void 0 ? void 0 : typeDef.directives)) {
            ITC.setDirectives(typeDef.directives);
          }
        } else {
          throw new Error(`You should provide InputObjectConfig or string with type name to InputTypeComposer.create(typeDef). Provided:
${(0, misc_1.inspect)(typeDef)}`);
        }
        return ITC;
      }
      getFields() {
        return this._gqcFields;
      }
      getFieldNames() {
        return Object.keys(this._gqcFields);
      }
      hasField(fieldName) {
        return !!this._gqcFields[fieldName];
      }
      setFields(fields) {
        this._gqcFields = {};
        Object.keys(fields).forEach((name) => {
          this.setField(name, fields[name]);
        });
        return this;
      }
      setField(fieldName, fieldConfig) {
        this._gqcFields[fieldName] = (0, is_1.isFunction)(fieldConfig) ? fieldConfig : this.schemaComposer.typeMapper.convertInputFieldConfig(fieldConfig, fieldName, this.getTypeName());
        this._gqcIsModified = true;
        return this;
      }
      addFields(newFields) {
        Object.keys(newFields).forEach((name) => {
          this.setField(name, newFields[name]);
        });
        return this;
      }
      addNestedFields(newFields) {
        Object.keys(newFields).forEach((fieldName) => {
          const fc = newFields[fieldName];
          const names = fieldName.split(".");
          const name = names.shift();
          if (!name) {
            throw new Error(`Type ${this.getTypeName()} has invalid field name: ${fieldName}`);
          }
          if (names.length === 0) {
            this.setField(name, fc);
          } else {
            let childTC;
            if (!this.hasField(name)) {
              childTC = InputTypeComposer.create(`${this.getTypeName()}${(0, misc_1.upperFirst)(name)}`, this.schemaComposer);
              this.setField(name, childTC);
            } else {
              childTC = this.getFieldTC(name);
            }
            if (childTC instanceof InputTypeComposer) {
              childTC.addNestedFields({ [names.join(".")]: fc });
            }
          }
        });
        return this;
      }
      getField(fieldName) {
        if ((0, is_1.isFunction)(this._gqcFields[fieldName])) {
          const unwrappedFieldConfig = this._gqcFields[fieldName](this.schemaComposer);
          this.setField(fieldName, unwrappedFieldConfig);
        }
        const field = this._gqcFields[fieldName];
        if (!field) {
          throw new Error(`Cannot get field '${fieldName}' from input type '${this.getTypeName()}'. Field does not exist.`);
        }
        return field;
      }
      removeField(fieldNameOrArray) {
        const fieldNames = Array.isArray(fieldNameOrArray) ? fieldNameOrArray : [fieldNameOrArray];
        fieldNames.forEach((fieldName) => {
          const names = fieldName.split(".");
          const name = names.shift();
          if (!name)
            return;
          if (names.length === 0) {
            delete this._gqcFields[name];
            this._gqcIsModified = true;
          } else {
            if (this.hasField(name)) {
              const subTC = this.getFieldTC(name);
              if (subTC instanceof InputTypeComposer) {
                subTC.removeField(names.join("."));
              }
            }
          }
        });
        return this;
      }
      removeOtherFields(fieldNameOrArray) {
        const keepFieldNames = Array.isArray(fieldNameOrArray) ? fieldNameOrArray : [fieldNameOrArray];
        Object.keys(this._gqcFields).forEach((fieldName) => {
          if (keepFieldNames.indexOf(fieldName) === -1) {
            delete this._gqcFields[fieldName];
            this._gqcIsModified = true;
          }
        });
        return this;
      }
      extendField(fieldName, partialFieldConfig) {
        let prevFieldConfig;
        try {
          prevFieldConfig = this.getField(fieldName);
        } catch (e2) {
          throw new Error(`Cannot extend field '${fieldName}' from input type '${this.getTypeName()}'. Field does not exist.`);
        }
        this.setField(fieldName, Object.assign(Object.assign(Object.assign({}, prevFieldConfig), partialFieldConfig), { extensions: Object.assign(Object.assign({}, prevFieldConfig.extensions || {}), partialFieldConfig.extensions || {}), directives: [...prevFieldConfig.directives || [], ...partialFieldConfig.directives || []] }));
        return this;
      }
      reorderFields(names) {
        const orderedFields = {};
        const fields = this._gqcFields;
        names.forEach((name) => {
          if (fields[name]) {
            orderedFields[name] = fields[name];
            delete fields[name];
          }
        });
        this._gqcFields = Object.assign(Object.assign({}, orderedFields), fields);
        this._gqcIsModified = true;
        return this;
      }
      getFieldConfig(fieldName) {
        const _a = this.getField(fieldName), { type } = _a, rest = __rest(_a, ["type"]);
        return Object.assign({ type: type.getType() }, rest);
      }
      getFieldType(fieldName) {
        return this.getField(fieldName).type.getType();
      }
      getFieldTypeName(fieldName) {
        return this.getField(fieldName).type.getTypeName();
      }
      getFieldTC(fieldName) {
        const anyTC = this.getField(fieldName).type;
        return (0, typeHelpers_1.unwrapInputTC)(anyTC);
      }
      getFieldITC(fieldName) {
        const tc = this.getFieldTC(fieldName);
        if (!(tc instanceof InputTypeComposer)) {
          throw new Error(`${this.getTypeName()}.getFieldITC('${fieldName}') must be InputTypeComposer, but received ${tc.constructor.name}. Maybe you need to use 'getFieldTC()' method which returns any type composer?`);
        }
        return tc;
      }
      isRequired(fieldName) {
        return this.isFieldNonNull(fieldName);
      }
      isFieldNonNull(fieldName) {
        return this.getField(fieldName).type instanceof NonNullComposer_1.NonNullComposer;
      }
      makeFieldNonNull(fieldNameOrArray) {
        const fieldNames = Array.isArray(fieldNameOrArray) ? fieldNameOrArray : [fieldNameOrArray];
        fieldNames.forEach((fieldName) => {
          const fc = this._gqcFields[fieldName];
          if (fc && !(fc.type instanceof NonNullComposer_1.NonNullComposer)) {
            fc.type = new NonNullComposer_1.NonNullComposer(fc.type);
            this._gqcIsModified = true;
          }
        });
        return this;
      }
      makeRequired(fieldNameOrArray) {
        return this.makeFieldNonNull(fieldNameOrArray);
      }
      makeFieldNullable(fieldNameOrArray) {
        const fieldNames = Array.isArray(fieldNameOrArray) ? fieldNameOrArray : [fieldNameOrArray];
        fieldNames.forEach((fieldName) => {
          const fc = this._gqcFields[fieldName];
          if (fc && fc.type instanceof NonNullComposer_1.NonNullComposer) {
            fc.type = fc.type.ofType;
            this._gqcIsModified = true;
          }
        });
        return this;
      }
      makeOptional(fieldNameOrArray) {
        return this.makeFieldNullable(fieldNameOrArray);
      }
      isFieldPlural(fieldName) {
        const type = this.getField(fieldName).type;
        return type instanceof ListComposer_1.ListComposer || type instanceof NonNullComposer_1.NonNullComposer && type.ofType instanceof ListComposer_1.ListComposer;
      }
      makeFieldPlural(fieldNameOrArray) {
        const fieldNames = Array.isArray(fieldNameOrArray) ? fieldNameOrArray : [fieldNameOrArray];
        fieldNames.forEach((fieldName) => {
          const fc = this._gqcFields[fieldName];
          if (fc && !(fc.type instanceof ListComposer_1.ListComposer)) {
            fc.type = new ListComposer_1.ListComposer(fc.type);
            this._gqcIsModified = true;
          }
        });
        return this;
      }
      makeFieldNonPlural(fieldNameOrArray) {
        const fieldNames = Array.isArray(fieldNameOrArray) ? fieldNameOrArray : [fieldNameOrArray];
        fieldNames.forEach((fieldName) => {
          const fc = this._gqcFields[fieldName];
          if (fc) {
            if (fc.type instanceof ListComposer_1.ListComposer) {
              fc.type = fc.type.ofType;
              this._gqcIsModified = true;
            } else if (fc.type instanceof NonNullComposer_1.NonNullComposer && fc.type.ofType instanceof ListComposer_1.ListComposer) {
              fc.type = fc.type.ofType.ofType instanceof NonNullComposer_1.NonNullComposer ? fc.type.ofType.ofType : new NonNullComposer_1.NonNullComposer(fc.type.ofType.ofType);
              this._gqcIsModified = true;
            }
          }
        });
        return this;
      }
      getType() {
        if (this._gqcIsModified) {
          this._gqcIsModified = false;
          this._gqType.astNode = (0, definitionNode_1.getInputObjectTypeDefinitionNode)(this);
          if (graphqlVersion_1.graphqlVersion >= 14) {
            this._gqType._fields = () => {
              return (0, configToDefine_1.defineInputFieldMap)(this._gqType, (0, misc_1.mapEachKey)(this._gqcFields, (_, name) => this.getFieldConfig(name)), this._gqType.astNode);
            };
          } else {
            this._gqType._typeConfig.fields = () => {
              return (0, misc_1.mapEachKey)(this._gqcFields, (_, name) => this.getFieldConfig(name));
            };
            delete this._gqType._fields;
          }
        }
        return this._gqType;
      }
      getTypePlural() {
        return new ListComposer_1.ListComposer(this);
      }
      getTypeNonNull() {
        return new NonNullComposer_1.NonNullComposer(this);
      }
      get List() {
        return new ListComposer_1.ListComposer(this);
      }
      get NonNull() {
        return new NonNullComposer_1.NonNullComposer(this);
      }
      getTypeName() {
        return this._gqType.name;
      }
      setTypeName(name) {
        this._gqType.name = name;
        this._gqcIsModified = true;
        this.schemaComposer.set(name, this);
        return this;
      }
      getDescription() {
        return this._gqType.description || "";
      }
      setDescription(description) {
        this._gqType.description = description;
        this._gqcIsModified = true;
        return this;
      }
      clone(newTypeNameOrTC) {
        if (!newTypeNameOrTC) {
          throw new Error("You should provide new type name for clone() method");
        }
        const cloned = newTypeNameOrTC instanceof InputTypeComposer ? newTypeNameOrTC : InputTypeComposer.create(newTypeNameOrTC, this.schemaComposer);
        cloned._gqcFields = (0, misc_1.mapEachKey)(this._gqcFields, (fieldConfig) => Object.assign(Object.assign({}, fieldConfig), { extensions: Object.assign({}, fieldConfig.extensions), directives: fieldConfig.directives && [...fieldConfig.directives || []] }));
        cloned._gqcExtensions = Object.assign({}, this._gqcExtensions);
        cloned.setDescription(this.getDescription());
        cloned.setDirectives(this.getDirectives());
        return cloned;
      }
      cloneTo(anotherSchemaComposer, cloneMap = /* @__PURE__ */ new Map()) {
        if (!anotherSchemaComposer) {
          throw new Error("You should provide SchemaComposer for InputTypeComposer.cloneTo()");
        }
        if (cloneMap.has(this))
          return cloneMap.get(this);
        const cloned = InputTypeComposer.create(this.getTypeName(), anotherSchemaComposer);
        cloneMap.set(this, cloned);
        cloned._gqcFields = (0, misc_1.mapEachKey)(this._gqcFields, (fieldConfig) => Object.assign(Object.assign({}, fieldConfig), { type: (0, typeHelpers_1.cloneTypeTo)(fieldConfig.type, anotherSchemaComposer, cloneMap), extensions: Object.assign({}, fieldConfig.extensions) }));
        cloned._gqcExtensions = Object.assign({}, this._gqcExtensions);
        cloned.setDescription(this.getDescription());
        return cloned;
      }
      merge(type) {
        let tc;
        if (type instanceof graphql_1.GraphQLInputObjectType) {
          tc = InputTypeComposer.createTemp(type, this.schemaComposer);
        } else if (type instanceof InputTypeComposer) {
          tc = type;
        } else {
          throw new Error(`Cannot merge ${(0, misc_1.inspect)(type)} with InputObjectType(${this.getTypeName()}). Provided type should be GraphQLInputObjectType or InputTypeComposer.`);
        }
        const fields = Object.assign({}, tc.getFields());
        Object.keys(fields).forEach((fieldName) => {
          fields[fieldName] = Object.assign(Object.assign({}, fields[fieldName]), { type: tc.getFieldTypeName(fieldName) });
        });
        this.addFields(fields);
        return this;
      }
      getExtensions() {
        if (!this._gqcExtensions) {
          return {};
        } else {
          return this._gqcExtensions;
        }
      }
      setExtensions(extensions) {
        this._gqcExtensions = extensions || void 0;
        this._gqcIsModified = true;
        return this;
      }
      extendExtensions(extensions) {
        const current = this.getExtensions();
        this.setExtensions(Object.assign(Object.assign({}, current), extensions));
        return this;
      }
      clearExtensions() {
        this.setExtensions({});
        return this;
      }
      getExtension(extensionName) {
        const extensions = this.getExtensions();
        return extensions[extensionName];
      }
      hasExtension(extensionName) {
        const extensions = this.getExtensions();
        return extensionName in extensions;
      }
      setExtension(extensionName, value) {
        this.extendExtensions({
          [extensionName]: value
        });
        return this;
      }
      removeExtension(extensionName) {
        const extensions = Object.assign({}, this.getExtensions());
        delete extensions[extensionName];
        this.setExtensions(extensions);
        return this;
      }
      getFieldExtensions(fieldName) {
        const field = this.getField(fieldName);
        return field.extensions || {};
      }
      setFieldExtensions(fieldName, extensions) {
        const field = this.getField(fieldName);
        this.setField(fieldName, Object.assign(Object.assign({}, field), { extensions }));
        return this;
      }
      extendFieldExtensions(fieldName, extensions) {
        const current = this.getFieldExtensions(fieldName);
        this.setFieldExtensions(fieldName, Object.assign(Object.assign({}, current), extensions));
        return this;
      }
      clearFieldExtensions(fieldName) {
        this.setFieldExtensions(fieldName, {});
        return this;
      }
      getFieldExtension(fieldName, extensionName) {
        const extensions = this.getFieldExtensions(fieldName);
        return extensions[extensionName];
      }
      hasFieldExtension(fieldName, extensionName) {
        const extensions = this.getFieldExtensions(fieldName);
        return extensionName in extensions;
      }
      setFieldExtension(fieldName, extensionName, value) {
        this.extendFieldExtensions(fieldName, {
          [extensionName]: value
        });
        return this;
      }
      removeFieldExtension(fieldName, extensionName) {
        const extensions = Object.assign({}, this.getFieldExtensions(fieldName));
        delete extensions[extensionName];
        this.setFieldExtensions(fieldName, extensions);
        return this;
      }
      getDirectives() {
        return this._gqcDirectives || [];
      }
      setDirectives(directives) {
        this._gqcDirectives = directives;
        this._gqcIsModified = true;
        return this;
      }
      getDirectiveNames() {
        return this.getDirectives().map((d) => d.name);
      }
      getDirectiveByName(directiveName) {
        const directive = this.getDirectives().find((d) => d.name === directiveName);
        if (!directive)
          return void 0;
        return directive.args;
      }
      setDirectiveByName(directiveName, args) {
        const directives = this.getDirectives();
        const idx = directives.findIndex((d) => d.name === directiveName);
        if (idx >= 0) {
          directives[idx].args = args;
        } else {
          directives.push({ name: directiveName, args });
        }
        this.setDirectives(directives);
        return this;
      }
      getDirectiveById(idx) {
        const directive = this.getDirectives()[idx];
        if (!directive)
          return void 0;
        return directive.args;
      }
      getFieldDirectives(fieldName) {
        return this.getField(fieldName).directives || [];
      }
      setFieldDirectives(fieldName, directives) {
        const fc = this.getField(fieldName);
        fc.directives = directives;
        this._gqcIsModified = true;
        return this;
      }
      getFieldDirectiveNames(fieldName) {
        return this.getFieldDirectives(fieldName).map((d) => d.name);
      }
      getFieldDirectiveByName(fieldName, directiveName) {
        const directive = this.getFieldDirectives(fieldName).find((d) => d.name === directiveName);
        if (!directive)
          return void 0;
        return directive.args;
      }
      setFieldDirectiveByName(fieldName, directiveName, args) {
        const directives = this.getFieldDirectives(fieldName);
        const idx = directives.findIndex((d) => d.name === directiveName);
        if (idx >= 0) {
          directives[idx].args = args;
        } else {
          directives.push({ name: directiveName, args });
        }
        this.setFieldDirectives(fieldName, directives);
        return this;
      }
      getFieldDirectiveById(fieldName, idx) {
        const directive = this.getFieldDirectives(fieldName)[idx];
        if (!directive)
          return void 0;
        return directive.args;
      }
      get(path) {
        return (0, typeByPath_1.typeByPath)(this, path);
      }
      getNestedTCs(opts = {}, passedTypes = /* @__PURE__ */ new Set()) {
        const exclude = Array.isArray(opts.exclude) ? opts.exclude : [];
        this.getFieldNames().forEach((fieldName) => {
          const itc = this.getFieldTC(fieldName);
          if (!passedTypes.has(itc) && !exclude.includes(itc.getTypeName())) {
            passedTypes.add(itc);
            if (itc instanceof InputTypeComposer) {
              itc.getNestedTCs(opts, passedTypes);
            }
          }
        });
        return passedTypes;
      }
      toSDL(opts) {
        const _a = opts || {}, { deep } = _a, innerOpts = __rest(_a, ["deep"]);
        innerOpts.sortTypes = innerOpts.sortTypes || false;
        const exclude = Array.isArray(innerOpts.exclude) ? innerOpts.exclude : [];
        if (deep) {
          let r2 = "";
          r2 += (0, schemaPrinter_1.printInputObject)(this.getType(), innerOpts);
          const nestedTypes = Array.from(this.getNestedTCs({ exclude }));
          const sortMethod = (0, schemaPrinterSortTypes_1.getSortMethodFromOption)(innerOpts.sortAll || innerOpts.sortTypes);
          if (sortMethod) {
            nestedTypes.sort(sortMethod);
          }
          nestedTypes.forEach((t2) => {
            if (t2 !== this && !exclude.includes(t2.getTypeName())) {
              const sdl = t2.toSDL(innerOpts);
              if (sdl)
                r2 += `

${sdl}`;
            }
          });
          return r2;
        }
        return (0, schemaPrinter_1.printInputObject)(this.getType(), innerOpts);
      }
    };
    exports.InputTypeComposer = InputTypeComposer;
  }
});

// node_modules/graphql-compose/lib/utils/createThunkedObjectProxy.js
var require_createThunkedObjectProxy = __commonJS({
  "node_modules/graphql-compose/lib/utils/createThunkedObjectProxy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createThunkedObjectProxy = void 0;
    var is_1 = require_is();
    function createThunkedObjectProxy(thunk) {
      const data = {};
      let isResolved = false;
      const getFC = () => {
        if (!isResolved) {
          isResolved = true;
          const tmp = (0, is_1.isFunction)(thunk) ? thunk() : thunk;
          Object.keys(tmp).forEach((k) => {
            data[k] = tmp[k];
          });
        }
        return data;
      };
      const proxy = new Proxy(data, {
        get(_o, k) {
          return getFC()[k];
        },
        set(_o, k, v) {
          getFC()[k] = v;
          return true;
        },
        has(_o, k) {
          return k in getFC();
        },
        deleteProperty(_o, k) {
          delete getFC()[k];
          return true;
        },
        ownKeys() {
          return Reflect.ownKeys(getFC());
        },
        defineProperty(_o, k, d) {
          return Object.defineProperty(getFC(), k, d);
        },
        getOwnPropertyNames() {
          return Object.getOwnPropertyNames(getFC());
        },
        getOwnPropertyDescriptor(_o, k) {
          return Object.getOwnPropertyDescriptor(getFC(), k);
        }
      });
      return proxy;
    }
    exports.createThunkedObjectProxy = createThunkedObjectProxy;
  }
});

// node_modules/graphql-compose/lib/ObjectTypeComposer.js
var require_ObjectTypeComposer = __commonJS({
  "node_modules/graphql-compose/lib/ObjectTypeComposer.js"(exports) {
    "use strict";
    var __rest = exports && exports.__rest || function(s2, e2) {
      var t2 = {};
      for (var p in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p) && e2.indexOf(p) < 0)
          t2[p] = s2[p];
      if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i2 = 0, p = Object.getOwnPropertySymbols(s2); i2 < p.length; i2++) {
          if (e2.indexOf(p[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i2]))
            t2[p[i2]] = s2[p[i2]];
        }
      return t2;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ObjectTypeComposer = void 0;
    var graphql_1 = require_graphql3();
    var InputTypeComposer_1 = require_InputTypeComposer();
    var UnionTypeComposer_1 = require_UnionTypeComposer();
    var InterfaceTypeComposer_1 = require_InterfaceTypeComposer();
    var Resolver_1 = require_Resolver();
    var SchemaComposer_1 = require_SchemaComposer();
    var ListComposer_1 = require_ListComposer();
    var NonNullComposer_1 = require_NonNullComposer();
    var ThunkComposer_1 = require_ThunkComposer();
    var EnumTypeComposer_1 = require_EnumTypeComposer();
    var misc_1 = require_misc();
    var is_1 = require_is();
    var configToDefine_1 = require_configToDefine();
    var toInputType_1 = require_toInputType();
    var typeByPath_1 = require_typeByPath();
    var typeHelpers_1 = require_typeHelpers();
    var graphqlVersion_1 = require_graphqlVersion();
    var createThunkedObjectProxy_1 = require_createThunkedObjectProxy();
    var schemaPrinter_1 = require_schemaPrinter();
    var definitionNode_1 = require_definitionNode();
    var schemaPrinterSortTypes_1 = require_schemaPrinterSortTypes();
    var ObjectTypeComposer = class {
      constructor(graphqlType, schemaComposer2) {
        if (!(schemaComposer2 instanceof SchemaComposer_1.SchemaComposer)) {
          throw new Error("You must provide SchemaComposer instance as a second argument for `new ObjectTypeComposer(GraphQLObjectType, SchemaComposer)`");
        }
        if (!(graphqlType instanceof graphql_1.GraphQLObjectType)) {
          throw new Error("ObjectTypeComposer accept only GraphQLObjectType in constructor");
        }
        this.schemaComposer = schemaComposer2;
        this._gqType = graphqlType;
        this.schemaComposer.set(graphqlType, this);
        const typename = graphqlType.name;
        if (typename !== "Query" && typename !== "Mutation" && typename !== "Subscription") {
          this.schemaComposer.set(typename, this);
        }
        if (graphqlVersion_1.graphqlVersion >= 14) {
          this._gqcFields = (0, configToDefine_1.convertObjectFieldMapToConfig)(this._gqType._fields, this.schemaComposer);
          this._gqcInterfaces = (0, configToDefine_1.convertInterfaceArrayAsThunk)(this._gqType._interfaces, this.schemaComposer);
        } else {
          const fields = this._gqType._typeConfig.fields;
          this._gqcFields = this.schemaComposer.typeMapper.convertOutputFieldConfigMap((0, misc_1.resolveMaybeThunk)(fields) || {}, this.getTypeName());
          this._gqcInterfaces = (0, configToDefine_1.convertInterfaceArrayAsThunk)(this._gqType._interfaces || this._gqType._typeConfig.interfaces, this.schemaComposer);
        }
        if (!this._gqType.astNode) {
          this._gqType.astNode = (0, definitionNode_1.getObjectTypeDefinitionNode)(this);
        }
        this._gqcIsModified = false;
      }
      static create(typeDef, schemaComposer2) {
        if (!(schemaComposer2 instanceof SchemaComposer_1.SchemaComposer)) {
          throw new Error("You must provide SchemaComposer instance as a second argument for `ObjectTypeComposer.create(typeDef, schemaComposer)`");
        }
        if (schemaComposer2.hasInstance(typeDef, ObjectTypeComposer)) {
          return schemaComposer2.getOTC(typeDef);
        }
        const tc = this.createTemp(typeDef, schemaComposer2);
        const typeName = tc.getTypeName();
        if (typeName !== "Query" && typeName !== "Mutation" && typeName !== "Subscription") {
          schemaComposer2.add(tc);
        }
        return tc;
      }
      static createTemp(typeDef, schemaComposer2) {
        const sc = schemaComposer2 || new SchemaComposer_1.SchemaComposer();
        let TC;
        if ((0, is_1.isString)(typeDef)) {
          const typeName = typeDef;
          if ((0, typeHelpers_1.isTypeNameString)(typeName)) {
            TC = new ObjectTypeComposer(new graphql_1.GraphQLObjectType({
              name: typeName,
              fields: () => ({})
            }), sc);
          } else {
            TC = sc.typeMapper.convertSDLTypeDefinition(typeName);
            if (!(TC instanceof ObjectTypeComposer)) {
              throw new Error("You should provide correct GraphQLObjectType type definition. Eg. `type MyType { name: String }`");
            }
          }
        } else if (typeDef instanceof graphql_1.GraphQLObjectType) {
          TC = new ObjectTypeComposer(typeDef, sc);
        } else if (typeDef instanceof ObjectTypeComposer) {
          return typeDef;
        } else if ((0, is_1.isObject)(typeDef)) {
          const type = new graphql_1.GraphQLObjectType(Object.assign(Object.assign({}, typeDef), { fields: () => ({}) }));
          TC = new ObjectTypeComposer(type, sc);
          const fields = typeDef.fields;
          if ((0, is_1.isFunction)(fields)) {
            TC.addFields((0, configToDefine_1.convertObjectFieldMapToConfig)(fields, sc));
          } else if ((0, is_1.isObject)(fields)) {
            TC.addFields(fields);
          }
          const interfaces = typeDef.interfaces;
          if (Array.isArray(interfaces))
            TC.setInterfaces(interfaces);
          else if ((0, is_1.isFunction)(interfaces)) {
            TC.setInterfaces((0, configToDefine_1.convertInterfaceArrayAsThunk)(interfaces, sc));
          }
          TC.setExtensions(typeDef.extensions);
          if (Array.isArray(typeDef === null || typeDef === void 0 ? void 0 : typeDef.directives)) {
            TC.setDirectives(typeDef.directives);
          }
        } else {
          throw new Error(`You should provide GraphQLObjectTypeConfig or string with type name to ObjectTypeComposer.create(opts). Provided:
${(0, misc_1.inspect)(typeDef)}`);
        }
        return TC;
      }
      getFields() {
        return this._gqcFields;
      }
      getFieldNames() {
        return Object.keys(this._gqcFields);
      }
      getField(fieldName) {
        if ((0, is_1.isFunction)(this._gqcFields[fieldName])) {
          const unwrappedFieldConfig = this._gqcFields[fieldName](this.schemaComposer);
          this.setField(fieldName, unwrappedFieldConfig);
        }
        const field = this._gqcFields[fieldName];
        if (!field) {
          throw new Error(`Cannot get field '${fieldName}' from type '${this.getTypeName()}'. Field does not exist.`);
        }
        return field;
      }
      hasField(fieldName) {
        return !!this._gqcFields[fieldName];
      }
      setFields(fields) {
        this._gqcFields = {};
        Object.keys(fields).forEach((name) => {
          this.setField(name, fields[name]);
        });
        return this;
      }
      setField(fieldName, fieldConfig) {
        this._gqcFields[fieldName] = (0, is_1.isFunction)(fieldConfig) ? fieldConfig : this.schemaComposer.typeMapper.convertOutputFieldConfig(fieldConfig, fieldName, this.getTypeName());
        this._gqcIsModified = true;
        return this;
      }
      addFields(newFields) {
        Object.keys(newFields).forEach((name) => {
          this.setField(name, newFields[name]);
        });
        return this;
      }
      addNestedFields(newFields) {
        Object.keys(newFields).forEach((fieldName) => {
          const fc = newFields[fieldName];
          const names = fieldName.split(".");
          const name = names.shift();
          if (!name) {
            throw new Error(`Type ${this.getTypeName()} has invalid field name: ${fieldName}`);
          }
          if (names.length === 0) {
            this.setField(name, fc);
          } else {
            let childTC;
            if (!this.hasField(name)) {
              childTC = ObjectTypeComposer.create(`${this.getTypeName()}${(0, misc_1.upperFirst)(name)}`, this.schemaComposer);
              this.setField(name, {
                type: childTC,
                resolve: () => ({})
              });
            } else {
              childTC = this.getFieldTC(name);
            }
            if (childTC instanceof ObjectTypeComposer) {
              childTC.addNestedFields({ [names.join(".")]: fc });
            }
          }
        });
        return this;
      }
      removeField(fieldNameOrArray) {
        const fieldNames = Array.isArray(fieldNameOrArray) ? fieldNameOrArray : [fieldNameOrArray];
        fieldNames.forEach((fieldName) => {
          const names = fieldName.split(".");
          const name = names.shift();
          if (!name)
            return;
          if (names.length === 0) {
            delete this._gqcFields[name];
            this._gqcIsModified = true;
          } else {
            if (this.hasField(name)) {
              const subTC = this.getFieldTC(name);
              if (subTC instanceof ObjectTypeComposer || subTC instanceof EnumTypeComposer_1.EnumTypeComposer) {
                subTC.removeField(names.join("."));
              }
            }
          }
        });
        return this;
      }
      removeOtherFields(fieldNameOrArray) {
        const keepFieldNames = Array.isArray(fieldNameOrArray) ? fieldNameOrArray : [fieldNameOrArray];
        Object.keys(this._gqcFields).forEach((fieldName) => {
          if (keepFieldNames.indexOf(fieldName) === -1) {
            delete this._gqcFields[fieldName];
            this._gqcIsModified = true;
          }
        });
        return this;
      }
      reorderFields(names) {
        const orderedFields = {};
        const fields = this._gqcFields;
        names.forEach((name) => {
          if (fields[name]) {
            orderedFields[name] = fields[name];
            delete fields[name];
          }
        });
        this._gqcFields = Object.assign(Object.assign({}, orderedFields), fields);
        this._gqcIsModified = true;
        return this;
      }
      extendField(fieldName, partialFieldConfig) {
        let prevFieldConfig;
        try {
          prevFieldConfig = this.getField(fieldName);
        } catch (e2) {
          throw new Error(`Cannot extend field '${fieldName}' from type '${this.getTypeName()}'. Field does not exist.`);
        }
        this.setField(fieldName, Object.assign(Object.assign(Object.assign({}, prevFieldConfig), partialFieldConfig), { extensions: Object.assign(Object.assign({}, prevFieldConfig.extensions || {}), partialFieldConfig.extensions || {}), directives: [...prevFieldConfig.directives || [], ...partialFieldConfig.directives || []] }));
        return this;
      }
      getFieldConfig(fieldName) {
        const _a = this.getField(fieldName), { type, args } = _a, rest = __rest(_a, ["type", "args"]);
        return Object.assign({ type: type.getType(), args: args && (0, misc_1.mapEachKey)(args, (ac) => Object.assign(Object.assign({}, ac), { type: ac.type.getType() })) }, rest);
      }
      getFieldType(fieldName) {
        return this.getField(fieldName).type.getType();
      }
      getFieldTypeName(fieldName) {
        return this.getField(fieldName).type.getTypeName();
      }
      getFieldTC(fieldName) {
        const anyTC = this.getField(fieldName).type;
        return (0, typeHelpers_1.unwrapOutputTC)(anyTC);
      }
      getFieldOTC(fieldName) {
        const tc = this.getFieldTC(fieldName);
        if (!(tc instanceof ObjectTypeComposer)) {
          throw new Error(`${this.getTypeName()}.getFieldOTC('${fieldName}') must be ObjectTypeComposer, but received ${tc.constructor.name}. Maybe you need to use 'getFieldTC()' method which returns any type composer?`);
        }
        return tc;
      }
      isFieldNonNull(fieldName) {
        return this.getField(fieldName).type instanceof NonNullComposer_1.NonNullComposer;
      }
      makeFieldNonNull(fieldNameOrArray) {
        const fieldNames = Array.isArray(fieldNameOrArray) ? fieldNameOrArray : [fieldNameOrArray];
        fieldNames.forEach((fieldName) => {
          const fc = this._gqcFields[fieldName];
          if (fc && !(fc.type instanceof NonNullComposer_1.NonNullComposer)) {
            fc.type = new NonNullComposer_1.NonNullComposer(fc.type);
            this._gqcIsModified = true;
          }
        });
        return this;
      }
      makeFieldNullable(fieldNameOrArray) {
        const fieldNames = Array.isArray(fieldNameOrArray) ? fieldNameOrArray : [fieldNameOrArray];
        fieldNames.forEach((fieldName) => {
          const fc = this._gqcFields[fieldName];
          if (fc && fc.type instanceof NonNullComposer_1.NonNullComposer) {
            fc.type = fc.type.ofType;
            this._gqcIsModified = true;
          }
        });
        return this;
      }
      isFieldPlural(fieldName) {
        const type = this.getField(fieldName).type;
        return type instanceof ListComposer_1.ListComposer || type instanceof NonNullComposer_1.NonNullComposer && type.ofType instanceof ListComposer_1.ListComposer;
      }
      makeFieldPlural(fieldNameOrArray) {
        const fieldNames = Array.isArray(fieldNameOrArray) ? fieldNameOrArray : [fieldNameOrArray];
        fieldNames.forEach((fieldName) => {
          const fc = this._gqcFields[fieldName];
          if (fc && !(fc.type instanceof ListComposer_1.ListComposer)) {
            fc.type = new ListComposer_1.ListComposer(fc.type);
            this._gqcIsModified = true;
          }
        });
        return this;
      }
      makeFieldNonPlural(fieldNameOrArray) {
        const fieldNames = Array.isArray(fieldNameOrArray) ? fieldNameOrArray : [fieldNameOrArray];
        fieldNames.forEach((fieldName) => {
          const fc = this._gqcFields[fieldName];
          if (fc) {
            if (fc.type instanceof ListComposer_1.ListComposer) {
              fc.type = fc.type.ofType;
              this._gqcIsModified = true;
            } else if (fc.type instanceof NonNullComposer_1.NonNullComposer && fc.type.ofType instanceof ListComposer_1.ListComposer) {
              fc.type = fc.type.ofType.ofType instanceof NonNullComposer_1.NonNullComposer ? fc.type.ofType.ofType : new NonNullComposer_1.NonNullComposer(fc.type.ofType.ofType);
              this._gqcIsModified = true;
            }
          }
        });
        return this;
      }
      deprecateFields(fields) {
        const existedFieldNames = this.getFieldNames();
        if (typeof fields === "string") {
          if (existedFieldNames.indexOf(fields) === -1) {
            throw new Error(`Cannot deprecate non-existent field '${fields}' from type '${this.getTypeName()}'`);
          }
          this.extendField(fields, { deprecationReason: "deprecated" });
        } else if (Array.isArray(fields)) {
          fields.forEach((field) => {
            if (existedFieldNames.indexOf(field) === -1) {
              throw new Error(`Cannot deprecate non-existent field '${field}' from type '${this.getTypeName()}'`);
            }
            this.extendField(field, { deprecationReason: "deprecated" });
          });
        } else {
          const fieldMap = fields;
          Object.keys(fieldMap).forEach((field) => {
            if (existedFieldNames.indexOf(field) === -1) {
              throw new Error(`Cannot deprecate non-existent field '${field}' from type '${this.getTypeName()}'`);
            }
            const deprecationReason = fieldMap[field];
            this.extendField(field, { deprecationReason });
          });
        }
        return this;
      }
      getFieldArgs(fieldName) {
        try {
          const fc = this.getField(fieldName);
          return fc.args || {};
        } catch (e2) {
          throw new Error(`Cannot get args from '${this.getTypeName()}.${fieldName}'. Field does not exist.`);
        }
      }
      getFieldArgNames(fieldName) {
        return Object.keys(this.getFieldArgs(fieldName));
      }
      hasFieldArg(fieldName, argName) {
        try {
          const fieldArgs = this.getFieldArgs(fieldName);
          return !!fieldArgs[argName];
        } catch (e2) {
          return false;
        }
      }
      getFieldArg(fieldName, argName) {
        const fieldArgs = this.getFieldArgs(fieldName);
        const arg = fieldArgs[argName];
        if (!arg) {
          throw new Error(`Cannot get '${this.getTypeName()}.${fieldName}@${argName}'. Argument does not exist.`);
        }
        return arg;
      }
      getFieldArgType(fieldName, argName) {
        const ac = this.getFieldArg(fieldName, argName);
        return ac.type.getType();
      }
      getFieldArgTypeName(fieldName, argName) {
        const ac = this.getFieldArg(fieldName, argName);
        return ac.type.getTypeName();
      }
      getFieldArgTC(fieldName, argName) {
        const anyTC = this.getFieldArg(fieldName, argName).type;
        return (0, typeHelpers_1.unwrapInputTC)(anyTC);
      }
      getFieldArgITC(fieldName, argName) {
        const tc = this.getFieldArgTC(fieldName, argName);
        if (!(tc instanceof InputTypeComposer_1.InputTypeComposer)) {
          throw new Error(`${this.getTypeName()}.getFieldArgITC('${fieldName}', '${argName}') must be InputTypeComposer, but received ${tc.constructor.name}. Maybe you need to use 'getFieldArgTC()' method which returns any type composer?`);
        }
        return tc;
      }
      setFieldArgs(fieldName, args) {
        const fc = this.getField(fieldName);
        fc.args = this.schemaComposer.typeMapper.convertArgConfigMap(args, fieldName, this.getTypeName());
        this._gqcIsModified = true;
        return this;
      }
      addFieldArgs(fieldName, newArgs) {
        const fc = this.getField(fieldName);
        fc.args = Object.assign(Object.assign({}, fc.args), this.schemaComposer.typeMapper.convertArgConfigMap(newArgs, fieldName, this.getTypeName()));
        this._gqcIsModified = true;
        return this;
      }
      setFieldArg(fieldName, argName, argConfig) {
        const fc = this.getField(fieldName);
        fc.args = fc.args || {};
        fc.args[argName] = this.schemaComposer.typeMapper.convertArgConfig(argConfig, argName, fieldName, this.getTypeName());
        this._gqcIsModified = true;
        return this;
      }
      removeFieldArg(fieldName, argNameOrArray) {
        const argNames = Array.isArray(argNameOrArray) ? argNameOrArray : [argNameOrArray];
        const args = this._gqcFields[fieldName] && this._gqcFields[fieldName].args;
        if (args) {
          argNames.forEach((argName) => delete args[argName]);
          this._gqcIsModified = true;
        }
        return this;
      }
      removeFieldOtherArgs(fieldName, argNameOrArray) {
        const keepArgNames = Array.isArray(argNameOrArray) ? argNameOrArray : [argNameOrArray];
        const args = this._gqcFields[fieldName] && this._gqcFields[fieldName].args;
        if (args) {
          Object.keys(args).forEach((argName) => {
            if (keepArgNames.indexOf(argName) === -1) {
              delete args[argName];
              this._gqcIsModified = true;
            }
          });
        }
        return this;
      }
      isFieldArgPlural(fieldName, argName) {
        const type = this.getFieldArg(fieldName, argName).type;
        return type instanceof ListComposer_1.ListComposer || type instanceof NonNullComposer_1.NonNullComposer && type.ofType instanceof ListComposer_1.ListComposer;
      }
      makeFieldArgPlural(fieldName, argNameOrArray) {
        const args = this.getField(fieldName).args;
        if (!args)
          return this;
        const argNames = Array.isArray(argNameOrArray) ? argNameOrArray : [argNameOrArray];
        argNames.forEach((argName) => {
          const ac = args[argName];
          if (ac && !(ac.type instanceof ListComposer_1.ListComposer)) {
            ac.type = new ListComposer_1.ListComposer(ac.type);
            this._gqcIsModified = true;
          }
        });
        return this;
      }
      makeFieldArgNonPlural(fieldName, argNameOrArray) {
        const args = this.getField(fieldName).args;
        if (!args)
          return this;
        const argNames = Array.isArray(argNameOrArray) ? argNameOrArray : [argNameOrArray];
        argNames.forEach((argName) => {
          const ac = args[argName];
          if (ac) {
            if (ac.type instanceof ListComposer_1.ListComposer) {
              ac.type = ac.type.ofType;
              this._gqcIsModified = true;
            } else if (ac.type instanceof NonNullComposer_1.NonNullComposer && ac.type.ofType instanceof ListComposer_1.ListComposer) {
              ac.type = ac.type.ofType.ofType instanceof NonNullComposer_1.NonNullComposer ? ac.type.ofType.ofType : new NonNullComposer_1.NonNullComposer(ac.type.ofType.ofType);
              this._gqcIsModified = true;
            }
          }
        });
        return this;
      }
      isFieldArgNonNull(fieldName, argName) {
        const type = this.getFieldArg(fieldName, argName).type;
        return type instanceof NonNullComposer_1.NonNullComposer;
      }
      makeFieldArgNonNull(fieldName, argNameOrArray) {
        const args = this.getField(fieldName).args;
        if (!args)
          return this;
        const argNames = Array.isArray(argNameOrArray) ? argNameOrArray : [argNameOrArray];
        argNames.forEach((argName) => {
          const ac = args[argName];
          if (ac && !(ac.type instanceof NonNullComposer_1.NonNullComposer)) {
            ac.type = new NonNullComposer_1.NonNullComposer(ac.type);
            this._gqcIsModified = true;
          }
        });
        return this;
      }
      makeFieldArgNullable(fieldName, argNameOrArray) {
        const args = this.getField(fieldName).args;
        if (!args)
          return this;
        const argNames = Array.isArray(argNameOrArray) ? argNameOrArray : [argNameOrArray];
        argNames.forEach((argName) => {
          const ac = args[argName];
          if (ac && ac.type instanceof NonNullComposer_1.NonNullComposer) {
            ac.type = ac.type.ofType;
            this._gqcIsModified = true;
          }
        });
        return this;
      }
      getType() {
        if (this._gqcIsModified) {
          this._gqcIsModified = false;
          this._gqType.astNode = (0, definitionNode_1.getObjectTypeDefinitionNode)(this);
          if (graphqlVersion_1.graphqlVersion >= 14) {
            this._gqType._fields = () => (0, configToDefine_1.defineFieldMap)(this._gqType, (0, misc_1.mapEachKey)(this._gqcFields, (_, name) => this.getFieldConfig(name)), this._gqType.astNode);
            this._gqType._interfaces = () => this.getInterfacesTypes();
          } else {
            this._gqType._typeConfig.fields = () => {
              return (0, misc_1.mapEachKey)(this._gqcFields, (_, name) => this.getFieldConfig(name));
            };
            this._gqType._typeConfig.interfaces = () => this.getInterfacesTypes();
            delete this._gqType._fields;
            delete this._gqType._interfaces;
          }
        }
        return this._gqType;
      }
      getTypePlural() {
        return new ListComposer_1.ListComposer(this);
      }
      getTypeNonNull() {
        return new NonNullComposer_1.NonNullComposer(this);
      }
      get List() {
        return new ListComposer_1.ListComposer(this);
      }
      get NonNull() {
        return new NonNullComposer_1.NonNullComposer(this);
      }
      getTypeName() {
        return this._gqType.name;
      }
      setTypeName(name) {
        this._gqType.name = name;
        this._gqcIsModified = true;
        this.schemaComposer.add(this);
        return this;
      }
      getDescription() {
        return this._gqType.description || "";
      }
      setDescription(description) {
        this._gqType.description = description;
        this._gqcIsModified = true;
        return this;
      }
      clone(newTypeNameOrTC) {
        if (!newTypeNameOrTC) {
          throw new Error("You should provide newTypeName:string for ObjectTypeComposer.clone()");
        }
        const cloned = newTypeNameOrTC instanceof ObjectTypeComposer ? newTypeNameOrTC : ObjectTypeComposer.create(newTypeNameOrTC, this.schemaComposer);
        cloned._gqcFields = (0, misc_1.mapEachKey)(this._gqcFields, (fieldConfig) => Object.assign(Object.assign({}, fieldConfig), { args: (0, misc_1.mapEachKey)(fieldConfig.args || {}, (argConfig) => Object.assign(Object.assign({}, argConfig), { extensions: Object.assign({}, argConfig.extensions), directives: [...argConfig.directives || []] })), extensions: Object.assign({}, fieldConfig.extensions), directives: [...fieldConfig.directives || []] }));
        cloned._gqcInterfaces = [...this._gqcInterfaces];
        cloned._gqcExtensions = Object.assign({}, this._gqcExtensions);
        cloned._gqcGetRecordIdFn = this._gqcGetRecordIdFn;
        cloned.setDescription(this.getDescription());
        cloned.setDirectives(this.getDirectives());
        this.getResolvers().forEach((resolver) => {
          const newResolver = resolver.clone();
          newResolver.type = (0, typeHelpers_1.replaceTC)(newResolver.type, (tc) => {
            return tc === this ? cloned : tc;
          });
          cloned.addResolver(newResolver);
        });
        return cloned;
      }
      cloneTo(anotherSchemaComposer, cloneMap = /* @__PURE__ */ new Map()) {
        if (!anotherSchemaComposer) {
          throw new Error("You should provide SchemaComposer for ObjectTypeComposer.cloneTo()");
        }
        if (cloneMap.has(this))
          return cloneMap.get(this);
        const cloned = ObjectTypeComposer.create(this.getTypeName(), anotherSchemaComposer);
        cloneMap.set(this, cloned);
        cloned._gqcFields = (0, misc_1.mapEachKey)(this._gqcFields, (fieldConfig) => Object.assign(Object.assign({}, fieldConfig), { type: (0, typeHelpers_1.cloneTypeTo)(fieldConfig.type, anotherSchemaComposer, cloneMap), args: (0, misc_1.mapEachKey)(fieldConfig.args, (argConfig) => Object.assign(Object.assign({}, argConfig), { type: (0, typeHelpers_1.cloneTypeTo)(argConfig.type, anotherSchemaComposer, cloneMap), extensions: Object.assign({}, argConfig.extensions), directives: [...argConfig.directives || []] })), extensions: Object.assign({}, fieldConfig.extensions), directives: [...fieldConfig.directives || []] }));
        cloned._gqcInterfaces = this._gqcInterfaces.map((i2) => i2.cloneTo(anotherSchemaComposer, cloneMap));
        cloned._gqcExtensions = Object.assign({}, this._gqcExtensions);
        cloned._gqcGetRecordIdFn = this._gqcGetRecordIdFn;
        cloned.setDescription(this.getDescription());
        cloned.setDirectives(this.getDirectives());
        this.getResolvers().forEach((resolver) => {
          const clonedResolver = resolver.cloneTo(anotherSchemaComposer, cloneMap);
          cloned.addResolver(clonedResolver);
        });
        return cloned;
      }
      getIsTypeOf() {
        return this._gqType.isTypeOf;
      }
      setIsTypeOf(fn) {
        this._gqType.isTypeOf = fn;
        this._gqcIsModified = true;
        return this;
      }
      merge(type) {
        let tc;
        if (type instanceof ObjectTypeComposer || type instanceof InterfaceTypeComposer_1.InterfaceTypeComposer) {
          tc = type;
        } else if (type instanceof graphql_1.GraphQLObjectType) {
          tc = ObjectTypeComposer.createTemp(type, this.schemaComposer);
        } else if (type instanceof graphql_1.GraphQLInterfaceType) {
          tc = InterfaceTypeComposer_1.InterfaceTypeComposer.createTemp(type, this.schemaComposer);
        } else {
          throw new Error(`Cannot merge ${(0, misc_1.inspect)(type)} with ObjectType(${this.getTypeName()}). Provided type should be GraphQLInterfaceType, GraphQLObjectType, InterfaceTypeComposer or ObjectTypeComposer.`);
        }
        const fields = Object.assign({}, tc.getFields());
        Object.keys(fields).forEach((fieldName) => {
          fields[fieldName] = Object.assign(Object.assign({}, fields[fieldName]), { args: Object.assign({}, fields[fieldName].args), type: tc.getFieldTypeName(fieldName) });
          tc.getFieldArgNames(fieldName).forEach((argName) => {
            fields[fieldName].args[argName] = Object.assign(Object.assign({}, fields[fieldName].args[argName]), { type: tc.getFieldArgTypeName(fieldName, argName) });
          });
        });
        this.addFields(fields);
        this.addInterfaces(tc.getInterfaces().map((i2) => i2.getTypeName()));
        return this;
      }
      getInputType() {
        return this.getInputTypeComposer().getType();
      }
      hasInputTypeComposer() {
        return !!this._gqcInputTypeComposer;
      }
      setInputTypeComposer(itc) {
        this._gqcInputTypeComposer = itc;
        return this;
      }
      getInputTypeComposer(opts) {
        if (!this._gqcInputTypeComposer) {
          this._gqcInputTypeComposer = (0, toInputType_1.toInputObjectType)(this, opts);
        }
        return this._gqcInputTypeComposer;
      }
      getITC(opts) {
        return this.getInputTypeComposer(opts);
      }
      removeInputTypeComposer() {
        this._gqcInputTypeComposer = void 0;
        return this;
      }
      getResolvers() {
        if (!this._gqcResolvers) {
          this._gqcResolvers = /* @__PURE__ */ new Map();
        }
        return this._gqcResolvers;
      }
      hasResolver(name) {
        if (!this._gqcResolvers) {
          return false;
        }
        return this._gqcResolvers.has(name);
      }
      getResolver(name, middlewares) {
        if (!this.hasResolver(name)) {
          throw new Error(`Type ${this.getTypeName()} does not have resolver with name '${name}'`);
        }
        const resolverMap = this._gqcResolvers;
        const resolver = resolverMap.get(name);
        if (Array.isArray(middlewares)) {
          return resolver.withMiddlewares(middlewares);
        }
        return resolver;
      }
      setResolver(name, resolver) {
        if (!this._gqcResolvers) {
          this._gqcResolvers = /* @__PURE__ */ new Map();
        }
        if (!(resolver instanceof Resolver_1.Resolver)) {
          throw new Error("setResolver() accept only Resolver instance");
        }
        this._gqcResolvers.set(name, resolver);
        resolver.setDisplayName(`${this.getTypeName()}.${resolver.name}`);
        return this;
      }
      addResolver(opts) {
        if (!opts) {
          throw new Error("addResolver called with empty Resolver");
        }
        let resolver;
        if (!(opts instanceof Resolver_1.Resolver)) {
          const resolverOpts = Object.assign({}, opts);
          if (!resolverOpts.hasOwnProperty("resolve")) {
            resolverOpts.resolve = () => ({});
          }
          resolver = new Resolver_1.Resolver(resolverOpts, this.schemaComposer);
        } else {
          resolver = opts;
        }
        if (!resolver.name) {
          throw new Error("resolver should have non-empty `name` property");
        }
        this.setResolver(resolver.name, resolver);
        return this;
      }
      removeResolver(resolverName) {
        if (resolverName) {
          this.getResolvers().delete(resolverName);
        }
        return this;
      }
      wrapResolver(resolverName, cbResolver) {
        const resolver = this.getResolver(resolverName);
        const newResolver = resolver.wrap(cbResolver);
        this.setResolver(resolverName, newResolver);
        return this;
      }
      wrapResolverAs(resolverName, fromResolverName, cbResolver) {
        const resolver = this.getResolver(fromResolverName);
        const newResolver = resolver.wrap(cbResolver);
        this.setResolver(resolverName, newResolver);
        return this;
      }
      wrapResolverResolve(resolverName, cbNextRp) {
        const resolver = this.getResolver(resolverName);
        this.setResolver(resolverName, resolver.wrapResolve(cbNextRp));
        return this;
      }
      getInterfaces() {
        return this._gqcInterfaces;
      }
      getInterfacesTypes() {
        return this._gqcInterfaces.map((i2) => i2.getType());
      }
      setInterfaces(interfaces) {
        this._gqcInterfaces = (0, configToDefine_1.convertInterfaceArrayAsThunk)(interfaces, this.schemaComposer);
        this._gqcIsModified = true;
        return this;
      }
      hasInterface(iface) {
        const typeName = (0, typeHelpers_1.getComposeTypeName)(iface, this.schemaComposer);
        return !!this._gqcInterfaces.find((i2) => i2.getTypeName() === typeName);
      }
      addInterface(iface) {
        if (!this.hasInterface(iface)) {
          this._gqcInterfaces.push(this.schemaComposer.typeMapper.convertInterfaceTypeDefinition(iface));
          this._gqcIsModified = true;
        }
        return this;
      }
      addInterfaces(ifaces) {
        if (!Array.isArray(ifaces)) {
          throw new Error(`ObjectTypeComposer[${this.getTypeName()}].addInterfaces() accepts only array`);
        }
        ifaces.forEach((iface) => this.addInterface(iface));
        return this;
      }
      removeInterface(iface) {
        const typeName = (0, typeHelpers_1.getComposeTypeName)(iface, this.schemaComposer);
        this._gqcInterfaces = this._gqcInterfaces.filter((i2) => i2.getTypeName() !== typeName);
        this._gqcIsModified = true;
        return this;
      }
      getExtensions() {
        if (!this._gqcExtensions) {
          return {};
        } else {
          return this._gqcExtensions;
        }
      }
      setExtensions(extensions) {
        this._gqcExtensions = extensions;
        this._gqcIsModified = true;
        return this;
      }
      extendExtensions(extensions) {
        const current = this.getExtensions();
        this.setExtensions(Object.assign(Object.assign({}, current), extensions));
        return this;
      }
      clearExtensions() {
        this.setExtensions({});
        return this;
      }
      getExtension(extensionName) {
        const extensions = this.getExtensions();
        return extensions[extensionName];
      }
      hasExtension(extensionName) {
        const extensions = this.getExtensions();
        return extensionName in extensions;
      }
      setExtension(extensionName, value) {
        this.extendExtensions({
          [extensionName]: value
        });
        return this;
      }
      removeExtension(extensionName) {
        const extensions = Object.assign({}, this.getExtensions());
        delete extensions[extensionName];
        this.setExtensions(extensions);
        return this;
      }
      getFieldExtensions(fieldName) {
        const field = this.getField(fieldName);
        return field.extensions || {};
      }
      setFieldExtensions(fieldName, extensions) {
        const field = this.getField(fieldName);
        this.setField(fieldName, Object.assign(Object.assign({}, field), { extensions }));
        return this;
      }
      extendFieldExtensions(fieldName, extensions) {
        const current = this.getFieldExtensions(fieldName);
        this.setFieldExtensions(fieldName, Object.assign(Object.assign({}, current), extensions));
        return this;
      }
      clearFieldExtensions(fieldName) {
        this.setFieldExtensions(fieldName, {});
        return this;
      }
      getFieldExtension(fieldName, extensionName) {
        const extensions = this.getFieldExtensions(fieldName);
        return extensions[extensionName];
      }
      hasFieldExtension(fieldName, extensionName) {
        const extensions = this.getFieldExtensions(fieldName);
        return extensionName in extensions;
      }
      setFieldExtension(fieldName, extensionName, value) {
        this.extendFieldExtensions(fieldName, {
          [extensionName]: value
        });
        return this;
      }
      removeFieldExtension(fieldName, extensionName) {
        const extensions = Object.assign({}, this.getFieldExtensions(fieldName));
        delete extensions[extensionName];
        this.setFieldExtensions(fieldName, extensions);
        return this;
      }
      getFieldArgExtensions(fieldName, argName) {
        const ac = this.getFieldArg(fieldName, argName);
        return ac.extensions || {};
      }
      setFieldArgExtensions(fieldName, argName, extensions) {
        const ac = this.getFieldArg(fieldName, argName);
        this.setFieldArg(fieldName, argName, Object.assign(Object.assign({}, ac), { extensions }));
        return this;
      }
      extendFieldArgExtensions(fieldName, argName, extensions) {
        const current = this.getFieldArgExtensions(fieldName, argName);
        this.setFieldArgExtensions(fieldName, argName, Object.assign(Object.assign({}, current), extensions));
        return this;
      }
      clearFieldArgExtensions(fieldName, argName) {
        this.setFieldArgExtensions(fieldName, argName, {});
        return this;
      }
      getFieldArgExtension(fieldName, argName, extensionName) {
        const extensions = this.getFieldArgExtensions(fieldName, argName);
        return extensions[extensionName];
      }
      hasFieldArgExtension(fieldName, argName, extensionName) {
        const extensions = this.getFieldArgExtensions(fieldName, argName);
        return extensionName in extensions;
      }
      setFieldArgExtension(fieldName, argName, extensionName, value) {
        this.extendFieldArgExtensions(fieldName, argName, {
          [extensionName]: value
        });
        return this;
      }
      removeFieldArgExtension(fieldName, argName, extensionName) {
        const extensions = Object.assign({}, this.getFieldArgExtensions(fieldName, argName));
        delete extensions[extensionName];
        this.setFieldArgExtensions(fieldName, argName, extensions);
        return this;
      }
      getDirectives() {
        return this._gqcDirectives || [];
      }
      setDirectives(directives) {
        this._gqcDirectives = directives;
        this._gqcIsModified = true;
        return this;
      }
      getDirectiveNames() {
        return this.getDirectives().map((d) => d.name);
      }
      getDirectiveByName(directiveName) {
        const directive = this.getDirectives().find((d) => d.name === directiveName);
        if (!directive)
          return void 0;
        return directive.args;
      }
      setDirectiveByName(directiveName, args) {
        const directives = this.getDirectives();
        const idx = directives.findIndex((d) => d.name === directiveName);
        if (idx >= 0) {
          directives[idx].args = args;
        } else {
          directives.push({ name: directiveName, args });
        }
        this.setDirectives(directives);
        return this;
      }
      getDirectiveById(idx) {
        const directive = this.getDirectives()[idx];
        if (!directive)
          return void 0;
        return directive.args;
      }
      getFieldDirectives(fieldName) {
        return this.getField(fieldName).directives || [];
      }
      setFieldDirectives(fieldName, directives) {
        const fc = this.getField(fieldName);
        fc.directives = directives;
        this._gqcIsModified = true;
        return this;
      }
      getFieldDirectiveNames(fieldName) {
        return this.getFieldDirectives(fieldName).map((d) => d.name);
      }
      getFieldDirectiveByName(fieldName, directiveName) {
        const directive = this.getFieldDirectives(fieldName).find((d) => d.name === directiveName);
        if (!directive)
          return void 0;
        return directive.args;
      }
      setFieldDirectiveByName(fieldName, directiveName, args) {
        const directives = this.getFieldDirectives(fieldName);
        const idx = directives.findIndex((d) => d.name === directiveName);
        if (idx >= 0) {
          directives[idx].args = args;
        } else {
          directives.push({ name: directiveName, args });
        }
        this.setFieldDirectives(fieldName, directives);
        return this;
      }
      getFieldDirectiveById(fieldName, idx) {
        const directive = this.getFieldDirectives(fieldName)[idx];
        if (!directive)
          return void 0;
        return directive.args;
      }
      getFieldArgDirectives(fieldName, argName) {
        return this.getFieldArg(fieldName, argName).directives || [];
      }
      setFieldArgDirectives(fieldName, argName, directives) {
        const ac = this.getFieldArg(fieldName, argName);
        ac.directives = directives;
        this._gqcIsModified = true;
        return this;
      }
      getFieldArgDirectiveNames(fieldName, argName) {
        return this.getFieldArgDirectives(fieldName, argName).map((d) => d.name);
      }
      getFieldArgDirectiveByName(fieldName, argName, directiveName) {
        const directive = this.getFieldArgDirectives(fieldName, argName).find((d) => d.name === directiveName);
        if (!directive)
          return void 0;
        return directive.args;
      }
      setFieldArgDirectiveByName(fieldName, argName, directiveName, args) {
        const directives = this.getFieldArgDirectives(fieldName, argName);
        const idx = directives.findIndex((d) => d.name === directiveName);
        if (idx >= 0) {
          directives[idx].args = args;
        } else {
          directives.push({ name: directiveName, args });
        }
        this.setFieldArgDirectives(fieldName, argName, directives);
        return this;
      }
      getFieldArgDirectiveById(fieldName, argName, idx) {
        const directive = this.getFieldArgDirectives(fieldName, argName)[idx];
        if (!directive)
          return void 0;
        return directive.args;
      }
      addRelation(fieldName, opts) {
        if (!this._gqcRelations) {
          this._gqcRelations = {};
        }
        this._gqcRelations[fieldName] = opts;
        this._gqcIsModified = true;
        if (opts.hasOwnProperty("resolver")) {
          if ((0, is_1.isFunction)(opts.resolver)) {
            this._gqcFields[fieldName] = (0, createThunkedObjectProxy_1.createThunkedObjectProxy)(() => this._relationWithResolverToFC(opts, fieldName));
          } else {
            this._gqcFields[fieldName] = this._relationWithResolverToFC(opts, fieldName);
          }
        } else if (opts.hasOwnProperty("type")) {
          const fc = opts;
          this.setField(fieldName, fc);
        }
        return this;
      }
      getRelations() {
        if (!this._gqcRelations) {
          this._gqcRelations = {};
        }
        return this._gqcRelations;
      }
      _relationWithResolverToFC(opts, fieldName = "") {
        const resolver = (0, is_1.isFunction)(opts.resolver) ? opts.resolver(this.schemaComposer) : opts.resolver;
        if (!(resolver instanceof Resolver_1.Resolver)) {
          throw new Error(`You should provide correct Resolver object for relation ${this.getTypeName()}.${fieldName}`);
        }
        if (opts.type) {
          throw new Error(`You can not use \`resolver\` and \`type\` properties simultaneously for relation ${this.getTypeName()}.${fieldName}`);
        }
        if (opts.resolve) {
          throw new Error(`You can not use \`resolver\` and \`resolve\` properties simultaneously for relation ${this.getTypeName()}.${fieldName}`);
        }
        const argsConfig = Object.assign({}, resolver.args);
        const argsProto = {};
        const argsRuntime = [];
        const optsArgs = opts.prepareArgs || {};
        Object.keys(optsArgs).forEach((argName) => {
          const argMapVal = optsArgs[argName];
          if (argMapVal !== void 0) {
            delete argsConfig[argName];
            if ((0, is_1.isFunction)(argMapVal)) {
              argsRuntime.push([argName, argMapVal]);
            } else if (argMapVal !== null) {
              argsProto[argName] = argMapVal;
            }
          }
        });
        const { catchErrors = true } = opts;
        const fieldConfig = resolver.getFieldConfig();
        const resolve = (source, args, context, info) => {
          const newArgs = Object.assign(Object.assign({}, args), argsProto);
          argsRuntime.forEach(([argName, argFn]) => {
            newArgs[argName] = argFn(source, args, context, info);
          });
          const payload = fieldConfig.resolve ? fieldConfig.resolve(source, newArgs, context, info) : null;
          return catchErrors ? Promise.resolve(payload).catch((e2) => {
            console.log(`GQC ERROR: relation for ${this.getTypeName()}.${fieldName} throws error:`);
            console.log(e2);
            return null;
          }) : payload;
        };
        return {
          type: resolver.type,
          description: opts.description || resolver.description,
          deprecationReason: opts.deprecationReason,
          args: argsConfig,
          resolve,
          projection: opts.projection,
          extensions: Object.assign(Object.assign({}, resolver.extensions), opts.extensions)
        };
      }
      setRecordIdFn(fn) {
        this._gqcGetRecordIdFn = fn;
        return this;
      }
      hasRecordIdFn() {
        return !!this._gqcGetRecordIdFn;
      }
      getRecordIdFn() {
        if (!this._gqcGetRecordIdFn) {
          throw new Error(`Type ${this.getTypeName()} does not have RecordIdFn`);
        }
        return this._gqcGetRecordIdFn;
      }
      getRecordId(source, args, context) {
        return this.getRecordIdFn()(source, args, context);
      }
      get(path) {
        return (0, typeByPath_1.typeByPath)(this, path);
      }
      getNestedTCs(opts = {}, passedTypes = /* @__PURE__ */ new Set()) {
        const exclude = Array.isArray(opts.exclude) ? opts.exclude : [];
        this.getFieldNames().forEach((fieldName) => {
          const tc = this.getFieldTC(fieldName);
          if (!passedTypes.has(tc) && !exclude.includes(tc.getTypeName())) {
            passedTypes.add(tc);
            if (tc instanceof ObjectTypeComposer || tc instanceof UnionTypeComposer_1.UnionTypeComposer) {
              tc.getNestedTCs(opts, passedTypes);
            }
          }
          this.getFieldArgNames(fieldName).forEach((argName) => {
            const itc = this.getFieldArgTC(fieldName, argName);
            if (!passedTypes.has(itc) && !exclude.includes(itc.getTypeName())) {
              passedTypes.add(itc);
              if (itc instanceof InputTypeComposer_1.InputTypeComposer) {
                itc.getNestedTCs(opts, passedTypes);
              }
            }
          });
        });
        this.getInterfaces().forEach((t2) => {
          const iftc = t2 instanceof ThunkComposer_1.ThunkComposer ? t2.ofType : t2;
          if (!passedTypes.has(iftc) && !exclude.includes(iftc.getTypeName())) {
            passedTypes.add(iftc);
            iftc.getNestedTCs(opts, passedTypes);
          }
        });
        return passedTypes;
      }
      toSDL(opts) {
        const _a = opts || {}, { deep } = _a, innerOpts = __rest(_a, ["deep"]);
        innerOpts.sortTypes = innerOpts.sortTypes || false;
        const exclude = Array.isArray(innerOpts.exclude) ? innerOpts.exclude : [];
        if (deep) {
          let r2 = "";
          r2 += (0, schemaPrinter_1.printObject)(this.getType(), innerOpts);
          const nestedTypes = Array.from(this.getNestedTCs({ exclude }));
          const sortMethod = (0, schemaPrinterSortTypes_1.getSortMethodFromOption)(innerOpts.sortAll || innerOpts.sortTypes);
          if (sortMethod) {
            nestedTypes.sort(sortMethod);
          }
          nestedTypes.forEach((t2) => {
            if (t2 !== this && !exclude.includes(t2.getTypeName())) {
              const sdl = t2.toSDL(innerOpts);
              if (sdl)
                r2 += `

${sdl}`;
            }
          });
          return r2;
        }
        return (0, schemaPrinter_1.printObject)(this.getType(), innerOpts);
      }
    };
    exports.ObjectTypeComposer = ObjectTypeComposer;
  }
});

// node_modules/graphql-compose/lib/TypeMapper.js
var require_TypeMapper = __commonJS({
  "node_modules/graphql-compose/lib/TypeMapper.js"(exports) {
    "use strict";
    var __rest = exports && exports.__rest || function(s2, e2) {
      var t2 = {};
      for (var p in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p) && e2.indexOf(p) < 0)
          t2[p] = s2[p];
      if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i2 = 0, p = Object.getOwnPropertySymbols(s2); i2 < p.length; i2++) {
          if (e2.indexOf(p[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i2]))
            t2[p[i2]] = s2[p[i2]];
        }
      return t2;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDescription = exports.TypeMapper = void 0;
    var parser_1 = require_parser();
    var language_1 = require_language();
    var misc_1 = require_misc();
    var values_1 = require_values();
    var deprecate_1 = __importDefault(require_deprecate());
    var misc_2 = require_misc();
    var graphql_1 = require_graphql3();
    var type_1 = require_type2();
    var ObjectTypeComposer_1 = require_ObjectTypeComposer();
    var InputTypeComposer_1 = require_InputTypeComposer();
    var ScalarTypeComposer_1 = require_ScalarTypeComposer();
    var EnumTypeComposer_1 = require_EnumTypeComposer();
    var InterfaceTypeComposer_1 = require_InterfaceTypeComposer();
    var UnionTypeComposer_1 = require_UnionTypeComposer();
    var ListComposer_1 = require_ListComposer();
    var NonNullComposer_1 = require_NonNullComposer();
    var ThunkComposer_1 = require_ThunkComposer();
    var Resolver_1 = require_Resolver();
    var TypeStorage_1 = require_TypeStorage();
    var is_1 = require_is();
    var typeHelpers_1 = require_typeHelpers();
    var definitionNode_1 = require_definitionNode();
    var blockString_1 = require_blockString();
    var TypeMapper = class {
      constructor(schemaComposer2) {
        if (!schemaComposer2) {
          throw new Error("TypeMapper must have SchemaComposer instance.");
        }
        this.schemaComposer = schemaComposer2;
      }
      static isOutputType(type) {
        (0, deprecate_1.default)("Use `import { isSomeOutputTypeComposer } from './utils/typeHelpers'` instead.");
        return (0, typeHelpers_1.isSomeOutputTypeComposer)(type);
      }
      static isInputType(type) {
        (0, deprecate_1.default)("Use `import { isSomeInputTypeComposer } from './utils/typeHelpers'` instead.");
        return (0, typeHelpers_1.isSomeInputTypeComposer)(type);
      }
      static isTypeNameString(str) {
        (0, deprecate_1.default)("Use `import { isTypeNameString } from './utils/typeHelpers'` instead.");
        return (0, typeHelpers_1.isTypeNameString)(str);
      }
      static isTypeDefinitionString(str) {
        (0, deprecate_1.default)("Use `import { isTypeDefinitionString } from './utils/typeHelpers'` instead.");
        return (0, typeHelpers_1.isTypeDefinitionString)(str);
      }
      static isOutputTypeDefinitionString(str) {
        (0, deprecate_1.default)("Use `import { isOutputTypeDefinitionString } from './utils/typeHelpers'` instead.");
        return (0, typeHelpers_1.isOutputTypeDefinitionString)(str);
      }
      static isInputTypeDefinitionString(str) {
        (0, deprecate_1.default)("Use `import { isInputTypeDefinitionString } from './utils/typeHelpers'` instead.");
        return (0, typeHelpers_1.isInputTypeDefinitionString)(str);
      }
      static isEnumTypeDefinitionString(str) {
        (0, deprecate_1.default)("Use `import { isEnumTypeDefinitionString } from './utils/typeHelpers'` instead.");
        return (0, typeHelpers_1.isEnumTypeDefinitionString)(str);
      }
      static isScalarTypeDefinitionString(str) {
        (0, deprecate_1.default)("Use `import { isScalarTypeDefinitionString } from './utils/typeHelpers'` instead.");
        return (0, typeHelpers_1.isScalarTypeDefinitionString)(str);
      }
      static isInterfaceTypeDefinitionString(str) {
        (0, deprecate_1.default)("Use `import { isInterfaceTypeDefinitionString } from './utils/typeHelpers'` instead.");
        return (0, typeHelpers_1.isInterfaceTypeDefinitionString)(str);
      }
      static isUnionTypeDefinitionString(str) {
        (0, deprecate_1.default)("Use `import { isUnionTypeDefinitionString } from './utils/typeHelpers'` instead.");
        return (0, typeHelpers_1.isUnionTypeDefinitionString)(str);
      }
      convertGraphQLTypeToComposer(type) {
        if (type instanceof graphql_1.GraphQLObjectType) {
          return ObjectTypeComposer_1.ObjectTypeComposer.create(type, this.schemaComposer);
        } else if (type instanceof graphql_1.GraphQLInputObjectType) {
          return InputTypeComposer_1.InputTypeComposer.create(type, this.schemaComposer);
        } else if (type instanceof graphql_1.GraphQLScalarType) {
          return ScalarTypeComposer_1.ScalarTypeComposer.create(type, this.schemaComposer);
        } else if (type instanceof graphql_1.GraphQLEnumType) {
          return EnumTypeComposer_1.EnumTypeComposer.create(type, this.schemaComposer);
        } else if (type instanceof graphql_1.GraphQLInterfaceType) {
          return InterfaceTypeComposer_1.InterfaceTypeComposer.create(type, this.schemaComposer);
        } else if (type instanceof graphql_1.GraphQLUnionType) {
          return UnionTypeComposer_1.UnionTypeComposer.create(type, this.schemaComposer);
        } else if (type instanceof graphql_1.GraphQLNonNull) {
          return new NonNullComposer_1.NonNullComposer(this.convertGraphQLTypeToComposer(type.ofType));
        } else if (type instanceof graphql_1.GraphQLList) {
          return new ListComposer_1.ListComposer(this.convertGraphQLTypeToComposer(type.ofType));
        }
        throw new Error(`Cannot convert to Composer the following value: ${(0, misc_2.inspect)(type)}`);
      }
      convertSDLWrappedTypeName(str) {
        const typeAST = (0, parser_1.parseType)(str);
        return this.typeFromAST(typeAST);
      }
      convertSDLTypeDefinition(str) {
        if (this.schemaComposer.has(str)) {
          return this.schemaComposer.getAnyTC(str);
        }
        const astDocument = (0, parser_1.parse)(str);
        if (!astDocument || astDocument.kind !== language_1.Kind.DOCUMENT) {
          throw new Error("You should provide correct type syntax. Eg. convertSDLTypeDefinition('type IntRange { min: Int, max: Int }')");
        }
        const types3 = this.parseTypes(astDocument);
        const type = types3[0];
        if (type) {
          this.schemaComposer.set(type.getTypeName(), type);
          this.schemaComposer.set(str, type);
          return type;
        }
        return void 0;
      }
      convertOutputTypeDefinition(typeDef, fieldName = "", typeName = "") {
        if (typeof typeDef === "string") {
          if ((0, typeHelpers_1.isInputTypeDefinitionString)(typeDef)) {
            throw new Error(`Should be OutputType, but got input type definition: ${(0, misc_2.inspect)(typeDef)}'`);
          }
          let tc;
          if (this.schemaComposer.has(typeDef)) {
            tc = this.schemaComposer.getAnyTC(typeDef);
          } else {
            tc = (0, typeHelpers_1.isTypeDefinitionString)(typeDef) ? this.convertSDLTypeDefinition(typeDef) : this.convertSDLWrappedTypeName(typeDef);
            if (!tc) {
              throw new Error(`Cannot convert to OutputType the following string: ${(0, misc_2.inspect)(typeDef)}`);
            }
          }
          if (!(0, typeHelpers_1.isSomeOutputTypeComposer)(tc)) {
            throw new Error(`Provided incorrect OutputType: ${(0, misc_2.inspect)(typeDef)}`);
          }
          return tc;
        } else if ((0, typeHelpers_1.isSomeOutputTypeComposer)(typeDef)) {
          return typeDef;
        } else if (Array.isArray(typeDef)) {
          if (typeDef.length !== 1) {
            throw new Error(`Array must have exact one output type definition, but has ${typeDef.length}: ${(0, misc_2.inspect)(typeDef)}`);
          }
          const tc = this.convertOutputTypeDefinition(typeDef[0], fieldName, typeName);
          if (!tc) {
            throw new Error(`Cannot construct TypeComposer from ${(0, misc_2.inspect)(typeDef)}`);
          }
          return new ListComposer_1.ListComposer(tc);
        } else if ((0, is_1.isFunction)(typeDef)) {
          return new ThunkComposer_1.ThunkComposer(() => {
            const def = typeDef(this.schemaComposer);
            const tc = this.convertOutputFieldConfig(def, fieldName, typeName).type;
            if (!(0, typeHelpers_1.isSomeOutputTypeComposer)(tc)) {
              throw new Error(`Provided incorrect OutputType: Function[${(0, misc_2.inspect)(def)}]`);
            }
            return tc;
          });
        } else if (typeDef instanceof Resolver_1.Resolver) {
          return typeDef.getTypeComposer();
        } else if (typeDef instanceof graphql_1.GraphQLList || typeDef instanceof graphql_1.GraphQLNonNull) {
          const type = this.convertGraphQLTypeToComposer(typeDef);
          if ((0, typeHelpers_1.isSomeOutputTypeComposer)(type)) {
            return type;
          } else {
            throw new Error(`Provided incorrect OutputType: ${(0, misc_2.inspect)(type)}`);
          }
        } else if (typeDef instanceof graphql_1.GraphQLObjectType || typeDef instanceof graphql_1.GraphQLEnumType || typeDef instanceof graphql_1.GraphQLInterfaceType || typeDef instanceof graphql_1.GraphQLUnionType || typeDef instanceof graphql_1.GraphQLScalarType) {
          return this.convertGraphQLTypeToComposer(typeDef);
        }
        if (typeDef instanceof InputTypeComposer_1.InputTypeComposer) {
          throw new Error(`Should be OutputType, but provided InputTypeComposer ${(0, misc_2.inspect)(typeDef)}`);
        }
        return void 0;
      }
      convertOutputFieldConfig(composeFC, fieldName = "", typeName = "") {
        var _a, _b, _c, _d, _e;
        try {
          if (!composeFC) {
            throw new Error(`You provide empty output field definition: ${(0, misc_2.inspect)(composeFC)}`);
          }
          if (composeFC instanceof Resolver_1.Resolver) {
            return {
              type: composeFC.type,
              args: composeFC.getArgs(),
              resolve: composeFC.getFieldResolver(),
              description: composeFC.getDescription(),
              extensions: composeFC.extensions,
              directives: composeFC.directives || [],
              projection: composeFC.projection
            };
          }
          const tcFromFC = this.convertOutputTypeDefinition(composeFC, fieldName, typeName);
          if (tcFromFC) {
            return { type: tcFromFC };
          }
          if ((0, is_1.isObject)(composeFC)) {
            const _f = composeFC, { type, args } = _f, rest = __rest(_f, ["type", "args"]);
            if (!type) {
              throw new Error(`Definition object should contain 'type' property: ${(0, misc_2.inspect)(composeFC)}`);
            }
            const tc = this.convertOutputTypeDefinition(type, fieldName, typeName);
            if (tc) {
              const fc = Object.assign({ type: tc, args: this.convertArgConfigMap(args || {}, fieldName, typeName) }, rest);
              const deprecatedDirectiveIdx = (_b = (_a = fc === null || fc === void 0 ? void 0 : fc.directives) === null || _a === void 0 ? void 0 : _a.findIndex((d) => d.name === "deprecated")) !== null && _b !== void 0 ? _b : -1;
              if (fc.deprecationReason) {
                if (!fc.directives)
                  fc.directives = [];
                if (deprecatedDirectiveIdx >= 0) {
                  fc.directives[deprecatedDirectiveIdx].args = { reason: fc.deprecationReason };
                } else {
                  fc.directives.push({ name: "deprecated", args: { reason: fc.deprecationReason } });
                }
              } else if (deprecatedDirectiveIdx >= 0) {
                fc.deprecationReason = (_e = (_d = (_c = fc === null || fc === void 0 ? void 0 : fc.directives) === null || _c === void 0 ? void 0 : _c[deprecatedDirectiveIdx]) === null || _d === void 0 ? void 0 : _d.args) === null || _e === void 0 ? void 0 : _e.reason;
              }
              return fc;
            }
          }
          throw new Error(`Cannot convert to OutputType the following value: ${(0, misc_2.inspect)(composeFC)}`);
        } catch (e2) {
          e2.message = `TypeError[${typeName}.${fieldName}]: ${e2.message}`;
          throw e2;
        }
      }
      convertOutputFieldConfigMap(composeFields, typeName = "") {
        const fields = {};
        Object.keys(composeFields).forEach((name) => {
          fields[name] = this.convertOutputFieldConfig(composeFields[name], name, typeName);
        });
        return fields;
      }
      convertArgConfig(composeAC, argName = "", fieldName = "", typeName = "") {
        var _a, _b, _c, _d, _e;
        try {
          if (!composeAC) {
            throw new Error(`You provide empty argument config ${(0, misc_2.inspect)(composeAC)}`);
          }
          const tcFromAC = this.convertInputTypeDefinition(composeAC);
          if (tcFromAC) {
            return { type: tcFromAC };
          }
          if ((0, is_1.isObject)(composeAC)) {
            const _f = composeAC, { type } = _f, rest = __rest(_f, ["type"]);
            if (!type) {
              throw new Error(`Definition object should contain 'type' property: ${(0, misc_2.inspect)(composeAC)}'`);
            }
            const tc = this.convertInputTypeDefinition(type);
            if (tc) {
              const ac = Object.assign({ type: tc }, rest);
              const deprecatedDirectiveIdx = (_b = (_a = ac === null || ac === void 0 ? void 0 : ac.directives) === null || _a === void 0 ? void 0 : _a.findIndex((d) => d.name === "deprecated")) !== null && _b !== void 0 ? _b : -1;
              if (ac.deprecationReason) {
                if (!ac.directives)
                  ac.directives = [];
                if (deprecatedDirectiveIdx >= 0) {
                  ac.directives[deprecatedDirectiveIdx].args = { reason: ac.deprecationReason };
                } else {
                  ac.directives.push({ name: "deprecated", args: { reason: ac.deprecationReason } });
                }
              } else if (deprecatedDirectiveIdx >= 0) {
                ac.deprecationReason = (_e = (_d = (_c = ac === null || ac === void 0 ? void 0 : ac.directives) === null || _c === void 0 ? void 0 : _c[deprecatedDirectiveIdx]) === null || _d === void 0 ? void 0 : _d.args) === null || _e === void 0 ? void 0 : _e.reason;
              }
              return ac;
            }
          }
          throw new Error(`Cannot convert to InputType the following value: ${(0, misc_2.inspect)(tcFromAC)}`);
        } catch (e2) {
          e2.message = `TypeError[${typeName}.${fieldName}.${argName}]: ${e2.message}`;
          throw e2;
        }
      }
      convertArgConfigMap(composeArgsConfigMap, fieldName = "", typeName = "") {
        const argsConfigMap = {};
        if (composeArgsConfigMap) {
          Object.keys(composeArgsConfigMap).forEach((argName) => {
            argsConfigMap[argName] = this.convertArgConfig(composeArgsConfigMap[argName], argName, fieldName, typeName);
          });
        }
        return argsConfigMap;
      }
      convertInputTypeDefinition(typeDef, fieldName = "", typeName = "") {
        if (typeof typeDef === "string") {
          if ((0, typeHelpers_1.isOutputTypeDefinitionString)(typeDef)) {
            throw new Error(`Should be InputType, but got output type definition: ${(0, misc_2.inspect)(typeDef)}`);
          }
          let tc;
          if (this.schemaComposer.has(typeDef)) {
            tc = this.schemaComposer.getAnyTC(typeDef);
          } else {
            tc = (0, typeHelpers_1.isTypeDefinitionString)(typeDef) ? this.convertSDLTypeDefinition(typeDef) : this.convertSDLWrappedTypeName(typeDef);
            if (!tc) {
              throw new Error(`Cannot convert to InputType the following string: ${(0, misc_2.inspect)(typeDef)}`);
            }
          }
          if (!(0, typeHelpers_1.isSomeInputTypeComposer)(tc)) {
            throw new Error(`Provided incorrect InputType: ${(0, misc_2.inspect)(typeDef)}`);
          }
          return tc;
        } else if ((0, typeHelpers_1.isSomeInputTypeComposer)(typeDef)) {
          return typeDef;
        } else if (Array.isArray(typeDef)) {
          if (typeDef.length !== 1) {
            throw new Error(`Array must have exact one input type definition, but has ${typeDef.length}: ${(0, misc_2.inspect)(typeDef)}`);
          }
          const tc = this.convertInputTypeDefinition(typeDef[0], fieldName, typeName);
          if (!tc) {
            throw new Error(`Cannot construct TypeComposer from ${(0, misc_2.inspect)(typeDef)}`);
          }
          return new ListComposer_1.ListComposer(tc);
        } else if ((0, is_1.isFunction)(typeDef)) {
          return new ThunkComposer_1.ThunkComposer(() => {
            const def = typeDef(this.schemaComposer);
            const tc = this.convertInputFieldConfig(def, fieldName, typeName).type;
            if (!(0, typeHelpers_1.isSomeInputTypeComposer)(tc)) {
              throw new Error(`Provided incorrect InputType: Function[${(0, misc_2.inspect)(def)}]`);
            }
            return tc;
          });
        } else if (typeDef instanceof graphql_1.GraphQLList || typeDef instanceof graphql_1.GraphQLNonNull) {
          const type = this.convertGraphQLTypeToComposer(typeDef);
          if ((0, typeHelpers_1.isSomeInputTypeComposer)(type)) {
            return type;
          } else {
            throw new Error(`Provided incorrect InputType: ${(0, misc_2.inspect)(type)}`);
          }
        } else if (typeDef instanceof graphql_1.GraphQLInputObjectType || typeDef instanceof graphql_1.GraphQLScalarType || typeDef instanceof graphql_1.GraphQLEnumType) {
          return this.convertGraphQLTypeToComposer(typeDef);
        }
        if (typeDef instanceof ObjectTypeComposer_1.ObjectTypeComposer) {
          throw new Error(`Should be InputType, but provided ObjectTypeComposer ${(0, misc_2.inspect)(typeDef)}`);
        }
        return void 0;
      }
      convertInputFieldConfig(composeIFC, fieldName = "", typeName = "") {
        var _a, _b, _c, _d, _e;
        try {
          if (!composeIFC) {
            throw new Error(`You provide empty input field definition: ${(0, misc_2.inspect)(composeIFC)}`);
          }
          const tcFromIFC = this.convertInputTypeDefinition(composeIFC, fieldName, typeName);
          if (tcFromIFC) {
            return { type: tcFromIFC };
          }
          if ((0, is_1.isObject)(composeIFC)) {
            const _f = composeIFC, { type } = _f, rest = __rest(_f, ["type"]);
            if (!type) {
              throw new Error(`Definition object should contain 'type' property: ${(0, misc_2.inspect)(composeIFC)}`);
            }
            const tc = this.convertInputTypeDefinition(type, fieldName, typeName);
            if (tc) {
              const fc = Object.assign({ type: tc }, rest);
              const deprecatedDirectiveIdx = (_b = (_a = fc === null || fc === void 0 ? void 0 : fc.directives) === null || _a === void 0 ? void 0 : _a.findIndex((d) => d.name === "deprecated")) !== null && _b !== void 0 ? _b : -1;
              if (fc.deprecationReason) {
                if (!fc.directives)
                  fc.directives = [];
                if (deprecatedDirectiveIdx >= 0) {
                  fc.directives[deprecatedDirectiveIdx].args = { reason: fc.deprecationReason };
                } else {
                  fc.directives.push({ name: "deprecated", args: { reason: fc.deprecationReason } });
                }
              } else if (deprecatedDirectiveIdx >= 0) {
                fc.deprecationReason = (_e = (_d = (_c = fc === null || fc === void 0 ? void 0 : fc.directives) === null || _c === void 0 ? void 0 : _c[deprecatedDirectiveIdx]) === null || _d === void 0 ? void 0 : _d.args) === null || _e === void 0 ? void 0 : _e.reason;
              }
              return fc;
            }
          }
          throw new Error(`Cannot convert to InputType the following value: ${(0, misc_2.inspect)(composeIFC)}`);
        } catch (e2) {
          e2.message = `TypeError[${typeName}.${fieldName}]: ${e2.message}`;
          throw e2;
        }
      }
      convertInputFieldConfigMap(composeFields, typeName = "") {
        const fields = {};
        Object.keys(composeFields).forEach((name) => {
          fields[name] = this.convertInputFieldConfig(composeFields[name], name, typeName);
        });
        return fields;
      }
      convertInterfaceTypeDefinition(typeDef) {
        if (this.schemaComposer.hasInstance(typeDef, InterfaceTypeComposer_1.InterfaceTypeComposer)) {
          return this.schemaComposer.getIFTC(typeDef);
        } else if (typeof typeDef === "string") {
          const tc = (0, typeHelpers_1.isInterfaceTypeDefinitionString)(typeDef) ? this.convertSDLTypeDefinition(typeDef) : this.convertSDLWrappedTypeName(typeDef);
          if (!(tc instanceof InterfaceTypeComposer_1.InterfaceTypeComposer) && !(tc instanceof ThunkComposer_1.ThunkComposer)) {
            throw new Error(`Cannot convert to InterfaceType the following definition: ${(0, misc_2.inspect)(typeDef)}`);
          }
          return tc;
        } else if (typeDef instanceof graphql_1.GraphQLInterfaceType) {
          return new InterfaceTypeComposer_1.InterfaceTypeComposer(typeDef, this.schemaComposer);
        } else if (typeDef instanceof InterfaceTypeComposer_1.InterfaceTypeComposer || typeDef instanceof ThunkComposer_1.ThunkComposer) {
          return typeDef;
        } else if ((0, is_1.isFunction)(typeDef)) {
          return new ThunkComposer_1.ThunkComposer(() => this.convertInterfaceTypeDefinition(typeDef(this.schemaComposer)));
        }
        throw new Error(`Cannot convert to InterfaceType the following definition: ${(0, misc_2.inspect)(typeDef)}`);
      }
      parseTypesFromString(str) {
        const source = new language_1.Source(str);
        source.name = "GraphQL SDL";
        const astDocument = (0, parser_1.parse)(source);
        if (!astDocument || astDocument.kind !== "Document") {
          throw new Error("You should provide correct SDL syntax.");
        }
        const types3 = this.parseTypes(astDocument);
        const typeStorage = new TypeStorage_1.TypeStorage();
        types3.forEach((type) => {
          typeStorage.set(type.getTypeName(), type);
        });
        return typeStorage;
      }
      parseTypes(astDocument) {
        const types3 = [];
        for (let i2 = 0; i2 < astDocument.definitions.length; i2++) {
          const def = astDocument.definitions[i2];
          const type = this.makeSchemaDef(def);
          if (type) {
            types3[i2] = type;
          }
        }
        return types3;
      }
      typeFromAST(typeNode) {
        if (typeNode.kind === language_1.Kind.LIST_TYPE) {
          return new ListComposer_1.ListComposer(this.typeFromAST(typeNode.type));
        } else if (typeNode.kind === language_1.Kind.NON_NULL_TYPE) {
          return new NonNullComposer_1.NonNullComposer(this.typeFromAST(typeNode.type));
        }
        (0, misc_1.invariant)(typeNode.kind === language_1.Kind.NAMED_TYPE, `Must be a named type for ${(0, misc_2.inspect)(typeNode)}.`);
        const typeName = typeNode.name.value;
        if (this.schemaComposer.has(typeName)) {
          return this.schemaComposer.get(typeName);
        }
        const st = this.getBuiltInType(typeName);
        if (st)
          return st;
        return new ThunkComposer_1.ThunkComposer(() => {
          return this.schemaComposer.get(typeName);
        }, typeName);
      }
      typeFromASTInput(typeNode) {
        const tc = this.typeFromAST(typeNode);
        if (!(0, typeHelpers_1.isSomeInputTypeComposer)(tc)) {
          throw new Error(`TypeAST should be for Input types. But received ${(0, misc_2.inspect)(typeNode)}`);
        }
        return tc;
      }
      typeFromASTOutput(typeNode) {
        const tc = this.typeFromAST(typeNode);
        if (!(0, typeHelpers_1.isSomeOutputTypeComposer)(tc)) {
          throw new Error(`TypeAST should be for Output types. But received ${(0, misc_2.inspect)(typeNode)}`);
        }
        return tc;
      }
      makeSchemaDef(def) {
        if (!def) {
          throw new Error("def must be defined");
        }
        switch (def.kind) {
          case language_1.Kind.OBJECT_TYPE_DEFINITION:
            return this.makeTypeDef(def);
          case language_1.Kind.INTERFACE_TYPE_DEFINITION:
            return this.makeInterfaceDef(def);
          case language_1.Kind.ENUM_TYPE_DEFINITION:
            return this.makeEnumDef(def);
          case language_1.Kind.UNION_TYPE_DEFINITION:
            return this.makeUnionDef(def);
          case language_1.Kind.SCALAR_TYPE_DEFINITION:
            return this.makeScalarDef(def);
          case language_1.Kind.SCHEMA_DEFINITION:
            this.checkSchemaDef(def);
            return null;
          case language_1.Kind.DIRECTIVE_DEFINITION: {
            const directive = this.makeDirectiveDef(def);
            if (directive)
              this.schemaComposer.addDirective(directive);
            return null;
          }
          case language_1.Kind.INPUT_OBJECT_TYPE_DEFINITION:
            return this.makeInputObjectDef(def);
          case language_1.Kind.OBJECT_TYPE_EXTENSION:
            return this.makeExtendTypeDef(def);
          case language_1.Kind.INPUT_OBJECT_TYPE_EXTENSION:
            return this.makeExtendInputObjectDef(def);
          case language_1.Kind.INTERFACE_TYPE_EXTENSION:
            return this.makeExtendInterfaceDef(def);
          case language_1.Kind.UNION_TYPE_EXTENSION:
            return this.makeExtendUnionDef(def);
          case language_1.Kind.ENUM_TYPE_EXTENSION:
            return this.makeExtendEnumDef(def);
          case language_1.Kind.SCALAR_TYPE_EXTENSION:
            return this.makeExtendScalarDef(def);
          default:
            throw new Error(`Type kind "${def.kind}" not supported.`);
        }
      }
      makeArguments(values) {
        if (!values) {
          return {};
        }
        const result = {};
        values.forEach((value) => {
          var _a;
          const key = value.name.value;
          const typeName = this.getNamedTypeAST(value.type).name.value;
          const type = this.typeFromASTInput(value.type);
          const ac = {
            type,
            description: getDescription(value),
            directives: this.parseDirectives(value.directives),
            deprecationReason: this.getDeprecationReason(value.directives),
            astNode: value
          };
          if (value.defaultValue) {
            if (!this.schemaComposer.has(typeName) && ((_a = value === null || value === void 0 ? void 0 : value.defaultValue) === null || _a === void 0 ? void 0 : _a.value)) {
              ac.defaultValue = value.defaultValue.value;
            } else {
              const typeDef = this.schemaComposer.get(typeName);
              const wrappedType = this.buildWrappedTypeDef(typeDef, value.type);
              if ((0, typeHelpers_1.isSomeInputTypeComposer)(wrappedType)) {
                ac.defaultValue = (0, graphql_1.valueFromAST)(value.defaultValue, wrappedType.getType());
              } else {
                throw new Error("Non-input type as an argument.");
              }
            }
          }
          result[key] = ac;
        });
        return result;
      }
      makeFieldDefMap(def) {
        if (!def.fields)
          return {};
        return (0, misc_2.keyValMap)(def.fields, (field) => field.name.value, (field) => {
          const fc = {
            type: this.typeFromASTOutput(field.type),
            description: getDescription(field),
            args: this.makeArguments(field.arguments),
            deprecationReason: this.getDeprecationReason(field.directives),
            astNode: field,
            directives: this.parseDirectives(field.directives)
          };
          return fc;
        });
      }
      makeInputFieldDef(def) {
        if (!def.fields)
          return {};
        return (0, misc_2.keyValMap)(def.fields, (field) => field.name.value, (field) => {
          const fc = {
            type: this.typeFromASTInput(field.type),
            description: getDescription(field),
            deprecationReason: this.getDeprecationReason(field.directives),
            astNode: field,
            directives: this.parseDirectives(field.directives)
          };
          if (field.defaultValue) {
            fc.defaultValue = (0, graphql_1.valueFromAST)(field.defaultValue, fc.type.getType());
          }
          return fc;
        });
      }
      makeEnumDef(def) {
        const tc = this.schemaComposer.createEnumTC({
          name: def.name.value,
          description: getDescription(def),
          values: this.makeEnumValuesDef(def),
          directives: this.parseDirectives(def.directives),
          astNode: def
        });
        return tc;
      }
      makeEnumValuesDef(def) {
        if (!def.values)
          return {};
        return (0, misc_2.keyValMap)(def.values, (enumValue) => enumValue.name.value, (enumValue) => {
          const ec = {
            description: getDescription(enumValue),
            deprecationReason: this.getDeprecationReason(enumValue.directives),
            directives: this.parseDirectives(enumValue.directives)
          };
          return ec;
        });
      }
      makeInputObjectDef(def) {
        const tc = this.schemaComposer.createInputTC({
          name: def.name.value,
          description: getDescription(def),
          fields: this.makeInputFieldDef(def),
          astNode: def,
          directives: this.parseDirectives(def.directives)
        });
        return tc;
      }
      makeDirectiveDef(def) {
        const locations = def.locations.map(({ value }) => value);
        const args = {};
        (def.arguments || []).forEach((value) => {
          const key = value.name.value;
          let val;
          const wrappedType = this.typeFromAST(value.type);
          if ((0, typeHelpers_1.isSomeInputTypeComposer)(wrappedType)) {
            val = {
              type: wrappedType.getType(),
              description: getDescription(value),
              defaultValue: (0, graphql_1.valueFromAST)(value.defaultValue, wrappedType.getType())
            };
          } else {
            throw new Error("Non-input type as an argument.");
          }
          args[key] = val;
        });
        return new graphql_1.GraphQLDirective({
          name: def.name.value,
          description: getDescription(def),
          locations,
          args,
          astNode: def
        });
      }
      getBuiltInType(name) {
        let type;
        switch (name) {
          case "String":
            type = graphql_1.GraphQLString;
            break;
          case "Float":
            type = graphql_1.GraphQLFloat;
            break;
          case "Int":
            type = graphql_1.GraphQLInt;
            break;
          case "Boolean":
            type = graphql_1.GraphQLBoolean;
            break;
          case "ID":
            type = graphql_1.GraphQLID;
            break;
          case "JSON":
            type = type_1.GraphQLJSON;
            break;
          case "JSONObject":
            type = type_1.GraphQLJSONObject;
            break;
          case "Date":
            type = type_1.GraphQLDate;
            break;
          case "Buffer":
            type = type_1.GraphQLBuffer;
            break;
          default:
            type = void 0;
            break;
        }
        if (type) {
          return this.schemaComposer.createScalarTC(type);
        }
        return void 0;
      }
      makeScalarDef(def) {
        let tc;
        const stc = this.getBuiltInType(def.name.value);
        if (stc) {
          tc = stc;
        }
        if (!tc) {
          tc = this.schemaComposer.createScalarTC({
            name: def.name.value,
            description: getDescription(def),
            serialize: (v) => v,
            astNode: def
          });
        }
        if (def.directives) {
          tc.setDirectives(this.parseDirectives(def.directives));
        }
        return tc;
      }
      makeImplementedInterfaces(def) {
        return (def.interfaces || []).map((iface) => {
          const name = this.getNamedTypeAST(iface).name.value;
          if (this.schemaComposer.hasInstance(name, InterfaceTypeComposer_1.InterfaceTypeComposer)) {
            return this.schemaComposer.getIFTC(name);
          } else {
            return new ThunkComposer_1.ThunkComposer(() => this.schemaComposer.getIFTC(name), name);
          }
        });
      }
      makeTypeDef(def) {
        const name = def.name.value;
        const tc = this.schemaComposer.createObjectTC({
          name,
          description: getDescription(def),
          fields: this.makeFieldDefMap(def),
          interfaces: this.makeImplementedInterfaces(def),
          astNode: def,
          directives: this.parseDirectives(def.directives)
        });
        return tc;
      }
      makeInterfaceDef(def) {
        const tc = this.schemaComposer.createInterfaceTC({
          name: def.name.value,
          description: getDescription(def),
          fields: this.makeFieldDefMap(def),
          interfaces: this.makeImplementedInterfaces(def),
          astNode: def,
          directives: this.parseDirectives(def.directives)
        });
        return tc;
      }
      makeUnionDef(def) {
        const types3 = def.types;
        const tc = this.schemaComposer.createUnionTC({
          name: def.name.value,
          description: getDescription(def),
          types: (types3 || []).map((ref) => this.getNamedTypeAST(ref).name.value),
          astNode: def
        });
        if (def.directives) {
          tc.setDirectives(this.parseDirectives(def.directives));
        }
        return tc;
      }
      checkSchemaDef(def) {
        const validNames = {
          query: "Query",
          mutation: "Mutation",
          subscription: "Subscription"
        };
        def.operationTypes.forEach((d) => {
          if (d.operation) {
            const validTypeName = validNames[d.operation];
            const actualTypeName = d.type.name.value;
            if (actualTypeName !== validTypeName) {
              throw new Error(`Incorrect type name '${actualTypeName}' for '${d.operation}'. The valid definition is "schema { ${d.operation}: ${validTypeName} }"`);
            }
          }
        });
      }
      getNamedTypeAST(typeAST) {
        let namedType = typeAST;
        while (namedType.kind === language_1.Kind.LIST_TYPE || namedType.kind === language_1.Kind.NON_NULL_TYPE) {
          namedType = namedType.type;
        }
        return namedType;
      }
      buildWrappedTypeDef(innerType, inputTypeAST) {
        if (inputTypeAST.kind === language_1.Kind.LIST_TYPE) {
          return new ListComposer_1.ListComposer(this.buildWrappedTypeDef(innerType, inputTypeAST.type));
        }
        if (inputTypeAST.kind === language_1.Kind.NON_NULL_TYPE) {
          const wrappedType = this.buildWrappedTypeDef(innerType, inputTypeAST.type);
          return new NonNullComposer_1.NonNullComposer(wrappedType);
        }
        return innerType;
      }
      getDeprecationReason(directives) {
        const deprecatedAST = directives === null || directives === void 0 ? void 0 : directives.find((directive) => directive.name.value === graphql_1.GraphQLDeprecatedDirective.name);
        if (!deprecatedAST) {
          return;
        }
        const { reason } = (0, values_1.getArgumentValues)(graphql_1.GraphQLDeprecatedDirective, deprecatedAST);
        return reason;
      }
      parseDirectives(directives) {
        const result = [];
        if (!directives)
          return result;
        directives.forEach((directive) => {
          const name = directive.name.value;
          const directiveDef = this.schemaComposer._getDirective(name);
          const args = directiveDef ? (0, values_1.getArgumentValues)(directiveDef, directive) : (0, misc_2.keyValMap)(directive.arguments || [], (arg) => arg.name.value, (arg) => (0, definitionNode_1.parseValueNode)(arg.value));
          result.push({ name, args });
        });
        return result;
      }
      makeExtendTypeDef(def) {
        const tc = this.schemaComposer.getOrCreateOTC(def.name.value);
        tc.addInterfaces(this.makeImplementedInterfaces(def));
        tc.addFields(this.makeFieldDefMap(def));
        if (def.directives) {
          tc.setDirectives([...tc.getDirectives(), ...this.parseDirectives(def.directives)]);
        }
        return tc;
      }
      makeExtendInputObjectDef(def) {
        const tc = this.schemaComposer.getOrCreateITC(def.name.value);
        tc.addFields(this.makeInputFieldDef(def));
        if (def.directives) {
          tc.setDirectives([...tc.getDirectives(), ...this.parseDirectives(def.directives)]);
        }
        return tc;
      }
      makeExtendInterfaceDef(def) {
        const tc = this.schemaComposer.getOrCreateIFTC(def.name.value);
        tc.addFields(this.makeFieldDefMap(def));
        if (def.directives) {
          tc.setDirectives([...tc.getDirectives(), ...this.parseDirectives(def.directives)]);
        }
        return tc;
      }
      makeExtendUnionDef(def) {
        const types3 = def.types;
        const tc = this.schemaComposer.getOrCreateUTC(def.name.value);
        tc.addTypes((types3 || []).map((ref) => this.getNamedTypeAST(ref).name.value));
        if (def.directives) {
          tc.setDirectives([...tc.getDirectives(), ...this.parseDirectives(def.directives)]);
        }
        return tc;
      }
      makeExtendEnumDef(def) {
        const tc = this.schemaComposer.getOrCreateETC(def.name.value);
        tc.addFields(this.makeEnumValuesDef(def));
        if (def.directives) {
          tc.setDirectives([...tc.getDirectives(), ...this.parseDirectives(def.directives)]);
        }
        return tc;
      }
      makeExtendScalarDef(def) {
        const tc = this.schemaComposer.getSTC(def.name.value);
        if (def.directives) {
          tc.setDirectives([...tc.getDirectives(), ...this.parseDirectives(def.directives)]);
        }
        return tc;
      }
    };
    exports.TypeMapper = TypeMapper;
    function getDescription(node, options) {
      if (node.description) {
        return node.description.value;
      }
      if ((options === null || options === void 0 ? void 0 : options.commentDescriptions) === true) {
        const rawValue = getLeadingCommentBlock(node);
        if (rawValue !== void 0) {
          if (!blockString_1.dedentBlockStringValue) {
            return void 0;
          } else {
            return (0, blockString_1.dedentBlockStringValue)("\n" + rawValue);
          }
        }
      }
      return void 0;
    }
    exports.getDescription = getDescription;
    function getLeadingCommentBlock(node) {
      const loc = node.loc;
      if (!loc) {
        return;
      }
      const comments = [];
      let token = loc.startToken.prev;
      while (token != null && token.kind === language_1.TokenKind.COMMENT && token.next && token.prev && token.line + 1 === token.next.line && token.line !== token.prev.line) {
        const value = String(token.value);
        comments.push(value);
        token = token.prev;
      }
      return comments.length > 0 ? comments.reverse().join("\n") : void 0;
    }
  }
});

// node_modules/graphql-compose/lib/utils/schemaVisitor.js
var require_schemaVisitor = __commonJS({
  "node_modules/graphql-compose/lib/utils/schemaVisitor.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isUnionTypeComposer = exports.isInterfaceTypeComposer = exports.isInputTypeComposer = exports.isObjectTypeComposer = exports.isEnumTypeComposer = exports.isScalarTypeComposer = exports.visitSchema = exports.getVisitKinds = void 0;
    var ObjectTypeComposer_1 = require_ObjectTypeComposer();
    var InputTypeComposer_1 = require_InputTypeComposer();
    var ScalarTypeComposer_1 = require_ScalarTypeComposer();
    var EnumTypeComposer_1 = require_EnumTypeComposer();
    var InterfaceTypeComposer_1 = require_InterfaceTypeComposer();
    var UnionTypeComposer_1 = require_UnionTypeComposer();
    var typeHelpers_1 = require_typeHelpers();
    function getVisitKinds(tc, schema2) {
      let kinds = [];
      if (tc instanceof ObjectTypeComposer_1.ObjectTypeComposer) {
        kinds = ["OBJECT_TYPE", "COMPOSITE_TYPE", "TYPE"];
        if (schema2.Query === tc)
          kinds.unshift("QUERY", "ROOT_OBJECT");
        if (schema2.Mutation === tc)
          kinds.unshift("MUTATION", "ROOT_OBJECT");
        if (schema2.Subscription === tc)
          kinds.unshift("SUBSCRIPTION", "ROOT_OBJECT");
      } else if (tc instanceof InputTypeComposer_1.InputTypeComposer) {
        kinds = ["INPUT_OBJECT_TYPE", "TYPE"];
      } else if (tc instanceof InterfaceTypeComposer_1.InterfaceTypeComposer) {
        kinds = ["INTERFACE_TYPE", "ABSTRACT_TYPE", "COMPOSITE_TYPE", "TYPE"];
      } else if (tc instanceof UnionTypeComposer_1.UnionTypeComposer) {
        kinds = ["UNION_TYPE", "ABSTRACT_TYPE", "COMPOSITE_TYPE", "TYPE"];
      } else if (tc instanceof ScalarTypeComposer_1.ScalarTypeComposer) {
        kinds = ["SCALAR_TYPE", "TYPE"];
      } else if (tc instanceof EnumTypeComposer_1.EnumTypeComposer) {
        kinds = ["ENUM_TYPE", "TYPE"];
      }
      return kinds;
    }
    exports.getVisitKinds = getVisitKinds;
    function visitSchema(schema2, visitor) {
      const visitedTCs = /* @__PURE__ */ new WeakSet();
      schema2.forEach((value, key) => {
        if (visitedTCs.has(value))
          return;
        visitedTCs.add(value);
        let tc = value;
        const visitKinds = getVisitKinds(tc, schema2);
        for (const kind of visitKinds) {
          const visitorFn = visitor[kind];
          if (visitorFn) {
            const result = visitorFn(tc, schema2);
            if (result === null) {
              schema2.delete(key);
            } else if (result === false) {
              break;
            } else if ((0, typeHelpers_1.isNamedTypeComposer)(result)) {
              tc = result;
              schema2.set(key, tc);
            }
          }
        }
      });
    }
    exports.visitSchema = visitSchema;
    function isScalarTypeComposer(type) {
      return type instanceof ScalarTypeComposer_1.ScalarTypeComposer;
    }
    exports.isScalarTypeComposer = isScalarTypeComposer;
    function isEnumTypeComposer(type) {
      return type instanceof EnumTypeComposer_1.EnumTypeComposer;
    }
    exports.isEnumTypeComposer = isEnumTypeComposer;
    function isObjectTypeComposer(type) {
      return type instanceof ObjectTypeComposer_1.ObjectTypeComposer;
    }
    exports.isObjectTypeComposer = isObjectTypeComposer;
    function isInputTypeComposer(type) {
      return type instanceof InputTypeComposer_1.InputTypeComposer;
    }
    exports.isInputTypeComposer = isInputTypeComposer;
    function isInterfaceTypeComposer(type) {
      return type instanceof InterfaceTypeComposer_1.InterfaceTypeComposer;
    }
    exports.isInterfaceTypeComposer = isInterfaceTypeComposer;
    function isUnionTypeComposer(type) {
      return type instanceof UnionTypeComposer_1.UnionTypeComposer;
    }
    exports.isUnionTypeComposer = isUnionTypeComposer;
  }
});

// node_modules/graphql-compose/lib/SchemaComposer.js
var require_SchemaComposer = __commonJS({
  "node_modules/graphql-compose/lib/SchemaComposer.js"(exports) {
    "use strict";
    var __rest = exports && exports.__rest || function(s2, e2) {
      var t2 = {};
      for (var p in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p) && e2.indexOf(p) < 0)
          t2[p] = s2[p];
      if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i2 = 0, p = Object.getOwnPropertySymbols(s2); i2 < p.length; i2++) {
          if (e2.indexOf(p[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i2]))
            t2[p[i2]] = s2[p[i2]];
        }
      return t2;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SchemaComposer = exports.BUILT_IN_DIRECTIVES = void 0;
    var deprecate_1 = __importDefault(require_deprecate());
    var TypeStorage_1 = require_TypeStorage();
    var TypeMapper_1 = require_TypeMapper();
    var ObjectTypeComposer_1 = require_ObjectTypeComposer();
    var InputTypeComposer_1 = require_InputTypeComposer();
    var ScalarTypeComposer_1 = require_ScalarTypeComposer();
    var EnumTypeComposer_1 = require_EnumTypeComposer();
    var InterfaceTypeComposer_1 = require_InterfaceTypeComposer();
    var UnionTypeComposer_1 = require_UnionTypeComposer();
    var ListComposer_1 = require_ListComposer();
    var NonNullComposer_1 = require_NonNullComposer();
    var ThunkComposer_1 = require_ThunkComposer();
    var Resolver_1 = require_Resolver();
    var is_1 = require_is();
    var misc_1 = require_misc();
    var dedent_1 = require_dedent();
    var typeHelpers_1 = require_typeHelpers();
    var graphql_1 = require_graphql3();
    var schemaPrinter_1 = require_schemaPrinter();
    var schemaVisitor_1 = require_schemaVisitor();
    exports.BUILT_IN_DIRECTIVES = [
      graphql_1.GraphQLSkipDirective,
      graphql_1.GraphQLIncludeDirective,
      graphql_1.GraphQLDeprecatedDirective
    ];
    var SchemaComposer2 = class extends TypeStorage_1.TypeStorage {
      constructor(schemaOrSDL) {
        super();
        this._schemaMustHaveTypes = [];
        this._directives = [...exports.BUILT_IN_DIRECTIVES];
        this.typeMapper = new TypeMapper_1.TypeMapper(this);
        let schema2;
        if (typeof schemaOrSDL === "string") {
          schema2 = (0, graphql_1.buildSchema)(schemaOrSDL);
        } else {
          schema2 = schemaOrSDL;
        }
        if (schema2 instanceof graphql_1.GraphQLSchema) {
          schema2.getDirectives().forEach((directive) => {
            this.addDirective(directive);
          });
          (0, misc_1.forEachKey)(schema2.getTypeMap(), (v, k) => {
            if (k.startsWith("__"))
              return;
            this.typeMapper.convertGraphQLTypeToComposer(v);
          });
          const q = schema2.getQueryType();
          if (q)
            this.set("Query", this.get(q));
          const m2 = schema2.getMutationType();
          if (m2)
            this.set("Mutation", this.get(m2));
          const s2 = schema2.getSubscriptionType();
          if (s2)
            this.set("Subscription", this.get(s2));
          if (schema2.description)
            this.setDescription(schema2.description);
        }
      }
      get Query() {
        return this.getOrCreateOTC("Query");
      }
      get Mutation() {
        return this.getOrCreateOTC("Mutation");
      }
      get Subscription() {
        return this.getOrCreateOTC("Subscription");
      }
      buildSchema(extraConfig) {
        const roots = {};
        if (this.has("Query")) {
          const tc = this.getOTC("Query");
          this.removeEmptyTypes(tc, /* @__PURE__ */ new Set());
          roots.query = tc.getType();
        }
        if (this.has("Mutation")) {
          const tc = this.getOTC("Mutation");
          this.removeEmptyTypes(tc, /* @__PURE__ */ new Set());
          if (tc.getFieldNames().length) {
            roots.mutation = tc.getType();
          }
        }
        if (this.has("Subscription")) {
          const tc = this.getOTC("Subscription");
          this.removeEmptyTypes(tc, /* @__PURE__ */ new Set());
          if (tc.getFieldNames().length) {
            roots.subscription = tc.getType();
          }
        }
        const _a = extraConfig || {}, { keepUnusedTypes } = _a, reducedConfig = __rest(_a, ["keepUnusedTypes"]);
        const typesSet = /* @__PURE__ */ new Set();
        if (keepUnusedTypes) {
          this.types.forEach((type) => {
            typesSet.add((0, graphql_1.getNamedType)((0, typeHelpers_1.getGraphQLType)(type)));
          });
        }
        this._schemaMustHaveTypes.forEach((type) => {
          typesSet.add((0, graphql_1.getNamedType)((0, typeHelpers_1.getGraphQLType)(type)));
        });
        if (Array.isArray(extraConfig === null || extraConfig === void 0 ? void 0 : extraConfig.types)) {
          extraConfig === null || extraConfig === void 0 ? void 0 : extraConfig.types.forEach((type) => {
            typesSet.add((0, graphql_1.getNamedType)((0, typeHelpers_1.getGraphQLType)(type)));
          });
        }
        const directives = [
          ...this._directives,
          ...Array.isArray(extraConfig === null || extraConfig === void 0 ? void 0 : extraConfig.directives) ? [...extraConfig.directives] : []
        ];
        const description = this.getDescription() || reducedConfig.description || void 0;
        return new graphql_1.GraphQLSchema(Object.assign(Object.assign(Object.assign({}, reducedConfig), roots), {
          types: Array.from(typesSet),
          directives,
          description
        }));
      }
      addSchemaMustHaveType(type) {
        this._schemaMustHaveTypes.push(type);
        return this;
      }
      removeEmptyTypes(tc, passedTypes = /* @__PURE__ */ new Set()) {
        tc.getFieldNames().forEach((fieldName) => {
          const fieldTC = tc.getFieldTC(fieldName);
          if (!fieldTC) {
            throw new Error(`fieldTC "${fieldName}" is not defined.`);
          }
          const typeName = fieldTC.getTypeName();
          if (!passedTypes.has(typeName)) {
            passedTypes.add(typeName);
            if (fieldTC instanceof ObjectTypeComposer_1.ObjectTypeComposer) {
              if (fieldTC.getFieldNames().length > 0) {
                this.removeEmptyTypes(fieldTC, passedTypes);
              } else {
                console.log(`graphql-compose: Delete field '${tc.getTypeName()}.${fieldName}' with type '${fieldTC.getTypeName()}', cause it does not have fields.`);
                tc.removeField(fieldName);
              }
            }
          }
        });
      }
      clone() {
        const sc = new SchemaComposer2();
        const cloneMap = /* @__PURE__ */ new Map();
        this.forEach((type, key) => {
          sc.set(key, (0, typeHelpers_1.cloneTypeTo)(type, sc, cloneMap));
        });
        sc._schemaMustHaveTypes = this._schemaMustHaveTypes.map((t2) => (0, typeHelpers_1.cloneTypeTo)(t2, sc, cloneMap));
        sc._directives = [...this._directives];
        return sc;
      }
      merge(schema2) {
        let sc;
        if (schema2 instanceof SchemaComposer2) {
          sc = schema2;
        } else if (schema2 instanceof graphql_1.GraphQLSchema) {
          sc = new SchemaComposer2(schema2);
        } else {
          throw new Error("SchemaComposer.merge() accepts only GraphQLSchema or SchemaComposer instances.");
        }
        this.Query.merge(sc.Query);
        this.Mutation.merge(sc.Mutation);
        this.Subscription.merge(sc.Subscription);
        sc.types.forEach((type, key) => {
          if (typeof key === "string" && key.startsWith("__") || type === sc.Query || type === sc.Mutation || type === sc.Subscription) {
            return;
          }
          let typeName;
          if ((0, typeHelpers_1.isComposeNamedType)(type)) {
            typeName = (0, typeHelpers_1.getComposeTypeName)(type, this);
          }
          if (this.has(key)) {
            this.getAnyTC(key).merge(type);
          } else if (typeName && this.has(typeName)) {
            this.getAnyTC(typeName).merge(type);
          } else {
            const tc = type.cloneTo(this);
            this.set(key, tc);
            if (typeName && typeName !== key) {
              this.set(typeName, tc);
            }
          }
        });
        sc.getDirectives().forEach((directive) => {
          this.addDirective(directive);
        });
        return this;
      }
      getDescription() {
        return this._description;
      }
      setDescription(description) {
        this._description = description;
        return this;
      }
      addTypeDefs(typeDefs) {
        let types3;
        try {
          types3 = this.typeMapper.parseTypesFromString(typeDefs);
        } catch (e2) {
          throw new Error(e2.toString());
        }
        types3.forEach((type) => {
          const name = type.getTypeName();
          if (name !== "Query" && name !== "Mutation" && name !== "Subscription") {
            this.add(type);
          }
        });
        if (types3.has("Query")) {
          const tc = types3.get("Query");
          if (!(tc instanceof ObjectTypeComposer_1.ObjectTypeComposer)) {
            throw new Error(`Type Query in typedefs isn't an Object Type.`);
          }
          this.Query.addFields(tc.getFields());
        }
        if (types3.has("Mutation")) {
          const tc = types3.get("Mutation");
          if (!(tc instanceof ObjectTypeComposer_1.ObjectTypeComposer)) {
            throw new Error(`Type Mutation in typedefs isn't an Object Type.`);
          }
          this.Mutation.addFields(tc.getFields());
        }
        if (types3.has("Subscription")) {
          const tc = types3.get("Subscription");
          if (!(tc instanceof ObjectTypeComposer_1.ObjectTypeComposer)) {
            throw new Error(`Type Subscription in typedefs isn't an Object Type.`);
          }
          this.Subscription.addFields(tc.getFields());
        }
        return types3;
      }
      addResolveMethods(typesFieldsResolve) {
        const typeNames = Object.keys(typesFieldsResolve);
        typeNames.forEach((typeName) => {
          const tc = this.get(typeName);
          if (tc instanceof ScalarTypeComposer_1.ScalarTypeComposer) {
            const maybeScalar = typesFieldsResolve[typeName];
            if (maybeScalar instanceof graphql_1.GraphQLScalarType) {
              tc.merge(maybeScalar);
              if (maybeScalar.name !== typeName)
                this.set(typeName, tc);
              return;
            } else if (typeof maybeScalar.name === "string" && typeof maybeScalar.serialize === "function") {
              tc.merge(new graphql_1.GraphQLScalarType(maybeScalar));
              if (maybeScalar.name !== typeName)
                this.set(typeName, tc);
              return;
            }
          } else if (tc instanceof ObjectTypeComposer_1.ObjectTypeComposer) {
            const fieldsResolve = typesFieldsResolve[typeName];
            const fieldNames = Object.keys(fieldsResolve);
            fieldNames.forEach((fieldName) => {
              tc.extendField(fieldName, {
                resolve: fieldsResolve[fieldName]
              });
            });
            return;
          } else if (tc instanceof EnumTypeComposer_1.EnumTypeComposer) {
            const enumValuesMap = typesFieldsResolve[typeName];
            const fieldNames = Object.keys(enumValuesMap);
            fieldNames.forEach((fieldName) => {
              tc.extendField(fieldName, {
                value: enumValuesMap[fieldName]
              });
            });
            return;
          }
          throw new Error((0, dedent_1.dedent)`
        Cannot add resolver to the following type: 
          ${(0, misc_1.inspect)(tc)}
      `);
        });
      }
      createObjectTC(typeDef) {
        return ObjectTypeComposer_1.ObjectTypeComposer.create(typeDef, this);
      }
      createInputTC(typeDef) {
        return InputTypeComposer_1.InputTypeComposer.create(typeDef, this);
      }
      createEnumTC(typeDef) {
        return EnumTypeComposer_1.EnumTypeComposer.create(typeDef, this);
      }
      createInterfaceTC(typeDef) {
        return InterfaceTypeComposer_1.InterfaceTypeComposer.create(typeDef, this);
      }
      createUnionTC(typeDef) {
        return UnionTypeComposer_1.UnionTypeComposer.create(typeDef, this);
      }
      createScalarTC(typeDef) {
        return ScalarTypeComposer_1.ScalarTypeComposer.create(typeDef, this);
      }
      createResolver(opts) {
        return new Resolver_1.Resolver(opts, this);
      }
      createTC(typeOrSDL) {
        if (this.has(typeOrSDL)) {
          return this.get(typeOrSDL);
        }
        const tc = (0, typeHelpers_1.isNamedTypeComposer)(typeOrSDL) ? typeOrSDL : this.createTempTC(typeOrSDL);
        const typeName = tc.getTypeName();
        this.set(typeName, tc);
        this.set(typeOrSDL, tc);
        return tc;
      }
      createTempTC(typeOrSDL) {
        let type;
        if (typeof typeOrSDL === "string") {
          type = this.typeMapper.convertSDLTypeDefinition(typeOrSDL);
        } else {
          type = typeOrSDL;
        }
        if ((0, typeHelpers_1.isTypeComposer)(type)) {
          if (type instanceof NonNullComposer_1.NonNullComposer || type instanceof ListComposer_1.ListComposer || type instanceof ThunkComposer_1.ThunkComposer) {
            const unwrappedTC = type.getUnwrappedTC();
            return unwrappedTC;
          }
          return type;
        } else if (type instanceof graphql_1.GraphQLObjectType) {
          return ObjectTypeComposer_1.ObjectTypeComposer.createTemp(type, this);
        } else if (type instanceof graphql_1.GraphQLInputObjectType) {
          return InputTypeComposer_1.InputTypeComposer.createTemp(type, this);
        } else if (type instanceof graphql_1.GraphQLScalarType) {
          return ScalarTypeComposer_1.ScalarTypeComposer.createTemp(type, this);
        } else if (type instanceof graphql_1.GraphQLEnumType) {
          return EnumTypeComposer_1.EnumTypeComposer.createTemp(type, this);
        } else if (type instanceof graphql_1.GraphQLInterfaceType) {
          return InterfaceTypeComposer_1.InterfaceTypeComposer.createTemp(type, this);
        } else if (type instanceof graphql_1.GraphQLUnionType) {
          return UnionTypeComposer_1.UnionTypeComposer.createTemp(type, this);
        }
        throw new Error((0, dedent_1.dedent)`
      Cannot create as TypeComposer the following value: 
        ${(0, misc_1.inspect)(type)}.
    `);
      }
      getOrCreateTC(typeName, onCreate) {
        (0, deprecate_1.default)(`Use SchemaComposer.getOrCreateOTC() method instead`);
        return this.getOrCreateOTC(typeName, onCreate);
      }
      getOrCreateOTC(typeName, onCreate) {
        try {
          return this.getOTC(typeName);
        } catch (e2) {
          const tc = ObjectTypeComposer_1.ObjectTypeComposer.create(typeName, this);
          this.set(typeName, tc);
          if (onCreate && (0, is_1.isFunction)(onCreate))
            onCreate(tc);
          return tc;
        }
      }
      getOrCreateITC(typeName, onCreate) {
        try {
          return this.getITC(typeName);
        } catch (e2) {
          const itc = InputTypeComposer_1.InputTypeComposer.create(typeName, this);
          this.set(typeName, itc);
          if (onCreate && (0, is_1.isFunction)(onCreate))
            onCreate(itc);
          return itc;
        }
      }
      getOrCreateETC(typeName, onCreate) {
        try {
          return this.getETC(typeName);
        } catch (e2) {
          const etc = EnumTypeComposer_1.EnumTypeComposer.create(typeName, this);
          this.set(typeName, etc);
          if (onCreate && (0, is_1.isFunction)(onCreate))
            onCreate(etc);
          return etc;
        }
      }
      getOrCreateIFTC(typeName, onCreate) {
        try {
          return this.getIFTC(typeName);
        } catch (e2) {
          const iftc = InterfaceTypeComposer_1.InterfaceTypeComposer.create(typeName, this);
          this.set(typeName, iftc);
          if (onCreate && (0, is_1.isFunction)(onCreate))
            onCreate(iftc);
          return iftc;
        }
      }
      getOrCreateUTC(typeName, onCreate) {
        try {
          return this.getUTC(typeName);
        } catch (e2) {
          const utc = UnionTypeComposer_1.UnionTypeComposer.create(typeName, this);
          this.set(typeName, utc);
          if (onCreate && (0, is_1.isFunction)(onCreate))
            onCreate(utc);
          return utc;
        }
      }
      getOrCreateSTC(typeName, onCreate) {
        try {
          return this.getSTC(typeName);
        } catch (e2) {
          const stc = ScalarTypeComposer_1.ScalarTypeComposer.create(typeName, this);
          this.set(typeName, stc);
          if (onCreate && (0, is_1.isFunction)(onCreate))
            onCreate(stc);
          return stc;
        }
      }
      getOTC(typeName) {
        if (this.hasInstance(typeName, graphql_1.GraphQLObjectType)) {
          return ObjectTypeComposer_1.ObjectTypeComposer.create(this.get(typeName), this);
        }
        if (this.hasInstance(typeName, ObjectTypeComposer_1.ObjectTypeComposer)) {
          return this.get(typeName);
        }
        throw new Error(`Cannot find ObjectTypeComposer with name ${typeName}`);
      }
      getITC(typeName) {
        if (this.hasInstance(typeName, graphql_1.GraphQLInputObjectType)) {
          return InputTypeComposer_1.InputTypeComposer.create(this.get(typeName), this);
        }
        if (this.hasInstance(typeName, InputTypeComposer_1.InputTypeComposer)) {
          return this.get(typeName);
        }
        throw new Error(`Cannot find InputTypeComposer with name ${typeName}`);
      }
      getETC(typeName) {
        if (this.hasInstance(typeName, graphql_1.GraphQLEnumType)) {
          return EnumTypeComposer_1.EnumTypeComposer.create(this.get(typeName), this);
        }
        if (this.hasInstance(typeName, EnumTypeComposer_1.EnumTypeComposer)) {
          return this.get(typeName);
        }
        throw new Error(`Cannot find EnumTypeComposer with name ${typeName}`);
      }
      getIFTC(typeName) {
        if (this.hasInstance(typeName, graphql_1.GraphQLInterfaceType)) {
          return InterfaceTypeComposer_1.InterfaceTypeComposer.create(this.get(typeName), this);
        }
        if (this.hasInstance(typeName, InterfaceTypeComposer_1.InterfaceTypeComposer)) {
          return this.get(typeName);
        }
        throw new Error(`Cannot find InterfaceTypeComposer with name ${typeName}`);
      }
      getUTC(typeName) {
        if (this.hasInstance(typeName, graphql_1.GraphQLUnionType)) {
          return UnionTypeComposer_1.UnionTypeComposer.create(this.get(typeName), this);
        }
        if (this.hasInstance(typeName, UnionTypeComposer_1.UnionTypeComposer)) {
          return this.get(typeName);
        }
        throw new Error(`Cannot find UnionTypeComposer with name ${typeName}`);
      }
      getSTC(typeName) {
        if (this.hasInstance(typeName, graphql_1.GraphQLScalarType)) {
          return ScalarTypeComposer_1.ScalarTypeComposer.create(this.get(typeName), this);
        }
        if (this.hasInstance(typeName, ScalarTypeComposer_1.ScalarTypeComposer)) {
          return this.get(typeName);
        }
        throw new Error(`Cannot find ScalarTypeComposer with name ${typeName}`);
      }
      getAnyTC(typeOrName) {
        let type;
        if (typeof typeOrName === "string") {
          type = this.get(typeOrName);
        } else {
          type = typeOrName;
        }
        if (type == null) {
          throw new Error(`Cannot find type with name ${typeOrName}`);
        } else if ((0, typeHelpers_1.isNamedTypeComposer)(type)) {
          return type;
        }
        while (type instanceof graphql_1.GraphQLList || type instanceof graphql_1.GraphQLNonNull) {
          type = type.ofType;
        }
        if (type instanceof graphql_1.GraphQLObjectType) {
          return ObjectTypeComposer_1.ObjectTypeComposer.create(type, this);
        } else if (type instanceof graphql_1.GraphQLInputObjectType) {
          return InputTypeComposer_1.InputTypeComposer.create(type, this);
        } else if (type instanceof graphql_1.GraphQLScalarType) {
          return ScalarTypeComposer_1.ScalarTypeComposer.create(type, this);
        } else if (type instanceof graphql_1.GraphQLEnumType) {
          return EnumTypeComposer_1.EnumTypeComposer.create(type, this);
        } else if (type instanceof graphql_1.GraphQLInterfaceType) {
          return InterfaceTypeComposer_1.InterfaceTypeComposer.create(type, this);
        } else if (type instanceof graphql_1.GraphQLUnionType) {
          return UnionTypeComposer_1.UnionTypeComposer.create(type, this);
        }
        throw new Error((0, dedent_1.dedent)`
      Type with name ${(0, misc_1.inspect)(typeOrName)} cannot be obtained as any Composer helper.
      Put something strange?
    `);
      }
      addAsComposer(typeOrSDL) {
        (0, deprecate_1.default)("Use schemaComposer.add() method instead. From v7 all types in storage saved as TypeComposers.");
        return this.add(typeOrSDL);
      }
      isObjectType(type) {
        if (typeof type === "string" && (0, typeHelpers_1.isOutputTypeDefinitionString)(type))
          return true;
        if (!this.has(type))
          return false;
        return this.getAnyTC(type) instanceof ObjectTypeComposer_1.ObjectTypeComposer;
      }
      isInputObjectType(type) {
        if (typeof type === "string" && (0, typeHelpers_1.isInputTypeDefinitionString)(type))
          return true;
        if (!this.has(type))
          return false;
        return this.getAnyTC(type) instanceof InputTypeComposer_1.InputTypeComposer;
      }
      isScalarType(type) {
        if (typeof type === "string" && (0, typeHelpers_1.isScalarTypeDefinitionString)(type))
          return true;
        if (!this.has(type))
          return false;
        return this.getAnyTC(type) instanceof ScalarTypeComposer_1.ScalarTypeComposer;
      }
      isEnumType(type) {
        if (typeof type === "string" && (0, typeHelpers_1.isEnumTypeDefinitionString)(type))
          return true;
        if (!this.has(type))
          return false;
        return this.getAnyTC(type) instanceof EnumTypeComposer_1.EnumTypeComposer;
      }
      isInterfaceType(type) {
        if (typeof type === "string" && (0, typeHelpers_1.isInterfaceTypeDefinitionString)(type))
          return true;
        if (!this.has(type))
          return false;
        return this.getAnyTC(type) instanceof InterfaceTypeComposer_1.InterfaceTypeComposer;
      }
      isUnionType(type) {
        if (typeof type === "string" && (0, typeHelpers_1.isUnionTypeDefinitionString)(type))
          return true;
        if (!this.has(type))
          return false;
        return this.getAnyTC(type) instanceof UnionTypeComposer_1.UnionTypeComposer;
      }
      clear() {
        super.clear();
        this._schemaMustHaveTypes = [];
        this._directives = exports.BUILT_IN_DIRECTIVES;
      }
      add(typeOrSDL) {
        const tc = this.createTC(typeOrSDL);
        return tc.getTypeName();
      }
      set(key, value) {
        if (!(0, typeHelpers_1.isNamedTypeComposer)(value)) {
          (0, deprecate_1.default)(`SchemaComposer.set() accept only TypeComposers. You provide with key ${(0, misc_1.inspect)(key)} the following wrong value ${(0, misc_1.inspect)(value)}.`);
        }
        super.set(key, value);
        return this;
      }
      addDirective(directive) {
        if (!(directive instanceof graphql_1.GraphQLDirective)) {
          throw new Error((0, dedent_1.dedent)`
        You should provide GraphQLDirective to schemaComposer.addDirective(), but received: 
          ${(0, misc_1.inspect)(directive)}
      `);
        }
        if (!this.hasDirective(directive)) {
          this._directives.push(directive);
        }
        return this;
      }
      removeDirective(directive) {
        this._directives = this._directives.filter((o) => o !== directive);
        return this;
      }
      getDirectives() {
        return this._directives;
      }
      _getDirective(name) {
        const directives = this.getDirectives();
        return directives.find((d) => d.name === name);
      }
      getDirective(name) {
        const directive = this._getDirective(name);
        if (!directive) {
          throw new Error(`Directive instance with name ${name} does not exists.`);
        }
        return directive;
      }
      hasDirective(directive) {
        if (!directive)
          return false;
        if (typeof directive === "string") {
          const name = directive.startsWith("@") ? directive.slice(1) : directive;
          return !!this._directives.find((o) => o.name === name);
        } else if (directive instanceof graphql_1.GraphQLDirective) {
          return !!this._directives.find((o) => o === directive);
        }
        return false;
      }
      toString() {
        return "SchemaComposer";
      }
      toJSON() {
        return "SchemaComposer";
      }
      inspect() {
        return "SchemaComposer";
      }
      getTypeSDL(typeName, opts) {
        return this.getAnyTC(typeName).toSDL(opts);
      }
      toSDL(options) {
        const opts = Object.assign({ sortTypes: "GROUP_BY_TYPE" }, options);
        return (0, schemaPrinter_1.printSchemaComposer)(this, opts);
      }
      getResolveMethods(opts) {
        const resolveMethods = {};
        const exclude = (opts === null || opts === void 0 ? void 0 : opts.exclude) || [];
        (0, schemaVisitor_1.visitSchema)(this, {
          OBJECT_TYPE: (tc) => {
            const typename = tc.getTypeName();
            if (exclude.includes(typename))
              return;
            (0, misc_1.forEachKey)(tc.getFields(), (fc, fieldName) => {
              if (!fc.resolve || fc.resolve === graphql_1.defaultFieldResolver)
                return;
              if (!resolveMethods[typename])
                resolveMethods[typename] = {};
              resolveMethods[typename][fieldName] = fc.resolve;
            });
          },
          ENUM_TYPE: (tc) => {
            const typename = tc.getTypeName();
            if (exclude.includes(typename))
              return;
            let hasDifferentIntervalValues = false;
            const internalValues = {};
            (0, misc_1.forEachKey)(tc.getFields(), (fc, fieldName) => {
              if (fc.value !== fieldName)
                hasDifferentIntervalValues = true;
              internalValues[fieldName] = fc.value;
            });
            if (hasDifferentIntervalValues) {
              resolveMethods[typename] = internalValues;
            }
          }
        });
        return resolveMethods;
      }
    };
    exports.SchemaComposer = SchemaComposer2;
  }
});

// node_modules/graphql-compose/lib/utils/definitions.js
var require_definitions = __commonJS({
  "node_modules/graphql-compose/lib/utils/definitions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/graphql-compose/lib/utils/toDottedObject.js
var require_toDottedObject = __commonJS({
  "node_modules/graphql-compose/lib/utils/toDottedObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toDottedObject = void 0;
    function toDottedObject(obj, target = {}, path = []) {
      Object.keys(obj).forEach((key) => {
        if (Object(obj[key]) === obj[key]) {
          toDottedObject(obj[key], target, path.concat(key));
        } else {
          target[path.concat(key).join(".")] = obj[key];
        }
      });
      return target;
    }
    exports.toDottedObject = toDottedObject;
  }
});

// node_modules/graphql-compose/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/graphql-compose/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m2, k);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m2[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __exportStar = exports && exports.__exportStar || function(m2, exports2) {
      for (var p in m2)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m2, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.dedent = exports.pluralize = exports.filterByDotPaths = exports.deepmerge = exports.createThunkedObjectProxy = exports.toDottedObject = exports.convertInputObjectField = exports.toInputObjectType = exports.toInputType = exports.getFlatProjectionFromAST = exports.getProjectionFromAST = exports.GraphQLJSONObject = exports.GraphQLJSON = exports.GraphQLBuffer = exports.GraphQLDate = exports.ThunkComposer = exports.ListComposer = exports.NonNullComposer = exports.TypeMapper = exports.TypeStorage = exports.Resolver = exports.UnionTypeComposer = exports.InterfaceTypeComposer = exports.ScalarTypeComposer = exports.EnumTypeComposer = exports.InputTypeComposer = exports.ObjectTypeComposer = exports.sc = exports.schemaComposer = exports.SchemaComposer = exports.graphql = void 0;
    var graphql = __importStar(require_graphql3());
    exports.graphql = graphql;
    var SchemaComposer_1 = require_SchemaComposer();
    Object.defineProperty(exports, "SchemaComposer", { enumerable: true, get: function() {
      return SchemaComposer_1.SchemaComposer;
    } });
    var schemaComposer2 = new SchemaComposer_1.SchemaComposer();
    exports.schemaComposer = schemaComposer2;
    var sc = schemaComposer2;
    exports.sc = sc;
    var ObjectTypeComposer_1 = require_ObjectTypeComposer();
    Object.defineProperty(exports, "ObjectTypeComposer", { enumerable: true, get: function() {
      return ObjectTypeComposer_1.ObjectTypeComposer;
    } });
    var InputTypeComposer_1 = require_InputTypeComposer();
    Object.defineProperty(exports, "InputTypeComposer", { enumerable: true, get: function() {
      return InputTypeComposer_1.InputTypeComposer;
    } });
    var EnumTypeComposer_1 = require_EnumTypeComposer();
    Object.defineProperty(exports, "EnumTypeComposer", { enumerable: true, get: function() {
      return EnumTypeComposer_1.EnumTypeComposer;
    } });
    var ScalarTypeComposer_1 = require_ScalarTypeComposer();
    Object.defineProperty(exports, "ScalarTypeComposer", { enumerable: true, get: function() {
      return ScalarTypeComposer_1.ScalarTypeComposer;
    } });
    var InterfaceTypeComposer_1 = require_InterfaceTypeComposer();
    Object.defineProperty(exports, "InterfaceTypeComposer", { enumerable: true, get: function() {
      return InterfaceTypeComposer_1.InterfaceTypeComposer;
    } });
    var UnionTypeComposer_1 = require_UnionTypeComposer();
    Object.defineProperty(exports, "UnionTypeComposer", { enumerable: true, get: function() {
      return UnionTypeComposer_1.UnionTypeComposer;
    } });
    var Resolver_1 = require_Resolver();
    Object.defineProperty(exports, "Resolver", { enumerable: true, get: function() {
      return Resolver_1.Resolver;
    } });
    var TypeStorage_1 = require_TypeStorage();
    Object.defineProperty(exports, "TypeStorage", { enumerable: true, get: function() {
      return TypeStorage_1.TypeStorage;
    } });
    var TypeMapper_1 = require_TypeMapper();
    Object.defineProperty(exports, "TypeMapper", { enumerable: true, get: function() {
      return TypeMapper_1.TypeMapper;
    } });
    var NonNullComposer_1 = require_NonNullComposer();
    Object.defineProperty(exports, "NonNullComposer", { enumerable: true, get: function() {
      return NonNullComposer_1.NonNullComposer;
    } });
    var ListComposer_1 = require_ListComposer();
    Object.defineProperty(exports, "ListComposer", { enumerable: true, get: function() {
      return ListComposer_1.ListComposer;
    } });
    var ThunkComposer_1 = require_ThunkComposer();
    Object.defineProperty(exports, "ThunkComposer", { enumerable: true, get: function() {
      return ThunkComposer_1.ThunkComposer;
    } });
    var type_1 = require_type2();
    Object.defineProperty(exports, "GraphQLDate", { enumerable: true, get: function() {
      return type_1.GraphQLDate;
    } });
    Object.defineProperty(exports, "GraphQLBuffer", { enumerable: true, get: function() {
      return type_1.GraphQLBuffer;
    } });
    Object.defineProperty(exports, "GraphQLJSON", { enumerable: true, get: function() {
      return type_1.GraphQLJSON;
    } });
    Object.defineProperty(exports, "GraphQLJSONObject", { enumerable: true, get: function() {
      return type_1.GraphQLJSONObject;
    } });
    var projection_1 = require_projection();
    Object.defineProperty(exports, "getProjectionFromAST", { enumerable: true, get: function() {
      return projection_1.getProjectionFromAST;
    } });
    Object.defineProperty(exports, "getFlatProjectionFromAST", { enumerable: true, get: function() {
      return projection_1.getFlatProjectionFromAST;
    } });
    var toInputType_1 = require_toInputType();
    Object.defineProperty(exports, "toInputType", { enumerable: true, get: function() {
      return toInputType_1.toInputType;
    } });
    Object.defineProperty(exports, "toInputObjectType", { enumerable: true, get: function() {
      return toInputType_1.toInputObjectType;
    } });
    Object.defineProperty(exports, "convertInputObjectField", { enumerable: true, get: function() {
      return toInputType_1.convertInputObjectField;
    } });
    __exportStar(require_misc(), exports);
    __exportStar(require_typeHelpers(), exports);
    __exportStar(require_is(), exports);
    __exportStar(require_definitions(), exports);
    __exportStar(require_graphqlVersion(), exports);
    __exportStar(require_schemaPrinter(), exports);
    var toDottedObject_1 = require_toDottedObject();
    Object.defineProperty(exports, "toDottedObject", { enumerable: true, get: function() {
      return toDottedObject_1.toDottedObject;
    } });
    var createThunkedObjectProxy_1 = require_createThunkedObjectProxy();
    Object.defineProperty(exports, "createThunkedObjectProxy", { enumerable: true, get: function() {
      return createThunkedObjectProxy_1.createThunkedObjectProxy;
    } });
    var deepmerge_1 = require_deepmerge();
    Object.defineProperty(exports, "deepmerge", { enumerable: true, get: function() {
      return deepmerge_1.deepmerge;
    } });
    var filterByDotPaths_1 = require_filterByDotPaths();
    Object.defineProperty(exports, "filterByDotPaths", { enumerable: true, get: function() {
      return filterByDotPaths_1.filterByDotPaths;
    } });
    var pluralize_1 = require_pluralize();
    Object.defineProperty(exports, "pluralize", { enumerable: true, get: function() {
      return pluralize_1.pluralize;
    } });
    var dedent_1 = require_dedent();
    Object.defineProperty(exports, "dedent", { enumerable: true, get: function() {
      return dedent_1.dedent;
    } });
  }
});

// node_modules/web-streams-polyfill/dist/ponyfill.es2018.js
var require_ponyfill_es2018 = __commonJS({
  "node_modules/web-streams-polyfill/dist/ponyfill.es2018.js"(exports, module2) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module2 !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.WebStreamsPolyfill = {}));
    })(exports, function(exports2) {
      "use strict";
      function noop2() {
        return void 0;
      }
      function typeIsObject(x2) {
        return typeof x2 === "object" && x2 !== null || typeof x2 === "function";
      }
      const rethrowAssertionErrorRejection = noop2;
      function setFunctionName(fn, name) {
        try {
          Object.defineProperty(fn, "name", {
            value: name,
            configurable: true
          });
        } catch (_a2) {
        }
      }
      const originalPromise = Promise;
      const originalPromiseThen = Promise.prototype.then;
      const originalPromiseReject = Promise.reject.bind(originalPromise);
      function newPromise(executor) {
        return new originalPromise(executor);
      }
      function promiseResolvedWith(value) {
        return newPromise((resolve) => resolve(value));
      }
      function promiseRejectedWith(reason) {
        return originalPromiseReject(reason);
      }
      function PerformPromiseThen(promise, onFulfilled, onRejected) {
        return originalPromiseThen.call(promise, onFulfilled, onRejected);
      }
      function uponPromise(promise, onFulfilled, onRejected) {
        PerformPromiseThen(PerformPromiseThen(promise, onFulfilled, onRejected), void 0, rethrowAssertionErrorRejection);
      }
      function uponFulfillment(promise, onFulfilled) {
        uponPromise(promise, onFulfilled);
      }
      function uponRejection(promise, onRejected) {
        uponPromise(promise, void 0, onRejected);
      }
      function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler) {
        return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);
      }
      function setPromiseIsHandledToTrue(promise) {
        PerformPromiseThen(promise, void 0, rethrowAssertionErrorRejection);
      }
      let _queueMicrotask = (callback) => {
        if (typeof queueMicrotask === "function") {
          _queueMicrotask = queueMicrotask;
        } else {
          const resolvedPromise = promiseResolvedWith(void 0);
          _queueMicrotask = (cb) => PerformPromiseThen(resolvedPromise, cb);
        }
        return _queueMicrotask(callback);
      };
      function reflectCall(F2, V, args) {
        if (typeof F2 !== "function") {
          throw new TypeError("Argument is not a function");
        }
        return Function.prototype.apply.call(F2, V, args);
      }
      function promiseCall(F2, V, args) {
        try {
          return promiseResolvedWith(reflectCall(F2, V, args));
        } catch (value) {
          return promiseRejectedWith(value);
        }
      }
      const QUEUE_MAX_ARRAY_SIZE = 16384;
      class SimpleQueue {
        constructor() {
          this._cursor = 0;
          this._size = 0;
          this._front = {
            _elements: [],
            _next: void 0
          };
          this._back = this._front;
          this._cursor = 0;
          this._size = 0;
        }
        get length() {
          return this._size;
        }
        push(element) {
          const oldBack = this._back;
          let newBack = oldBack;
          if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {
            newBack = {
              _elements: [],
              _next: void 0
            };
          }
          oldBack._elements.push(element);
          if (newBack !== oldBack) {
            this._back = newBack;
            oldBack._next = newBack;
          }
          ++this._size;
        }
        shift() {
          const oldFront = this._front;
          let newFront = oldFront;
          const oldCursor = this._cursor;
          let newCursor = oldCursor + 1;
          const elements = oldFront._elements;
          const element = elements[oldCursor];
          if (newCursor === QUEUE_MAX_ARRAY_SIZE) {
            newFront = oldFront._next;
            newCursor = 0;
          }
          --this._size;
          this._cursor = newCursor;
          if (oldFront !== newFront) {
            this._front = newFront;
          }
          elements[oldCursor] = void 0;
          return element;
        }
        forEach(callback) {
          let i2 = this._cursor;
          let node = this._front;
          let elements = node._elements;
          while (i2 !== elements.length || node._next !== void 0) {
            if (i2 === elements.length) {
              node = node._next;
              elements = node._elements;
              i2 = 0;
              if (elements.length === 0) {
                break;
              }
            }
            callback(elements[i2]);
            ++i2;
          }
        }
        peek() {
          const front = this._front;
          const cursor = this._cursor;
          return front._elements[cursor];
        }
      }
      const AbortSteps = Symbol("[[AbortSteps]]");
      const ErrorSteps = Symbol("[[ErrorSteps]]");
      const CancelSteps = Symbol("[[CancelSteps]]");
      const PullSteps = Symbol("[[PullSteps]]");
      const ReleaseSteps = Symbol("[[ReleaseSteps]]");
      function ReadableStreamReaderGenericInitialize(reader, stream) {
        reader._ownerReadableStream = stream;
        stream._reader = reader;
        if (stream._state === "readable") {
          defaultReaderClosedPromiseInitialize(reader);
        } else if (stream._state === "closed") {
          defaultReaderClosedPromiseInitializeAsResolved(reader);
        } else {
          defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);
        }
      }
      function ReadableStreamReaderGenericCancel(reader, reason) {
        const stream = reader._ownerReadableStream;
        return ReadableStreamCancel(stream, reason);
      }
      function ReadableStreamReaderGenericRelease(reader) {
        const stream = reader._ownerReadableStream;
        if (stream._state === "readable") {
          defaultReaderClosedPromiseReject(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));
        } else {
          defaultReaderClosedPromiseResetToRejected(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));
        }
        stream._readableStreamController[ReleaseSteps]();
        stream._reader = void 0;
        reader._ownerReadableStream = void 0;
      }
      function readerLockException(name) {
        return new TypeError("Cannot " + name + " a stream using a released reader");
      }
      function defaultReaderClosedPromiseInitialize(reader) {
        reader._closedPromise = newPromise((resolve, reject) => {
          reader._closedPromise_resolve = resolve;
          reader._closedPromise_reject = reject;
        });
      }
      function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {
        defaultReaderClosedPromiseInitialize(reader);
        defaultReaderClosedPromiseReject(reader, reason);
      }
      function defaultReaderClosedPromiseInitializeAsResolved(reader) {
        defaultReaderClosedPromiseInitialize(reader);
        defaultReaderClosedPromiseResolve(reader);
      }
      function defaultReaderClosedPromiseReject(reader, reason) {
        if (reader._closedPromise_reject === void 0) {
          return;
        }
        setPromiseIsHandledToTrue(reader._closedPromise);
        reader._closedPromise_reject(reason);
        reader._closedPromise_resolve = void 0;
        reader._closedPromise_reject = void 0;
      }
      function defaultReaderClosedPromiseResetToRejected(reader, reason) {
        defaultReaderClosedPromiseInitializeAsRejected(reader, reason);
      }
      function defaultReaderClosedPromiseResolve(reader) {
        if (reader._closedPromise_resolve === void 0) {
          return;
        }
        reader._closedPromise_resolve(void 0);
        reader._closedPromise_resolve = void 0;
        reader._closedPromise_reject = void 0;
      }
      const NumberIsFinite = Number.isFinite || function(x2) {
        return typeof x2 === "number" && isFinite(x2);
      };
      const MathTrunc = Math.trunc || function(v) {
        return v < 0 ? Math.ceil(v) : Math.floor(v);
      };
      function isDictionary(x2) {
        return typeof x2 === "object" || typeof x2 === "function";
      }
      function assertDictionary(obj, context) {
        if (obj !== void 0 && !isDictionary(obj)) {
          throw new TypeError(`${context} is not an object.`);
        }
      }
      function assertFunction(x2, context) {
        if (typeof x2 !== "function") {
          throw new TypeError(`${context} is not a function.`);
        }
      }
      function isObject(x2) {
        return typeof x2 === "object" && x2 !== null || typeof x2 === "function";
      }
      function assertObject(x2, context) {
        if (!isObject(x2)) {
          throw new TypeError(`${context} is not an object.`);
        }
      }
      function assertRequiredArgument(x2, position, context) {
        if (x2 === void 0) {
          throw new TypeError(`Parameter ${position} is required in '${context}'.`);
        }
      }
      function assertRequiredField(x2, field, context) {
        if (x2 === void 0) {
          throw new TypeError(`${field} is required in '${context}'.`);
        }
      }
      function convertUnrestrictedDouble(value) {
        return Number(value);
      }
      function censorNegativeZero(x2) {
        return x2 === 0 ? 0 : x2;
      }
      function integerPart(x2) {
        return censorNegativeZero(MathTrunc(x2));
      }
      function convertUnsignedLongLongWithEnforceRange(value, context) {
        const lowerBound = 0;
        const upperBound = Number.MAX_SAFE_INTEGER;
        let x2 = Number(value);
        x2 = censorNegativeZero(x2);
        if (!NumberIsFinite(x2)) {
          throw new TypeError(`${context} is not a finite number`);
        }
        x2 = integerPart(x2);
        if (x2 < lowerBound || x2 > upperBound) {
          throw new TypeError(`${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`);
        }
        if (!NumberIsFinite(x2) || x2 === 0) {
          return 0;
        }
        return x2;
      }
      function assertReadableStream(x2, context) {
        if (!IsReadableStream(x2)) {
          throw new TypeError(`${context} is not a ReadableStream.`);
        }
      }
      function AcquireReadableStreamDefaultReader(stream) {
        return new ReadableStreamDefaultReader(stream);
      }
      function ReadableStreamAddReadRequest(stream, readRequest) {
        stream._reader._readRequests.push(readRequest);
      }
      function ReadableStreamFulfillReadRequest(stream, chunk, done) {
        const reader = stream._reader;
        const readRequest = reader._readRequests.shift();
        if (done) {
          readRequest._closeSteps();
        } else {
          readRequest._chunkSteps(chunk);
        }
      }
      function ReadableStreamGetNumReadRequests(stream) {
        return stream._reader._readRequests.length;
      }
      function ReadableStreamHasDefaultReader(stream) {
        const reader = stream._reader;
        if (reader === void 0) {
          return false;
        }
        if (!IsReadableStreamDefaultReader(reader)) {
          return false;
        }
        return true;
      }
      class ReadableStreamDefaultReader {
        constructor(stream) {
          assertRequiredArgument(stream, 1, "ReadableStreamDefaultReader");
          assertReadableStream(stream, "First parameter");
          if (IsReadableStreamLocked(stream)) {
            throw new TypeError("This stream has already been locked for exclusive reading by another reader");
          }
          ReadableStreamReaderGenericInitialize(this, stream);
          this._readRequests = new SimpleQueue();
        }
        get closed() {
          if (!IsReadableStreamDefaultReader(this)) {
            return promiseRejectedWith(defaultReaderBrandCheckException("closed"));
          }
          return this._closedPromise;
        }
        cancel(reason = void 0) {
          if (!IsReadableStreamDefaultReader(this)) {
            return promiseRejectedWith(defaultReaderBrandCheckException("cancel"));
          }
          if (this._ownerReadableStream === void 0) {
            return promiseRejectedWith(readerLockException("cancel"));
          }
          return ReadableStreamReaderGenericCancel(this, reason);
        }
        read() {
          if (!IsReadableStreamDefaultReader(this)) {
            return promiseRejectedWith(defaultReaderBrandCheckException("read"));
          }
          if (this._ownerReadableStream === void 0) {
            return promiseRejectedWith(readerLockException("read from"));
          }
          let resolvePromise;
          let rejectPromise;
          const promise = newPromise((resolve, reject) => {
            resolvePromise = resolve;
            rejectPromise = reject;
          });
          const readRequest = {
            _chunkSteps: (chunk) => resolvePromise({ value: chunk, done: false }),
            _closeSteps: () => resolvePromise({ value: void 0, done: true }),
            _errorSteps: (e2) => rejectPromise(e2)
          };
          ReadableStreamDefaultReaderRead(this, readRequest);
          return promise;
        }
        releaseLock() {
          if (!IsReadableStreamDefaultReader(this)) {
            throw defaultReaderBrandCheckException("releaseLock");
          }
          if (this._ownerReadableStream === void 0) {
            return;
          }
          ReadableStreamDefaultReaderRelease(this);
        }
      }
      Object.defineProperties(ReadableStreamDefaultReader.prototype, {
        cancel: { enumerable: true },
        read: { enumerable: true },
        releaseLock: { enumerable: true },
        closed: { enumerable: true }
      });
      setFunctionName(ReadableStreamDefaultReader.prototype.cancel, "cancel");
      setFunctionName(ReadableStreamDefaultReader.prototype.read, "read");
      setFunctionName(ReadableStreamDefaultReader.prototype.releaseLock, "releaseLock");
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(ReadableStreamDefaultReader.prototype, Symbol.toStringTag, {
          value: "ReadableStreamDefaultReader",
          configurable: true
        });
      }
      function IsReadableStreamDefaultReader(x2) {
        if (!typeIsObject(x2)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x2, "_readRequests")) {
          return false;
        }
        return x2 instanceof ReadableStreamDefaultReader;
      }
      function ReadableStreamDefaultReaderRead(reader, readRequest) {
        const stream = reader._ownerReadableStream;
        stream._disturbed = true;
        if (stream._state === "closed") {
          readRequest._closeSteps();
        } else if (stream._state === "errored") {
          readRequest._errorSteps(stream._storedError);
        } else {
          stream._readableStreamController[PullSteps](readRequest);
        }
      }
      function ReadableStreamDefaultReaderRelease(reader) {
        ReadableStreamReaderGenericRelease(reader);
        const e2 = new TypeError("Reader was released");
        ReadableStreamDefaultReaderErrorReadRequests(reader, e2);
      }
      function ReadableStreamDefaultReaderErrorReadRequests(reader, e2) {
        const readRequests = reader._readRequests;
        reader._readRequests = new SimpleQueue();
        readRequests.forEach((readRequest) => {
          readRequest._errorSteps(e2);
        });
      }
      function defaultReaderBrandCheckException(name) {
        return new TypeError(`ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);
      }
      const AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function* () {
      }).prototype);
      class ReadableStreamAsyncIteratorImpl {
        constructor(reader, preventCancel) {
          this._ongoingPromise = void 0;
          this._isFinished = false;
          this._reader = reader;
          this._preventCancel = preventCancel;
        }
        next() {
          const nextSteps = () => this._nextSteps();
          this._ongoingPromise = this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) : nextSteps();
          return this._ongoingPromise;
        }
        return(value) {
          const returnSteps = () => this._returnSteps(value);
          return this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) : returnSteps();
        }
        _nextSteps() {
          if (this._isFinished) {
            return Promise.resolve({ value: void 0, done: true });
          }
          const reader = this._reader;
          let resolvePromise;
          let rejectPromise;
          const promise = newPromise((resolve, reject) => {
            resolvePromise = resolve;
            rejectPromise = reject;
          });
          const readRequest = {
            _chunkSteps: (chunk) => {
              this._ongoingPromise = void 0;
              _queueMicrotask(() => resolvePromise({ value: chunk, done: false }));
            },
            _closeSteps: () => {
              this._ongoingPromise = void 0;
              this._isFinished = true;
              ReadableStreamReaderGenericRelease(reader);
              resolvePromise({ value: void 0, done: true });
            },
            _errorSteps: (reason) => {
              this._ongoingPromise = void 0;
              this._isFinished = true;
              ReadableStreamReaderGenericRelease(reader);
              rejectPromise(reason);
            }
          };
          ReadableStreamDefaultReaderRead(reader, readRequest);
          return promise;
        }
        _returnSteps(value) {
          if (this._isFinished) {
            return Promise.resolve({ value, done: true });
          }
          this._isFinished = true;
          const reader = this._reader;
          if (!this._preventCancel) {
            const result = ReadableStreamReaderGenericCancel(reader, value);
            ReadableStreamReaderGenericRelease(reader);
            return transformPromiseWith(result, () => ({ value, done: true }));
          }
          ReadableStreamReaderGenericRelease(reader);
          return promiseResolvedWith({ value, done: true });
        }
      }
      const ReadableStreamAsyncIteratorPrototype = {
        next() {
          if (!IsReadableStreamAsyncIterator(this)) {
            return promiseRejectedWith(streamAsyncIteratorBrandCheckException("next"));
          }
          return this._asyncIteratorImpl.next();
        },
        return(value) {
          if (!IsReadableStreamAsyncIterator(this)) {
            return promiseRejectedWith(streamAsyncIteratorBrandCheckException("return"));
          }
          return this._asyncIteratorImpl.return(value);
        }
      };
      Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);
      function AcquireReadableStreamAsyncIterator(stream, preventCancel) {
        const reader = AcquireReadableStreamDefaultReader(stream);
        const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);
        const iterator = Object.create(ReadableStreamAsyncIteratorPrototype);
        iterator._asyncIteratorImpl = impl;
        return iterator;
      }
      function IsReadableStreamAsyncIterator(x2) {
        if (!typeIsObject(x2)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x2, "_asyncIteratorImpl")) {
          return false;
        }
        try {
          return x2._asyncIteratorImpl instanceof ReadableStreamAsyncIteratorImpl;
        } catch (_a2) {
          return false;
        }
      }
      function streamAsyncIteratorBrandCheckException(name) {
        return new TypeError(`ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`);
      }
      const NumberIsNaN = Number.isNaN || function(x2) {
        return x2 !== x2;
      };
      var _a, _b, _c;
      function CreateArrayFromList(elements) {
        return elements.slice();
      }
      function CopyDataBlockBytes(dest, destOffset, src, srcOffset, n) {
        new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);
      }
      let TransferArrayBuffer = (O) => {
        if (typeof O.transfer === "function") {
          TransferArrayBuffer = (buffer) => buffer.transfer();
        } else if (typeof structuredClone === "function") {
          TransferArrayBuffer = (buffer) => structuredClone(buffer, { transfer: [buffer] });
        } else {
          TransferArrayBuffer = (buffer) => buffer;
        }
        return TransferArrayBuffer(O);
      };
      let IsDetachedBuffer = (O) => {
        if (typeof O.detached === "boolean") {
          IsDetachedBuffer = (buffer) => buffer.detached;
        } else {
          IsDetachedBuffer = (buffer) => buffer.byteLength === 0;
        }
        return IsDetachedBuffer(O);
      };
      function ArrayBufferSlice(buffer, begin, end) {
        if (buffer.slice) {
          return buffer.slice(begin, end);
        }
        const length = end - begin;
        const slice = new ArrayBuffer(length);
        CopyDataBlockBytes(slice, 0, buffer, begin, length);
        return slice;
      }
      function GetMethod(receiver, prop) {
        const func = receiver[prop];
        if (func === void 0 || func === null) {
          return void 0;
        }
        if (typeof func !== "function") {
          throw new TypeError(`${String(prop)} is not a function`);
        }
        return func;
      }
      function CreateAsyncFromSyncIterator(syncIteratorRecord) {
        const syncIterable = {
          [Symbol.iterator]: () => syncIteratorRecord.iterator
        };
        const asyncIterator = async function* () {
          return yield* syncIterable;
        }();
        const nextMethod = asyncIterator.next;
        return { iterator: asyncIterator, nextMethod, done: false };
      }
      const SymbolAsyncIterator = (_c = (_a = Symbol.asyncIterator) !== null && _a !== void 0 ? _a : (_b = Symbol.for) === null || _b === void 0 ? void 0 : _b.call(Symbol, "Symbol.asyncIterator")) !== null && _c !== void 0 ? _c : "@@asyncIterator";
      function GetIterator(obj, hint = "sync", method) {
        if (method === void 0) {
          if (hint === "async") {
            method = GetMethod(obj, SymbolAsyncIterator);
            if (method === void 0) {
              const syncMethod = GetMethod(obj, Symbol.iterator);
              const syncIteratorRecord = GetIterator(obj, "sync", syncMethod);
              return CreateAsyncFromSyncIterator(syncIteratorRecord);
            }
          } else {
            method = GetMethod(obj, Symbol.iterator);
          }
        }
        if (method === void 0) {
          throw new TypeError("The object is not iterable");
        }
        const iterator = reflectCall(method, obj, []);
        if (!typeIsObject(iterator)) {
          throw new TypeError("The iterator method must return an object");
        }
        const nextMethod = iterator.next;
        return { iterator, nextMethod, done: false };
      }
      function IteratorNext(iteratorRecord) {
        const result = reflectCall(iteratorRecord.nextMethod, iteratorRecord.iterator, []);
        if (!typeIsObject(result)) {
          throw new TypeError("The iterator.next() method must return an object");
        }
        return result;
      }
      function IteratorComplete(iterResult) {
        return Boolean(iterResult.done);
      }
      function IteratorValue(iterResult) {
        return iterResult.value;
      }
      function IsNonNegativeNumber(v) {
        if (typeof v !== "number") {
          return false;
        }
        if (NumberIsNaN(v)) {
          return false;
        }
        if (v < 0) {
          return false;
        }
        return true;
      }
      function CloneAsUint8Array(O) {
        const buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);
        return new Uint8Array(buffer);
      }
      function DequeueValue(container) {
        const pair = container._queue.shift();
        container._queueTotalSize -= pair.size;
        if (container._queueTotalSize < 0) {
          container._queueTotalSize = 0;
        }
        return pair.value;
      }
      function EnqueueValueWithSize(container, value, size) {
        if (!IsNonNegativeNumber(size) || size === Infinity) {
          throw new RangeError("Size must be a finite, non-NaN, non-negative number.");
        }
        container._queue.push({ value, size });
        container._queueTotalSize += size;
      }
      function PeekQueueValue(container) {
        const pair = container._queue.peek();
        return pair.value;
      }
      function ResetQueue(container) {
        container._queue = new SimpleQueue();
        container._queueTotalSize = 0;
      }
      function isDataViewConstructor(ctor) {
        return ctor === DataView;
      }
      function isDataView(view) {
        return isDataViewConstructor(view.constructor);
      }
      function arrayBufferViewElementSize(ctor) {
        if (isDataViewConstructor(ctor)) {
          return 1;
        }
        return ctor.BYTES_PER_ELEMENT;
      }
      class ReadableStreamBYOBRequest {
        constructor() {
          throw new TypeError("Illegal constructor");
        }
        get view() {
          if (!IsReadableStreamBYOBRequest(this)) {
            throw byobRequestBrandCheckException("view");
          }
          return this._view;
        }
        respond(bytesWritten) {
          if (!IsReadableStreamBYOBRequest(this)) {
            throw byobRequestBrandCheckException("respond");
          }
          assertRequiredArgument(bytesWritten, 1, "respond");
          bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, "First parameter");
          if (this._associatedReadableByteStreamController === void 0) {
            throw new TypeError("This BYOB request has been invalidated");
          }
          if (IsDetachedBuffer(this._view.buffer)) {
            throw new TypeError(`The BYOB request's buffer has been detached and so cannot be used as a response`);
          }
          ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);
        }
        respondWithNewView(view) {
          if (!IsReadableStreamBYOBRequest(this)) {
            throw byobRequestBrandCheckException("respondWithNewView");
          }
          assertRequiredArgument(view, 1, "respondWithNewView");
          if (!ArrayBuffer.isView(view)) {
            throw new TypeError("You can only respond with array buffer views");
          }
          if (this._associatedReadableByteStreamController === void 0) {
            throw new TypeError("This BYOB request has been invalidated");
          }
          if (IsDetachedBuffer(view.buffer)) {
            throw new TypeError("The given view's buffer has been detached and so cannot be used as a response");
          }
          ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);
        }
      }
      Object.defineProperties(ReadableStreamBYOBRequest.prototype, {
        respond: { enumerable: true },
        respondWithNewView: { enumerable: true },
        view: { enumerable: true }
      });
      setFunctionName(ReadableStreamBYOBRequest.prototype.respond, "respond");
      setFunctionName(ReadableStreamBYOBRequest.prototype.respondWithNewView, "respondWithNewView");
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(ReadableStreamBYOBRequest.prototype, Symbol.toStringTag, {
          value: "ReadableStreamBYOBRequest",
          configurable: true
        });
      }
      class ReadableByteStreamController {
        constructor() {
          throw new TypeError("Illegal constructor");
        }
        get byobRequest() {
          if (!IsReadableByteStreamController(this)) {
            throw byteStreamControllerBrandCheckException("byobRequest");
          }
          return ReadableByteStreamControllerGetBYOBRequest(this);
        }
        get desiredSize() {
          if (!IsReadableByteStreamController(this)) {
            throw byteStreamControllerBrandCheckException("desiredSize");
          }
          return ReadableByteStreamControllerGetDesiredSize(this);
        }
        close() {
          if (!IsReadableByteStreamController(this)) {
            throw byteStreamControllerBrandCheckException("close");
          }
          if (this._closeRequested) {
            throw new TypeError("The stream has already been closed; do not close it again!");
          }
          const state = this._controlledReadableByteStream._state;
          if (state !== "readable") {
            throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);
          }
          ReadableByteStreamControllerClose(this);
        }
        enqueue(chunk) {
          if (!IsReadableByteStreamController(this)) {
            throw byteStreamControllerBrandCheckException("enqueue");
          }
          assertRequiredArgument(chunk, 1, "enqueue");
          if (!ArrayBuffer.isView(chunk)) {
            throw new TypeError("chunk must be an array buffer view");
          }
          if (chunk.byteLength === 0) {
            throw new TypeError("chunk must have non-zero byteLength");
          }
          if (chunk.buffer.byteLength === 0) {
            throw new TypeError(`chunk's buffer must have non-zero byteLength`);
          }
          if (this._closeRequested) {
            throw new TypeError("stream is closed or draining");
          }
          const state = this._controlledReadableByteStream._state;
          if (state !== "readable") {
            throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);
          }
          ReadableByteStreamControllerEnqueue(this, chunk);
        }
        error(e2 = void 0) {
          if (!IsReadableByteStreamController(this)) {
            throw byteStreamControllerBrandCheckException("error");
          }
          ReadableByteStreamControllerError(this, e2);
        }
        [CancelSteps](reason) {
          ReadableByteStreamControllerClearPendingPullIntos(this);
          ResetQueue(this);
          const result = this._cancelAlgorithm(reason);
          ReadableByteStreamControllerClearAlgorithms(this);
          return result;
        }
        [PullSteps](readRequest) {
          const stream = this._controlledReadableByteStream;
          if (this._queueTotalSize > 0) {
            ReadableByteStreamControllerFillReadRequestFromQueue(this, readRequest);
            return;
          }
          const autoAllocateChunkSize = this._autoAllocateChunkSize;
          if (autoAllocateChunkSize !== void 0) {
            let buffer;
            try {
              buffer = new ArrayBuffer(autoAllocateChunkSize);
            } catch (bufferE) {
              readRequest._errorSteps(bufferE);
              return;
            }
            const pullIntoDescriptor = {
              buffer,
              bufferByteLength: autoAllocateChunkSize,
              byteOffset: 0,
              byteLength: autoAllocateChunkSize,
              bytesFilled: 0,
              minimumFill: 1,
              elementSize: 1,
              viewConstructor: Uint8Array,
              readerType: "default"
            };
            this._pendingPullIntos.push(pullIntoDescriptor);
          }
          ReadableStreamAddReadRequest(stream, readRequest);
          ReadableByteStreamControllerCallPullIfNeeded(this);
        }
        [ReleaseSteps]() {
          if (this._pendingPullIntos.length > 0) {
            const firstPullInto = this._pendingPullIntos.peek();
            firstPullInto.readerType = "none";
            this._pendingPullIntos = new SimpleQueue();
            this._pendingPullIntos.push(firstPullInto);
          }
        }
      }
      Object.defineProperties(ReadableByteStreamController.prototype, {
        close: { enumerable: true },
        enqueue: { enumerable: true },
        error: { enumerable: true },
        byobRequest: { enumerable: true },
        desiredSize: { enumerable: true }
      });
      setFunctionName(ReadableByteStreamController.prototype.close, "close");
      setFunctionName(ReadableByteStreamController.prototype.enqueue, "enqueue");
      setFunctionName(ReadableByteStreamController.prototype.error, "error");
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(ReadableByteStreamController.prototype, Symbol.toStringTag, {
          value: "ReadableByteStreamController",
          configurable: true
        });
      }
      function IsReadableByteStreamController(x2) {
        if (!typeIsObject(x2)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x2, "_controlledReadableByteStream")) {
          return false;
        }
        return x2 instanceof ReadableByteStreamController;
      }
      function IsReadableStreamBYOBRequest(x2) {
        if (!typeIsObject(x2)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x2, "_associatedReadableByteStreamController")) {
          return false;
        }
        return x2 instanceof ReadableStreamBYOBRequest;
      }
      function ReadableByteStreamControllerCallPullIfNeeded(controller) {
        const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);
        if (!shouldPull) {
          return;
        }
        if (controller._pulling) {
          controller._pullAgain = true;
          return;
        }
        controller._pulling = true;
        const pullPromise = controller._pullAlgorithm();
        uponPromise(pullPromise, () => {
          controller._pulling = false;
          if (controller._pullAgain) {
            controller._pullAgain = false;
            ReadableByteStreamControllerCallPullIfNeeded(controller);
          }
          return null;
        }, (e2) => {
          ReadableByteStreamControllerError(controller, e2);
          return null;
        });
      }
      function ReadableByteStreamControllerClearPendingPullIntos(controller) {
        ReadableByteStreamControllerInvalidateBYOBRequest(controller);
        controller._pendingPullIntos = new SimpleQueue();
      }
      function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {
        let done = false;
        if (stream._state === "closed") {
          done = true;
        }
        const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);
        if (pullIntoDescriptor.readerType === "default") {
          ReadableStreamFulfillReadRequest(stream, filledView, done);
        } else {
          ReadableStreamFulfillReadIntoRequest(stream, filledView, done);
        }
      }
      function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {
        const bytesFilled = pullIntoDescriptor.bytesFilled;
        const elementSize = pullIntoDescriptor.elementSize;
        return new pullIntoDescriptor.viewConstructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);
      }
      function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {
        controller._queue.push({ buffer, byteOffset, byteLength });
        controller._queueTotalSize += byteLength;
      }
      function ReadableByteStreamControllerEnqueueClonedChunkToQueue(controller, buffer, byteOffset, byteLength) {
        let clonedChunk;
        try {
          clonedChunk = ArrayBufferSlice(buffer, byteOffset, byteOffset + byteLength);
        } catch (cloneE) {
          ReadableByteStreamControllerError(controller, cloneE);
          throw cloneE;
        }
        ReadableByteStreamControllerEnqueueChunkToQueue(controller, clonedChunk, 0, byteLength);
      }
      function ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue(controller, firstDescriptor) {
        if (firstDescriptor.bytesFilled > 0) {
          ReadableByteStreamControllerEnqueueClonedChunkToQueue(controller, firstDescriptor.buffer, firstDescriptor.byteOffset, firstDescriptor.bytesFilled);
        }
        ReadableByteStreamControllerShiftPendingPullInto(controller);
      }
      function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {
        const maxBytesToCopy = Math.min(controller._queueTotalSize, pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);
        const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;
        let totalBytesToCopyRemaining = maxBytesToCopy;
        let ready = false;
        const remainderBytes = maxBytesFilled % pullIntoDescriptor.elementSize;
        const maxAlignedBytes = maxBytesFilled - remainderBytes;
        if (maxAlignedBytes >= pullIntoDescriptor.minimumFill) {
          totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;
          ready = true;
        }
        const queue = controller._queue;
        while (totalBytesToCopyRemaining > 0) {
          const headOfQueue = queue.peek();
          const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);
          const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;
          CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);
          if (headOfQueue.byteLength === bytesToCopy) {
            queue.shift();
          } else {
            headOfQueue.byteOffset += bytesToCopy;
            headOfQueue.byteLength -= bytesToCopy;
          }
          controller._queueTotalSize -= bytesToCopy;
          ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);
          totalBytesToCopyRemaining -= bytesToCopy;
        }
        return ready;
      }
      function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {
        pullIntoDescriptor.bytesFilled += size;
      }
      function ReadableByteStreamControllerHandleQueueDrain(controller) {
        if (controller._queueTotalSize === 0 && controller._closeRequested) {
          ReadableByteStreamControllerClearAlgorithms(controller);
          ReadableStreamClose(controller._controlledReadableByteStream);
        } else {
          ReadableByteStreamControllerCallPullIfNeeded(controller);
        }
      }
      function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {
        if (controller._byobRequest === null) {
          return;
        }
        controller._byobRequest._associatedReadableByteStreamController = void 0;
        controller._byobRequest._view = null;
        controller._byobRequest = null;
      }
      function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {
        while (controller._pendingPullIntos.length > 0) {
          if (controller._queueTotalSize === 0) {
            return;
          }
          const pullIntoDescriptor = controller._pendingPullIntos.peek();
          if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {
            ReadableByteStreamControllerShiftPendingPullInto(controller);
            ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);
          }
        }
      }
      function ReadableByteStreamControllerProcessReadRequestsUsingQueue(controller) {
        const reader = controller._controlledReadableByteStream._reader;
        while (reader._readRequests.length > 0) {
          if (controller._queueTotalSize === 0) {
            return;
          }
          const readRequest = reader._readRequests.shift();
          ReadableByteStreamControllerFillReadRequestFromQueue(controller, readRequest);
        }
      }
      function ReadableByteStreamControllerPullInto(controller, view, min, readIntoRequest) {
        const stream = controller._controlledReadableByteStream;
        const ctor = view.constructor;
        const elementSize = arrayBufferViewElementSize(ctor);
        const { byteOffset, byteLength } = view;
        const minimumFill = min * elementSize;
        let buffer;
        try {
          buffer = TransferArrayBuffer(view.buffer);
        } catch (e2) {
          readIntoRequest._errorSteps(e2);
          return;
        }
        const pullIntoDescriptor = {
          buffer,
          bufferByteLength: buffer.byteLength,
          byteOffset,
          byteLength,
          bytesFilled: 0,
          minimumFill,
          elementSize,
          viewConstructor: ctor,
          readerType: "byob"
        };
        if (controller._pendingPullIntos.length > 0) {
          controller._pendingPullIntos.push(pullIntoDescriptor);
          ReadableStreamAddReadIntoRequest(stream, readIntoRequest);
          return;
        }
        if (stream._state === "closed") {
          const emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);
          readIntoRequest._closeSteps(emptyView);
          return;
        }
        if (controller._queueTotalSize > 0) {
          if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {
            const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);
            ReadableByteStreamControllerHandleQueueDrain(controller);
            readIntoRequest._chunkSteps(filledView);
            return;
          }
          if (controller._closeRequested) {
            const e2 = new TypeError("Insufficient bytes to fill elements in the given buffer");
            ReadableByteStreamControllerError(controller, e2);
            readIntoRequest._errorSteps(e2);
            return;
          }
        }
        controller._pendingPullIntos.push(pullIntoDescriptor);
        ReadableStreamAddReadIntoRequest(stream, readIntoRequest);
        ReadableByteStreamControllerCallPullIfNeeded(controller);
      }
      function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {
        if (firstDescriptor.readerType === "none") {
          ReadableByteStreamControllerShiftPendingPullInto(controller);
        }
        const stream = controller._controlledReadableByteStream;
        if (ReadableStreamHasBYOBReader(stream)) {
          while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {
            const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);
            ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);
          }
        }
      }
      function ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {
        ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);
        if (pullIntoDescriptor.readerType === "none") {
          ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue(controller, pullIntoDescriptor);
          ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
          return;
        }
        if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.minimumFill) {
          return;
        }
        ReadableByteStreamControllerShiftPendingPullInto(controller);
        const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;
        if (remainderSize > 0) {
          const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;
          ReadableByteStreamControllerEnqueueClonedChunkToQueue(controller, pullIntoDescriptor.buffer, end - remainderSize, remainderSize);
        }
        pullIntoDescriptor.bytesFilled -= remainderSize;
        ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);
        ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
      }
      function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {
        const firstDescriptor = controller._pendingPullIntos.peek();
        ReadableByteStreamControllerInvalidateBYOBRequest(controller);
        const state = controller._controlledReadableByteStream._state;
        if (state === "closed") {
          ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor);
        } else {
          ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);
        }
        ReadableByteStreamControllerCallPullIfNeeded(controller);
      }
      function ReadableByteStreamControllerShiftPendingPullInto(controller) {
        const descriptor = controller._pendingPullIntos.shift();
        return descriptor;
      }
      function ReadableByteStreamControllerShouldCallPull(controller) {
        const stream = controller._controlledReadableByteStream;
        if (stream._state !== "readable") {
          return false;
        }
        if (controller._closeRequested) {
          return false;
        }
        if (!controller._started) {
          return false;
        }
        if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
          return true;
        }
        if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {
          return true;
        }
        const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);
        if (desiredSize > 0) {
          return true;
        }
        return false;
      }
      function ReadableByteStreamControllerClearAlgorithms(controller) {
        controller._pullAlgorithm = void 0;
        controller._cancelAlgorithm = void 0;
      }
      function ReadableByteStreamControllerClose(controller) {
        const stream = controller._controlledReadableByteStream;
        if (controller._closeRequested || stream._state !== "readable") {
          return;
        }
        if (controller._queueTotalSize > 0) {
          controller._closeRequested = true;
          return;
        }
        if (controller._pendingPullIntos.length > 0) {
          const firstPendingPullInto = controller._pendingPullIntos.peek();
          if (firstPendingPullInto.bytesFilled % firstPendingPullInto.elementSize !== 0) {
            const e2 = new TypeError("Insufficient bytes to fill elements in the given buffer");
            ReadableByteStreamControllerError(controller, e2);
            throw e2;
          }
        }
        ReadableByteStreamControllerClearAlgorithms(controller);
        ReadableStreamClose(stream);
      }
      function ReadableByteStreamControllerEnqueue(controller, chunk) {
        const stream = controller._controlledReadableByteStream;
        if (controller._closeRequested || stream._state !== "readable") {
          return;
        }
        const { buffer, byteOffset, byteLength } = chunk;
        if (IsDetachedBuffer(buffer)) {
          throw new TypeError("chunk's buffer is detached and so cannot be enqueued");
        }
        const transferredBuffer = TransferArrayBuffer(buffer);
        if (controller._pendingPullIntos.length > 0) {
          const firstPendingPullInto = controller._pendingPullIntos.peek();
          if (IsDetachedBuffer(firstPendingPullInto.buffer)) {
            throw new TypeError("The BYOB request's buffer has been detached and so cannot be filled with an enqueued chunk");
          }
          ReadableByteStreamControllerInvalidateBYOBRequest(controller);
          firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);
          if (firstPendingPullInto.readerType === "none") {
            ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue(controller, firstPendingPullInto);
          }
        }
        if (ReadableStreamHasDefaultReader(stream)) {
          ReadableByteStreamControllerProcessReadRequestsUsingQueue(controller);
          if (ReadableStreamGetNumReadRequests(stream) === 0) {
            ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
          } else {
            if (controller._pendingPullIntos.length > 0) {
              ReadableByteStreamControllerShiftPendingPullInto(controller);
            }
            const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);
            ReadableStreamFulfillReadRequest(stream, transferredView, false);
          }
        } else if (ReadableStreamHasBYOBReader(stream)) {
          ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
          ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
        } else {
          ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
        }
        ReadableByteStreamControllerCallPullIfNeeded(controller);
      }
      function ReadableByteStreamControllerError(controller, e2) {
        const stream = controller._controlledReadableByteStream;
        if (stream._state !== "readable") {
          return;
        }
        ReadableByteStreamControllerClearPendingPullIntos(controller);
        ResetQueue(controller);
        ReadableByteStreamControllerClearAlgorithms(controller);
        ReadableStreamError(stream, e2);
      }
      function ReadableByteStreamControllerFillReadRequestFromQueue(controller, readRequest) {
        const entry = controller._queue.shift();
        controller._queueTotalSize -= entry.byteLength;
        ReadableByteStreamControllerHandleQueueDrain(controller);
        const view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);
        readRequest._chunkSteps(view);
      }
      function ReadableByteStreamControllerGetBYOBRequest(controller) {
        if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {
          const firstDescriptor = controller._pendingPullIntos.peek();
          const view = new Uint8Array(firstDescriptor.buffer, firstDescriptor.byteOffset + firstDescriptor.bytesFilled, firstDescriptor.byteLength - firstDescriptor.bytesFilled);
          const byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);
          SetUpReadableStreamBYOBRequest(byobRequest, controller, view);
          controller._byobRequest = byobRequest;
        }
        return controller._byobRequest;
      }
      function ReadableByteStreamControllerGetDesiredSize(controller) {
        const state = controller._controlledReadableByteStream._state;
        if (state === "errored") {
          return null;
        }
        if (state === "closed") {
          return 0;
        }
        return controller._strategyHWM - controller._queueTotalSize;
      }
      function ReadableByteStreamControllerRespond(controller, bytesWritten) {
        const firstDescriptor = controller._pendingPullIntos.peek();
        const state = controller._controlledReadableByteStream._state;
        if (state === "closed") {
          if (bytesWritten !== 0) {
            throw new TypeError("bytesWritten must be 0 when calling respond() on a closed stream");
          }
        } else {
          if (bytesWritten === 0) {
            throw new TypeError("bytesWritten must be greater than 0 when calling respond() on a readable stream");
          }
          if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {
            throw new RangeError("bytesWritten out of range");
          }
        }
        firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);
        ReadableByteStreamControllerRespondInternal(controller, bytesWritten);
      }
      function ReadableByteStreamControllerRespondWithNewView(controller, view) {
        const firstDescriptor = controller._pendingPullIntos.peek();
        const state = controller._controlledReadableByteStream._state;
        if (state === "closed") {
          if (view.byteLength !== 0) {
            throw new TypeError("The view's length must be 0 when calling respondWithNewView() on a closed stream");
          }
        } else {
          if (view.byteLength === 0) {
            throw new TypeError("The view's length must be greater than 0 when calling respondWithNewView() on a readable stream");
          }
        }
        if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {
          throw new RangeError("The region specified by view does not match byobRequest");
        }
        if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {
          throw new RangeError("The buffer of view has different capacity than byobRequest");
        }
        if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {
          throw new RangeError("The region specified by view is larger than byobRequest");
        }
        const viewByteLength = view.byteLength;
        firstDescriptor.buffer = TransferArrayBuffer(view.buffer);
        ReadableByteStreamControllerRespondInternal(controller, viewByteLength);
      }
      function SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize) {
        controller._controlledReadableByteStream = stream;
        controller._pullAgain = false;
        controller._pulling = false;
        controller._byobRequest = null;
        controller._queue = controller._queueTotalSize = void 0;
        ResetQueue(controller);
        controller._closeRequested = false;
        controller._started = false;
        controller._strategyHWM = highWaterMark;
        controller._pullAlgorithm = pullAlgorithm;
        controller._cancelAlgorithm = cancelAlgorithm;
        controller._autoAllocateChunkSize = autoAllocateChunkSize;
        controller._pendingPullIntos = new SimpleQueue();
        stream._readableStreamController = controller;
        const startResult = startAlgorithm();
        uponPromise(promiseResolvedWith(startResult), () => {
          controller._started = true;
          ReadableByteStreamControllerCallPullIfNeeded(controller);
          return null;
        }, (r2) => {
          ReadableByteStreamControllerError(controller, r2);
          return null;
        });
      }
      function SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {
        const controller = Object.create(ReadableByteStreamController.prototype);
        let startAlgorithm;
        let pullAlgorithm;
        let cancelAlgorithm;
        if (underlyingByteSource.start !== void 0) {
          startAlgorithm = () => underlyingByteSource.start(controller);
        } else {
          startAlgorithm = () => void 0;
        }
        if (underlyingByteSource.pull !== void 0) {
          pullAlgorithm = () => underlyingByteSource.pull(controller);
        } else {
          pullAlgorithm = () => promiseResolvedWith(void 0);
        }
        if (underlyingByteSource.cancel !== void 0) {
          cancelAlgorithm = (reason) => underlyingByteSource.cancel(reason);
        } else {
          cancelAlgorithm = () => promiseResolvedWith(void 0);
        }
        const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;
        if (autoAllocateChunkSize === 0) {
          throw new TypeError("autoAllocateChunkSize must be greater than 0");
        }
        SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize);
      }
      function SetUpReadableStreamBYOBRequest(request, controller, view) {
        request._associatedReadableByteStreamController = controller;
        request._view = view;
      }
      function byobRequestBrandCheckException(name) {
        return new TypeError(`ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);
      }
      function byteStreamControllerBrandCheckException(name) {
        return new TypeError(`ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);
      }
      function convertReaderOptions(options, context) {
        assertDictionary(options, context);
        const mode = options === null || options === void 0 ? void 0 : options.mode;
        return {
          mode: mode === void 0 ? void 0 : convertReadableStreamReaderMode(mode, `${context} has member 'mode' that`)
        };
      }
      function convertReadableStreamReaderMode(mode, context) {
        mode = `${mode}`;
        if (mode !== "byob") {
          throw new TypeError(`${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`);
        }
        return mode;
      }
      function convertByobReadOptions(options, context) {
        var _a2;
        assertDictionary(options, context);
        const min = (_a2 = options === null || options === void 0 ? void 0 : options.min) !== null && _a2 !== void 0 ? _a2 : 1;
        return {
          min: convertUnsignedLongLongWithEnforceRange(min, `${context} has member 'min' that`)
        };
      }
      function AcquireReadableStreamBYOBReader(stream) {
        return new ReadableStreamBYOBReader(stream);
      }
      function ReadableStreamAddReadIntoRequest(stream, readIntoRequest) {
        stream._reader._readIntoRequests.push(readIntoRequest);
      }
      function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {
        const reader = stream._reader;
        const readIntoRequest = reader._readIntoRequests.shift();
        if (done) {
          readIntoRequest._closeSteps(chunk);
        } else {
          readIntoRequest._chunkSteps(chunk);
        }
      }
      function ReadableStreamGetNumReadIntoRequests(stream) {
        return stream._reader._readIntoRequests.length;
      }
      function ReadableStreamHasBYOBReader(stream) {
        const reader = stream._reader;
        if (reader === void 0) {
          return false;
        }
        if (!IsReadableStreamBYOBReader(reader)) {
          return false;
        }
        return true;
      }
      class ReadableStreamBYOBReader {
        constructor(stream) {
          assertRequiredArgument(stream, 1, "ReadableStreamBYOBReader");
          assertReadableStream(stream, "First parameter");
          if (IsReadableStreamLocked(stream)) {
            throw new TypeError("This stream has already been locked for exclusive reading by another reader");
          }
          if (!IsReadableByteStreamController(stream._readableStreamController)) {
            throw new TypeError("Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source");
          }
          ReadableStreamReaderGenericInitialize(this, stream);
          this._readIntoRequests = new SimpleQueue();
        }
        get closed() {
          if (!IsReadableStreamBYOBReader(this)) {
            return promiseRejectedWith(byobReaderBrandCheckException("closed"));
          }
          return this._closedPromise;
        }
        cancel(reason = void 0) {
          if (!IsReadableStreamBYOBReader(this)) {
            return promiseRejectedWith(byobReaderBrandCheckException("cancel"));
          }
          if (this._ownerReadableStream === void 0) {
            return promiseRejectedWith(readerLockException("cancel"));
          }
          return ReadableStreamReaderGenericCancel(this, reason);
        }
        read(view, rawOptions = {}) {
          if (!IsReadableStreamBYOBReader(this)) {
            return promiseRejectedWith(byobReaderBrandCheckException("read"));
          }
          if (!ArrayBuffer.isView(view)) {
            return promiseRejectedWith(new TypeError("view must be an array buffer view"));
          }
          if (view.byteLength === 0) {
            return promiseRejectedWith(new TypeError("view must have non-zero byteLength"));
          }
          if (view.buffer.byteLength === 0) {
            return promiseRejectedWith(new TypeError(`view's buffer must have non-zero byteLength`));
          }
          if (IsDetachedBuffer(view.buffer)) {
            return promiseRejectedWith(new TypeError("view's buffer has been detached"));
          }
          let options;
          try {
            options = convertByobReadOptions(rawOptions, "options");
          } catch (e2) {
            return promiseRejectedWith(e2);
          }
          const min = options.min;
          if (min === 0) {
            return promiseRejectedWith(new TypeError("options.min must be greater than 0"));
          }
          if (!isDataView(view)) {
            if (min > view.length) {
              return promiseRejectedWith(new RangeError("options.min must be less than or equal to view's length"));
            }
          } else if (min > view.byteLength) {
            return promiseRejectedWith(new RangeError("options.min must be less than or equal to view's byteLength"));
          }
          if (this._ownerReadableStream === void 0) {
            return promiseRejectedWith(readerLockException("read from"));
          }
          let resolvePromise;
          let rejectPromise;
          const promise = newPromise((resolve, reject) => {
            resolvePromise = resolve;
            rejectPromise = reject;
          });
          const readIntoRequest = {
            _chunkSteps: (chunk) => resolvePromise({ value: chunk, done: false }),
            _closeSteps: (chunk) => resolvePromise({ value: chunk, done: true }),
            _errorSteps: (e2) => rejectPromise(e2)
          };
          ReadableStreamBYOBReaderRead(this, view, min, readIntoRequest);
          return promise;
        }
        releaseLock() {
          if (!IsReadableStreamBYOBReader(this)) {
            throw byobReaderBrandCheckException("releaseLock");
          }
          if (this._ownerReadableStream === void 0) {
            return;
          }
          ReadableStreamBYOBReaderRelease(this);
        }
      }
      Object.defineProperties(ReadableStreamBYOBReader.prototype, {
        cancel: { enumerable: true },
        read: { enumerable: true },
        releaseLock: { enumerable: true },
        closed: { enumerable: true }
      });
      setFunctionName(ReadableStreamBYOBReader.prototype.cancel, "cancel");
      setFunctionName(ReadableStreamBYOBReader.prototype.read, "read");
      setFunctionName(ReadableStreamBYOBReader.prototype.releaseLock, "releaseLock");
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(ReadableStreamBYOBReader.prototype, Symbol.toStringTag, {
          value: "ReadableStreamBYOBReader",
          configurable: true
        });
      }
      function IsReadableStreamBYOBReader(x2) {
        if (!typeIsObject(x2)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x2, "_readIntoRequests")) {
          return false;
        }
        return x2 instanceof ReadableStreamBYOBReader;
      }
      function ReadableStreamBYOBReaderRead(reader, view, min, readIntoRequest) {
        const stream = reader._ownerReadableStream;
        stream._disturbed = true;
        if (stream._state === "errored") {
          readIntoRequest._errorSteps(stream._storedError);
        } else {
          ReadableByteStreamControllerPullInto(stream._readableStreamController, view, min, readIntoRequest);
        }
      }
      function ReadableStreamBYOBReaderRelease(reader) {
        ReadableStreamReaderGenericRelease(reader);
        const e2 = new TypeError("Reader was released");
        ReadableStreamBYOBReaderErrorReadIntoRequests(reader, e2);
      }
      function ReadableStreamBYOBReaderErrorReadIntoRequests(reader, e2) {
        const readIntoRequests = reader._readIntoRequests;
        reader._readIntoRequests = new SimpleQueue();
        readIntoRequests.forEach((readIntoRequest) => {
          readIntoRequest._errorSteps(e2);
        });
      }
      function byobReaderBrandCheckException(name) {
        return new TypeError(`ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);
      }
      function ExtractHighWaterMark(strategy, defaultHWM) {
        const { highWaterMark } = strategy;
        if (highWaterMark === void 0) {
          return defaultHWM;
        }
        if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {
          throw new RangeError("Invalid highWaterMark");
        }
        return highWaterMark;
      }
      function ExtractSizeAlgorithm(strategy) {
        const { size } = strategy;
        if (!size) {
          return () => 1;
        }
        return size;
      }
      function convertQueuingStrategy(init, context) {
        assertDictionary(init, context);
        const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;
        const size = init === null || init === void 0 ? void 0 : init.size;
        return {
          highWaterMark: highWaterMark === void 0 ? void 0 : convertUnrestrictedDouble(highWaterMark),
          size: size === void 0 ? void 0 : convertQueuingStrategySize(size, `${context} has member 'size' that`)
        };
      }
      function convertQueuingStrategySize(fn, context) {
        assertFunction(fn, context);
        return (chunk) => convertUnrestrictedDouble(fn(chunk));
      }
      function convertUnderlyingSink(original, context) {
        assertDictionary(original, context);
        const abort = original === null || original === void 0 ? void 0 : original.abort;
        const close = original === null || original === void 0 ? void 0 : original.close;
        const start = original === null || original === void 0 ? void 0 : original.start;
        const type = original === null || original === void 0 ? void 0 : original.type;
        const write = original === null || original === void 0 ? void 0 : original.write;
        return {
          abort: abort === void 0 ? void 0 : convertUnderlyingSinkAbortCallback(abort, original, `${context} has member 'abort' that`),
          close: close === void 0 ? void 0 : convertUnderlyingSinkCloseCallback(close, original, `${context} has member 'close' that`),
          start: start === void 0 ? void 0 : convertUnderlyingSinkStartCallback(start, original, `${context} has member 'start' that`),
          write: write === void 0 ? void 0 : convertUnderlyingSinkWriteCallback(write, original, `${context} has member 'write' that`),
          type
        };
      }
      function convertUnderlyingSinkAbortCallback(fn, original, context) {
        assertFunction(fn, context);
        return (reason) => promiseCall(fn, original, [reason]);
      }
      function convertUnderlyingSinkCloseCallback(fn, original, context) {
        assertFunction(fn, context);
        return () => promiseCall(fn, original, []);
      }
      function convertUnderlyingSinkStartCallback(fn, original, context) {
        assertFunction(fn, context);
        return (controller) => reflectCall(fn, original, [controller]);
      }
      function convertUnderlyingSinkWriteCallback(fn, original, context) {
        assertFunction(fn, context);
        return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);
      }
      function assertWritableStream(x2, context) {
        if (!IsWritableStream(x2)) {
          throw new TypeError(`${context} is not a WritableStream.`);
        }
      }
      function isAbortSignal2(value) {
        if (typeof value !== "object" || value === null) {
          return false;
        }
        try {
          return typeof value.aborted === "boolean";
        } catch (_a2) {
          return false;
        }
      }
      const supportsAbortController = typeof AbortController === "function";
      function createAbortController() {
        if (supportsAbortController) {
          return new AbortController();
        }
        return void 0;
      }
      class WritableStream {
        constructor(rawUnderlyingSink = {}, rawStrategy = {}) {
          if (rawUnderlyingSink === void 0) {
            rawUnderlyingSink = null;
          } else {
            assertObject(rawUnderlyingSink, "First parameter");
          }
          const strategy = convertQueuingStrategy(rawStrategy, "Second parameter");
          const underlyingSink = convertUnderlyingSink(rawUnderlyingSink, "First parameter");
          InitializeWritableStream(this);
          const type = underlyingSink.type;
          if (type !== void 0) {
            throw new RangeError("Invalid type is specified");
          }
          const sizeAlgorithm = ExtractSizeAlgorithm(strategy);
          const highWaterMark = ExtractHighWaterMark(strategy, 1);
          SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);
        }
        get locked() {
          if (!IsWritableStream(this)) {
            throw streamBrandCheckException$2("locked");
          }
          return IsWritableStreamLocked(this);
        }
        abort(reason = void 0) {
          if (!IsWritableStream(this)) {
            return promiseRejectedWith(streamBrandCheckException$2("abort"));
          }
          if (IsWritableStreamLocked(this)) {
            return promiseRejectedWith(new TypeError("Cannot abort a stream that already has a writer"));
          }
          return WritableStreamAbort(this, reason);
        }
        close() {
          if (!IsWritableStream(this)) {
            return promiseRejectedWith(streamBrandCheckException$2("close"));
          }
          if (IsWritableStreamLocked(this)) {
            return promiseRejectedWith(new TypeError("Cannot close a stream that already has a writer"));
          }
          if (WritableStreamCloseQueuedOrInFlight(this)) {
            return promiseRejectedWith(new TypeError("Cannot close an already-closing stream"));
          }
          return WritableStreamClose(this);
        }
        getWriter() {
          if (!IsWritableStream(this)) {
            throw streamBrandCheckException$2("getWriter");
          }
          return AcquireWritableStreamDefaultWriter(this);
        }
      }
      Object.defineProperties(WritableStream.prototype, {
        abort: { enumerable: true },
        close: { enumerable: true },
        getWriter: { enumerable: true },
        locked: { enumerable: true }
      });
      setFunctionName(WritableStream.prototype.abort, "abort");
      setFunctionName(WritableStream.prototype.close, "close");
      setFunctionName(WritableStream.prototype.getWriter, "getWriter");
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(WritableStream.prototype, Symbol.toStringTag, {
          value: "WritableStream",
          configurable: true
        });
      }
      function AcquireWritableStreamDefaultWriter(stream) {
        return new WritableStreamDefaultWriter(stream);
      }
      function CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {
        const stream = Object.create(WritableStream.prototype);
        InitializeWritableStream(stream);
        const controller = Object.create(WritableStreamDefaultController.prototype);
        SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);
        return stream;
      }
      function InitializeWritableStream(stream) {
        stream._state = "writable";
        stream._storedError = void 0;
        stream._writer = void 0;
        stream._writableStreamController = void 0;
        stream._writeRequests = new SimpleQueue();
        stream._inFlightWriteRequest = void 0;
        stream._closeRequest = void 0;
        stream._inFlightCloseRequest = void 0;
        stream._pendingAbortRequest = void 0;
        stream._backpressure = false;
      }
      function IsWritableStream(x2) {
        if (!typeIsObject(x2)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x2, "_writableStreamController")) {
          return false;
        }
        return x2 instanceof WritableStream;
      }
      function IsWritableStreamLocked(stream) {
        if (stream._writer === void 0) {
          return false;
        }
        return true;
      }
      function WritableStreamAbort(stream, reason) {
        var _a2;
        if (stream._state === "closed" || stream._state === "errored") {
          return promiseResolvedWith(void 0);
        }
        stream._writableStreamController._abortReason = reason;
        (_a2 = stream._writableStreamController._abortController) === null || _a2 === void 0 ? void 0 : _a2.abort(reason);
        const state = stream._state;
        if (state === "closed" || state === "errored") {
          return promiseResolvedWith(void 0);
        }
        if (stream._pendingAbortRequest !== void 0) {
          return stream._pendingAbortRequest._promise;
        }
        let wasAlreadyErroring = false;
        if (state === "erroring") {
          wasAlreadyErroring = true;
          reason = void 0;
        }
        const promise = newPromise((resolve, reject) => {
          stream._pendingAbortRequest = {
            _promise: void 0,
            _resolve: resolve,
            _reject: reject,
            _reason: reason,
            _wasAlreadyErroring: wasAlreadyErroring
          };
        });
        stream._pendingAbortRequest._promise = promise;
        if (!wasAlreadyErroring) {
          WritableStreamStartErroring(stream, reason);
        }
        return promise;
      }
      function WritableStreamClose(stream) {
        const state = stream._state;
        if (state === "closed" || state === "errored") {
          return promiseRejectedWith(new TypeError(`The stream (in ${state} state) is not in the writable state and cannot be closed`));
        }
        const promise = newPromise((resolve, reject) => {
          const closeRequest = {
            _resolve: resolve,
            _reject: reject
          };
          stream._closeRequest = closeRequest;
        });
        const writer = stream._writer;
        if (writer !== void 0 && stream._backpressure && state === "writable") {
          defaultWriterReadyPromiseResolve(writer);
        }
        WritableStreamDefaultControllerClose(stream._writableStreamController);
        return promise;
      }
      function WritableStreamAddWriteRequest(stream) {
        const promise = newPromise((resolve, reject) => {
          const writeRequest = {
            _resolve: resolve,
            _reject: reject
          };
          stream._writeRequests.push(writeRequest);
        });
        return promise;
      }
      function WritableStreamDealWithRejection(stream, error) {
        const state = stream._state;
        if (state === "writable") {
          WritableStreamStartErroring(stream, error);
          return;
        }
        WritableStreamFinishErroring(stream);
      }
      function WritableStreamStartErroring(stream, reason) {
        const controller = stream._writableStreamController;
        stream._state = "erroring";
        stream._storedError = reason;
        const writer = stream._writer;
        if (writer !== void 0) {
          WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);
        }
        if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {
          WritableStreamFinishErroring(stream);
        }
      }
      function WritableStreamFinishErroring(stream) {
        stream._state = "errored";
        stream._writableStreamController[ErrorSteps]();
        const storedError = stream._storedError;
        stream._writeRequests.forEach((writeRequest) => {
          writeRequest._reject(storedError);
        });
        stream._writeRequests = new SimpleQueue();
        if (stream._pendingAbortRequest === void 0) {
          WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
          return;
        }
        const abortRequest = stream._pendingAbortRequest;
        stream._pendingAbortRequest = void 0;
        if (abortRequest._wasAlreadyErroring) {
          abortRequest._reject(storedError);
          WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
          return;
        }
        const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);
        uponPromise(promise, () => {
          abortRequest._resolve();
          WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
          return null;
        }, (reason) => {
          abortRequest._reject(reason);
          WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
          return null;
        });
      }
      function WritableStreamFinishInFlightWrite(stream) {
        stream._inFlightWriteRequest._resolve(void 0);
        stream._inFlightWriteRequest = void 0;
      }
      function WritableStreamFinishInFlightWriteWithError(stream, error) {
        stream._inFlightWriteRequest._reject(error);
        stream._inFlightWriteRequest = void 0;
        WritableStreamDealWithRejection(stream, error);
      }
      function WritableStreamFinishInFlightClose(stream) {
        stream._inFlightCloseRequest._resolve(void 0);
        stream._inFlightCloseRequest = void 0;
        const state = stream._state;
        if (state === "erroring") {
          stream._storedError = void 0;
          if (stream._pendingAbortRequest !== void 0) {
            stream._pendingAbortRequest._resolve();
            stream._pendingAbortRequest = void 0;
          }
        }
        stream._state = "closed";
        const writer = stream._writer;
        if (writer !== void 0) {
          defaultWriterClosedPromiseResolve(writer);
        }
      }
      function WritableStreamFinishInFlightCloseWithError(stream, error) {
        stream._inFlightCloseRequest._reject(error);
        stream._inFlightCloseRequest = void 0;
        if (stream._pendingAbortRequest !== void 0) {
          stream._pendingAbortRequest._reject(error);
          stream._pendingAbortRequest = void 0;
        }
        WritableStreamDealWithRejection(stream, error);
      }
      function WritableStreamCloseQueuedOrInFlight(stream) {
        if (stream._closeRequest === void 0 && stream._inFlightCloseRequest === void 0) {
          return false;
        }
        return true;
      }
      function WritableStreamHasOperationMarkedInFlight(stream) {
        if (stream._inFlightWriteRequest === void 0 && stream._inFlightCloseRequest === void 0) {
          return false;
        }
        return true;
      }
      function WritableStreamMarkCloseRequestInFlight(stream) {
        stream._inFlightCloseRequest = stream._closeRequest;
        stream._closeRequest = void 0;
      }
      function WritableStreamMarkFirstWriteRequestInFlight(stream) {
        stream._inFlightWriteRequest = stream._writeRequests.shift();
      }
      function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {
        if (stream._closeRequest !== void 0) {
          stream._closeRequest._reject(stream._storedError);
          stream._closeRequest = void 0;
        }
        const writer = stream._writer;
        if (writer !== void 0) {
          defaultWriterClosedPromiseReject(writer, stream._storedError);
        }
      }
      function WritableStreamUpdateBackpressure(stream, backpressure) {
        const writer = stream._writer;
        if (writer !== void 0 && backpressure !== stream._backpressure) {
          if (backpressure) {
            defaultWriterReadyPromiseReset(writer);
          } else {
            defaultWriterReadyPromiseResolve(writer);
          }
        }
        stream._backpressure = backpressure;
      }
      class WritableStreamDefaultWriter {
        constructor(stream) {
          assertRequiredArgument(stream, 1, "WritableStreamDefaultWriter");
          assertWritableStream(stream, "First parameter");
          if (IsWritableStreamLocked(stream)) {
            throw new TypeError("This stream has already been locked for exclusive writing by another writer");
          }
          this._ownerWritableStream = stream;
          stream._writer = this;
          const state = stream._state;
          if (state === "writable") {
            if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {
              defaultWriterReadyPromiseInitialize(this);
            } else {
              defaultWriterReadyPromiseInitializeAsResolved(this);
            }
            defaultWriterClosedPromiseInitialize(this);
          } else if (state === "erroring") {
            defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);
            defaultWriterClosedPromiseInitialize(this);
          } else if (state === "closed") {
            defaultWriterReadyPromiseInitializeAsResolved(this);
            defaultWriterClosedPromiseInitializeAsResolved(this);
          } else {
            const storedError = stream._storedError;
            defaultWriterReadyPromiseInitializeAsRejected(this, storedError);
            defaultWriterClosedPromiseInitializeAsRejected(this, storedError);
          }
        }
        get closed() {
          if (!IsWritableStreamDefaultWriter(this)) {
            return promiseRejectedWith(defaultWriterBrandCheckException("closed"));
          }
          return this._closedPromise;
        }
        get desiredSize() {
          if (!IsWritableStreamDefaultWriter(this)) {
            throw defaultWriterBrandCheckException("desiredSize");
          }
          if (this._ownerWritableStream === void 0) {
            throw defaultWriterLockException("desiredSize");
          }
          return WritableStreamDefaultWriterGetDesiredSize(this);
        }
        get ready() {
          if (!IsWritableStreamDefaultWriter(this)) {
            return promiseRejectedWith(defaultWriterBrandCheckException("ready"));
          }
          return this._readyPromise;
        }
        abort(reason = void 0) {
          if (!IsWritableStreamDefaultWriter(this)) {
            return promiseRejectedWith(defaultWriterBrandCheckException("abort"));
          }
          if (this._ownerWritableStream === void 0) {
            return promiseRejectedWith(defaultWriterLockException("abort"));
          }
          return WritableStreamDefaultWriterAbort(this, reason);
        }
        close() {
          if (!IsWritableStreamDefaultWriter(this)) {
            return promiseRejectedWith(defaultWriterBrandCheckException("close"));
          }
          const stream = this._ownerWritableStream;
          if (stream === void 0) {
            return promiseRejectedWith(defaultWriterLockException("close"));
          }
          if (WritableStreamCloseQueuedOrInFlight(stream)) {
            return promiseRejectedWith(new TypeError("Cannot close an already-closing stream"));
          }
          return WritableStreamDefaultWriterClose(this);
        }
        releaseLock() {
          if (!IsWritableStreamDefaultWriter(this)) {
            throw defaultWriterBrandCheckException("releaseLock");
          }
          const stream = this._ownerWritableStream;
          if (stream === void 0) {
            return;
          }
          WritableStreamDefaultWriterRelease(this);
        }
        write(chunk = void 0) {
          if (!IsWritableStreamDefaultWriter(this)) {
            return promiseRejectedWith(defaultWriterBrandCheckException("write"));
          }
          if (this._ownerWritableStream === void 0) {
            return promiseRejectedWith(defaultWriterLockException("write to"));
          }
          return WritableStreamDefaultWriterWrite(this, chunk);
        }
      }
      Object.defineProperties(WritableStreamDefaultWriter.prototype, {
        abort: { enumerable: true },
        close: { enumerable: true },
        releaseLock: { enumerable: true },
        write: { enumerable: true },
        closed: { enumerable: true },
        desiredSize: { enumerable: true },
        ready: { enumerable: true }
      });
      setFunctionName(WritableStreamDefaultWriter.prototype.abort, "abort");
      setFunctionName(WritableStreamDefaultWriter.prototype.close, "close");
      setFunctionName(WritableStreamDefaultWriter.prototype.releaseLock, "releaseLock");
      setFunctionName(WritableStreamDefaultWriter.prototype.write, "write");
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(WritableStreamDefaultWriter.prototype, Symbol.toStringTag, {
          value: "WritableStreamDefaultWriter",
          configurable: true
        });
      }
      function IsWritableStreamDefaultWriter(x2) {
        if (!typeIsObject(x2)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x2, "_ownerWritableStream")) {
          return false;
        }
        return x2 instanceof WritableStreamDefaultWriter;
      }
      function WritableStreamDefaultWriterAbort(writer, reason) {
        const stream = writer._ownerWritableStream;
        return WritableStreamAbort(stream, reason);
      }
      function WritableStreamDefaultWriterClose(writer) {
        const stream = writer._ownerWritableStream;
        return WritableStreamClose(stream);
      }
      function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {
        const stream = writer._ownerWritableStream;
        const state = stream._state;
        if (WritableStreamCloseQueuedOrInFlight(stream) || state === "closed") {
          return promiseResolvedWith(void 0);
        }
        if (state === "errored") {
          return promiseRejectedWith(stream._storedError);
        }
        return WritableStreamDefaultWriterClose(writer);
      }
      function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {
        if (writer._closedPromiseState === "pending") {
          defaultWriterClosedPromiseReject(writer, error);
        } else {
          defaultWriterClosedPromiseResetToRejected(writer, error);
        }
      }
      function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {
        if (writer._readyPromiseState === "pending") {
          defaultWriterReadyPromiseReject(writer, error);
        } else {
          defaultWriterReadyPromiseResetToRejected(writer, error);
        }
      }
      function WritableStreamDefaultWriterGetDesiredSize(writer) {
        const stream = writer._ownerWritableStream;
        const state = stream._state;
        if (state === "errored" || state === "erroring") {
          return null;
        }
        if (state === "closed") {
          return 0;
        }
        return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);
      }
      function WritableStreamDefaultWriterRelease(writer) {
        const stream = writer._ownerWritableStream;
        const releasedError = new TypeError(`Writer was released and can no longer be used to monitor the stream's closedness`);
        WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);
        WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);
        stream._writer = void 0;
        writer._ownerWritableStream = void 0;
      }
      function WritableStreamDefaultWriterWrite(writer, chunk) {
        const stream = writer._ownerWritableStream;
        const controller = stream._writableStreamController;
        const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);
        if (stream !== writer._ownerWritableStream) {
          return promiseRejectedWith(defaultWriterLockException("write to"));
        }
        const state = stream._state;
        if (state === "errored") {
          return promiseRejectedWith(stream._storedError);
        }
        if (WritableStreamCloseQueuedOrInFlight(stream) || state === "closed") {
          return promiseRejectedWith(new TypeError("The stream is closing or closed and cannot be written to"));
        }
        if (state === "erroring") {
          return promiseRejectedWith(stream._storedError);
        }
        const promise = WritableStreamAddWriteRequest(stream);
        WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);
        return promise;
      }
      const closeSentinel = {};
      class WritableStreamDefaultController {
        constructor() {
          throw new TypeError("Illegal constructor");
        }
        get abortReason() {
          if (!IsWritableStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException$2("abortReason");
          }
          return this._abortReason;
        }
        get signal() {
          if (!IsWritableStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException$2("signal");
          }
          if (this._abortController === void 0) {
            throw new TypeError("WritableStreamDefaultController.prototype.signal is not supported");
          }
          return this._abortController.signal;
        }
        error(e2 = void 0) {
          if (!IsWritableStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException$2("error");
          }
          const state = this._controlledWritableStream._state;
          if (state !== "writable") {
            return;
          }
          WritableStreamDefaultControllerError(this, e2);
        }
        [AbortSteps](reason) {
          const result = this._abortAlgorithm(reason);
          WritableStreamDefaultControllerClearAlgorithms(this);
          return result;
        }
        [ErrorSteps]() {
          ResetQueue(this);
        }
      }
      Object.defineProperties(WritableStreamDefaultController.prototype, {
        abortReason: { enumerable: true },
        signal: { enumerable: true },
        error: { enumerable: true }
      });
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(WritableStreamDefaultController.prototype, Symbol.toStringTag, {
          value: "WritableStreamDefaultController",
          configurable: true
        });
      }
      function IsWritableStreamDefaultController(x2) {
        if (!typeIsObject(x2)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x2, "_controlledWritableStream")) {
          return false;
        }
        return x2 instanceof WritableStreamDefaultController;
      }
      function SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {
        controller._controlledWritableStream = stream;
        stream._writableStreamController = controller;
        controller._queue = void 0;
        controller._queueTotalSize = void 0;
        ResetQueue(controller);
        controller._abortReason = void 0;
        controller._abortController = createAbortController();
        controller._started = false;
        controller._strategySizeAlgorithm = sizeAlgorithm;
        controller._strategyHWM = highWaterMark;
        controller._writeAlgorithm = writeAlgorithm;
        controller._closeAlgorithm = closeAlgorithm;
        controller._abortAlgorithm = abortAlgorithm;
        const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
        WritableStreamUpdateBackpressure(stream, backpressure);
        const startResult = startAlgorithm();
        const startPromise = promiseResolvedWith(startResult);
        uponPromise(startPromise, () => {
          controller._started = true;
          WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
          return null;
        }, (r2) => {
          controller._started = true;
          WritableStreamDealWithRejection(stream, r2);
          return null;
        });
      }
      function SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {
        const controller = Object.create(WritableStreamDefaultController.prototype);
        let startAlgorithm;
        let writeAlgorithm;
        let closeAlgorithm;
        let abortAlgorithm;
        if (underlyingSink.start !== void 0) {
          startAlgorithm = () => underlyingSink.start(controller);
        } else {
          startAlgorithm = () => void 0;
        }
        if (underlyingSink.write !== void 0) {
          writeAlgorithm = (chunk) => underlyingSink.write(chunk, controller);
        } else {
          writeAlgorithm = () => promiseResolvedWith(void 0);
        }
        if (underlyingSink.close !== void 0) {
          closeAlgorithm = () => underlyingSink.close();
        } else {
          closeAlgorithm = () => promiseResolvedWith(void 0);
        }
        if (underlyingSink.abort !== void 0) {
          abortAlgorithm = (reason) => underlyingSink.abort(reason);
        } else {
          abortAlgorithm = () => promiseResolvedWith(void 0);
        }
        SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);
      }
      function WritableStreamDefaultControllerClearAlgorithms(controller) {
        controller._writeAlgorithm = void 0;
        controller._closeAlgorithm = void 0;
        controller._abortAlgorithm = void 0;
        controller._strategySizeAlgorithm = void 0;
      }
      function WritableStreamDefaultControllerClose(controller) {
        EnqueueValueWithSize(controller, closeSentinel, 0);
        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
      }
      function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {
        try {
          return controller._strategySizeAlgorithm(chunk);
        } catch (chunkSizeE) {
          WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);
          return 1;
        }
      }
      function WritableStreamDefaultControllerGetDesiredSize(controller) {
        return controller._strategyHWM - controller._queueTotalSize;
      }
      function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {
        try {
          EnqueueValueWithSize(controller, chunk, chunkSize);
        } catch (enqueueE) {
          WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);
          return;
        }
        const stream = controller._controlledWritableStream;
        if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === "writable") {
          const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
          WritableStreamUpdateBackpressure(stream, backpressure);
        }
        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
      }
      function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {
        const stream = controller._controlledWritableStream;
        if (!controller._started) {
          return;
        }
        if (stream._inFlightWriteRequest !== void 0) {
          return;
        }
        const state = stream._state;
        if (state === "erroring") {
          WritableStreamFinishErroring(stream);
          return;
        }
        if (controller._queue.length === 0) {
          return;
        }
        const value = PeekQueueValue(controller);
        if (value === closeSentinel) {
          WritableStreamDefaultControllerProcessClose(controller);
        } else {
          WritableStreamDefaultControllerProcessWrite(controller, value);
        }
      }
      function WritableStreamDefaultControllerErrorIfNeeded(controller, error) {
        if (controller._controlledWritableStream._state === "writable") {
          WritableStreamDefaultControllerError(controller, error);
        }
      }
      function WritableStreamDefaultControllerProcessClose(controller) {
        const stream = controller._controlledWritableStream;
        WritableStreamMarkCloseRequestInFlight(stream);
        DequeueValue(controller);
        const sinkClosePromise = controller._closeAlgorithm();
        WritableStreamDefaultControllerClearAlgorithms(controller);
        uponPromise(sinkClosePromise, () => {
          WritableStreamFinishInFlightClose(stream);
          return null;
        }, (reason) => {
          WritableStreamFinishInFlightCloseWithError(stream, reason);
          return null;
        });
      }
      function WritableStreamDefaultControllerProcessWrite(controller, chunk) {
        const stream = controller._controlledWritableStream;
        WritableStreamMarkFirstWriteRequestInFlight(stream);
        const sinkWritePromise = controller._writeAlgorithm(chunk);
        uponPromise(sinkWritePromise, () => {
          WritableStreamFinishInFlightWrite(stream);
          const state = stream._state;
          DequeueValue(controller);
          if (!WritableStreamCloseQueuedOrInFlight(stream) && state === "writable") {
            const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
            WritableStreamUpdateBackpressure(stream, backpressure);
          }
          WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
          return null;
        }, (reason) => {
          if (stream._state === "writable") {
            WritableStreamDefaultControllerClearAlgorithms(controller);
          }
          WritableStreamFinishInFlightWriteWithError(stream, reason);
          return null;
        });
      }
      function WritableStreamDefaultControllerGetBackpressure(controller) {
        const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);
        return desiredSize <= 0;
      }
      function WritableStreamDefaultControllerError(controller, error) {
        const stream = controller._controlledWritableStream;
        WritableStreamDefaultControllerClearAlgorithms(controller);
        WritableStreamStartErroring(stream, error);
      }
      function streamBrandCheckException$2(name) {
        return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);
      }
      function defaultControllerBrandCheckException$2(name) {
        return new TypeError(`WritableStreamDefaultController.prototype.${name} can only be used on a WritableStreamDefaultController`);
      }
      function defaultWriterBrandCheckException(name) {
        return new TypeError(`WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);
      }
      function defaultWriterLockException(name) {
        return new TypeError("Cannot " + name + " a stream using a released writer");
      }
      function defaultWriterClosedPromiseInitialize(writer) {
        writer._closedPromise = newPromise((resolve, reject) => {
          writer._closedPromise_resolve = resolve;
          writer._closedPromise_reject = reject;
          writer._closedPromiseState = "pending";
        });
      }
      function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {
        defaultWriterClosedPromiseInitialize(writer);
        defaultWriterClosedPromiseReject(writer, reason);
      }
      function defaultWriterClosedPromiseInitializeAsResolved(writer) {
        defaultWriterClosedPromiseInitialize(writer);
        defaultWriterClosedPromiseResolve(writer);
      }
      function defaultWriterClosedPromiseReject(writer, reason) {
        if (writer._closedPromise_reject === void 0) {
          return;
        }
        setPromiseIsHandledToTrue(writer._closedPromise);
        writer._closedPromise_reject(reason);
        writer._closedPromise_resolve = void 0;
        writer._closedPromise_reject = void 0;
        writer._closedPromiseState = "rejected";
      }
      function defaultWriterClosedPromiseResetToRejected(writer, reason) {
        defaultWriterClosedPromiseInitializeAsRejected(writer, reason);
      }
      function defaultWriterClosedPromiseResolve(writer) {
        if (writer._closedPromise_resolve === void 0) {
          return;
        }
        writer._closedPromise_resolve(void 0);
        writer._closedPromise_resolve = void 0;
        writer._closedPromise_reject = void 0;
        writer._closedPromiseState = "resolved";
      }
      function defaultWriterReadyPromiseInitialize(writer) {
        writer._readyPromise = newPromise((resolve, reject) => {
          writer._readyPromise_resolve = resolve;
          writer._readyPromise_reject = reject;
        });
        writer._readyPromiseState = "pending";
      }
      function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {
        defaultWriterReadyPromiseInitialize(writer);
        defaultWriterReadyPromiseReject(writer, reason);
      }
      function defaultWriterReadyPromiseInitializeAsResolved(writer) {
        defaultWriterReadyPromiseInitialize(writer);
        defaultWriterReadyPromiseResolve(writer);
      }
      function defaultWriterReadyPromiseReject(writer, reason) {
        if (writer._readyPromise_reject === void 0) {
          return;
        }
        setPromiseIsHandledToTrue(writer._readyPromise);
        writer._readyPromise_reject(reason);
        writer._readyPromise_resolve = void 0;
        writer._readyPromise_reject = void 0;
        writer._readyPromiseState = "rejected";
      }
      function defaultWriterReadyPromiseReset(writer) {
        defaultWriterReadyPromiseInitialize(writer);
      }
      function defaultWriterReadyPromiseResetToRejected(writer, reason) {
        defaultWriterReadyPromiseInitializeAsRejected(writer, reason);
      }
      function defaultWriterReadyPromiseResolve(writer) {
        if (writer._readyPromise_resolve === void 0) {
          return;
        }
        writer._readyPromise_resolve(void 0);
        writer._readyPromise_resolve = void 0;
        writer._readyPromise_reject = void 0;
        writer._readyPromiseState = "fulfilled";
      }
      function getGlobals() {
        if (typeof globalThis !== "undefined") {
          return globalThis;
        } else if (typeof self !== "undefined") {
          return self;
        } else if (typeof global !== "undefined") {
          return global;
        }
        return void 0;
      }
      const globals = getGlobals();
      function isDOMExceptionConstructor(ctor) {
        if (!(typeof ctor === "function" || typeof ctor === "object")) {
          return false;
        }
        if (ctor.name !== "DOMException") {
          return false;
        }
        try {
          new ctor();
          return true;
        } catch (_a2) {
          return false;
        }
      }
      function getFromGlobal() {
        const ctor = globals === null || globals === void 0 ? void 0 : globals.DOMException;
        return isDOMExceptionConstructor(ctor) ? ctor : void 0;
      }
      function createPolyfill() {
        const ctor = function DOMException3(message, name) {
          this.message = message || "";
          this.name = name || "Error";
          if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
          }
        };
        setFunctionName(ctor, "DOMException");
        ctor.prototype = Object.create(Error.prototype);
        Object.defineProperty(ctor.prototype, "constructor", { value: ctor, writable: true, configurable: true });
        return ctor;
      }
      const DOMException2 = getFromGlobal() || createPolyfill();
      function ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal) {
        const reader = AcquireReadableStreamDefaultReader(source);
        const writer = AcquireWritableStreamDefaultWriter(dest);
        source._disturbed = true;
        let shuttingDown = false;
        let currentWrite = promiseResolvedWith(void 0);
        return newPromise((resolve, reject) => {
          let abortAlgorithm;
          if (signal !== void 0) {
            abortAlgorithm = () => {
              const error = signal.reason !== void 0 ? signal.reason : new DOMException2("Aborted", "AbortError");
              const actions = [];
              if (!preventAbort) {
                actions.push(() => {
                  if (dest._state === "writable") {
                    return WritableStreamAbort(dest, error);
                  }
                  return promiseResolvedWith(void 0);
                });
              }
              if (!preventCancel) {
                actions.push(() => {
                  if (source._state === "readable") {
                    return ReadableStreamCancel(source, error);
                  }
                  return promiseResolvedWith(void 0);
                });
              }
              shutdownWithAction(() => Promise.all(actions.map((action) => action())), true, error);
            };
            if (signal.aborted) {
              abortAlgorithm();
              return;
            }
            signal.addEventListener("abort", abortAlgorithm);
          }
          function pipeLoop() {
            return newPromise((resolveLoop, rejectLoop) => {
              function next(done) {
                if (done) {
                  resolveLoop();
                } else {
                  PerformPromiseThen(pipeStep(), next, rejectLoop);
                }
              }
              next(false);
            });
          }
          function pipeStep() {
            if (shuttingDown) {
              return promiseResolvedWith(true);
            }
            return PerformPromiseThen(writer._readyPromise, () => {
              return newPromise((resolveRead, rejectRead) => {
                ReadableStreamDefaultReaderRead(reader, {
                  _chunkSteps: (chunk) => {
                    currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), void 0, noop2);
                    resolveRead(false);
                  },
                  _closeSteps: () => resolveRead(true),
                  _errorSteps: rejectRead
                });
              });
            });
          }
          isOrBecomesErrored(source, reader._closedPromise, (storedError) => {
            if (!preventAbort) {
              shutdownWithAction(() => WritableStreamAbort(dest, storedError), true, storedError);
            } else {
              shutdown(true, storedError);
            }
            return null;
          });
          isOrBecomesErrored(dest, writer._closedPromise, (storedError) => {
            if (!preventCancel) {
              shutdownWithAction(() => ReadableStreamCancel(source, storedError), true, storedError);
            } else {
              shutdown(true, storedError);
            }
            return null;
          });
          isOrBecomesClosed(source, reader._closedPromise, () => {
            if (!preventClose) {
              shutdownWithAction(() => WritableStreamDefaultWriterCloseWithErrorPropagation(writer));
            } else {
              shutdown();
            }
            return null;
          });
          if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === "closed") {
            const destClosed = new TypeError("the destination writable stream closed before all data could be piped to it");
            if (!preventCancel) {
              shutdownWithAction(() => ReadableStreamCancel(source, destClosed), true, destClosed);
            } else {
              shutdown(true, destClosed);
            }
          }
          setPromiseIsHandledToTrue(pipeLoop());
          function waitForWritesToFinish() {
            const oldCurrentWrite = currentWrite;
            return PerformPromiseThen(currentWrite, () => oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : void 0);
          }
          function isOrBecomesErrored(stream, promise, action) {
            if (stream._state === "errored") {
              action(stream._storedError);
            } else {
              uponRejection(promise, action);
            }
          }
          function isOrBecomesClosed(stream, promise, action) {
            if (stream._state === "closed") {
              action();
            } else {
              uponFulfillment(promise, action);
            }
          }
          function shutdownWithAction(action, originalIsError, originalError) {
            if (shuttingDown) {
              return;
            }
            shuttingDown = true;
            if (dest._state === "writable" && !WritableStreamCloseQueuedOrInFlight(dest)) {
              uponFulfillment(waitForWritesToFinish(), doTheRest);
            } else {
              doTheRest();
            }
            function doTheRest() {
              uponPromise(action(), () => finalize(originalIsError, originalError), (newError) => finalize(true, newError));
              return null;
            }
          }
          function shutdown(isError, error) {
            if (shuttingDown) {
              return;
            }
            shuttingDown = true;
            if (dest._state === "writable" && !WritableStreamCloseQueuedOrInFlight(dest)) {
              uponFulfillment(waitForWritesToFinish(), () => finalize(isError, error));
            } else {
              finalize(isError, error);
            }
          }
          function finalize(isError, error) {
            WritableStreamDefaultWriterRelease(writer);
            ReadableStreamReaderGenericRelease(reader);
            if (signal !== void 0) {
              signal.removeEventListener("abort", abortAlgorithm);
            }
            if (isError) {
              reject(error);
            } else {
              resolve(void 0);
            }
            return null;
          }
        });
      }
      class ReadableStreamDefaultController {
        constructor() {
          throw new TypeError("Illegal constructor");
        }
        get desiredSize() {
          if (!IsReadableStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException$1("desiredSize");
          }
          return ReadableStreamDefaultControllerGetDesiredSize(this);
        }
        close() {
          if (!IsReadableStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException$1("close");
          }
          if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {
            throw new TypeError("The stream is not in a state that permits close");
          }
          ReadableStreamDefaultControllerClose(this);
        }
        enqueue(chunk = void 0) {
          if (!IsReadableStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException$1("enqueue");
          }
          if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {
            throw new TypeError("The stream is not in a state that permits enqueue");
          }
          return ReadableStreamDefaultControllerEnqueue(this, chunk);
        }
        error(e2 = void 0) {
          if (!IsReadableStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException$1("error");
          }
          ReadableStreamDefaultControllerError(this, e2);
        }
        [CancelSteps](reason) {
          ResetQueue(this);
          const result = this._cancelAlgorithm(reason);
          ReadableStreamDefaultControllerClearAlgorithms(this);
          return result;
        }
        [PullSteps](readRequest) {
          const stream = this._controlledReadableStream;
          if (this._queue.length > 0) {
            const chunk = DequeueValue(this);
            if (this._closeRequested && this._queue.length === 0) {
              ReadableStreamDefaultControllerClearAlgorithms(this);
              ReadableStreamClose(stream);
            } else {
              ReadableStreamDefaultControllerCallPullIfNeeded(this);
            }
            readRequest._chunkSteps(chunk);
          } else {
            ReadableStreamAddReadRequest(stream, readRequest);
            ReadableStreamDefaultControllerCallPullIfNeeded(this);
          }
        }
        [ReleaseSteps]() {
        }
      }
      Object.defineProperties(ReadableStreamDefaultController.prototype, {
        close: { enumerable: true },
        enqueue: { enumerable: true },
        error: { enumerable: true },
        desiredSize: { enumerable: true }
      });
      setFunctionName(ReadableStreamDefaultController.prototype.close, "close");
      setFunctionName(ReadableStreamDefaultController.prototype.enqueue, "enqueue");
      setFunctionName(ReadableStreamDefaultController.prototype.error, "error");
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(ReadableStreamDefaultController.prototype, Symbol.toStringTag, {
          value: "ReadableStreamDefaultController",
          configurable: true
        });
      }
      function IsReadableStreamDefaultController(x2) {
        if (!typeIsObject(x2)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x2, "_controlledReadableStream")) {
          return false;
        }
        return x2 instanceof ReadableStreamDefaultController;
      }
      function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {
        const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);
        if (!shouldPull) {
          return;
        }
        if (controller._pulling) {
          controller._pullAgain = true;
          return;
        }
        controller._pulling = true;
        const pullPromise = controller._pullAlgorithm();
        uponPromise(pullPromise, () => {
          controller._pulling = false;
          if (controller._pullAgain) {
            controller._pullAgain = false;
            ReadableStreamDefaultControllerCallPullIfNeeded(controller);
          }
          return null;
        }, (e2) => {
          ReadableStreamDefaultControllerError(controller, e2);
          return null;
        });
      }
      function ReadableStreamDefaultControllerShouldCallPull(controller) {
        const stream = controller._controlledReadableStream;
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
          return false;
        }
        if (!controller._started) {
          return false;
        }
        if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
          return true;
        }
        const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);
        if (desiredSize > 0) {
          return true;
        }
        return false;
      }
      function ReadableStreamDefaultControllerClearAlgorithms(controller) {
        controller._pullAlgorithm = void 0;
        controller._cancelAlgorithm = void 0;
        controller._strategySizeAlgorithm = void 0;
      }
      function ReadableStreamDefaultControllerClose(controller) {
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
          return;
        }
        const stream = controller._controlledReadableStream;
        controller._closeRequested = true;
        if (controller._queue.length === 0) {
          ReadableStreamDefaultControllerClearAlgorithms(controller);
          ReadableStreamClose(stream);
        }
      }
      function ReadableStreamDefaultControllerEnqueue(controller, chunk) {
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
          return;
        }
        const stream = controller._controlledReadableStream;
        if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
          ReadableStreamFulfillReadRequest(stream, chunk, false);
        } else {
          let chunkSize;
          try {
            chunkSize = controller._strategySizeAlgorithm(chunk);
          } catch (chunkSizeE) {
            ReadableStreamDefaultControllerError(controller, chunkSizeE);
            throw chunkSizeE;
          }
          try {
            EnqueueValueWithSize(controller, chunk, chunkSize);
          } catch (enqueueE) {
            ReadableStreamDefaultControllerError(controller, enqueueE);
            throw enqueueE;
          }
        }
        ReadableStreamDefaultControllerCallPullIfNeeded(controller);
      }
      function ReadableStreamDefaultControllerError(controller, e2) {
        const stream = controller._controlledReadableStream;
        if (stream._state !== "readable") {
          return;
        }
        ResetQueue(controller);
        ReadableStreamDefaultControllerClearAlgorithms(controller);
        ReadableStreamError(stream, e2);
      }
      function ReadableStreamDefaultControllerGetDesiredSize(controller) {
        const state = controller._controlledReadableStream._state;
        if (state === "errored") {
          return null;
        }
        if (state === "closed") {
          return 0;
        }
        return controller._strategyHWM - controller._queueTotalSize;
      }
      function ReadableStreamDefaultControllerHasBackpressure(controller) {
        if (ReadableStreamDefaultControllerShouldCallPull(controller)) {
          return false;
        }
        return true;
      }
      function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {
        const state = controller._controlledReadableStream._state;
        if (!controller._closeRequested && state === "readable") {
          return true;
        }
        return false;
      }
      function SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {
        controller._controlledReadableStream = stream;
        controller._queue = void 0;
        controller._queueTotalSize = void 0;
        ResetQueue(controller);
        controller._started = false;
        controller._closeRequested = false;
        controller._pullAgain = false;
        controller._pulling = false;
        controller._strategySizeAlgorithm = sizeAlgorithm;
        controller._strategyHWM = highWaterMark;
        controller._pullAlgorithm = pullAlgorithm;
        controller._cancelAlgorithm = cancelAlgorithm;
        stream._readableStreamController = controller;
        const startResult = startAlgorithm();
        uponPromise(promiseResolvedWith(startResult), () => {
          controller._started = true;
          ReadableStreamDefaultControllerCallPullIfNeeded(controller);
          return null;
        }, (r2) => {
          ReadableStreamDefaultControllerError(controller, r2);
          return null;
        });
      }
      function SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark, sizeAlgorithm) {
        const controller = Object.create(ReadableStreamDefaultController.prototype);
        let startAlgorithm;
        let pullAlgorithm;
        let cancelAlgorithm;
        if (underlyingSource.start !== void 0) {
          startAlgorithm = () => underlyingSource.start(controller);
        } else {
          startAlgorithm = () => void 0;
        }
        if (underlyingSource.pull !== void 0) {
          pullAlgorithm = () => underlyingSource.pull(controller);
        } else {
          pullAlgorithm = () => promiseResolvedWith(void 0);
        }
        if (underlyingSource.cancel !== void 0) {
          cancelAlgorithm = (reason) => underlyingSource.cancel(reason);
        } else {
          cancelAlgorithm = () => promiseResolvedWith(void 0);
        }
        SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);
      }
      function defaultControllerBrandCheckException$1(name) {
        return new TypeError(`ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);
      }
      function ReadableStreamTee(stream, cloneForBranch2) {
        if (IsReadableByteStreamController(stream._readableStreamController)) {
          return ReadableByteStreamTee(stream);
        }
        return ReadableStreamDefaultTee(stream);
      }
      function ReadableStreamDefaultTee(stream, cloneForBranch2) {
        const reader = AcquireReadableStreamDefaultReader(stream);
        let reading = false;
        let readAgain = false;
        let canceled1 = false;
        let canceled2 = false;
        let reason1;
        let reason2;
        let branch1;
        let branch2;
        let resolveCancelPromise;
        const cancelPromise = newPromise((resolve) => {
          resolveCancelPromise = resolve;
        });
        function pullAlgorithm() {
          if (reading) {
            readAgain = true;
            return promiseResolvedWith(void 0);
          }
          reading = true;
          const readRequest = {
            _chunkSteps: (chunk) => {
              _queueMicrotask(() => {
                readAgain = false;
                const chunk1 = chunk;
                const chunk2 = chunk;
                if (!canceled1) {
                  ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, chunk1);
                }
                if (!canceled2) {
                  ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, chunk2);
                }
                reading = false;
                if (readAgain) {
                  pullAlgorithm();
                }
              });
            },
            _closeSteps: () => {
              reading = false;
              if (!canceled1) {
                ReadableStreamDefaultControllerClose(branch1._readableStreamController);
              }
              if (!canceled2) {
                ReadableStreamDefaultControllerClose(branch2._readableStreamController);
              }
              if (!canceled1 || !canceled2) {
                resolveCancelPromise(void 0);
              }
            },
            _errorSteps: () => {
              reading = false;
            }
          };
          ReadableStreamDefaultReaderRead(reader, readRequest);
          return promiseResolvedWith(void 0);
        }
        function cancel1Algorithm(reason) {
          canceled1 = true;
          reason1 = reason;
          if (canceled2) {
            const compositeReason = CreateArrayFromList([reason1, reason2]);
            const cancelResult = ReadableStreamCancel(stream, compositeReason);
            resolveCancelPromise(cancelResult);
          }
          return cancelPromise;
        }
        function cancel2Algorithm(reason) {
          canceled2 = true;
          reason2 = reason;
          if (canceled1) {
            const compositeReason = CreateArrayFromList([reason1, reason2]);
            const cancelResult = ReadableStreamCancel(stream, compositeReason);
            resolveCancelPromise(cancelResult);
          }
          return cancelPromise;
        }
        function startAlgorithm() {
        }
        branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);
        branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);
        uponRejection(reader._closedPromise, (r2) => {
          ReadableStreamDefaultControllerError(branch1._readableStreamController, r2);
          ReadableStreamDefaultControllerError(branch2._readableStreamController, r2);
          if (!canceled1 || !canceled2) {
            resolveCancelPromise(void 0);
          }
          return null;
        });
        return [branch1, branch2];
      }
      function ReadableByteStreamTee(stream) {
        let reader = AcquireReadableStreamDefaultReader(stream);
        let reading = false;
        let readAgainForBranch1 = false;
        let readAgainForBranch2 = false;
        let canceled1 = false;
        let canceled2 = false;
        let reason1;
        let reason2;
        let branch1;
        let branch2;
        let resolveCancelPromise;
        const cancelPromise = newPromise((resolve) => {
          resolveCancelPromise = resolve;
        });
        function forwardReaderError(thisReader) {
          uponRejection(thisReader._closedPromise, (r2) => {
            if (thisReader !== reader) {
              return null;
            }
            ReadableByteStreamControllerError(branch1._readableStreamController, r2);
            ReadableByteStreamControllerError(branch2._readableStreamController, r2);
            if (!canceled1 || !canceled2) {
              resolveCancelPromise(void 0);
            }
            return null;
          });
        }
        function pullWithDefaultReader() {
          if (IsReadableStreamBYOBReader(reader)) {
            ReadableStreamReaderGenericRelease(reader);
            reader = AcquireReadableStreamDefaultReader(stream);
            forwardReaderError(reader);
          }
          const readRequest = {
            _chunkSteps: (chunk) => {
              _queueMicrotask(() => {
                readAgainForBranch1 = false;
                readAgainForBranch2 = false;
                const chunk1 = chunk;
                let chunk2 = chunk;
                if (!canceled1 && !canceled2) {
                  try {
                    chunk2 = CloneAsUint8Array(chunk);
                  } catch (cloneE) {
                    ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);
                    ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);
                    resolveCancelPromise(ReadableStreamCancel(stream, cloneE));
                    return;
                  }
                }
                if (!canceled1) {
                  ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);
                }
                if (!canceled2) {
                  ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);
                }
                reading = false;
                if (readAgainForBranch1) {
                  pull1Algorithm();
                } else if (readAgainForBranch2) {
                  pull2Algorithm();
                }
              });
            },
            _closeSteps: () => {
              reading = false;
              if (!canceled1) {
                ReadableByteStreamControllerClose(branch1._readableStreamController);
              }
              if (!canceled2) {
                ReadableByteStreamControllerClose(branch2._readableStreamController);
              }
              if (branch1._readableStreamController._pendingPullIntos.length > 0) {
                ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);
              }
              if (branch2._readableStreamController._pendingPullIntos.length > 0) {
                ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);
              }
              if (!canceled1 || !canceled2) {
                resolveCancelPromise(void 0);
              }
            },
            _errorSteps: () => {
              reading = false;
            }
          };
          ReadableStreamDefaultReaderRead(reader, readRequest);
        }
        function pullWithBYOBReader(view, forBranch2) {
          if (IsReadableStreamDefaultReader(reader)) {
            ReadableStreamReaderGenericRelease(reader);
            reader = AcquireReadableStreamBYOBReader(stream);
            forwardReaderError(reader);
          }
          const byobBranch = forBranch2 ? branch2 : branch1;
          const otherBranch = forBranch2 ? branch1 : branch2;
          const readIntoRequest = {
            _chunkSteps: (chunk) => {
              _queueMicrotask(() => {
                readAgainForBranch1 = false;
                readAgainForBranch2 = false;
                const byobCanceled = forBranch2 ? canceled2 : canceled1;
                const otherCanceled = forBranch2 ? canceled1 : canceled2;
                if (!otherCanceled) {
                  let clonedChunk;
                  try {
                    clonedChunk = CloneAsUint8Array(chunk);
                  } catch (cloneE) {
                    ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);
                    ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);
                    resolveCancelPromise(ReadableStreamCancel(stream, cloneE));
                    return;
                  }
                  if (!byobCanceled) {
                    ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
                  }
                  ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);
                } else if (!byobCanceled) {
                  ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
                }
                reading = false;
                if (readAgainForBranch1) {
                  pull1Algorithm();
                } else if (readAgainForBranch2) {
                  pull2Algorithm();
                }
              });
            },
            _closeSteps: (chunk) => {
              reading = false;
              const byobCanceled = forBranch2 ? canceled2 : canceled1;
              const otherCanceled = forBranch2 ? canceled1 : canceled2;
              if (!byobCanceled) {
                ReadableByteStreamControllerClose(byobBranch._readableStreamController);
              }
              if (!otherCanceled) {
                ReadableByteStreamControllerClose(otherBranch._readableStreamController);
              }
              if (chunk !== void 0) {
                if (!byobCanceled) {
                  ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
                }
                if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {
                  ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);
                }
              }
              if (!byobCanceled || !otherCanceled) {
                resolveCancelPromise(void 0);
              }
            },
            _errorSteps: () => {
              reading = false;
            }
          };
          ReadableStreamBYOBReaderRead(reader, view, 1, readIntoRequest);
        }
        function pull1Algorithm() {
          if (reading) {
            readAgainForBranch1 = true;
            return promiseResolvedWith(void 0);
          }
          reading = true;
          const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);
          if (byobRequest === null) {
            pullWithDefaultReader();
          } else {
            pullWithBYOBReader(byobRequest._view, false);
          }
          return promiseResolvedWith(void 0);
        }
        function pull2Algorithm() {
          if (reading) {
            readAgainForBranch2 = true;
            return promiseResolvedWith(void 0);
          }
          reading = true;
          const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);
          if (byobRequest === null) {
            pullWithDefaultReader();
          } else {
            pullWithBYOBReader(byobRequest._view, true);
          }
          return promiseResolvedWith(void 0);
        }
        function cancel1Algorithm(reason) {
          canceled1 = true;
          reason1 = reason;
          if (canceled2) {
            const compositeReason = CreateArrayFromList([reason1, reason2]);
            const cancelResult = ReadableStreamCancel(stream, compositeReason);
            resolveCancelPromise(cancelResult);
          }
          return cancelPromise;
        }
        function cancel2Algorithm(reason) {
          canceled2 = true;
          reason2 = reason;
          if (canceled1) {
            const compositeReason = CreateArrayFromList([reason1, reason2]);
            const cancelResult = ReadableStreamCancel(stream, compositeReason);
            resolveCancelPromise(cancelResult);
          }
          return cancelPromise;
        }
        function startAlgorithm() {
          return;
        }
        branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);
        branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);
        forwardReaderError(reader);
        return [branch1, branch2];
      }
      function isReadableStreamLike(stream) {
        return typeIsObject(stream) && typeof stream.getReader !== "undefined";
      }
      function ReadableStreamFrom(source) {
        if (isReadableStreamLike(source)) {
          return ReadableStreamFromDefaultReader(source.getReader());
        }
        return ReadableStreamFromIterable(source);
      }
      function ReadableStreamFromIterable(asyncIterable) {
        let stream;
        const iteratorRecord = GetIterator(asyncIterable, "async");
        const startAlgorithm = noop2;
        function pullAlgorithm() {
          let nextResult;
          try {
            nextResult = IteratorNext(iteratorRecord);
          } catch (e2) {
            return promiseRejectedWith(e2);
          }
          const nextPromise = promiseResolvedWith(nextResult);
          return transformPromiseWith(nextPromise, (iterResult) => {
            if (!typeIsObject(iterResult)) {
              throw new TypeError("The promise returned by the iterator.next() method must fulfill with an object");
            }
            const done = IteratorComplete(iterResult);
            if (done) {
              ReadableStreamDefaultControllerClose(stream._readableStreamController);
            } else {
              const value = IteratorValue(iterResult);
              ReadableStreamDefaultControllerEnqueue(stream._readableStreamController, value);
            }
          });
        }
        function cancelAlgorithm(reason) {
          const iterator = iteratorRecord.iterator;
          let returnMethod;
          try {
            returnMethod = GetMethod(iterator, "return");
          } catch (e2) {
            return promiseRejectedWith(e2);
          }
          if (returnMethod === void 0) {
            return promiseResolvedWith(void 0);
          }
          let returnResult;
          try {
            returnResult = reflectCall(returnMethod, iterator, [reason]);
          } catch (e2) {
            return promiseRejectedWith(e2);
          }
          const returnPromise = promiseResolvedWith(returnResult);
          return transformPromiseWith(returnPromise, (iterResult) => {
            if (!typeIsObject(iterResult)) {
              throw new TypeError("The promise returned by the iterator.return() method must fulfill with an object");
            }
            return void 0;
          });
        }
        stream = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, 0);
        return stream;
      }
      function ReadableStreamFromDefaultReader(reader) {
        let stream;
        const startAlgorithm = noop2;
        function pullAlgorithm() {
          let readPromise;
          try {
            readPromise = reader.read();
          } catch (e2) {
            return promiseRejectedWith(e2);
          }
          return transformPromiseWith(readPromise, (readResult) => {
            if (!typeIsObject(readResult)) {
              throw new TypeError("The promise returned by the reader.read() method must fulfill with an object");
            }
            if (readResult.done) {
              ReadableStreamDefaultControllerClose(stream._readableStreamController);
            } else {
              const value = readResult.value;
              ReadableStreamDefaultControllerEnqueue(stream._readableStreamController, value);
            }
          });
        }
        function cancelAlgorithm(reason) {
          try {
            return promiseResolvedWith(reader.cancel(reason));
          } catch (e2) {
            return promiseRejectedWith(e2);
          }
        }
        stream = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, 0);
        return stream;
      }
      function convertUnderlyingDefaultOrByteSource(source, context) {
        assertDictionary(source, context);
        const original = source;
        const autoAllocateChunkSize = original === null || original === void 0 ? void 0 : original.autoAllocateChunkSize;
        const cancel = original === null || original === void 0 ? void 0 : original.cancel;
        const pull = original === null || original === void 0 ? void 0 : original.pull;
        const start = original === null || original === void 0 ? void 0 : original.start;
        const type = original === null || original === void 0 ? void 0 : original.type;
        return {
          autoAllocateChunkSize: autoAllocateChunkSize === void 0 ? void 0 : convertUnsignedLongLongWithEnforceRange(autoAllocateChunkSize, `${context} has member 'autoAllocateChunkSize' that`),
          cancel: cancel === void 0 ? void 0 : convertUnderlyingSourceCancelCallback(cancel, original, `${context} has member 'cancel' that`),
          pull: pull === void 0 ? void 0 : convertUnderlyingSourcePullCallback(pull, original, `${context} has member 'pull' that`),
          start: start === void 0 ? void 0 : convertUnderlyingSourceStartCallback(start, original, `${context} has member 'start' that`),
          type: type === void 0 ? void 0 : convertReadableStreamType(type, `${context} has member 'type' that`)
        };
      }
      function convertUnderlyingSourceCancelCallback(fn, original, context) {
        assertFunction(fn, context);
        return (reason) => promiseCall(fn, original, [reason]);
      }
      function convertUnderlyingSourcePullCallback(fn, original, context) {
        assertFunction(fn, context);
        return (controller) => promiseCall(fn, original, [controller]);
      }
      function convertUnderlyingSourceStartCallback(fn, original, context) {
        assertFunction(fn, context);
        return (controller) => reflectCall(fn, original, [controller]);
      }
      function convertReadableStreamType(type, context) {
        type = `${type}`;
        if (type !== "bytes") {
          throw new TypeError(`${context} '${type}' is not a valid enumeration value for ReadableStreamType`);
        }
        return type;
      }
      function convertIteratorOptions(options, context) {
        assertDictionary(options, context);
        const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;
        return { preventCancel: Boolean(preventCancel) };
      }
      function convertPipeOptions(options, context) {
        assertDictionary(options, context);
        const preventAbort = options === null || options === void 0 ? void 0 : options.preventAbort;
        const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;
        const preventClose = options === null || options === void 0 ? void 0 : options.preventClose;
        const signal = options === null || options === void 0 ? void 0 : options.signal;
        if (signal !== void 0) {
          assertAbortSignal(signal, `${context} has member 'signal' that`);
        }
        return {
          preventAbort: Boolean(preventAbort),
          preventCancel: Boolean(preventCancel),
          preventClose: Boolean(preventClose),
          signal
        };
      }
      function assertAbortSignal(signal, context) {
        if (!isAbortSignal2(signal)) {
          throw new TypeError(`${context} is not an AbortSignal.`);
        }
      }
      function convertReadableWritablePair(pair, context) {
        assertDictionary(pair, context);
        const readable = pair === null || pair === void 0 ? void 0 : pair.readable;
        assertRequiredField(readable, "readable", "ReadableWritablePair");
        assertReadableStream(readable, `${context} has member 'readable' that`);
        const writable = pair === null || pair === void 0 ? void 0 : pair.writable;
        assertRequiredField(writable, "writable", "ReadableWritablePair");
        assertWritableStream(writable, `${context} has member 'writable' that`);
        return { readable, writable };
      }
      class ReadableStream2 {
        constructor(rawUnderlyingSource = {}, rawStrategy = {}) {
          if (rawUnderlyingSource === void 0) {
            rawUnderlyingSource = null;
          } else {
            assertObject(rawUnderlyingSource, "First parameter");
          }
          const strategy = convertQueuingStrategy(rawStrategy, "Second parameter");
          const underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, "First parameter");
          InitializeReadableStream(this);
          if (underlyingSource.type === "bytes") {
            if (strategy.size !== void 0) {
              throw new RangeError("The strategy for a byte stream cannot have a size function");
            }
            const highWaterMark = ExtractHighWaterMark(strategy, 0);
            SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);
          } else {
            const sizeAlgorithm = ExtractSizeAlgorithm(strategy);
            const highWaterMark = ExtractHighWaterMark(strategy, 1);
            SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, highWaterMark, sizeAlgorithm);
          }
        }
        get locked() {
          if (!IsReadableStream(this)) {
            throw streamBrandCheckException$1("locked");
          }
          return IsReadableStreamLocked(this);
        }
        cancel(reason = void 0) {
          if (!IsReadableStream(this)) {
            return promiseRejectedWith(streamBrandCheckException$1("cancel"));
          }
          if (IsReadableStreamLocked(this)) {
            return promiseRejectedWith(new TypeError("Cannot cancel a stream that already has a reader"));
          }
          return ReadableStreamCancel(this, reason);
        }
        getReader(rawOptions = void 0) {
          if (!IsReadableStream(this)) {
            throw streamBrandCheckException$1("getReader");
          }
          const options = convertReaderOptions(rawOptions, "First parameter");
          if (options.mode === void 0) {
            return AcquireReadableStreamDefaultReader(this);
          }
          return AcquireReadableStreamBYOBReader(this);
        }
        pipeThrough(rawTransform, rawOptions = {}) {
          if (!IsReadableStream(this)) {
            throw streamBrandCheckException$1("pipeThrough");
          }
          assertRequiredArgument(rawTransform, 1, "pipeThrough");
          const transform = convertReadableWritablePair(rawTransform, "First parameter");
          const options = convertPipeOptions(rawOptions, "Second parameter");
          if (IsReadableStreamLocked(this)) {
            throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream");
          }
          if (IsWritableStreamLocked(transform.writable)) {
            throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream");
          }
          const promise = ReadableStreamPipeTo(this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal);
          setPromiseIsHandledToTrue(promise);
          return transform.readable;
        }
        pipeTo(destination, rawOptions = {}) {
          if (!IsReadableStream(this)) {
            return promiseRejectedWith(streamBrandCheckException$1("pipeTo"));
          }
          if (destination === void 0) {
            return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`);
          }
          if (!IsWritableStream(destination)) {
            return promiseRejectedWith(new TypeError(`ReadableStream.prototype.pipeTo's first argument must be a WritableStream`));
          }
          let options;
          try {
            options = convertPipeOptions(rawOptions, "Second parameter");
          } catch (e2) {
            return promiseRejectedWith(e2);
          }
          if (IsReadableStreamLocked(this)) {
            return promiseRejectedWith(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream"));
          }
          if (IsWritableStreamLocked(destination)) {
            return promiseRejectedWith(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream"));
          }
          return ReadableStreamPipeTo(this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal);
        }
        tee() {
          if (!IsReadableStream(this)) {
            throw streamBrandCheckException$1("tee");
          }
          const branches = ReadableStreamTee(this);
          return CreateArrayFromList(branches);
        }
        values(rawOptions = void 0) {
          if (!IsReadableStream(this)) {
            throw streamBrandCheckException$1("values");
          }
          const options = convertIteratorOptions(rawOptions, "First parameter");
          return AcquireReadableStreamAsyncIterator(this, options.preventCancel);
        }
        [SymbolAsyncIterator](options) {
          return this.values(options);
        }
        static from(asyncIterable) {
          return ReadableStreamFrom(asyncIterable);
        }
      }
      Object.defineProperties(ReadableStream2, {
        from: { enumerable: true }
      });
      Object.defineProperties(ReadableStream2.prototype, {
        cancel: { enumerable: true },
        getReader: { enumerable: true },
        pipeThrough: { enumerable: true },
        pipeTo: { enumerable: true },
        tee: { enumerable: true },
        values: { enumerable: true },
        locked: { enumerable: true }
      });
      setFunctionName(ReadableStream2.from, "from");
      setFunctionName(ReadableStream2.prototype.cancel, "cancel");
      setFunctionName(ReadableStream2.prototype.getReader, "getReader");
      setFunctionName(ReadableStream2.prototype.pipeThrough, "pipeThrough");
      setFunctionName(ReadableStream2.prototype.pipeTo, "pipeTo");
      setFunctionName(ReadableStream2.prototype.tee, "tee");
      setFunctionName(ReadableStream2.prototype.values, "values");
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(ReadableStream2.prototype, Symbol.toStringTag, {
          value: "ReadableStream",
          configurable: true
        });
      }
      Object.defineProperty(ReadableStream2.prototype, SymbolAsyncIterator, {
        value: ReadableStream2.prototype.values,
        writable: true,
        configurable: true
      });
      function CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {
        const stream = Object.create(ReadableStream2.prototype);
        InitializeReadableStream(stream);
        const controller = Object.create(ReadableStreamDefaultController.prototype);
        SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);
        return stream;
      }
      function CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm) {
        const stream = Object.create(ReadableStream2.prototype);
        InitializeReadableStream(stream);
        const controller = Object.create(ReadableByteStreamController.prototype);
        SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, void 0);
        return stream;
      }
      function InitializeReadableStream(stream) {
        stream._state = "readable";
        stream._reader = void 0;
        stream._storedError = void 0;
        stream._disturbed = false;
      }
      function IsReadableStream(x2) {
        if (!typeIsObject(x2)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x2, "_readableStreamController")) {
          return false;
        }
        return x2 instanceof ReadableStream2;
      }
      function IsReadableStreamLocked(stream) {
        if (stream._reader === void 0) {
          return false;
        }
        return true;
      }
      function ReadableStreamCancel(stream, reason) {
        stream._disturbed = true;
        if (stream._state === "closed") {
          return promiseResolvedWith(void 0);
        }
        if (stream._state === "errored") {
          return promiseRejectedWith(stream._storedError);
        }
        ReadableStreamClose(stream);
        const reader = stream._reader;
        if (reader !== void 0 && IsReadableStreamBYOBReader(reader)) {
          const readIntoRequests = reader._readIntoRequests;
          reader._readIntoRequests = new SimpleQueue();
          readIntoRequests.forEach((readIntoRequest) => {
            readIntoRequest._closeSteps(void 0);
          });
        }
        const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);
        return transformPromiseWith(sourceCancelPromise, noop2);
      }
      function ReadableStreamClose(stream) {
        stream._state = "closed";
        const reader = stream._reader;
        if (reader === void 0) {
          return;
        }
        defaultReaderClosedPromiseResolve(reader);
        if (IsReadableStreamDefaultReader(reader)) {
          const readRequests = reader._readRequests;
          reader._readRequests = new SimpleQueue();
          readRequests.forEach((readRequest) => {
            readRequest._closeSteps();
          });
        }
      }
      function ReadableStreamError(stream, e2) {
        stream._state = "errored";
        stream._storedError = e2;
        const reader = stream._reader;
        if (reader === void 0) {
          return;
        }
        defaultReaderClosedPromiseReject(reader, e2);
        if (IsReadableStreamDefaultReader(reader)) {
          ReadableStreamDefaultReaderErrorReadRequests(reader, e2);
        } else {
          ReadableStreamBYOBReaderErrorReadIntoRequests(reader, e2);
        }
      }
      function streamBrandCheckException$1(name) {
        return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);
      }
      function convertQueuingStrategyInit(init, context) {
        assertDictionary(init, context);
        const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;
        assertRequiredField(highWaterMark, "highWaterMark", "QueuingStrategyInit");
        return {
          highWaterMark: convertUnrestrictedDouble(highWaterMark)
        };
      }
      const byteLengthSizeFunction = (chunk) => {
        return chunk.byteLength;
      };
      setFunctionName(byteLengthSizeFunction, "size");
      class ByteLengthQueuingStrategy {
        constructor(options) {
          assertRequiredArgument(options, 1, "ByteLengthQueuingStrategy");
          options = convertQueuingStrategyInit(options, "First parameter");
          this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;
        }
        get highWaterMark() {
          if (!IsByteLengthQueuingStrategy(this)) {
            throw byteLengthBrandCheckException("highWaterMark");
          }
          return this._byteLengthQueuingStrategyHighWaterMark;
        }
        get size() {
          if (!IsByteLengthQueuingStrategy(this)) {
            throw byteLengthBrandCheckException("size");
          }
          return byteLengthSizeFunction;
        }
      }
      Object.defineProperties(ByteLengthQueuingStrategy.prototype, {
        highWaterMark: { enumerable: true },
        size: { enumerable: true }
      });
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(ByteLengthQueuingStrategy.prototype, Symbol.toStringTag, {
          value: "ByteLengthQueuingStrategy",
          configurable: true
        });
      }
      function byteLengthBrandCheckException(name) {
        return new TypeError(`ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`);
      }
      function IsByteLengthQueuingStrategy(x2) {
        if (!typeIsObject(x2)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x2, "_byteLengthQueuingStrategyHighWaterMark")) {
          return false;
        }
        return x2 instanceof ByteLengthQueuingStrategy;
      }
      const countSizeFunction = () => {
        return 1;
      };
      setFunctionName(countSizeFunction, "size");
      class CountQueuingStrategy {
        constructor(options) {
          assertRequiredArgument(options, 1, "CountQueuingStrategy");
          options = convertQueuingStrategyInit(options, "First parameter");
          this._countQueuingStrategyHighWaterMark = options.highWaterMark;
        }
        get highWaterMark() {
          if (!IsCountQueuingStrategy(this)) {
            throw countBrandCheckException("highWaterMark");
          }
          return this._countQueuingStrategyHighWaterMark;
        }
        get size() {
          if (!IsCountQueuingStrategy(this)) {
            throw countBrandCheckException("size");
          }
          return countSizeFunction;
        }
      }
      Object.defineProperties(CountQueuingStrategy.prototype, {
        highWaterMark: { enumerable: true },
        size: { enumerable: true }
      });
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(CountQueuingStrategy.prototype, Symbol.toStringTag, {
          value: "CountQueuingStrategy",
          configurable: true
        });
      }
      function countBrandCheckException(name) {
        return new TypeError(`CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`);
      }
      function IsCountQueuingStrategy(x2) {
        if (!typeIsObject(x2)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x2, "_countQueuingStrategyHighWaterMark")) {
          return false;
        }
        return x2 instanceof CountQueuingStrategy;
      }
      function convertTransformer(original, context) {
        assertDictionary(original, context);
        const cancel = original === null || original === void 0 ? void 0 : original.cancel;
        const flush = original === null || original === void 0 ? void 0 : original.flush;
        const readableType = original === null || original === void 0 ? void 0 : original.readableType;
        const start = original === null || original === void 0 ? void 0 : original.start;
        const transform = original === null || original === void 0 ? void 0 : original.transform;
        const writableType = original === null || original === void 0 ? void 0 : original.writableType;
        return {
          cancel: cancel === void 0 ? void 0 : convertTransformerCancelCallback(cancel, original, `${context} has member 'cancel' that`),
          flush: flush === void 0 ? void 0 : convertTransformerFlushCallback(flush, original, `${context} has member 'flush' that`),
          readableType,
          start: start === void 0 ? void 0 : convertTransformerStartCallback(start, original, `${context} has member 'start' that`),
          transform: transform === void 0 ? void 0 : convertTransformerTransformCallback(transform, original, `${context} has member 'transform' that`),
          writableType
        };
      }
      function convertTransformerFlushCallback(fn, original, context) {
        assertFunction(fn, context);
        return (controller) => promiseCall(fn, original, [controller]);
      }
      function convertTransformerStartCallback(fn, original, context) {
        assertFunction(fn, context);
        return (controller) => reflectCall(fn, original, [controller]);
      }
      function convertTransformerTransformCallback(fn, original, context) {
        assertFunction(fn, context);
        return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);
      }
      function convertTransformerCancelCallback(fn, original, context) {
        assertFunction(fn, context);
        return (reason) => promiseCall(fn, original, [reason]);
      }
      class TransformStream {
        constructor(rawTransformer = {}, rawWritableStrategy = {}, rawReadableStrategy = {}) {
          if (rawTransformer === void 0) {
            rawTransformer = null;
          }
          const writableStrategy = convertQueuingStrategy(rawWritableStrategy, "Second parameter");
          const readableStrategy = convertQueuingStrategy(rawReadableStrategy, "Third parameter");
          const transformer = convertTransformer(rawTransformer, "First parameter");
          if (transformer.readableType !== void 0) {
            throw new RangeError("Invalid readableType specified");
          }
          if (transformer.writableType !== void 0) {
            throw new RangeError("Invalid writableType specified");
          }
          const readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);
          const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);
          const writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);
          const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);
          let startPromise_resolve;
          const startPromise = newPromise((resolve) => {
            startPromise_resolve = resolve;
          });
          InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm);
          SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);
          if (transformer.start !== void 0) {
            startPromise_resolve(transformer.start(this._transformStreamController));
          } else {
            startPromise_resolve(void 0);
          }
        }
        get readable() {
          if (!IsTransformStream(this)) {
            throw streamBrandCheckException("readable");
          }
          return this._readable;
        }
        get writable() {
          if (!IsTransformStream(this)) {
            throw streamBrandCheckException("writable");
          }
          return this._writable;
        }
      }
      Object.defineProperties(TransformStream.prototype, {
        readable: { enumerable: true },
        writable: { enumerable: true }
      });
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(TransformStream.prototype, Symbol.toStringTag, {
          value: "TransformStream",
          configurable: true
        });
      }
      function InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm) {
        function startAlgorithm() {
          return startPromise;
        }
        function writeAlgorithm(chunk) {
          return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);
        }
        function abortAlgorithm(reason) {
          return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);
        }
        function closeAlgorithm() {
          return TransformStreamDefaultSinkCloseAlgorithm(stream);
        }
        stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, writableHighWaterMark, writableSizeAlgorithm);
        function pullAlgorithm() {
          return TransformStreamDefaultSourcePullAlgorithm(stream);
        }
        function cancelAlgorithm(reason) {
          return TransformStreamDefaultSourceCancelAlgorithm(stream, reason);
        }
        stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark, readableSizeAlgorithm);
        stream._backpressure = void 0;
        stream._backpressureChangePromise = void 0;
        stream._backpressureChangePromise_resolve = void 0;
        TransformStreamSetBackpressure(stream, true);
        stream._transformStreamController = void 0;
      }
      function IsTransformStream(x2) {
        if (!typeIsObject(x2)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x2, "_transformStreamController")) {
          return false;
        }
        return x2 instanceof TransformStream;
      }
      function TransformStreamError(stream, e2) {
        ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e2);
        TransformStreamErrorWritableAndUnblockWrite(stream, e2);
      }
      function TransformStreamErrorWritableAndUnblockWrite(stream, e2) {
        TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);
        WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e2);
        TransformStreamUnblockWrite(stream);
      }
      function TransformStreamUnblockWrite(stream) {
        if (stream._backpressure) {
          TransformStreamSetBackpressure(stream, false);
        }
      }
      function TransformStreamSetBackpressure(stream, backpressure) {
        if (stream._backpressureChangePromise !== void 0) {
          stream._backpressureChangePromise_resolve();
        }
        stream._backpressureChangePromise = newPromise((resolve) => {
          stream._backpressureChangePromise_resolve = resolve;
        });
        stream._backpressure = backpressure;
      }
      class TransformStreamDefaultController {
        constructor() {
          throw new TypeError("Illegal constructor");
        }
        get desiredSize() {
          if (!IsTransformStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException("desiredSize");
          }
          const readableController = this._controlledTransformStream._readable._readableStreamController;
          return ReadableStreamDefaultControllerGetDesiredSize(readableController);
        }
        enqueue(chunk = void 0) {
          if (!IsTransformStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException("enqueue");
          }
          TransformStreamDefaultControllerEnqueue(this, chunk);
        }
        error(reason = void 0) {
          if (!IsTransformStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException("error");
          }
          TransformStreamDefaultControllerError(this, reason);
        }
        terminate() {
          if (!IsTransformStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException("terminate");
          }
          TransformStreamDefaultControllerTerminate(this);
        }
      }
      Object.defineProperties(TransformStreamDefaultController.prototype, {
        enqueue: { enumerable: true },
        error: { enumerable: true },
        terminate: { enumerable: true },
        desiredSize: { enumerable: true }
      });
      setFunctionName(TransformStreamDefaultController.prototype.enqueue, "enqueue");
      setFunctionName(TransformStreamDefaultController.prototype.error, "error");
      setFunctionName(TransformStreamDefaultController.prototype.terminate, "terminate");
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(TransformStreamDefaultController.prototype, Symbol.toStringTag, {
          value: "TransformStreamDefaultController",
          configurable: true
        });
      }
      function IsTransformStreamDefaultController(x2) {
        if (!typeIsObject(x2)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x2, "_controlledTransformStream")) {
          return false;
        }
        return x2 instanceof TransformStreamDefaultController;
      }
      function SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm, cancelAlgorithm) {
        controller._controlledTransformStream = stream;
        stream._transformStreamController = controller;
        controller._transformAlgorithm = transformAlgorithm;
        controller._flushAlgorithm = flushAlgorithm;
        controller._cancelAlgorithm = cancelAlgorithm;
        controller._finishPromise = void 0;
        controller._finishPromise_resolve = void 0;
        controller._finishPromise_reject = void 0;
      }
      function SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {
        const controller = Object.create(TransformStreamDefaultController.prototype);
        let transformAlgorithm;
        let flushAlgorithm;
        let cancelAlgorithm;
        if (transformer.transform !== void 0) {
          transformAlgorithm = (chunk) => transformer.transform(chunk, controller);
        } else {
          transformAlgorithm = (chunk) => {
            try {
              TransformStreamDefaultControllerEnqueue(controller, chunk);
              return promiseResolvedWith(void 0);
            } catch (transformResultE) {
              return promiseRejectedWith(transformResultE);
            }
          };
        }
        if (transformer.flush !== void 0) {
          flushAlgorithm = () => transformer.flush(controller);
        } else {
          flushAlgorithm = () => promiseResolvedWith(void 0);
        }
        if (transformer.cancel !== void 0) {
          cancelAlgorithm = (reason) => transformer.cancel(reason);
        } else {
          cancelAlgorithm = () => promiseResolvedWith(void 0);
        }
        SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm, cancelAlgorithm);
      }
      function TransformStreamDefaultControllerClearAlgorithms(controller) {
        controller._transformAlgorithm = void 0;
        controller._flushAlgorithm = void 0;
        controller._cancelAlgorithm = void 0;
      }
      function TransformStreamDefaultControllerEnqueue(controller, chunk) {
        const stream = controller._controlledTransformStream;
        const readableController = stream._readable._readableStreamController;
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {
          throw new TypeError("Readable side is not in a state that permits enqueue");
        }
        try {
          ReadableStreamDefaultControllerEnqueue(readableController, chunk);
        } catch (e2) {
          TransformStreamErrorWritableAndUnblockWrite(stream, e2);
          throw stream._readable._storedError;
        }
        const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);
        if (backpressure !== stream._backpressure) {
          TransformStreamSetBackpressure(stream, true);
        }
      }
      function TransformStreamDefaultControllerError(controller, e2) {
        TransformStreamError(controller._controlledTransformStream, e2);
      }
      function TransformStreamDefaultControllerPerformTransform(controller, chunk) {
        const transformPromise = controller._transformAlgorithm(chunk);
        return transformPromiseWith(transformPromise, void 0, (r2) => {
          TransformStreamError(controller._controlledTransformStream, r2);
          throw r2;
        });
      }
      function TransformStreamDefaultControllerTerminate(controller) {
        const stream = controller._controlledTransformStream;
        const readableController = stream._readable._readableStreamController;
        ReadableStreamDefaultControllerClose(readableController);
        const error = new TypeError("TransformStream terminated");
        TransformStreamErrorWritableAndUnblockWrite(stream, error);
      }
      function TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {
        const controller = stream._transformStreamController;
        if (stream._backpressure) {
          const backpressureChangePromise = stream._backpressureChangePromise;
          return transformPromiseWith(backpressureChangePromise, () => {
            const writable = stream._writable;
            const state = writable._state;
            if (state === "erroring") {
              throw writable._storedError;
            }
            return TransformStreamDefaultControllerPerformTransform(controller, chunk);
          });
        }
        return TransformStreamDefaultControllerPerformTransform(controller, chunk);
      }
      function TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {
        const controller = stream._transformStreamController;
        if (controller._finishPromise !== void 0) {
          return controller._finishPromise;
        }
        const readable = stream._readable;
        controller._finishPromise = newPromise((resolve, reject) => {
          controller._finishPromise_resolve = resolve;
          controller._finishPromise_reject = reject;
        });
        const cancelPromise = controller._cancelAlgorithm(reason);
        TransformStreamDefaultControllerClearAlgorithms(controller);
        uponPromise(cancelPromise, () => {
          if (readable._state === "errored") {
            defaultControllerFinishPromiseReject(controller, readable._storedError);
          } else {
            ReadableStreamDefaultControllerError(readable._readableStreamController, reason);
            defaultControllerFinishPromiseResolve(controller);
          }
          return null;
        }, (r2) => {
          ReadableStreamDefaultControllerError(readable._readableStreamController, r2);
          defaultControllerFinishPromiseReject(controller, r2);
          return null;
        });
        return controller._finishPromise;
      }
      function TransformStreamDefaultSinkCloseAlgorithm(stream) {
        const controller = stream._transformStreamController;
        if (controller._finishPromise !== void 0) {
          return controller._finishPromise;
        }
        const readable = stream._readable;
        controller._finishPromise = newPromise((resolve, reject) => {
          controller._finishPromise_resolve = resolve;
          controller._finishPromise_reject = reject;
        });
        const flushPromise = controller._flushAlgorithm();
        TransformStreamDefaultControllerClearAlgorithms(controller);
        uponPromise(flushPromise, () => {
          if (readable._state === "errored") {
            defaultControllerFinishPromiseReject(controller, readable._storedError);
          } else {
            ReadableStreamDefaultControllerClose(readable._readableStreamController);
            defaultControllerFinishPromiseResolve(controller);
          }
          return null;
        }, (r2) => {
          ReadableStreamDefaultControllerError(readable._readableStreamController, r2);
          defaultControllerFinishPromiseReject(controller, r2);
          return null;
        });
        return controller._finishPromise;
      }
      function TransformStreamDefaultSourcePullAlgorithm(stream) {
        TransformStreamSetBackpressure(stream, false);
        return stream._backpressureChangePromise;
      }
      function TransformStreamDefaultSourceCancelAlgorithm(stream, reason) {
        const controller = stream._transformStreamController;
        if (controller._finishPromise !== void 0) {
          return controller._finishPromise;
        }
        const writable = stream._writable;
        controller._finishPromise = newPromise((resolve, reject) => {
          controller._finishPromise_resolve = resolve;
          controller._finishPromise_reject = reject;
        });
        const cancelPromise = controller._cancelAlgorithm(reason);
        TransformStreamDefaultControllerClearAlgorithms(controller);
        uponPromise(cancelPromise, () => {
          if (writable._state === "errored") {
            defaultControllerFinishPromiseReject(controller, writable._storedError);
          } else {
            WritableStreamDefaultControllerErrorIfNeeded(writable._writableStreamController, reason);
            TransformStreamUnblockWrite(stream);
            defaultControllerFinishPromiseResolve(controller);
          }
          return null;
        }, (r2) => {
          WritableStreamDefaultControllerErrorIfNeeded(writable._writableStreamController, r2);
          TransformStreamUnblockWrite(stream);
          defaultControllerFinishPromiseReject(controller, r2);
          return null;
        });
        return controller._finishPromise;
      }
      function defaultControllerBrandCheckException(name) {
        return new TypeError(`TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);
      }
      function defaultControllerFinishPromiseResolve(controller) {
        if (controller._finishPromise_resolve === void 0) {
          return;
        }
        controller._finishPromise_resolve();
        controller._finishPromise_resolve = void 0;
        controller._finishPromise_reject = void 0;
      }
      function defaultControllerFinishPromiseReject(controller, reason) {
        if (controller._finishPromise_reject === void 0) {
          return;
        }
        setPromiseIsHandledToTrue(controller._finishPromise);
        controller._finishPromise_reject(reason);
        controller._finishPromise_resolve = void 0;
        controller._finishPromise_reject = void 0;
      }
      function streamBrandCheckException(name) {
        return new TypeError(`TransformStream.prototype.${name} can only be used on a TransformStream`);
      }
      exports2.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy;
      exports2.CountQueuingStrategy = CountQueuingStrategy;
      exports2.ReadableByteStreamController = ReadableByteStreamController;
      exports2.ReadableStream = ReadableStream2;
      exports2.ReadableStreamBYOBReader = ReadableStreamBYOBReader;
      exports2.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest;
      exports2.ReadableStreamDefaultController = ReadableStreamDefaultController;
      exports2.ReadableStreamDefaultReader = ReadableStreamDefaultReader;
      exports2.TransformStream = TransformStream;
      exports2.TransformStreamDefaultController = TransformStreamDefaultController;
      exports2.WritableStream = WritableStream;
      exports2.WritableStreamDefaultController = WritableStreamDefaultController;
      exports2.WritableStreamDefaultWriter = WritableStreamDefaultWriter;
    });
  }
});

// node_modules/fetch-blob/streams.cjs
var require_streams = __commonJS({
  "node_modules/fetch-blob/streams.cjs"() {
    var POOL_SIZE2 = 65536;
    if (!globalThis.ReadableStream) {
      try {
        const process2 = require("node:process");
        const { emitWarning } = process2;
        try {
          process2.emitWarning = () => {
          };
          Object.assign(globalThis, require("node:stream/web"));
          process2.emitWarning = emitWarning;
        } catch (error) {
          process2.emitWarning = emitWarning;
          throw error;
        }
      } catch (error) {
        Object.assign(globalThis, require_ponyfill_es2018());
      }
    }
    try {
      const { Blob: Blob3 } = require("buffer");
      if (Blob3 && !Blob3.prototype.stream) {
        Blob3.prototype.stream = function name(params) {
          let position = 0;
          const blob = this;
          return new ReadableStream({
            type: "bytes",
            async pull(ctrl) {
              const chunk = blob.slice(position, Math.min(blob.size, position + POOL_SIZE2));
              const buffer = await chunk.arrayBuffer();
              position += buffer.byteLength;
              ctrl.enqueue(new Uint8Array(buffer));
              if (position === blob.size) {
                ctrl.close();
              }
            }
          });
        };
      }
    } catch (error) {
    }
  }
});

// node_modules/fetch-blob/index.js
async function* toIterator(parts, clone2 = true) {
  for (const part of parts) {
    if ("stream" in part) {
      yield* part.stream();
    } else if (ArrayBuffer.isView(part)) {
      if (clone2) {
        let position = part.byteOffset;
        const end = part.byteOffset + part.byteLength;
        while (position !== end) {
          const size = Math.min(end - position, POOL_SIZE);
          const chunk = part.buffer.slice(position, position + size);
          position += chunk.byteLength;
          yield new Uint8Array(chunk);
        }
      } else {
        yield part;
      }
    } else {
      let position = 0, b = part;
      while (position !== b.size) {
        const chunk = b.slice(position, Math.min(b.size, position + POOL_SIZE));
        const buffer = await chunk.arrayBuffer();
        position += buffer.byteLength;
        yield new Uint8Array(buffer);
      }
    }
  }
}
var import_streams, POOL_SIZE, _Blob, Blob2, fetch_blob_default;
var init_fetch_blob = __esm({
  "node_modules/fetch-blob/index.js"() {
    import_streams = __toESM(require_streams(), 1);
    POOL_SIZE = 65536;
    _Blob = class Blob {
      #parts = [];
      #type = "";
      #size = 0;
      #endings = "transparent";
      constructor(blobParts = [], options = {}) {
        if (typeof blobParts !== "object" || blobParts === null) {
          throw new TypeError("Failed to construct 'Blob': The provided value cannot be converted to a sequence.");
        }
        if (typeof blobParts[Symbol.iterator] !== "function") {
          throw new TypeError("Failed to construct 'Blob': The object must have a callable @@iterator property.");
        }
        if (typeof options !== "object" && typeof options !== "function") {
          throw new TypeError("Failed to construct 'Blob': parameter 2 cannot convert to dictionary.");
        }
        if (options === null)
          options = {};
        const encoder = new TextEncoder();
        for (const element of blobParts) {
          let part;
          if (ArrayBuffer.isView(element)) {
            part = new Uint8Array(element.buffer.slice(element.byteOffset, element.byteOffset + element.byteLength));
          } else if (element instanceof ArrayBuffer) {
            part = new Uint8Array(element.slice(0));
          } else if (element instanceof Blob) {
            part = element;
          } else {
            part = encoder.encode(`${element}`);
          }
          this.#size += ArrayBuffer.isView(part) ? part.byteLength : part.size;
          this.#parts.push(part);
        }
        this.#endings = `${options.endings === void 0 ? "transparent" : options.endings}`;
        const type = options.type === void 0 ? "" : String(options.type);
        this.#type = /^[\x20-\x7E]*$/.test(type) ? type : "";
      }
      get size() {
        return this.#size;
      }
      get type() {
        return this.#type;
      }
      async text() {
        const decoder = new TextDecoder();
        let str = "";
        for await (const part of toIterator(this.#parts, false)) {
          str += decoder.decode(part, { stream: true });
        }
        str += decoder.decode();
        return str;
      }
      async arrayBuffer() {
        const data = new Uint8Array(this.size);
        let offset = 0;
        for await (const chunk of toIterator(this.#parts, false)) {
          data.set(chunk, offset);
          offset += chunk.length;
        }
        return data.buffer;
      }
      stream() {
        const it = toIterator(this.#parts, true);
        return new globalThis.ReadableStream({
          type: "bytes",
          async pull(ctrl) {
            const chunk = await it.next();
            chunk.done ? ctrl.close() : ctrl.enqueue(chunk.value);
          },
          async cancel() {
            await it.return();
          }
        });
      }
      slice(start = 0, end = this.size, type = "") {
        const { size } = this;
        let relativeStart = start < 0 ? Math.max(size + start, 0) : Math.min(start, size);
        let relativeEnd = end < 0 ? Math.max(size + end, 0) : Math.min(end, size);
        const span = Math.max(relativeEnd - relativeStart, 0);
        const parts = this.#parts;
        const blobParts = [];
        let added = 0;
        for (const part of parts) {
          if (added >= span) {
            break;
          }
          const size2 = ArrayBuffer.isView(part) ? part.byteLength : part.size;
          if (relativeStart && size2 <= relativeStart) {
            relativeStart -= size2;
            relativeEnd -= size2;
          } else {
            let chunk;
            if (ArrayBuffer.isView(part)) {
              chunk = part.subarray(relativeStart, Math.min(size2, relativeEnd));
              added += chunk.byteLength;
            } else {
              chunk = part.slice(relativeStart, Math.min(size2, relativeEnd));
              added += chunk.size;
            }
            relativeEnd -= size2;
            blobParts.push(chunk);
            relativeStart = 0;
          }
        }
        const blob = new Blob([], { type: String(type).toLowerCase() });
        blob.#size = span;
        blob.#parts = blobParts;
        return blob;
      }
      get [Symbol.toStringTag]() {
        return "Blob";
      }
      static [Symbol.hasInstance](object) {
        return object && typeof object === "object" && typeof object.constructor === "function" && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && /^(Blob|File)$/.test(object[Symbol.toStringTag]);
      }
    };
    Object.defineProperties(_Blob.prototype, {
      size: { enumerable: true },
      type: { enumerable: true },
      slice: { enumerable: true }
    });
    Blob2 = _Blob;
    fetch_blob_default = Blob2;
  }
});

// node_modules/fetch-blob/file.js
var _File, File2, file_default;
var init_file = __esm({
  "node_modules/fetch-blob/file.js"() {
    init_fetch_blob();
    _File = class File extends fetch_blob_default {
      #lastModified = 0;
      #name = "";
      constructor(fileBits, fileName, options = {}) {
        if (arguments.length < 2) {
          throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`);
        }
        super(fileBits, options);
        if (options === null)
          options = {};
        const lastModified = options.lastModified === void 0 ? Date.now() : Number(options.lastModified);
        if (!Number.isNaN(lastModified)) {
          this.#lastModified = lastModified;
        }
        this.#name = String(fileName);
      }
      get name() {
        return this.#name;
      }
      get lastModified() {
        return this.#lastModified;
      }
      get [Symbol.toStringTag]() {
        return "File";
      }
      static [Symbol.hasInstance](object) {
        return !!object && object instanceof fetch_blob_default && /^(File)$/.test(object[Symbol.toStringTag]);
      }
    };
    File2 = _File;
    file_default = File2;
  }
});

// node_modules/formdata-polyfill/esm.min.js
function formDataToBlob(F2, B = fetch_blob_default) {
  var b = `${r()}${r()}`.replace(/\./g, "").slice(-28).padStart(32, "-"), c = [], p = `--${b}\r
Content-Disposition: form-data; name="`;
  F2.forEach((v, n) => typeof v == "string" ? c.push(p + e(n) + `"\r
\r
${v.replace(/\r(?!\n)|(?<!\r)\n/g, "\r\n")}\r
`) : c.push(p + e(n) + `"; filename="${e(v.name, 1)}"\r
Content-Type: ${v.type || "application/octet-stream"}\r
\r
`, v, "\r\n"));
  c.push(`--${b}--`);
  return new B(c, { type: "multipart/form-data; boundary=" + b });
}
var t, i, h, r, m, f, e, x, FormData;
var init_esm_min = __esm({
  "node_modules/formdata-polyfill/esm.min.js"() {
    init_fetch_blob();
    init_file();
    ({ toStringTag: t, iterator: i, hasInstance: h } = Symbol);
    r = Math.random;
    m = "append,set,get,getAll,delete,keys,values,entries,forEach,constructor".split(",");
    f = (a, b, c) => (a += "", /^(Blob|File)$/.test(b && b[t]) ? [(c = c !== void 0 ? c + "" : b[t] == "File" ? b.name : "blob", a), b.name !== c || b[t] == "blob" ? new file_default([b], c, b) : b] : [a, b + ""]);
    e = (c, f3) => (f3 ? c : c.replace(/\r?\n|\r/g, "\r\n")).replace(/\n/g, "%0A").replace(/\r/g, "%0D").replace(/"/g, "%22");
    x = (n, a, e2) => {
      if (a.length < e2) {
        throw new TypeError(`Failed to execute '${n}' on 'FormData': ${e2} arguments required, but only ${a.length} present.`);
      }
    };
    FormData = class FormData2 {
      #d = [];
      constructor(...a) {
        if (a.length)
          throw new TypeError(`Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'.`);
      }
      get [t]() {
        return "FormData";
      }
      [i]() {
        return this.entries();
      }
      static [h](o) {
        return o && typeof o === "object" && o[t] === "FormData" && !m.some((m2) => typeof o[m2] != "function");
      }
      append(...a) {
        x("append", arguments, 2);
        this.#d.push(f(...a));
      }
      delete(a) {
        x("delete", arguments, 1);
        a += "";
        this.#d = this.#d.filter(([b]) => b !== a);
      }
      get(a) {
        x("get", arguments, 1);
        a += "";
        for (var b = this.#d, l = b.length, c = 0; c < l; c++)
          if (b[c][0] === a)
            return b[c][1];
        return null;
      }
      getAll(a, b) {
        x("getAll", arguments, 1);
        b = [];
        a += "";
        this.#d.forEach((c) => c[0] === a && b.push(c[1]));
        return b;
      }
      has(a) {
        x("has", arguments, 1);
        a += "";
        return this.#d.some((b) => b[0] === a);
      }
      forEach(a, b) {
        x("forEach", arguments, 1);
        for (var [c, d] of this)
          a.call(b, d, c, this);
      }
      set(...a) {
        x("set", arguments, 2);
        var b = [], c = true;
        a = f(...a);
        this.#d.forEach((d) => {
          d[0] === a[0] ? c && (c = !b.push(a)) : b.push(d);
        });
        c && b.push(a);
        this.#d = b;
      }
      *entries() {
        yield* this.#d;
      }
      *keys() {
        for (var [a] of this)
          yield a;
      }
      *values() {
        for (var [, a] of this)
          yield a;
      }
    };
  }
});

// node_modules/node-domexception/index.js
var require_node_domexception = __commonJS({
  "node_modules/node-domexception/index.js"(exports, module2) {
    if (!globalThis.DOMException) {
      try {
        const { MessageChannel } = require("worker_threads"), port = new MessageChannel().port1, ab = new ArrayBuffer();
        port.postMessage(ab, [ab, ab]);
      } catch (err) {
        err.constructor.name === "DOMException" && (globalThis.DOMException = err.constructor);
      }
    }
    module2.exports = globalThis.DOMException;
  }
});

// node_modules/fetch-blob/from.js
var import_node_fs, import_node_domexception, stat, BlobDataItem;
var init_from = __esm({
  "node_modules/fetch-blob/from.js"() {
    import_node_fs = require("node:fs");
    import_node_domexception = __toESM(require_node_domexception(), 1);
    init_file();
    init_fetch_blob();
    ({ stat } = import_node_fs.promises);
    BlobDataItem = class {
      #path;
      #start;
      constructor(options) {
        this.#path = options.path;
        this.#start = options.start;
        this.size = options.size;
        this.lastModified = options.lastModified;
      }
      slice(start, end) {
        return new BlobDataItem({
          path: this.#path,
          lastModified: this.lastModified,
          size: end - start,
          start: this.#start + start
        });
      }
      async *stream() {
        const { mtimeMs } = await stat(this.#path);
        if (mtimeMs > this.lastModified) {
          throw new import_node_domexception.default("The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.", "NotReadableError");
        }
        yield* (0, import_node_fs.createReadStream)(this.#path, {
          start: this.#start,
          end: this.#start + this.size - 1
        });
      }
      get [Symbol.toStringTag]() {
        return "Blob";
      }
    };
  }
});

// node_modules/node-fetch/src/utils/multipart-parser.js
var multipart_parser_exports = {};
__export(multipart_parser_exports, {
  toFormData: () => toFormData
});
function _fileName(headerValue) {
  const m2 = headerValue.match(/\bfilename=("(.*?)"|([^()<>@,;:\\"/[\]?={}\s\t]+))($|;\s)/i);
  if (!m2) {
    return;
  }
  const match = m2[2] || m2[3] || "";
  let filename = match.slice(match.lastIndexOf("\\") + 1);
  filename = filename.replace(/%22/g, '"');
  filename = filename.replace(/&#(\d{4});/g, (m3, code) => {
    return String.fromCharCode(code);
  });
  return filename;
}
async function toFormData(Body2, ct) {
  if (!/multipart/i.test(ct)) {
    throw new TypeError("Failed to fetch");
  }
  const m2 = ct.match(/boundary=(?:"([^"]+)"|([^;]+))/i);
  if (!m2) {
    throw new TypeError("no or bad content-type header, no multipart boundary");
  }
  const parser = new MultipartParser(m2[1] || m2[2]);
  let headerField;
  let headerValue;
  let entryValue;
  let entryName;
  let contentType;
  let filename;
  const entryChunks = [];
  const formData = new FormData();
  const onPartData = (ui8a) => {
    entryValue += decoder.decode(ui8a, { stream: true });
  };
  const appendToFile = (ui8a) => {
    entryChunks.push(ui8a);
  };
  const appendFileToFormData = () => {
    const file = new file_default(entryChunks, filename, { type: contentType });
    formData.append(entryName, file);
  };
  const appendEntryToFormData = () => {
    formData.append(entryName, entryValue);
  };
  const decoder = new TextDecoder("utf-8");
  decoder.decode();
  parser.onPartBegin = function() {
    parser.onPartData = onPartData;
    parser.onPartEnd = appendEntryToFormData;
    headerField = "";
    headerValue = "";
    entryValue = "";
    entryName = "";
    contentType = "";
    filename = null;
    entryChunks.length = 0;
  };
  parser.onHeaderField = function(ui8a) {
    headerField += decoder.decode(ui8a, { stream: true });
  };
  parser.onHeaderValue = function(ui8a) {
    headerValue += decoder.decode(ui8a, { stream: true });
  };
  parser.onHeaderEnd = function() {
    headerValue += decoder.decode();
    headerField = headerField.toLowerCase();
    if (headerField === "content-disposition") {
      const m3 = headerValue.match(/\bname=("([^"]*)"|([^()<>@,;:\\"/[\]?={}\s\t]+))/i);
      if (m3) {
        entryName = m3[2] || m3[3] || "";
      }
      filename = _fileName(headerValue);
      if (filename) {
        parser.onPartData = appendToFile;
        parser.onPartEnd = appendFileToFormData;
      }
    } else if (headerField === "content-type") {
      contentType = headerValue;
    }
    headerValue = "";
    headerField = "";
  };
  for await (const chunk of Body2) {
    parser.write(chunk);
  }
  parser.end();
  return formData;
}
var s, S, f2, F, LF, CR, SPACE, HYPHEN, COLON, A, Z, lower, noop, MultipartParser;
var init_multipart_parser = __esm({
  "node_modules/node-fetch/src/utils/multipart-parser.js"() {
    init_from();
    init_esm_min();
    s = 0;
    S = {
      START_BOUNDARY: s++,
      HEADER_FIELD_START: s++,
      HEADER_FIELD: s++,
      HEADER_VALUE_START: s++,
      HEADER_VALUE: s++,
      HEADER_VALUE_ALMOST_DONE: s++,
      HEADERS_ALMOST_DONE: s++,
      PART_DATA_START: s++,
      PART_DATA: s++,
      END: s++
    };
    f2 = 1;
    F = {
      PART_BOUNDARY: f2,
      LAST_BOUNDARY: f2 *= 2
    };
    LF = 10;
    CR = 13;
    SPACE = 32;
    HYPHEN = 45;
    COLON = 58;
    A = 97;
    Z = 122;
    lower = (c) => c | 32;
    noop = () => {
    };
    MultipartParser = class {
      constructor(boundary) {
        this.index = 0;
        this.flags = 0;
        this.onHeaderEnd = noop;
        this.onHeaderField = noop;
        this.onHeadersEnd = noop;
        this.onHeaderValue = noop;
        this.onPartBegin = noop;
        this.onPartData = noop;
        this.onPartEnd = noop;
        this.boundaryChars = {};
        boundary = "\r\n--" + boundary;
        const ui8a = new Uint8Array(boundary.length);
        for (let i2 = 0; i2 < boundary.length; i2++) {
          ui8a[i2] = boundary.charCodeAt(i2);
          this.boundaryChars[ui8a[i2]] = true;
        }
        this.boundary = ui8a;
        this.lookbehind = new Uint8Array(this.boundary.length + 8);
        this.state = S.START_BOUNDARY;
      }
      write(data) {
        let i2 = 0;
        const length_ = data.length;
        let previousIndex = this.index;
        let { lookbehind, boundary, boundaryChars, index, state, flags } = this;
        const boundaryLength = this.boundary.length;
        const boundaryEnd = boundaryLength - 1;
        const bufferLength = data.length;
        let c;
        let cl;
        const mark = (name) => {
          this[name + "Mark"] = i2;
        };
        const clear = (name) => {
          delete this[name + "Mark"];
        };
        const callback = (callbackSymbol, start, end, ui8a) => {
          if (start === void 0 || start !== end) {
            this[callbackSymbol](ui8a && ui8a.subarray(start, end));
          }
        };
        const dataCallback = (name, clear2) => {
          const markSymbol = name + "Mark";
          if (!(markSymbol in this)) {
            return;
          }
          if (clear2) {
            callback(name, this[markSymbol], i2, data);
            delete this[markSymbol];
          } else {
            callback(name, this[markSymbol], data.length, data);
            this[markSymbol] = 0;
          }
        };
        for (i2 = 0; i2 < length_; i2++) {
          c = data[i2];
          switch (state) {
            case S.START_BOUNDARY:
              if (index === boundary.length - 2) {
                if (c === HYPHEN) {
                  flags |= F.LAST_BOUNDARY;
                } else if (c !== CR) {
                  return;
                }
                index++;
                break;
              } else if (index - 1 === boundary.length - 2) {
                if (flags & F.LAST_BOUNDARY && c === HYPHEN) {
                  state = S.END;
                  flags = 0;
                } else if (!(flags & F.LAST_BOUNDARY) && c === LF) {
                  index = 0;
                  callback("onPartBegin");
                  state = S.HEADER_FIELD_START;
                } else {
                  return;
                }
                break;
              }
              if (c !== boundary[index + 2]) {
                index = -2;
              }
              if (c === boundary[index + 2]) {
                index++;
              }
              break;
            case S.HEADER_FIELD_START:
              state = S.HEADER_FIELD;
              mark("onHeaderField");
              index = 0;
            case S.HEADER_FIELD:
              if (c === CR) {
                clear("onHeaderField");
                state = S.HEADERS_ALMOST_DONE;
                break;
              }
              index++;
              if (c === HYPHEN) {
                break;
              }
              if (c === COLON) {
                if (index === 1) {
                  return;
                }
                dataCallback("onHeaderField", true);
                state = S.HEADER_VALUE_START;
                break;
              }
              cl = lower(c);
              if (cl < A || cl > Z) {
                return;
              }
              break;
            case S.HEADER_VALUE_START:
              if (c === SPACE) {
                break;
              }
              mark("onHeaderValue");
              state = S.HEADER_VALUE;
            case S.HEADER_VALUE:
              if (c === CR) {
                dataCallback("onHeaderValue", true);
                callback("onHeaderEnd");
                state = S.HEADER_VALUE_ALMOST_DONE;
              }
              break;
            case S.HEADER_VALUE_ALMOST_DONE:
              if (c !== LF) {
                return;
              }
              state = S.HEADER_FIELD_START;
              break;
            case S.HEADERS_ALMOST_DONE:
              if (c !== LF) {
                return;
              }
              callback("onHeadersEnd");
              state = S.PART_DATA_START;
              break;
            case S.PART_DATA_START:
              state = S.PART_DATA;
              mark("onPartData");
            case S.PART_DATA:
              previousIndex = index;
              if (index === 0) {
                i2 += boundaryEnd;
                while (i2 < bufferLength && !(data[i2] in boundaryChars)) {
                  i2 += boundaryLength;
                }
                i2 -= boundaryEnd;
                c = data[i2];
              }
              if (index < boundary.length) {
                if (boundary[index] === c) {
                  if (index === 0) {
                    dataCallback("onPartData", true);
                  }
                  index++;
                } else {
                  index = 0;
                }
              } else if (index === boundary.length) {
                index++;
                if (c === CR) {
                  flags |= F.PART_BOUNDARY;
                } else if (c === HYPHEN) {
                  flags |= F.LAST_BOUNDARY;
                } else {
                  index = 0;
                }
              } else if (index - 1 === boundary.length) {
                if (flags & F.PART_BOUNDARY) {
                  index = 0;
                  if (c === LF) {
                    flags &= ~F.PART_BOUNDARY;
                    callback("onPartEnd");
                    callback("onPartBegin");
                    state = S.HEADER_FIELD_START;
                    break;
                  }
                } else if (flags & F.LAST_BOUNDARY) {
                  if (c === HYPHEN) {
                    callback("onPartEnd");
                    state = S.END;
                    flags = 0;
                  } else {
                    index = 0;
                  }
                } else {
                  index = 0;
                }
              }
              if (index > 0) {
                lookbehind[index - 1] = c;
              } else if (previousIndex > 0) {
                const _lookbehind = new Uint8Array(lookbehind.buffer, lookbehind.byteOffset, lookbehind.byteLength);
                callback("onPartData", 0, previousIndex, _lookbehind);
                previousIndex = 0;
                mark("onPartData");
                i2--;
              }
              break;
            case S.END:
              break;
            default:
              throw new Error(`Unexpected state entered: ${state}`);
          }
        }
        dataCallback("onHeaderField");
        dataCallback("onHeaderValue");
        dataCallback("onPartData");
        this.index = index;
        this.state = state;
        this.flags = flags;
      }
      end() {
        if (this.state === S.HEADER_FIELD_START && this.index === 0 || this.state === S.PART_DATA && this.index === this.boundary.length) {
          this.onPartEnd();
        } else if (this.state !== S.END) {
          throw new Error("MultipartParser.end(): stream ended unexpectedly");
        }
      }
    };
  }
});

// node_modules/@ioredis/commands/built/commands.json
var require_commands = __commonJS({
  "node_modules/@ioredis/commands/built/commands.json"(exports, module2) {
    module2.exports = {
      acl: {
        arity: -2,
        flags: [],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      append: {
        arity: 3,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      asking: {
        arity: 1,
        flags: [
          "fast"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      auth: {
        arity: -2,
        flags: [
          "noscript",
          "loading",
          "stale",
          "fast",
          "no_auth",
          "allow_busy"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      bgrewriteaof: {
        arity: 1,
        flags: [
          "admin",
          "noscript",
          "no_async_loading"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      bgsave: {
        arity: -1,
        flags: [
          "admin",
          "noscript",
          "no_async_loading"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      bitcount: {
        arity: -2,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      bitfield: {
        arity: -2,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      bitfield_ro: {
        arity: -2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      bitop: {
        arity: -4,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 2,
        keyStop: -1,
        step: 1
      },
      bitpos: {
        arity: -3,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      blmove: {
        arity: 6,
        flags: [
          "write",
          "denyoom",
          "noscript",
          "blocking"
        ],
        keyStart: 1,
        keyStop: 2,
        step: 1
      },
      blmpop: {
        arity: -5,
        flags: [
          "write",
          "blocking",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      blpop: {
        arity: -3,
        flags: [
          "write",
          "noscript",
          "blocking"
        ],
        keyStart: 1,
        keyStop: -2,
        step: 1
      },
      brpop: {
        arity: -3,
        flags: [
          "write",
          "noscript",
          "blocking"
        ],
        keyStart: 1,
        keyStop: -2,
        step: 1
      },
      brpoplpush: {
        arity: 4,
        flags: [
          "write",
          "denyoom",
          "noscript",
          "blocking"
        ],
        keyStart: 1,
        keyStop: 2,
        step: 1
      },
      bzmpop: {
        arity: -5,
        flags: [
          "write",
          "blocking",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      bzpopmax: {
        arity: -3,
        flags: [
          "write",
          "noscript",
          "blocking",
          "fast"
        ],
        keyStart: 1,
        keyStop: -2,
        step: 1
      },
      bzpopmin: {
        arity: -3,
        flags: [
          "write",
          "noscript",
          "blocking",
          "fast"
        ],
        keyStart: 1,
        keyStop: -2,
        step: 1
      },
      client: {
        arity: -2,
        flags: [],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      cluster: {
        arity: -2,
        flags: [],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      command: {
        arity: -1,
        flags: [
          "loading",
          "stale"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      config: {
        arity: -2,
        flags: [],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      copy: {
        arity: -3,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: 2,
        step: 1
      },
      dbsize: {
        arity: 1,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      debug: {
        arity: -2,
        flags: [
          "admin",
          "noscript",
          "loading",
          "stale"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      decr: {
        arity: 2,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      decrby: {
        arity: 3,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      del: {
        arity: -2,
        flags: [
          "write"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      discard: {
        arity: 1,
        flags: [
          "noscript",
          "loading",
          "stale",
          "fast",
          "allow_busy"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      dump: {
        arity: 2,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      echo: {
        arity: 2,
        flags: [
          "fast"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      eval: {
        arity: -3,
        flags: [
          "noscript",
          "stale",
          "skip_monitor",
          "no_mandatory_keys",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      eval_ro: {
        arity: -3,
        flags: [
          "readonly",
          "noscript",
          "stale",
          "skip_monitor",
          "no_mandatory_keys",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      evalsha: {
        arity: -3,
        flags: [
          "noscript",
          "stale",
          "skip_monitor",
          "no_mandatory_keys",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      evalsha_ro: {
        arity: -3,
        flags: [
          "readonly",
          "noscript",
          "stale",
          "skip_monitor",
          "no_mandatory_keys",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      exec: {
        arity: 1,
        flags: [
          "noscript",
          "loading",
          "stale",
          "skip_slowlog"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      exists: {
        arity: -2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      expire: {
        arity: -3,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      expireat: {
        arity: -3,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      expiretime: {
        arity: 2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      failover: {
        arity: -1,
        flags: [
          "admin",
          "noscript",
          "stale"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      fcall: {
        arity: -3,
        flags: [
          "noscript",
          "stale",
          "skip_monitor",
          "no_mandatory_keys",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      fcall_ro: {
        arity: -3,
        flags: [
          "readonly",
          "noscript",
          "stale",
          "skip_monitor",
          "no_mandatory_keys",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      flushall: {
        arity: -1,
        flags: [
          "write"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      flushdb: {
        arity: -1,
        flags: [
          "write"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      function: {
        arity: -2,
        flags: [],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      geoadd: {
        arity: -5,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      geodist: {
        arity: -4,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      geohash: {
        arity: -2,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      geopos: {
        arity: -2,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      georadius: {
        arity: -6,
        flags: [
          "write",
          "denyoom",
          "movablekeys"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      georadius_ro: {
        arity: -6,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      georadiusbymember: {
        arity: -5,
        flags: [
          "write",
          "denyoom",
          "movablekeys"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      georadiusbymember_ro: {
        arity: -5,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      geosearch: {
        arity: -7,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      geosearchstore: {
        arity: -8,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: 2,
        step: 1
      },
      get: {
        arity: 2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      getbit: {
        arity: 3,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      getdel: {
        arity: 2,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      getex: {
        arity: -2,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      getrange: {
        arity: 4,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      getset: {
        arity: 3,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hdel: {
        arity: -3,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hello: {
        arity: -1,
        flags: [
          "noscript",
          "loading",
          "stale",
          "fast",
          "no_auth",
          "allow_busy"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      hexists: {
        arity: 3,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hget: {
        arity: 3,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hgetall: {
        arity: 2,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hincrby: {
        arity: 4,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hincrbyfloat: {
        arity: 4,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hkeys: {
        arity: 2,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hlen: {
        arity: 2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hmget: {
        arity: -3,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hmset: {
        arity: -4,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hrandfield: {
        arity: -2,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hscan: {
        arity: -3,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hset: {
        arity: -4,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hsetnx: {
        arity: 4,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hstrlen: {
        arity: 3,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hvals: {
        arity: 2,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      incr: {
        arity: 2,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      incrby: {
        arity: 3,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      incrbyfloat: {
        arity: 3,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      info: {
        arity: -1,
        flags: [
          "loading",
          "stale"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      keys: {
        arity: 2,
        flags: [
          "readonly"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      lastsave: {
        arity: 1,
        flags: [
          "loading",
          "stale",
          "fast"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      latency: {
        arity: -2,
        flags: [],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      lcs: {
        arity: -3,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 2,
        step: 1
      },
      lindex: {
        arity: 3,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      linsert: {
        arity: 5,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      llen: {
        arity: 2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      lmove: {
        arity: 5,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: 2,
        step: 1
      },
      lmpop: {
        arity: -4,
        flags: [
          "write",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      lolwut: {
        arity: -1,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      lpop: {
        arity: -2,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      lpos: {
        arity: -3,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      lpush: {
        arity: -3,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      lpushx: {
        arity: -3,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      lrange: {
        arity: 4,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      lrem: {
        arity: 4,
        flags: [
          "write"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      lset: {
        arity: 4,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      ltrim: {
        arity: 4,
        flags: [
          "write"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      memory: {
        arity: -2,
        flags: [],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      mget: {
        arity: -2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      migrate: {
        arity: -6,
        flags: [
          "write",
          "movablekeys"
        ],
        keyStart: 3,
        keyStop: 3,
        step: 1
      },
      module: {
        arity: -2,
        flags: [],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      monitor: {
        arity: 1,
        flags: [
          "admin",
          "noscript",
          "loading",
          "stale"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      move: {
        arity: 3,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      mset: {
        arity: -3,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 2
      },
      msetnx: {
        arity: -3,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 2
      },
      multi: {
        arity: 1,
        flags: [
          "noscript",
          "loading",
          "stale",
          "fast",
          "allow_busy"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      object: {
        arity: -2,
        flags: [],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      persist: {
        arity: 2,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      pexpire: {
        arity: -3,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      pexpireat: {
        arity: -3,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      pexpiretime: {
        arity: 2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      pfadd: {
        arity: -2,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      pfcount: {
        arity: -2,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      pfdebug: {
        arity: 3,
        flags: [
          "write",
          "denyoom",
          "admin"
        ],
        keyStart: 2,
        keyStop: 2,
        step: 1
      },
      pfmerge: {
        arity: -2,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      pfselftest: {
        arity: 1,
        flags: [
          "admin"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      ping: {
        arity: -1,
        flags: [
          "fast"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      psetex: {
        arity: 4,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      psubscribe: {
        arity: -2,
        flags: [
          "pubsub",
          "noscript",
          "loading",
          "stale"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      psync: {
        arity: -3,
        flags: [
          "admin",
          "noscript",
          "no_async_loading",
          "no_multi"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      pttl: {
        arity: 2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      publish: {
        arity: 3,
        flags: [
          "pubsub",
          "loading",
          "stale",
          "fast"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      pubsub: {
        arity: -2,
        flags: [],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      punsubscribe: {
        arity: -1,
        flags: [
          "pubsub",
          "noscript",
          "loading",
          "stale"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      quit: {
        arity: -1,
        flags: [
          "noscript",
          "loading",
          "stale",
          "fast",
          "no_auth",
          "allow_busy"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      randomkey: {
        arity: 1,
        flags: [
          "readonly"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      readonly: {
        arity: 1,
        flags: [
          "loading",
          "stale",
          "fast"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      readwrite: {
        arity: 1,
        flags: [
          "loading",
          "stale",
          "fast"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      rename: {
        arity: 3,
        flags: [
          "write"
        ],
        keyStart: 1,
        keyStop: 2,
        step: 1
      },
      renamenx: {
        arity: 3,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 2,
        step: 1
      },
      replconf: {
        arity: -1,
        flags: [
          "admin",
          "noscript",
          "loading",
          "stale",
          "allow_busy"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      replicaof: {
        arity: 3,
        flags: [
          "admin",
          "noscript",
          "stale",
          "no_async_loading"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      reset: {
        arity: 1,
        flags: [
          "noscript",
          "loading",
          "stale",
          "fast",
          "no_auth",
          "allow_busy"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      restore: {
        arity: -4,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      "restore-asking": {
        arity: -4,
        flags: [
          "write",
          "denyoom",
          "asking"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      role: {
        arity: 1,
        flags: [
          "noscript",
          "loading",
          "stale",
          "fast"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      rpop: {
        arity: -2,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      rpoplpush: {
        arity: 3,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: 2,
        step: 1
      },
      rpush: {
        arity: -3,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      rpushx: {
        arity: -3,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      sadd: {
        arity: -3,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      save: {
        arity: 1,
        flags: [
          "admin",
          "noscript",
          "no_async_loading",
          "no_multi"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      scan: {
        arity: -2,
        flags: [
          "readonly"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      scard: {
        arity: 2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      script: {
        arity: -2,
        flags: [],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      sdiff: {
        arity: -2,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      sdiffstore: {
        arity: -3,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      select: {
        arity: 2,
        flags: [
          "loading",
          "stale",
          "fast"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      set: {
        arity: -3,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      setbit: {
        arity: 4,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      setex: {
        arity: 4,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      setnx: {
        arity: 3,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      setrange: {
        arity: 4,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      shutdown: {
        arity: -1,
        flags: [
          "admin",
          "noscript",
          "loading",
          "stale",
          "no_multi",
          "allow_busy"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      sinter: {
        arity: -2,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      sintercard: {
        arity: -3,
        flags: [
          "readonly",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      sinterstore: {
        arity: -3,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      sismember: {
        arity: 3,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      slaveof: {
        arity: 3,
        flags: [
          "admin",
          "noscript",
          "stale",
          "no_async_loading"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      slowlog: {
        arity: -2,
        flags: [],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      smembers: {
        arity: 2,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      smismember: {
        arity: -3,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      smove: {
        arity: 4,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 2,
        step: 1
      },
      sort: {
        arity: -2,
        flags: [
          "write",
          "denyoom",
          "movablekeys"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      sort_ro: {
        arity: -2,
        flags: [
          "readonly",
          "movablekeys"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      spop: {
        arity: -2,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      spublish: {
        arity: 3,
        flags: [
          "pubsub",
          "loading",
          "stale",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      srandmember: {
        arity: -2,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      srem: {
        arity: -3,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      sscan: {
        arity: -3,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      ssubscribe: {
        arity: -2,
        flags: [
          "pubsub",
          "noscript",
          "loading",
          "stale"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      strlen: {
        arity: 2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      subscribe: {
        arity: -2,
        flags: [
          "pubsub",
          "noscript",
          "loading",
          "stale"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      substr: {
        arity: 4,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      sunion: {
        arity: -2,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      sunionstore: {
        arity: -3,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      sunsubscribe: {
        arity: -1,
        flags: [
          "pubsub",
          "noscript",
          "loading",
          "stale"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      swapdb: {
        arity: 3,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      sync: {
        arity: 1,
        flags: [
          "admin",
          "noscript",
          "no_async_loading",
          "no_multi"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      time: {
        arity: 1,
        flags: [
          "loading",
          "stale",
          "fast"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      touch: {
        arity: -2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      ttl: {
        arity: 2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      type: {
        arity: 2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      unlink: {
        arity: -2,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      unsubscribe: {
        arity: -1,
        flags: [
          "pubsub",
          "noscript",
          "loading",
          "stale"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      unwatch: {
        arity: 1,
        flags: [
          "noscript",
          "loading",
          "stale",
          "fast",
          "allow_busy"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      wait: {
        arity: 3,
        flags: [
          "noscript"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      watch: {
        arity: -2,
        flags: [
          "noscript",
          "loading",
          "stale",
          "fast",
          "allow_busy"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      xack: {
        arity: -4,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      xadd: {
        arity: -5,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      xautoclaim: {
        arity: -6,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      xclaim: {
        arity: -6,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      xdel: {
        arity: -3,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      xgroup: {
        arity: -2,
        flags: [],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      xinfo: {
        arity: -2,
        flags: [],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      xlen: {
        arity: 2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      xpending: {
        arity: -3,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      xrange: {
        arity: -4,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      xread: {
        arity: -4,
        flags: [
          "readonly",
          "blocking",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      xreadgroup: {
        arity: -7,
        flags: [
          "write",
          "blocking",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      xrevrange: {
        arity: -4,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      xsetid: {
        arity: -3,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      xtrim: {
        arity: -4,
        flags: [
          "write"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zadd: {
        arity: -4,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zcard: {
        arity: 2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zcount: {
        arity: 4,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zdiff: {
        arity: -3,
        flags: [
          "readonly",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      zdiffstore: {
        arity: -4,
        flags: [
          "write",
          "denyoom",
          "movablekeys"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zincrby: {
        arity: 4,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zinter: {
        arity: -3,
        flags: [
          "readonly",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      zintercard: {
        arity: -3,
        flags: [
          "readonly",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      zinterstore: {
        arity: -4,
        flags: [
          "write",
          "denyoom",
          "movablekeys"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zlexcount: {
        arity: 4,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zmpop: {
        arity: -4,
        flags: [
          "write",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      zmscore: {
        arity: -3,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zpopmax: {
        arity: -2,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zpopmin: {
        arity: -2,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zrandmember: {
        arity: -2,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zrange: {
        arity: -4,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zrangebylex: {
        arity: -4,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zrangebyscore: {
        arity: -4,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zrangestore: {
        arity: -5,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: 2,
        step: 1
      },
      zrank: {
        arity: 3,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zrem: {
        arity: -3,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zremrangebylex: {
        arity: 4,
        flags: [
          "write"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zremrangebyrank: {
        arity: 4,
        flags: [
          "write"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zremrangebyscore: {
        arity: 4,
        flags: [
          "write"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zrevrange: {
        arity: -4,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zrevrangebylex: {
        arity: -4,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zrevrangebyscore: {
        arity: -4,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zrevrank: {
        arity: 3,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zscan: {
        arity: -3,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zscore: {
        arity: 3,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zunion: {
        arity: -3,
        flags: [
          "readonly",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      zunionstore: {
        arity: -4,
        flags: [
          "write",
          "denyoom",
          "movablekeys"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      }
    };
  }
});

// node_modules/@ioredis/commands/built/index.js
var require_built = __commonJS({
  "node_modules/@ioredis/commands/built/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getKeyIndexes = exports.hasFlag = exports.exists = exports.list = void 0;
    var commands_json_1 = __importDefault(require_commands());
    exports.list = Object.keys(commands_json_1.default);
    var flags = {};
    exports.list.forEach((commandName) => {
      flags[commandName] = commands_json_1.default[commandName].flags.reduce(function(flags2, flag) {
        flags2[flag] = true;
        return flags2;
      }, {});
    });
    function exists(commandName) {
      return Boolean(commands_json_1.default[commandName]);
    }
    exports.exists = exists;
    function hasFlag(commandName, flag) {
      if (!flags[commandName]) {
        throw new Error("Unknown command " + commandName);
      }
      return Boolean(flags[commandName][flag]);
    }
    exports.hasFlag = hasFlag;
    function getKeyIndexes(commandName, args, options) {
      const command = commands_json_1.default[commandName];
      if (!command) {
        throw new Error("Unknown command " + commandName);
      }
      if (!Array.isArray(args)) {
        throw new Error("Expect args to be an array");
      }
      const keys = [];
      const parseExternalKey = Boolean(options && options.parseExternalKey);
      const takeDynamicKeys = (args2, startIndex) => {
        const keys2 = [];
        const keyStop = Number(args2[startIndex]);
        for (let i2 = 0; i2 < keyStop; i2++) {
          keys2.push(i2 + startIndex + 1);
        }
        return keys2;
      };
      const takeKeyAfterToken = (args2, startIndex, token) => {
        for (let i2 = startIndex; i2 < args2.length - 1; i2 += 1) {
          if (String(args2[i2]).toLowerCase() === token.toLowerCase()) {
            return i2 + 1;
          }
        }
        return null;
      };
      switch (commandName) {
        case "zunionstore":
        case "zinterstore":
        case "zdiffstore":
          keys.push(0, ...takeDynamicKeys(args, 1));
          break;
        case "eval":
        case "evalsha":
        case "eval_ro":
        case "evalsha_ro":
        case "fcall":
        case "fcall_ro":
        case "blmpop":
        case "bzmpop":
          keys.push(...takeDynamicKeys(args, 1));
          break;
        case "sintercard":
        case "lmpop":
        case "zunion":
        case "zinter":
        case "zmpop":
        case "zintercard":
        case "zdiff": {
          keys.push(...takeDynamicKeys(args, 0));
          break;
        }
        case "georadius": {
          keys.push(0);
          const storeKey = takeKeyAfterToken(args, 5, "STORE");
          if (storeKey)
            keys.push(storeKey);
          const distKey = takeKeyAfterToken(args, 5, "STOREDIST");
          if (distKey)
            keys.push(distKey);
          break;
        }
        case "georadiusbymember": {
          keys.push(0);
          const storeKey = takeKeyAfterToken(args, 4, "STORE");
          if (storeKey)
            keys.push(storeKey);
          const distKey = takeKeyAfterToken(args, 4, "STOREDIST");
          if (distKey)
            keys.push(distKey);
          break;
        }
        case "sort":
        case "sort_ro":
          keys.push(0);
          for (let i2 = 1; i2 < args.length - 1; i2++) {
            let arg = args[i2];
            if (typeof arg !== "string") {
              continue;
            }
            const directive = arg.toUpperCase();
            if (directive === "GET") {
              i2 += 1;
              arg = args[i2];
              if (arg !== "#") {
                if (parseExternalKey) {
                  keys.push([i2, getExternalKeyNameLength(arg)]);
                } else {
                  keys.push(i2);
                }
              }
            } else if (directive === "BY") {
              i2 += 1;
              if (parseExternalKey) {
                keys.push([i2, getExternalKeyNameLength(args[i2])]);
              } else {
                keys.push(i2);
              }
            } else if (directive === "STORE") {
              i2 += 1;
              keys.push(i2);
            }
          }
          break;
        case "migrate":
          if (args[2] === "") {
            for (let i2 = 5; i2 < args.length - 1; i2++) {
              const arg = args[i2];
              if (typeof arg === "string" && arg.toUpperCase() === "KEYS") {
                for (let j = i2 + 1; j < args.length; j++) {
                  keys.push(j);
                }
                break;
              }
            }
          } else {
            keys.push(2);
          }
          break;
        case "xreadgroup":
        case "xread":
          for (let i2 = commandName === "xread" ? 0 : 3; i2 < args.length - 1; i2++) {
            if (String(args[i2]).toUpperCase() === "STREAMS") {
              for (let j = i2 + 1; j <= i2 + (args.length - 1 - i2) / 2; j++) {
                keys.push(j);
              }
              break;
            }
          }
          break;
        default:
          if (command.step > 0) {
            const keyStart = command.keyStart - 1;
            const keyStop = command.keyStop > 0 ? command.keyStop : args.length + command.keyStop + 1;
            for (let i2 = keyStart; i2 < keyStop; i2 += command.step) {
              keys.push(i2);
            }
          }
          break;
      }
      return keys;
    }
    exports.getKeyIndexes = getKeyIndexes;
    function getExternalKeyNameLength(key) {
      if (typeof key !== "string") {
        key = String(key);
      }
      const hashPos = key.indexOf("->");
      return hashPos === -1 ? key.length : hashPos;
    }
  }
});

// node_modules/standard-as-callback/built/utils.js
var require_utils = __commonJS({
  "node_modules/standard-as-callback/built/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tryCatch = exports.errorObj = void 0;
    exports.errorObj = { e: {} };
    var tryCatchTarget;
    function tryCatcher(err, val) {
      try {
        const target = tryCatchTarget;
        tryCatchTarget = null;
        return target.apply(this, arguments);
      } catch (e2) {
        exports.errorObj.e = e2;
        return exports.errorObj;
      }
    }
    function tryCatch(fn) {
      tryCatchTarget = fn;
      return tryCatcher;
    }
    exports.tryCatch = tryCatch;
  }
});

// node_modules/standard-as-callback/built/index.js
var require_built2 = __commonJS({
  "node_modules/standard-as-callback/built/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils();
    function throwLater(e2) {
      setTimeout(function() {
        throw e2;
      }, 0);
    }
    function asCallback(promise, nodeback, options) {
      if (typeof nodeback === "function") {
        promise.then((val) => {
          let ret;
          if (options !== void 0 && Object(options).spread && Array.isArray(val)) {
            ret = utils_1.tryCatch(nodeback).apply(void 0, [null].concat(val));
          } else {
            ret = val === void 0 ? utils_1.tryCatch(nodeback)(null) : utils_1.tryCatch(nodeback)(null, val);
          }
          if (ret === utils_1.errorObj) {
            throwLater(ret.e);
          }
        }, (cause) => {
          if (!cause) {
            const newReason = new Error(cause + "");
            Object.assign(newReason, { cause });
            cause = newReason;
          }
          const ret = utils_1.tryCatch(nodeback)(cause);
          if (ret === utils_1.errorObj) {
            throwLater(ret.e);
          }
        });
      }
      return promise;
    }
    exports.default = asCallback;
  }
});

// node_modules/redis-errors/lib/old.js
var require_old = __commonJS({
  "node_modules/redis-errors/lib/old.js"(exports, module2) {
    "use strict";
    var assert = require("assert");
    var util = require("util");
    function RedisError(message) {
      Object.defineProperty(this, "message", {
        value: message || "",
        configurable: true,
        writable: true
      });
      Error.captureStackTrace(this, this.constructor);
    }
    util.inherits(RedisError, Error);
    Object.defineProperty(RedisError.prototype, "name", {
      value: "RedisError",
      configurable: true,
      writable: true
    });
    function ParserError(message, buffer, offset) {
      assert(buffer);
      assert.strictEqual(typeof offset, "number");
      Object.defineProperty(this, "message", {
        value: message || "",
        configurable: true,
        writable: true
      });
      const tmp = Error.stackTraceLimit;
      Error.stackTraceLimit = 2;
      Error.captureStackTrace(this, this.constructor);
      Error.stackTraceLimit = tmp;
      this.offset = offset;
      this.buffer = buffer;
    }
    util.inherits(ParserError, RedisError);
    Object.defineProperty(ParserError.prototype, "name", {
      value: "ParserError",
      configurable: true,
      writable: true
    });
    function ReplyError(message) {
      Object.defineProperty(this, "message", {
        value: message || "",
        configurable: true,
        writable: true
      });
      const tmp = Error.stackTraceLimit;
      Error.stackTraceLimit = 2;
      Error.captureStackTrace(this, this.constructor);
      Error.stackTraceLimit = tmp;
    }
    util.inherits(ReplyError, RedisError);
    Object.defineProperty(ReplyError.prototype, "name", {
      value: "ReplyError",
      configurable: true,
      writable: true
    });
    function AbortError2(message) {
      Object.defineProperty(this, "message", {
        value: message || "",
        configurable: true,
        writable: true
      });
      Error.captureStackTrace(this, this.constructor);
    }
    util.inherits(AbortError2, RedisError);
    Object.defineProperty(AbortError2.prototype, "name", {
      value: "AbortError",
      configurable: true,
      writable: true
    });
    function InterruptError(message) {
      Object.defineProperty(this, "message", {
        value: message || "",
        configurable: true,
        writable: true
      });
      Error.captureStackTrace(this, this.constructor);
    }
    util.inherits(InterruptError, AbortError2);
    Object.defineProperty(InterruptError.prototype, "name", {
      value: "InterruptError",
      configurable: true,
      writable: true
    });
    module2.exports = {
      RedisError,
      ParserError,
      ReplyError,
      AbortError: AbortError2,
      InterruptError
    };
  }
});

// node_modules/redis-errors/lib/modern.js
var require_modern = __commonJS({
  "node_modules/redis-errors/lib/modern.js"(exports, module2) {
    "use strict";
    var assert = require("assert");
    var RedisError = class extends Error {
      get name() {
        return this.constructor.name;
      }
    };
    var ParserError = class extends RedisError {
      constructor(message, buffer, offset) {
        assert(buffer);
        assert.strictEqual(typeof offset, "number");
        const tmp = Error.stackTraceLimit;
        Error.stackTraceLimit = 2;
        super(message);
        Error.stackTraceLimit = tmp;
        this.offset = offset;
        this.buffer = buffer;
      }
      get name() {
        return this.constructor.name;
      }
    };
    var ReplyError = class extends RedisError {
      constructor(message) {
        const tmp = Error.stackTraceLimit;
        Error.stackTraceLimit = 2;
        super(message);
        Error.stackTraceLimit = tmp;
      }
      get name() {
        return this.constructor.name;
      }
    };
    var AbortError2 = class extends RedisError {
      get name() {
        return this.constructor.name;
      }
    };
    var InterruptError = class extends AbortError2 {
      get name() {
        return this.constructor.name;
      }
    };
    module2.exports = {
      RedisError,
      ParserError,
      ReplyError,
      AbortError: AbortError2,
      InterruptError
    };
  }
});

// node_modules/redis-errors/index.js
var require_redis_errors = __commonJS({
  "node_modules/redis-errors/index.js"(exports, module2) {
    "use strict";
    var Errors = process.version.charCodeAt(1) < 55 && process.version.charCodeAt(2) === 46 ? require_old() : require_modern();
    module2.exports = Errors;
  }
});

// node_modules/cluster-key-slot/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/cluster-key-slot/lib/index.js"(exports, module2) {
    var lookup = [
      0,
      4129,
      8258,
      12387,
      16516,
      20645,
      24774,
      28903,
      33032,
      37161,
      41290,
      45419,
      49548,
      53677,
      57806,
      61935,
      4657,
      528,
      12915,
      8786,
      21173,
      17044,
      29431,
      25302,
      37689,
      33560,
      45947,
      41818,
      54205,
      50076,
      62463,
      58334,
      9314,
      13379,
      1056,
      5121,
      25830,
      29895,
      17572,
      21637,
      42346,
      46411,
      34088,
      38153,
      58862,
      62927,
      50604,
      54669,
      13907,
      9842,
      5649,
      1584,
      30423,
      26358,
      22165,
      18100,
      46939,
      42874,
      38681,
      34616,
      63455,
      59390,
      55197,
      51132,
      18628,
      22757,
      26758,
      30887,
      2112,
      6241,
      10242,
      14371,
      51660,
      55789,
      59790,
      63919,
      35144,
      39273,
      43274,
      47403,
      23285,
      19156,
      31415,
      27286,
      6769,
      2640,
      14899,
      10770,
      56317,
      52188,
      64447,
      60318,
      39801,
      35672,
      47931,
      43802,
      27814,
      31879,
      19684,
      23749,
      11298,
      15363,
      3168,
      7233,
      60846,
      64911,
      52716,
      56781,
      44330,
      48395,
      36200,
      40265,
      32407,
      28342,
      24277,
      20212,
      15891,
      11826,
      7761,
      3696,
      65439,
      61374,
      57309,
      53244,
      48923,
      44858,
      40793,
      36728,
      37256,
      33193,
      45514,
      41451,
      53516,
      49453,
      61774,
      57711,
      4224,
      161,
      12482,
      8419,
      20484,
      16421,
      28742,
      24679,
      33721,
      37784,
      41979,
      46042,
      49981,
      54044,
      58239,
      62302,
      689,
      4752,
      8947,
      13010,
      16949,
      21012,
      25207,
      29270,
      46570,
      42443,
      38312,
      34185,
      62830,
      58703,
      54572,
      50445,
      13538,
      9411,
      5280,
      1153,
      29798,
      25671,
      21540,
      17413,
      42971,
      47098,
      34713,
      38840,
      59231,
      63358,
      50973,
      55100,
      9939,
      14066,
      1681,
      5808,
      26199,
      30326,
      17941,
      22068,
      55628,
      51565,
      63758,
      59695,
      39368,
      35305,
      47498,
      43435,
      22596,
      18533,
      30726,
      26663,
      6336,
      2273,
      14466,
      10403,
      52093,
      56156,
      60223,
      64286,
      35833,
      39896,
      43963,
      48026,
      19061,
      23124,
      27191,
      31254,
      2801,
      6864,
      10931,
      14994,
      64814,
      60687,
      56684,
      52557,
      48554,
      44427,
      40424,
      36297,
      31782,
      27655,
      23652,
      19525,
      15522,
      11395,
      7392,
      3265,
      61215,
      65342,
      53085,
      57212,
      44955,
      49082,
      36825,
      40952,
      28183,
      32310,
      20053,
      24180,
      11923,
      16050,
      3793,
      7920
    ];
    var toUTF8Array = function toUTF8Array2(str) {
      var char;
      var i2 = 0;
      var p = 0;
      var utf8 = [];
      var len = str.length;
      for (; i2 < len; i2++) {
        char = str.charCodeAt(i2);
        if (char < 128) {
          utf8[p++] = char;
        } else if (char < 2048) {
          utf8[p++] = char >> 6 | 192;
          utf8[p++] = char & 63 | 128;
        } else if ((char & 64512) === 55296 && i2 + 1 < str.length && (str.charCodeAt(i2 + 1) & 64512) === 56320) {
          char = 65536 + ((char & 1023) << 10) + (str.charCodeAt(++i2) & 1023);
          utf8[p++] = char >> 18 | 240;
          utf8[p++] = char >> 12 & 63 | 128;
          utf8[p++] = char >> 6 & 63 | 128;
          utf8[p++] = char & 63 | 128;
        } else {
          utf8[p++] = char >> 12 | 224;
          utf8[p++] = char >> 6 & 63 | 128;
          utf8[p++] = char & 63 | 128;
        }
      }
      return utf8;
    };
    var generate = module2.exports = function generate2(str) {
      var char;
      var i2 = 0;
      var start = -1;
      var result = 0;
      var resultHash = 0;
      var utf8 = typeof str === "string" ? toUTF8Array(str) : str;
      var len = utf8.length;
      while (i2 < len) {
        char = utf8[i2++];
        if (start === -1) {
          if (char === 123) {
            start = i2;
          }
        } else if (char !== 125) {
          resultHash = lookup[(char ^ resultHash >> 8) & 255] ^ resultHash << 8;
        } else if (i2 - 1 !== start) {
          return resultHash & 16383;
        }
        result = lookup[(char ^ result >> 8) & 255] ^ result << 8;
      }
      return result & 16383;
    };
    module2.exports.generateMulti = function generateMulti(keys) {
      var i2 = 1;
      var len = keys.length;
      var base = generate(keys[0]);
      while (i2 < len) {
        if (generate(keys[i2++]) !== base)
          return -1;
      }
      return base;
    };
  }
});

// node_modules/lodash.defaults/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.defaults/index.js"(exports, module2) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var nativeMax = Math.max;
    function arrayLikeKeys(value, inherited) {
      var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
      var length = result.length, skipIndexes = !!length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assignInDefaults(objValue, srcValue, key, object) {
      if (objValue === void 0 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
        return srcValue;
      }
      return objValue;
    }
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        object[key] = value;
      }
    }
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    function baseRest(func, start) {
      start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
      return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = array;
        return apply(func, this, otherArgs);
      };
    }
    function copyObject(source, props, object, customizer) {
      object || (object = {});
      var index = -1, length = props.length;
      while (++index < length) {
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        assignValue(object, key, newValue === void 0 ? source[key] : newValue);
      }
      return object;
    }
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
        return eq(object[index], value);
      }
      return false;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    function isFunction(value) {
      var tag = isObject(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });
    var defaults = baseRest(function(args) {
      args.push(void 0, assignInDefaults);
      return apply(assignInWith, void 0, args);
    });
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    module2.exports = defaults;
  }
});

// node_modules/lodash.isarguments/index.js
var require_lodash2 = __commonJS({
  "node_modules/lodash.isarguments/index.js"(exports, module2) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    function isFunction(value) {
      var tag = isObject(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    module2.exports = isArguments;
  }
});

// node_modules/ioredis/built/utils/lodash.js
var require_lodash3 = __commonJS({
  "node_modules/ioredis/built/utils/lodash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isArguments = exports.defaults = exports.noop = void 0;
    var defaults = require_lodash();
    exports.defaults = defaults;
    var isArguments = require_lodash2();
    exports.isArguments = isArguments;
    function noop2() {
    }
    exports.noop = noop2;
  }
});

// node_modules/ms/index.js
var require_ms = __commonJS({
  "node_modules/ms/index.js"(exports, module2) {
    var s2 = 1e3;
    var m2 = s2 * 60;
    var h2 = m2 * 60;
    var d = h2 * 24;
    var w = d * 7;
    var y = d * 365.25;
    module2.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse(val);
      } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h2;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m2;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s2;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h2) {
        return Math.round(ms / h2) + "h";
      }
      if (msAbs >= m2) {
        return Math.round(ms / m2) + "m";
      }
      if (msAbs >= s2) {
        return Math.round(ms / s2) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h2) {
        return plural(ms, msAbs, h2, "hour");
      }
      if (msAbs >= m2) {
        return plural(ms, msAbs, m2, "minute");
      }
      if (msAbs >= s2) {
        return plural(ms, msAbs, s2, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// node_modules/debug/src/common.js
var require_common = __commonJS({
  "node_modules/debug/src/common.js"(exports, module2) {
    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms();
      createDebug.destroy = destroy;
      Object.keys(env).forEach((key) => {
        createDebug[key] = env[key];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i2 = 0; i2 < namespace.length; i2++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i2);
          hash |= 0;
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug(...args) {
          if (!debug.enabled) {
            return;
          }
          const self2 = debug;
          const curr = Number(new Date());
          const ms = curr - (prevTime || curr);
          self2.diff = ms;
          self2.prev = prevTime;
          self2.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            if (match === "%%") {
              return "%";
            }
            index++;
            const formatter = createDebug.formatters[format];
            if (typeof formatter === "function") {
              const val = args[index];
              match = formatter.call(self2, val);
              args.splice(index, 1);
              index--;
            }
            return match;
          });
          createDebug.formatArgs.call(self2, args);
          const logFn = self2.log || createDebug.log;
          logFn.apply(self2, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy;
        Object.defineProperty(debug, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v) => {
            enableOverride = v;
          }
        });
        if (typeof createDebug.init === "function") {
          createDebug.init(debug);
        }
        return debug;
      }
      function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i2;
        const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        const len = split.length;
        for (i2 = 0; i2 < len; i2++) {
          if (!split[i2]) {
            continue;
          }
          namespaces = split[i2].replace(/\*/g, ".*?");
          if (namespaces[0] === "-") {
            createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
          } else {
            createDebug.names.push(new RegExp("^" + namespaces + "$"));
          }
        }
      }
      function disable() {
        const namespaces = [
          ...createDebug.names.map(toNamespace),
          ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
      }
      function enabled(name) {
        if (name[name.length - 1] === "*") {
          return true;
        }
        let i2;
        let len;
        for (i2 = 0, len = createDebug.skips.length; i2 < len; i2++) {
          if (createDebug.skips[i2].test(name)) {
            return false;
          }
        }
        for (i2 = 0, len = createDebug.names.length; i2 < len; i2++) {
          if (createDebug.names[i2].test(name)) {
            return true;
          }
        }
        return false;
      }
      function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module2.exports = setup;
  }
});

// node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "node_modules/debug/src/browser.js"(exports, module2) {
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module2.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index++;
        if (match === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem("debug", namespaces);
        } else {
          exports.storage.removeItem("debug");
        }
      } catch (error) {
      }
    }
    function load() {
      let r2;
      try {
        r2 = exports.storage.getItem("debug");
      } catch (error) {
      }
      if (!r2 && typeof process !== "undefined" && "env" in process) {
        r2 = process.env.DEBUG;
      }
      return r2;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {
      }
    }
    module2.exports = require_common()(exports);
    var { formatters } = module2.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  }
});

// node_modules/has-flag/index.js
var require_has_flag = __commonJS({
  "node_modules/has-flag/index.js"(exports, module2) {
    "use strict";
    module2.exports = (flag, argv = process.argv) => {
      const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
      const position = argv.indexOf(prefix + flag);
      const terminatorPosition = argv.indexOf("--");
      return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
    };
  }
});

// node_modules/supports-color/index.js
var require_supports_color = __commonJS({
  "node_modules/supports-color/index.js"(exports, module2) {
    "use strict";
    var os = require("os");
    var tty = require("tty");
    var hasFlag = require_has_flag();
    var { env } = process;
    var forceColor;
    if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
      forceColor = 0;
    } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
      forceColor = 1;
    }
    if ("FORCE_COLOR" in env) {
      if (env.FORCE_COLOR === "true") {
        forceColor = 1;
      } else if (env.FORCE_COLOR === "false") {
        forceColor = 0;
      } else {
        forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
      }
    }
    function translateLevel(level) {
      if (level === 0) {
        return false;
      }
      return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
      };
    }
    function supportsColor(haveStream, streamIsTTY) {
      if (forceColor === 0) {
        return 0;
      }
      if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
        return 3;
      }
      if (hasFlag("color=256")) {
        return 2;
      }
      if (haveStream && !streamIsTTY && forceColor === void 0) {
        return 0;
      }
      const min = forceColor || 0;
      if (env.TERM === "dumb") {
        return min;
      }
      if (process.platform === "win32") {
        const osRelease = os.release().split(".");
        if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
          return Number(osRelease[2]) >= 14931 ? 3 : 2;
        }
        return 1;
      }
      if ("CI" in env) {
        if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((sign) => sign in env) || env.CI_NAME === "codeship") {
          return 1;
        }
        return min;
      }
      if ("TEAMCITY_VERSION" in env) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
      }
      if (env.COLORTERM === "truecolor") {
        return 3;
      }
      if ("TERM_PROGRAM" in env) {
        const version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (env.TERM_PROGRAM) {
          case "iTerm.app":
            return version >= 3 ? 3 : 2;
          case "Apple_Terminal":
            return 2;
        }
      }
      if (/-256(color)?$/i.test(env.TERM)) {
        return 2;
      }
      if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
        return 1;
      }
      if ("COLORTERM" in env) {
        return 1;
      }
      return min;
    }
    function getSupportLevel(stream) {
      const level = supportsColor(stream, stream && stream.isTTY);
      return translateLevel(level);
    }
    module2.exports = {
      supportsColor: getSupportLevel,
      stdout: translateLevel(supportsColor(true, tty.isatty(1))),
      stderr: translateLevel(supportsColor(true, tty.isatty(2)))
    };
  }
});

// node_modules/debug/src/node.js
var require_node = __commonJS({
  "node_modules/debug/src/node.js"(exports, module2) {
    var tty = require("tty");
    var util = require("util");
    exports.init = init;
    exports.log = log;
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.destroy = util.deprecate(
      () => {
      },
      "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
    );
    exports.colors = [6, 2, 3, 4, 5, 1];
    try {
      const supportsColor = require_supports_color();
      if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
        exports.colors = [
          20,
          21,
          26,
          27,
          32,
          33,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          56,
          57,
          62,
          63,
          68,
          69,
          74,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          92,
          93,
          98,
          99,
          112,
          113,
          128,
          129,
          134,
          135,
          148,
          149,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          178,
          179,
          184,
          185,
          196,
          197,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          209,
          214,
          215,
          220,
          221
        ];
      }
    } catch (error) {
    }
    exports.inspectOpts = Object.keys(process.env).filter((key) => {
      return /^debug_/i.test(key);
    }).reduce((obj, key) => {
      const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {
        return k.toUpperCase();
      });
      let val = process.env[key];
      if (/^(yes|on|true|enabled)$/i.test(val)) {
        val = true;
      } else if (/^(no|off|false|disabled)$/i.test(val)) {
        val = false;
      } else if (val === "null") {
        val = null;
      } else {
        val = Number(val);
      }
      obj[prop] = val;
      return obj;
    }, {});
    function useColors() {
      return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
    }
    function formatArgs(args) {
      const { namespace: name, useColors: useColors2 } = this;
      if (useColors2) {
        const c = this.color;
        const colorCode = "\x1B[3" + (c < 8 ? c : "8;5;" + c);
        const prefix = `  ${colorCode};1m${name} \x1B[0m`;
        args[0] = prefix + args[0].split("\n").join("\n" + prefix);
        args.push(colorCode + "m+" + module2.exports.humanize(this.diff) + "\x1B[0m");
      } else {
        args[0] = getDate() + name + " " + args[0];
      }
    }
    function getDate() {
      if (exports.inspectOpts.hideDate) {
        return "";
      }
      return new Date().toISOString() + " ";
    }
    function log(...args) {
      return process.stderr.write(util.format(...args) + "\n");
    }
    function save(namespaces) {
      if (namespaces) {
        process.env.DEBUG = namespaces;
      } else {
        delete process.env.DEBUG;
      }
    }
    function load() {
      return process.env.DEBUG;
    }
    function init(debug) {
      debug.inspectOpts = {};
      const keys = Object.keys(exports.inspectOpts);
      for (let i2 = 0; i2 < keys.length; i2++) {
        debug.inspectOpts[keys[i2]] = exports.inspectOpts[keys[i2]];
      }
    }
    module2.exports = require_common()(exports);
    var { formatters } = module2.exports;
    formatters.o = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts).split("\n").map((str) => str.trim()).join(" ");
    };
    formatters.O = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts);
    };
  }
});

// node_modules/debug/src/index.js
var require_src = __commonJS({
  "node_modules/debug/src/index.js"(exports, module2) {
    if (typeof process === "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs) {
      module2.exports = require_browser();
    } else {
      module2.exports = require_node();
    }
  }
});

// node_modules/ioredis/built/utils/debug.js
var require_debug = __commonJS({
  "node_modules/ioredis/built/utils/debug.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.genRedactedString = exports.getStringValue = exports.MAX_ARGUMENT_LENGTH = void 0;
    var debug_1 = require_src();
    var MAX_ARGUMENT_LENGTH = 200;
    exports.MAX_ARGUMENT_LENGTH = MAX_ARGUMENT_LENGTH;
    var NAMESPACE_PREFIX = "ioredis";
    function getStringValue(v) {
      if (v === null) {
        return;
      }
      switch (typeof v) {
        case "boolean":
          return;
        case "number":
          return;
        case "object":
          if (Buffer.isBuffer(v)) {
            return v.toString("hex");
          }
          if (Array.isArray(v)) {
            return v.join(",");
          }
          try {
            return JSON.stringify(v);
          } catch (e2) {
            return;
          }
        case "string":
          return v;
      }
    }
    exports.getStringValue = getStringValue;
    function genRedactedString(str, maxLen) {
      const { length } = str;
      return length <= maxLen ? str : str.slice(0, maxLen) + ' ... <REDACTED full-length="' + length + '">';
    }
    exports.genRedactedString = genRedactedString;
    function genDebugFunction(namespace) {
      const fn = (0, debug_1.default)(`${NAMESPACE_PREFIX}:${namespace}`);
      function wrappedDebug(...args) {
        if (!fn.enabled) {
          return;
        }
        for (let i2 = 1; i2 < args.length; i2++) {
          const str = getStringValue(args[i2]);
          if (typeof str === "string" && str.length > MAX_ARGUMENT_LENGTH) {
            args[i2] = genRedactedString(str, MAX_ARGUMENT_LENGTH);
          }
        }
        return fn.apply(null, args);
      }
      Object.defineProperties(wrappedDebug, {
        namespace: {
          get() {
            return fn.namespace;
          }
        },
        enabled: {
          get() {
            return fn.enabled;
          }
        },
        destroy: {
          get() {
            return fn.destroy;
          }
        },
        log: {
          get() {
            return fn.log;
          },
          set(l) {
            fn.log = l;
          }
        }
      });
      return wrappedDebug;
    }
    exports.default = genDebugFunction;
  }
});

// node_modules/ioredis/built/constants/TLSProfiles.js
var require_TLSProfiles = __commonJS({
  "node_modules/ioredis/built/constants/TLSProfiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var RedisCloudCA = `-----BEGIN CERTIFICATE-----
MIIDTzCCAjegAwIBAgIJAKSVpiDswLcwMA0GCSqGSIb3DQEBBQUAMD4xFjAUBgNV
BAoMDUdhcmFudGlhIERhdGExJDAiBgNVBAMMG1NTTCBDZXJ0aWZpY2F0aW9uIEF1
dGhvcml0eTAeFw0xMzEwMDExMjE0NTVaFw0yMzA5MjkxMjE0NTVaMD4xFjAUBgNV
BAoMDUdhcmFudGlhIERhdGExJDAiBgNVBAMMG1NTTCBDZXJ0aWZpY2F0aW9uIEF1
dGhvcml0eTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALZqkh/DczWP
JnxnHLQ7QL0T4B4CDKWBKCcisriGbA6ZePWVNo4hfKQC6JrzfR+081NeD6VcWUiz
rmd+jtPhIY4c+WVQYm5PKaN6DT1imYdxQw7aqO5j2KUCEh/cznpLxeSHoTxlR34E
QwF28Wl3eg2vc5ct8LjU3eozWVk3gb7alx9mSA2SgmuX5lEQawl++rSjsBStemY2
BDwOpAMXIrdEyP/cVn8mkvi/BDs5M5G+09j0gfhyCzRWMQ7Hn71u1eolRxwVxgi3
TMn+/vTaFSqxKjgck6zuAYjBRPaHe7qLxHNr1So/Mc9nPy+3wHebFwbIcnUojwbp
4nctkWbjb2cCAwEAAaNQME4wHQYDVR0OBBYEFP1whtcrydmW3ZJeuSoKZIKjze3w
MB8GA1UdIwQYMBaAFP1whtcrydmW3ZJeuSoKZIKjze3wMAwGA1UdEwQFMAMBAf8w
DQYJKoZIhvcNAQEFBQADggEBAG2erXhwRAa7+ZOBs0B6X57Hwyd1R4kfmXcs0rta
lbPpvgULSiB+TCbf3EbhJnHGyvdCY1tvlffLjdA7HJ0PCOn+YYLBA0pTU/dyvrN6
Su8NuS5yubnt9mb13nDGYo1rnt0YRfxN+8DM3fXIVr038A30UlPX2Ou1ExFJT0MZ
uFKY6ZvLdI6/1cbgmguMlAhM+DhKyV6Sr5699LM3zqeI816pZmlREETYkGr91q7k
BpXJu/dtHaGxg1ZGu6w/PCsYGUcECWENYD4VQPd8N32JjOfu6vEgoEAwfPP+3oGp
Z4m3ewACcWOAenqflb+cQYC4PsF7qbXDmRaWrbKntOlZ3n0=
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIGMTCCBBmgAwIBAgICEAAwDQYJKoZIhvcNAQELBQAwajELMAkGA1UEBhMCVVMx
CzAJBgNVBAgMAkNBMQswCQYDVQQHDAJDQTESMBAGA1UECgwJUmVkaXNMYWJzMS0w
KwYDVQQDDCRSZWRpc0xhYnMgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcN
MTgwMjI1MTUzNzM3WhcNMjgwMjIzMTUzNzM3WjBfMQswCQYDVQQGEwJVUzELMAkG
A1UECAwCQ0ExEjAQBgNVBAoMCVJlZGlzTGFiczEvMC0GA1UEAwwmUkNQIEludGVy
bWVkaWF0ZSBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUA
A4ICDwAwggIKAoICAQDf9dqbxc8Bq7Ctq9rWcxrGNKKHivqLAFpPq02yLPx6fsOv
Tq7GsDChAYBBc4v7Y2Ap9RD5Vs3dIhEANcnolf27QwrG9RMnnvzk8pCvp1o6zSU4
VuOE1W66/O1/7e2rVxyrnTcP7UgK43zNIXu7+tiAqWsO92uSnuMoGPGpeaUm1jym
hjWKtkAwDFSqvHY+XL5qDVBEjeUe+WHkYUg40cAXjusAqgm2hZt29c2wnVrxW25W
P0meNlzHGFdA2AC5z54iRiqj57dTfBTkHoBczQxcyw6hhzxZQ4e5I5zOKjXXEhZN
r0tA3YC14CTabKRus/JmZieyZzRgEy2oti64tmLYTqSlAD78pRL40VNoaSYetXLw
hhNsXCHgWaY6d5bLOc/aIQMAV5oLvZQKvuXAF1IDmhPA+bZbpWipp0zagf1P1H3s
UzsMdn2KM0ejzgotbtNlj5TcrVwpmvE3ktvUAuA+hi3FkVx1US+2Gsp5x4YOzJ7u
P1WPk6ShF0JgnJH2ILdj6kttTWwFzH17keSFICWDfH/+kM+k7Y1v3EXMQXE7y0T9
MjvJskz6d/nv+sQhY04xt64xFMGTnZjlJMzfQNi7zWFLTZnDD0lPowq7l3YiPoTT
t5Xky83lu0KZsZBo0WlWaDG00gLVdtRgVbcuSWxpi5BdLb1kRab66JptWjxwXQID
AQABo4HrMIHoMDoGA1UdHwQzMDEwL6AtoCuGKWh0dHBzOi8vcmwtY2Etc2VydmVy
LnJlZGlzbGFicy5jb20vdjEvY3JsMEYGCCsGAQUFBwEBBDowODA2BggrBgEFBQcw
AYYqaHR0cHM6Ly9ybC1jYS1zZXJ2ZXIucmVkaXNsYWJzLmNvbS92MS9vY3NwMB0G
A1UdDgQWBBQHar5OKvQUpP2qWt6mckzToeCOHDAfBgNVHSMEGDAWgBQi42wH6hM4
L2sujEvLM0/u8lRXTzASBgNVHRMBAf8ECDAGAQH/AgEAMA4GA1UdDwEB/wQEAwIB
hjANBgkqhkiG9w0BAQsFAAOCAgEAirEn/iTsAKyhd+pu2W3Z5NjCko4NPU0EYUbr
AP7+POK2rzjIrJO3nFYQ/LLuC7KCXG+2qwan2SAOGmqWst13Y+WHp44Kae0kaChW
vcYLXXSoGQGC8QuFSNUdaeg3RbMDYFT04dOkqufeWVccoHVxyTSg9eD8LZuHn5jw
7QDLiEECBmIJHk5Eeo2TAZrx4Yx6ufSUX5HeVjlAzqwtAqdt99uCJ/EL8bgpWbe+
XoSpvUv0SEC1I1dCAhCKAvRlIOA6VBcmzg5Am12KzkqTul12/VEFIgzqu0Zy2Jbc
AUPrYVu/+tOGXQaijy7YgwH8P8n3s7ZeUa1VABJHcxrxYduDDJBLZi+MjheUDaZ1
jQRHYevI2tlqeSBqdPKG4zBY5lS0GiAlmuze5oENt0P3XboHoZPHiqcK3VECgTVh
/BkJcuudETSJcZDmQ8YfoKfBzRQNg2sv/hwvUv73Ss51Sco8GEt2lD8uEdib1Q6z
zDT5lXJowSzOD5ZA9OGDjnSRL+2riNtKWKEqvtEG3VBJoBzu9GoxbAc7wIZLxmli
iF5a/Zf5X+UXD3s4TMmy6C4QZJpAA2egsSQCnraWO2ULhh7iXMysSkF/nzVfZn43
iqpaB8++9a37hWq14ZmOv0TJIDz//b2+KC4VFXWQ5W5QC6whsjT+OlG4p5ZYG0jo
616pxqo=
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIFujCCA6KgAwIBAgIJAJ1aTT1lu2ScMA0GCSqGSIb3DQEBCwUAMGoxCzAJBgNV
BAYTAlVTMQswCQYDVQQIDAJDQTELMAkGA1UEBwwCQ0ExEjAQBgNVBAoMCVJlZGlz
TGFiczEtMCsGA1UEAwwkUmVkaXNMYWJzIFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9y
aXR5MB4XDTE4MDIyNTE1MjA0MloXDTM4MDIyMDE1MjA0MlowajELMAkGA1UEBhMC
VVMxCzAJBgNVBAgMAkNBMQswCQYDVQQHDAJDQTESMBAGA1UECgwJUmVkaXNMYWJz
MS0wKwYDVQQDDCRSZWRpc0xhYnMgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkw
ggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDLEjXy7YrbN5Waau5cd6g1
G5C2tMmeTpZ0duFAPxNU4oE3RHS5gGiok346fUXuUxbZ6QkuzeN2/2Z+RmRcJhQY
Dm0ZgdG4x59An1TJfnzKKoWj8ISmoHS/TGNBdFzXV7FYNLBuqZouqePI6ReC6Qhl
pp45huV32Q3a6IDrrvx7Wo5ZczEQeFNbCeCOQYNDdTmCyEkHqc2AGo8eoIlSTutT
ULOC7R5gzJVTS0e1hesQ7jmqHjbO+VQS1NAL4/5K6cuTEqUl+XhVhPdLWBXJQ5ag
54qhX4v+ojLzeU1R/Vc6NjMvVtptWY6JihpgplprN0Yh2556ewcXMeturcKgXfGJ
xeYzsjzXerEjrVocX5V8BNrg64NlifzTMKNOOv4fVZszq1SIHR8F9ROrqiOdh8iC
JpUbLpXH9hWCSEO6VRMB2xJoKu3cgl63kF30s77x7wLFMEHiwsQRKxooE1UhgS9K
2sO4TlQ1eWUvFvHSTVDQDlGQ6zu4qjbOpb3Q8bQwoK+ai2alkXVR4Ltxe9QlgYK3
StsnPhruzZGA0wbXdpw0bnM+YdlEm5ffSTpNIfgHeaa7Dtb801FtA71ZlH7A6TaI
SIQuUST9EKmv7xrJyx0W1pGoPOLw5T029aTjnICSLdtV9bLwysrLhIYG5bnPq78B
cS+jZHFGzD7PUVGQD01nOQIDAQABo2MwYTAdBgNVHQ4EFgQUIuNsB+oTOC9rLoxL
yzNP7vJUV08wHwYDVR0jBBgwFoAUIuNsB+oTOC9rLoxLyzNP7vJUV08wDwYDVR0T
AQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAYYwDQYJKoZIhvcNAQELBQADggIBAHfg
z5pMNUAKdMzK1aS1EDdK9yKz4qicILz5czSLj1mC7HKDRy8cVADUxEICis++CsCu
rYOvyCVergHQLREcxPq4rc5Nq1uj6J6649NEeh4WazOOjL4ZfQ1jVznMbGy+fJm3
3Hoelv6jWRG9iqeJZja7/1s6YC6bWymI/OY1e4wUKeNHAo+Vger7MlHV+RuabaX+
hSJ8bJAM59NCM7AgMTQpJCncrcdLeceYniGy5Q/qt2b5mJkQVkIdy4TPGGB+AXDJ
D0q3I/JDRkDUFNFdeW0js7fHdsvCR7O3tJy5zIgEV/o/BCkmJVtuwPYOrw/yOlKj
TY/U7ATAx9VFF6/vYEOMYSmrZlFX+98L6nJtwDqfLB5VTltqZ4H/KBxGE3IRSt9l
FXy40U+LnXzhhW+7VBAvyYX8GEXhHkKU8Gqk1xitrqfBXY74xKgyUSTolFSfFVgj
mcM/X4K45bka+qpkj7Kfv/8D4j6aZekwhN2ly6hhC1SmQ8qjMjpG/mrWOSSHZFmf
ybu9iD2AYHeIOkshIl6xYIa++Q/00/vs46IzAbQyriOi0XxlSMMVtPx0Q3isp+ji
n8Mq9eOuxYOEQ4of8twUkUDd528iwGtEdwf0Q01UyT84S62N8AySl1ZBKXJz6W4F
UhWfa/HQYOAPDdEjNgnVwLI23b8t0TozyCWw7q8h
-----END CERTIFICATE-----

-----BEGIN CERTIFICATE-----
MIIEjzCCA3egAwIBAgIQe55B/ALCKJDZtdNT8kD6hTANBgkqhkiG9w0BAQsFADBM
MSAwHgYDVQQLExdHbG9iYWxTaWduIFJvb3QgQ0EgLSBSMzETMBEGA1UEChMKR2xv
YmFsU2lnbjETMBEGA1UEAxMKR2xvYmFsU2lnbjAeFw0yMjAxMjYxMjAwMDBaFw0y
NTAxMjYwMDAwMDBaMFgxCzAJBgNVBAYTAkJFMRkwFwYDVQQKExBHbG9iYWxTaWdu
IG52LXNhMS4wLAYDVQQDEyVHbG9iYWxTaWduIEF0bGFzIFIzIE9WIFRMUyBDQSAy
MDIyIFEyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmGmg1LW9b7Lf
8zDD83yBDTEkt+FOxKJZqF4veWc5KZsQj9HfnUS2e5nj/E+JImlGPsQuoiosLuXD
BVBNAMcUFa11buFMGMeEMwiTmCXoXRrXQmH0qjpOfKgYc5gHG3BsRGaRrf7VR4eg
ofNMG9wUBw4/g/TT7+bQJdA4NfE7Y4d5gEryZiBGB/swaX6Jp/8MF4TgUmOWmalK
dZCKyb4sPGQFRTtElk67F7vU+wdGcrcOx1tDcIB0ncjLPMnaFicagl+daWGsKqTh
counQb6QJtYHa91KvCfKWocMxQ7OIbB5UARLPmC4CJ1/f8YFm35ebfzAeULYdGXu
jE9CLor0OwIDAQABo4IBXzCCAVswDgYDVR0PAQH/BAQDAgGGMB0GA1UdJQQWMBQG
CCsGAQUFBwMBBggrBgEFBQcDAjASBgNVHRMBAf8ECDAGAQH/AgEAMB0GA1UdDgQW
BBSH5Zq7a7B/t95GfJWkDBpA8HHqdjAfBgNVHSMEGDAWgBSP8Et/qC5FJK5NUPpj
move4t0bvDB7BggrBgEFBQcBAQRvMG0wLgYIKwYBBQUHMAGGImh0dHA6Ly9vY3Nw
Mi5nbG9iYWxzaWduLmNvbS9yb290cjMwOwYIKwYBBQUHMAKGL2h0dHA6Ly9zZWN1
cmUuZ2xvYmFsc2lnbi5jb20vY2FjZXJ0L3Jvb3QtcjMuY3J0MDYGA1UdHwQvMC0w
K6ApoCeGJWh0dHA6Ly9jcmwuZ2xvYmFsc2lnbi5jb20vcm9vdC1yMy5jcmwwIQYD
VR0gBBowGDAIBgZngQwBAgIwDAYKKwYBBAGgMgoBAjANBgkqhkiG9w0BAQsFAAOC
AQEAKRic9/f+nmhQU/wz04APZLjgG5OgsuUOyUEZjKVhNGDwxGTvKhyXGGAMW2B/
3bRi+aElpXwoxu3pL6fkElbX3B0BeS5LoDtxkyiVEBMZ8m+sXbocwlPyxrPbX6mY
0rVIvnuUeBH8X0L5IwfpNVvKnBIilTbcebfHyXkPezGwz7E1yhUULjJFm2bt0SdX
y+4X/WeiiYIv+fTVgZZgl+/2MKIsu/qdBJc3f3TvJ8nz+Eax1zgZmww+RSQWeOj3
15Iw6Z5FX+NwzY/Ab+9PosR5UosSeq+9HhtaxZttXG1nVh+avYPGYddWmiMT90J5
ZgKnO/Fx2hBgTxhOTMYaD312kg==
-----END CERTIFICATE-----

-----BEGIN CERTIFICATE-----
MIIDXzCCAkegAwIBAgILBAAAAAABIVhTCKIwDQYJKoZIhvcNAQELBQAwTDEgMB4G
A1UECxMXR2xvYmFsU2lnbiBSb290IENBIC0gUjMxEzARBgNVBAoTCkdsb2JhbFNp
Z24xEzARBgNVBAMTCkdsb2JhbFNpZ24wHhcNMDkwMzE4MTAwMDAwWhcNMjkwMzE4
MTAwMDAwWjBMMSAwHgYDVQQLExdHbG9iYWxTaWduIFJvb3QgQ0EgLSBSMzETMBEG
A1UEChMKR2xvYmFsU2lnbjETMBEGA1UEAxMKR2xvYmFsU2lnbjCCASIwDQYJKoZI
hvcNAQEBBQADggEPADCCAQoCggEBAMwldpB5BngiFvXAg7aEyiie/QV2EcWtiHL8
RgJDx7KKnQRfJMsuS+FggkbhUqsMgUdwbN1k0ev1LKMPgj0MK66X17YUhhB5uzsT
gHeMCOFJ0mpiLx9e+pZo34knlTifBtc+ycsmWQ1z3rDI6SYOgxXG71uL0gRgykmm
KPZpO/bLyCiR5Z2KYVc3rHQU3HTgOu5yLy6c+9C7v/U9AOEGM+iCK65TpjoWc4zd
QQ4gOsC0p6Hpsk+QLjJg6VfLuQSSaGjlOCZgdbKfd/+RFO+uIEn8rUAVSNECMWEZ
XriX7613t2Saer9fwRPvm2L7DWzgVGkWqQPabumDk3F2xmmFghcCAwEAAaNCMEAw
DgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFI/wS3+o
LkUkrk1Q+mOai97i3Ru8MA0GCSqGSIb3DQEBCwUAA4IBAQBLQNvAUKr+yAzv95ZU
RUm7lgAJQayzE4aGKAczymvmdLm6AC2upArT9fHxD4q/c2dKg8dEe3jgr25sbwMp
jjM5RcOO5LlXbKr8EpbsU8Yt5CRsuZRj+9xTaGdWPoO4zzUhw8lo/s7awlOqzJCK
6fBdRoyV3XpYKBovHd7NADdBj+1EbddTKJd+82cEHhXXipa0095MJ6RMG3NzdvQX
mcIfeg7jLQitChws/zyrVQ4PkX4268NXSb7hLi18YIvDQVETI53O9zJrlAGomecs
Mx86OyXShkDOOyyGeMlhLxS67ttVb9+E7gUJTb0o2HLO02JQZR7rkpeDMdmztcpH
WD9f
-----END CERTIFICATE-----`;
    var TLSProfiles = {
      RedisCloudFixed: { ca: RedisCloudCA },
      RedisCloudFlexible: { ca: RedisCloudCA }
    };
    exports.default = TLSProfiles;
  }
});

// node_modules/ioredis/built/utils/index.js
var require_utils2 = __commonJS({
  "node_modules/ioredis/built/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.noop = exports.defaults = exports.Debug = exports.zipMap = exports.CONNECTION_CLOSED_ERROR_MSG = exports.shuffle = exports.sample = exports.resolveTLSProfile = exports.parseURL = exports.optimizeErrorStack = exports.toArg = exports.convertMapToArray = exports.convertObjectToArray = exports.timeout = exports.packObject = exports.isInt = exports.wrapMultiResult = exports.convertBufferToString = void 0;
    var url_1 = require("url");
    var lodash_1 = require_lodash3();
    Object.defineProperty(exports, "defaults", { enumerable: true, get: function() {
      return lodash_1.defaults;
    } });
    Object.defineProperty(exports, "noop", { enumerable: true, get: function() {
      return lodash_1.noop;
    } });
    var debug_1 = require_debug();
    exports.Debug = debug_1.default;
    var TLSProfiles_1 = require_TLSProfiles();
    function convertBufferToString(value, encoding) {
      if (value instanceof Buffer) {
        return value.toString(encoding);
      }
      if (Array.isArray(value)) {
        const length = value.length;
        const res = Array(length);
        for (let i2 = 0; i2 < length; ++i2) {
          res[i2] = value[i2] instanceof Buffer && encoding === "utf8" ? value[i2].toString() : convertBufferToString(value[i2], encoding);
        }
        return res;
      }
      return value;
    }
    exports.convertBufferToString = convertBufferToString;
    function wrapMultiResult(arr) {
      if (!arr) {
        return null;
      }
      const result = [];
      const length = arr.length;
      for (let i2 = 0; i2 < length; ++i2) {
        const item = arr[i2];
        if (item instanceof Error) {
          result.push([item]);
        } else {
          result.push([null, item]);
        }
      }
      return result;
    }
    exports.wrapMultiResult = wrapMultiResult;
    function isInt(value) {
      const x2 = parseFloat(value);
      return !isNaN(value) && (x2 | 0) === x2;
    }
    exports.isInt = isInt;
    function packObject(array) {
      const result = {};
      const length = array.length;
      for (let i2 = 1; i2 < length; i2 += 2) {
        result[array[i2 - 1]] = array[i2];
      }
      return result;
    }
    exports.packObject = packObject;
    function timeout(callback, timeout2) {
      let timer = null;
      const run = function() {
        if (timer) {
          clearTimeout(timer);
          timer = null;
          callback.apply(this, arguments);
        }
      };
      timer = setTimeout(run, timeout2, new Error("timeout"));
      return run;
    }
    exports.timeout = timeout;
    function convertObjectToArray(obj) {
      const result = [];
      const keys = Object.keys(obj);
      for (let i2 = 0, l = keys.length; i2 < l; i2++) {
        result.push(keys[i2], obj[keys[i2]]);
      }
      return result;
    }
    exports.convertObjectToArray = convertObjectToArray;
    function convertMapToArray(map) {
      const result = [];
      let pos = 0;
      map.forEach(function(value, key) {
        result[pos] = key;
        result[pos + 1] = value;
        pos += 2;
      });
      return result;
    }
    exports.convertMapToArray = convertMapToArray;
    function toArg(arg) {
      if (arg === null || typeof arg === "undefined") {
        return "";
      }
      return String(arg);
    }
    exports.toArg = toArg;
    function optimizeErrorStack(error, friendlyStack, filterPath) {
      const stacks = friendlyStack.split("\n");
      let lines = "";
      let i2;
      for (i2 = 1; i2 < stacks.length; ++i2) {
        if (stacks[i2].indexOf(filterPath) === -1) {
          break;
        }
      }
      for (let j = i2; j < stacks.length; ++j) {
        lines += "\n" + stacks[j];
      }
      if (error.stack) {
        const pos = error.stack.indexOf("\n");
        error.stack = error.stack.slice(0, pos) + lines;
      }
      return error;
    }
    exports.optimizeErrorStack = optimizeErrorStack;
    function parseURL(url) {
      if (isInt(url)) {
        return { port: url };
      }
      let parsed = (0, url_1.parse)(url, true, true);
      if (!parsed.slashes && url[0] !== "/") {
        url = "//" + url;
        parsed = (0, url_1.parse)(url, true, true);
      }
      const options = parsed.query || {};
      const result = {};
      if (parsed.auth) {
        const index = parsed.auth.indexOf(":");
        result.username = index === -1 ? parsed.auth : parsed.auth.slice(0, index);
        result.password = index === -1 ? "" : parsed.auth.slice(index + 1);
      }
      if (parsed.pathname) {
        if (parsed.protocol === "redis:" || parsed.protocol === "rediss:") {
          if (parsed.pathname.length > 1) {
            result.db = parsed.pathname.slice(1);
          }
        } else {
          result.path = parsed.pathname;
        }
      }
      if (parsed.host) {
        result.host = parsed.hostname;
      }
      if (parsed.port) {
        result.port = parsed.port;
      }
      if (typeof options.family === "string") {
        const intFamily = Number.parseInt(options.family, 10);
        if (!Number.isNaN(intFamily)) {
          result.family = intFamily;
        }
      }
      (0, lodash_1.defaults)(result, options);
      return result;
    }
    exports.parseURL = parseURL;
    function resolveTLSProfile(options) {
      let tls = options === null || options === void 0 ? void 0 : options.tls;
      if (typeof tls === "string")
        tls = { profile: tls };
      const profile = TLSProfiles_1.default[tls === null || tls === void 0 ? void 0 : tls.profile];
      if (profile) {
        tls = Object.assign({}, profile, tls);
        delete tls.profile;
        options = Object.assign({}, options, { tls });
      }
      return options;
    }
    exports.resolveTLSProfile = resolveTLSProfile;
    function sample(array, from = 0) {
      const length = array.length;
      if (from >= length) {
        return null;
      }
      return array[from + Math.floor(Math.random() * (length - from))];
    }
    exports.sample = sample;
    function shuffle(array) {
      let counter = array.length;
      while (counter > 0) {
        const index = Math.floor(Math.random() * counter);
        counter--;
        [array[counter], array[index]] = [array[index], array[counter]];
      }
      return array;
    }
    exports.shuffle = shuffle;
    exports.CONNECTION_CLOSED_ERROR_MSG = "Connection is closed.";
    function zipMap(keys, values) {
      const map = /* @__PURE__ */ new Map();
      keys.forEach((key, index) => {
        map.set(key, values[index]);
      });
      return map;
    }
    exports.zipMap = zipMap;
  }
});

// node_modules/ioredis/built/Command.js
var require_Command = __commonJS({
  "node_modules/ioredis/built/Command.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var commands_1 = require_built();
    var calculateSlot = require_lib3();
    var standard_as_callback_1 = require_built2();
    var utils_1 = require_utils2();
    var Command = class {
      constructor(name, args = [], options = {}, callback) {
        this.name = name;
        this.inTransaction = false;
        this.isResolved = false;
        this.transformed = false;
        this.replyEncoding = options.replyEncoding;
        this.errorStack = options.errorStack;
        this.args = args.flat();
        this.callback = callback;
        this.initPromise();
        if (options.keyPrefix) {
          const isBufferKeyPrefix = options.keyPrefix instanceof Buffer;
          let keyPrefixBuffer = isBufferKeyPrefix ? options.keyPrefix : null;
          this._iterateKeys((key) => {
            if (key instanceof Buffer) {
              if (keyPrefixBuffer === null) {
                keyPrefixBuffer = Buffer.from(options.keyPrefix);
              }
              return Buffer.concat([keyPrefixBuffer, key]);
            } else if (isBufferKeyPrefix) {
              return Buffer.concat([options.keyPrefix, Buffer.from(String(key))]);
            }
            return options.keyPrefix + key;
          });
        }
        if (options.readOnly) {
          this.isReadOnly = true;
        }
      }
      static checkFlag(flagName, commandName) {
        return !!this.getFlagMap()[flagName][commandName];
      }
      static setArgumentTransformer(name, func) {
        this._transformer.argument[name] = func;
      }
      static setReplyTransformer(name, func) {
        this._transformer.reply[name] = func;
      }
      static getFlagMap() {
        if (!this.flagMap) {
          this.flagMap = Object.keys(Command.FLAGS).reduce((map, flagName) => {
            map[flagName] = {};
            Command.FLAGS[flagName].forEach((commandName) => {
              map[flagName][commandName] = true;
            });
            return map;
          }, {});
        }
        return this.flagMap;
      }
      getSlot() {
        if (typeof this.slot === "undefined") {
          const key = this.getKeys()[0];
          this.slot = key == null ? null : calculateSlot(key);
        }
        return this.slot;
      }
      getKeys() {
        return this._iterateKeys();
      }
      toWritable(_socket) {
        let result;
        const commandStr = "*" + (this.args.length + 1) + "\r\n$" + Buffer.byteLength(this.name) + "\r\n" + this.name + "\r\n";
        if (this.bufferMode) {
          const buffers = new MixedBuffers();
          buffers.push(commandStr);
          for (let i2 = 0; i2 < this.args.length; ++i2) {
            const arg = this.args[i2];
            if (arg instanceof Buffer) {
              if (arg.length === 0) {
                buffers.push("$0\r\n\r\n");
              } else {
                buffers.push("$" + arg.length + "\r\n");
                buffers.push(arg);
                buffers.push("\r\n");
              }
            } else {
              buffers.push("$" + Buffer.byteLength(arg) + "\r\n" + arg + "\r\n");
            }
          }
          result = buffers.toBuffer();
        } else {
          result = commandStr;
          for (let i2 = 0; i2 < this.args.length; ++i2) {
            const arg = this.args[i2];
            result += "$" + Buffer.byteLength(arg) + "\r\n" + arg + "\r\n";
          }
        }
        return result;
      }
      stringifyArguments() {
        for (let i2 = 0; i2 < this.args.length; ++i2) {
          const arg = this.args[i2];
          if (typeof arg === "string") {
          } else if (arg instanceof Buffer) {
            this.bufferMode = true;
          } else {
            this.args[i2] = (0, utils_1.toArg)(arg);
          }
        }
      }
      transformReply(result) {
        if (this.replyEncoding) {
          result = (0, utils_1.convertBufferToString)(result, this.replyEncoding);
        }
        const transformer = Command._transformer.reply[this.name];
        if (transformer) {
          result = transformer(result);
        }
        return result;
      }
      setTimeout(ms) {
        if (!this._commandTimeoutTimer) {
          this._commandTimeoutTimer = setTimeout(() => {
            if (!this.isResolved) {
              this.reject(new Error("Command timed out"));
            }
          }, ms);
        }
      }
      initPromise() {
        const promise = new Promise((resolve, reject) => {
          if (!this.transformed) {
            this.transformed = true;
            const transformer = Command._transformer.argument[this.name];
            if (transformer) {
              this.args = transformer(this.args);
            }
            this.stringifyArguments();
          }
          this.resolve = this._convertValue(resolve);
          if (this.errorStack) {
            this.reject = (err) => {
              reject((0, utils_1.optimizeErrorStack)(err, this.errorStack.stack, __dirname));
            };
          } else {
            this.reject = reject;
          }
        });
        this.promise = (0, standard_as_callback_1.default)(promise, this.callback);
      }
      _iterateKeys(transform = (key) => key) {
        if (typeof this.keys === "undefined") {
          this.keys = [];
          if ((0, commands_1.exists)(this.name)) {
            const keyIndexes = (0, commands_1.getKeyIndexes)(this.name, this.args);
            for (const index of keyIndexes) {
              this.args[index] = transform(this.args[index]);
              this.keys.push(this.args[index]);
            }
          }
        }
        return this.keys;
      }
      _convertValue(resolve) {
        return (value) => {
          try {
            const existingTimer = this._commandTimeoutTimer;
            if (existingTimer) {
              clearTimeout(existingTimer);
              delete this._commandTimeoutTimer;
            }
            resolve(this.transformReply(value));
            this.isResolved = true;
          } catch (err) {
            this.reject(err);
          }
          return this.promise;
        };
      }
    };
    exports.default = Command;
    Command.FLAGS = {
      VALID_IN_SUBSCRIBER_MODE: [
        "subscribe",
        "psubscribe",
        "unsubscribe",
        "punsubscribe",
        "ssubscribe",
        "sunsubscribe",
        "ping",
        "quit"
      ],
      VALID_IN_MONITOR_MODE: ["monitor", "auth"],
      ENTER_SUBSCRIBER_MODE: ["subscribe", "psubscribe", "ssubscribe"],
      EXIT_SUBSCRIBER_MODE: ["unsubscribe", "punsubscribe", "sunsubscribe"],
      WILL_DISCONNECT: ["quit"]
    };
    Command._transformer = {
      argument: {},
      reply: {}
    };
    var msetArgumentTransformer = function(args) {
      if (args.length === 1) {
        if (args[0] instanceof Map) {
          return (0, utils_1.convertMapToArray)(args[0]);
        }
        if (typeof args[0] === "object" && args[0] !== null) {
          return (0, utils_1.convertObjectToArray)(args[0]);
        }
      }
      return args;
    };
    var hsetArgumentTransformer = function(args) {
      if (args.length === 2) {
        if (args[1] instanceof Map) {
          return [args[0]].concat((0, utils_1.convertMapToArray)(args[1]));
        }
        if (typeof args[1] === "object" && args[1] !== null) {
          return [args[0]].concat((0, utils_1.convertObjectToArray)(args[1]));
        }
      }
      return args;
    };
    Command.setArgumentTransformer("mset", msetArgumentTransformer);
    Command.setArgumentTransformer("msetnx", msetArgumentTransformer);
    Command.setArgumentTransformer("hset", hsetArgumentTransformer);
    Command.setArgumentTransformer("hmset", hsetArgumentTransformer);
    Command.setReplyTransformer("hgetall", function(result) {
      if (Array.isArray(result)) {
        const obj = {};
        for (let i2 = 0; i2 < result.length; i2 += 2) {
          const key = result[i2];
          const value = result[i2 + 1];
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value,
              configurable: true,
              enumerable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
        }
        return obj;
      }
      return result;
    });
    var MixedBuffers = class {
      constructor() {
        this.length = 0;
        this.items = [];
      }
      push(x2) {
        this.length += Buffer.byteLength(x2);
        this.items.push(x2);
      }
      toBuffer() {
        const result = Buffer.allocUnsafe(this.length);
        let offset = 0;
        for (const item of this.items) {
          const length = Buffer.byteLength(item);
          Buffer.isBuffer(item) ? item.copy(result, offset) : result.write(item, offset, length);
          offset += length;
        }
        return result;
      }
    };
  }
});

// node_modules/ioredis/built/errors/ClusterAllFailedError.js
var require_ClusterAllFailedError = __commonJS({
  "node_modules/ioredis/built/errors/ClusterAllFailedError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var redis_errors_1 = require_redis_errors();
    var ClusterAllFailedError = class extends redis_errors_1.RedisError {
      constructor(message, lastNodeError) {
        super(message);
        this.lastNodeError = lastNodeError;
        Error.captureStackTrace(this, this.constructor);
      }
      get name() {
        return this.constructor.name;
      }
    };
    exports.default = ClusterAllFailedError;
    ClusterAllFailedError.defaultMessage = "Failed to refresh slots cache.";
  }
});

// node_modules/ioredis/built/ScanStream.js
var require_ScanStream = __commonJS({
  "node_modules/ioredis/built/ScanStream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var stream_1 = require("stream");
    var ScanStream = class extends stream_1.Readable {
      constructor(opt) {
        super(opt);
        this.opt = opt;
        this._redisCursor = "0";
        this._redisDrained = false;
      }
      _read() {
        if (this._redisDrained) {
          this.push(null);
          return;
        }
        const args = [this._redisCursor];
        if (this.opt.key) {
          args.unshift(this.opt.key);
        }
        if (this.opt.match) {
          args.push("MATCH", this.opt.match);
        }
        if (this.opt.type) {
          args.push("TYPE", this.opt.type);
        }
        if (this.opt.count) {
          args.push("COUNT", String(this.opt.count));
        }
        this.opt.redis[this.opt.command](args, (err, res) => {
          if (err) {
            this.emit("error", err);
            return;
          }
          this._redisCursor = res[0] instanceof Buffer ? res[0].toString() : res[0];
          if (this._redisCursor === "0") {
            this._redisDrained = true;
          }
          this.push(res[1]);
        });
      }
      close() {
        this._redisDrained = true;
      }
    };
    exports.default = ScanStream;
  }
});

// node_modules/ioredis/built/autoPipelining.js
var require_autoPipelining = __commonJS({
  "node_modules/ioredis/built/autoPipelining.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.executeWithAutoPipelining = exports.getFirstValueInFlattenedArray = exports.shouldUseAutoPipelining = exports.notAllowedAutoPipelineCommands = exports.kCallbacks = exports.kExec = void 0;
    var lodash_1 = require_lodash3();
    var calculateSlot = require_lib3();
    var standard_as_callback_1 = require_built2();
    exports.kExec = Symbol("exec");
    exports.kCallbacks = Symbol("callbacks");
    exports.notAllowedAutoPipelineCommands = [
      "auth",
      "info",
      "script",
      "quit",
      "cluster",
      "pipeline",
      "multi",
      "subscribe",
      "psubscribe",
      "unsubscribe",
      "unpsubscribe",
      "select"
    ];
    function executeAutoPipeline(client, slotKey) {
      if (client._runningAutoPipelines.has(slotKey)) {
        return;
      }
      if (!client._autoPipelines.has(slotKey)) {
        return;
      }
      client._runningAutoPipelines.add(slotKey);
      const pipeline2 = client._autoPipelines.get(slotKey);
      client._autoPipelines.delete(slotKey);
      const callbacks = pipeline2[exports.kCallbacks];
      pipeline2[exports.kCallbacks] = null;
      pipeline2.exec(function(err, results) {
        client._runningAutoPipelines.delete(slotKey);
        if (err) {
          for (let i2 = 0; i2 < callbacks.length; i2++) {
            process.nextTick(callbacks[i2], err);
          }
        } else {
          for (let i2 = 0; i2 < callbacks.length; i2++) {
            process.nextTick(callbacks[i2], ...results[i2]);
          }
        }
        if (client._autoPipelines.has(slotKey)) {
          executeAutoPipeline(client, slotKey);
        }
      });
    }
    function shouldUseAutoPipelining(client, functionName, commandName) {
      return functionName && client.options.enableAutoPipelining && !client.isPipeline && !exports.notAllowedAutoPipelineCommands.includes(commandName) && !client.options.autoPipeliningIgnoredCommands.includes(commandName);
    }
    exports.shouldUseAutoPipelining = shouldUseAutoPipelining;
    function getFirstValueInFlattenedArray(args) {
      for (let i2 = 0; i2 < args.length; i2++) {
        const arg = args[i2];
        if (typeof arg === "string") {
          return arg;
        } else if (Array.isArray(arg) || (0, lodash_1.isArguments)(arg)) {
          if (arg.length === 0) {
            continue;
          }
          return arg[0];
        }
        const flattened = [arg].flat();
        if (flattened.length > 0) {
          return flattened[0];
        }
      }
      return void 0;
    }
    exports.getFirstValueInFlattenedArray = getFirstValueInFlattenedArray;
    function executeWithAutoPipelining(client, functionName, commandName, args, callback) {
      if (client.isCluster && !client.slots.length) {
        if (client.status === "wait")
          client.connect().catch(lodash_1.noop);
        return (0, standard_as_callback_1.default)(new Promise(function(resolve, reject) {
          client.delayUntilReady((err) => {
            if (err) {
              reject(err);
              return;
            }
            executeWithAutoPipelining(client, functionName, commandName, args, null).then(resolve, reject);
          });
        }), callback);
      }
      const prefix = client.options.keyPrefix || "";
      const slotKey = client.isCluster ? client.slots[calculateSlot(`${prefix}${getFirstValueInFlattenedArray(args)}`)].join(",") : "main";
      if (!client._autoPipelines.has(slotKey)) {
        const pipeline3 = client.pipeline();
        pipeline3[exports.kExec] = false;
        pipeline3[exports.kCallbacks] = [];
        client._autoPipelines.set(slotKey, pipeline3);
      }
      const pipeline2 = client._autoPipelines.get(slotKey);
      if (!pipeline2[exports.kExec]) {
        pipeline2[exports.kExec] = true;
        setImmediate(executeAutoPipeline, client, slotKey);
      }
      const autoPipelinePromise = new Promise(function(resolve, reject) {
        pipeline2[exports.kCallbacks].push(function(err, value) {
          if (err) {
            reject(err);
            return;
          }
          resolve(value);
        });
        if (functionName === "call") {
          args.unshift(commandName);
        }
        pipeline2[functionName](...args);
      });
      return (0, standard_as_callback_1.default)(autoPipelinePromise, callback);
    }
    exports.executeWithAutoPipelining = executeWithAutoPipelining;
  }
});

// node_modules/ioredis/built/Script.js
var require_Script = __commonJS({
  "node_modules/ioredis/built/Script.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var crypto_1 = require("crypto");
    var Command_1 = require_Command();
    var standard_as_callback_1 = require_built2();
    var Script = class {
      constructor(lua, numberOfKeys = null, keyPrefix = "", readOnly = false) {
        this.lua = lua;
        this.numberOfKeys = numberOfKeys;
        this.keyPrefix = keyPrefix;
        this.readOnly = readOnly;
        this.sha = (0, crypto_1.createHash)("sha1").update(lua).digest("hex");
        const sha = this.sha;
        const socketHasScriptLoaded = /* @__PURE__ */ new WeakSet();
        this.Command = class CustomScriptCommand extends Command_1.default {
          toWritable(socket) {
            const origReject = this.reject;
            this.reject = (err) => {
              if (err.message.indexOf("NOSCRIPT") !== -1) {
                socketHasScriptLoaded.delete(socket);
              }
              origReject.call(this, err);
            };
            if (!socketHasScriptLoaded.has(socket)) {
              socketHasScriptLoaded.add(socket);
              this.name = "eval";
              this.args[0] = lua;
            } else if (this.name === "eval") {
              this.name = "evalsha";
              this.args[0] = sha;
            }
            return super.toWritable(socket);
          }
        };
      }
      execute(container, args, options, callback) {
        if (typeof this.numberOfKeys === "number") {
          args.unshift(this.numberOfKeys);
        }
        if (this.keyPrefix) {
          options.keyPrefix = this.keyPrefix;
        }
        if (this.readOnly) {
          options.readOnly = true;
        }
        const evalsha = new this.Command("evalsha", [this.sha, ...args], options);
        evalsha.promise = evalsha.promise.catch((err) => {
          if (err.message.indexOf("NOSCRIPT") === -1) {
            throw err;
          }
          const resend = new this.Command("evalsha", [this.sha, ...args], options);
          const client = container.isPipeline ? container.redis : container;
          return client.sendCommand(resend);
        });
        (0, standard_as_callback_1.default)(evalsha.promise, callback);
        return container.sendCommand(evalsha);
      }
    };
    exports.default = Script;
  }
});

// node_modules/ioredis/built/utils/Commander.js
var require_Commander = __commonJS({
  "node_modules/ioredis/built/utils/Commander.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var commands_1 = require_built();
    var autoPipelining_1 = require_autoPipelining();
    var Command_1 = require_Command();
    var Script_1 = require_Script();
    var Commander = class {
      constructor() {
        this.options = {};
        this.scriptsSet = {};
        this.addedBuiltinSet = /* @__PURE__ */ new Set();
      }
      getBuiltinCommands() {
        return commands.slice(0);
      }
      createBuiltinCommand(commandName) {
        return {
          string: generateFunction(null, commandName, "utf8"),
          buffer: generateFunction(null, commandName, null)
        };
      }
      addBuiltinCommand(commandName) {
        this.addedBuiltinSet.add(commandName);
        this[commandName] = generateFunction(commandName, commandName, "utf8");
        this[commandName + "Buffer"] = generateFunction(commandName + "Buffer", commandName, null);
      }
      defineCommand(name, definition) {
        const script = new Script_1.default(definition.lua, definition.numberOfKeys, this.options.keyPrefix, definition.readOnly);
        this.scriptsSet[name] = script;
        this[name] = generateScriptingFunction(name, name, script, "utf8");
        this[name + "Buffer"] = generateScriptingFunction(name + "Buffer", name, script, null);
      }
      sendCommand(command, stream, node) {
        throw new Error('"sendCommand" is not implemented');
      }
    };
    var commands = commands_1.list.filter((command) => command !== "monitor");
    commands.push("sentinel");
    commands.forEach(function(commandName) {
      Commander.prototype[commandName] = generateFunction(commandName, commandName, "utf8");
      Commander.prototype[commandName + "Buffer"] = generateFunction(commandName + "Buffer", commandName, null);
    });
    Commander.prototype.call = generateFunction("call", "utf8");
    Commander.prototype.callBuffer = generateFunction("callBuffer", null);
    Commander.prototype.send_command = Commander.prototype.call;
    function generateFunction(functionName, _commandName, _encoding) {
      if (typeof _encoding === "undefined") {
        _encoding = _commandName;
        _commandName = null;
      }
      return function(...args) {
        const commandName = _commandName || args.shift();
        let callback = args[args.length - 1];
        if (typeof callback === "function") {
          args.pop();
        } else {
          callback = void 0;
        }
        const options = {
          errorStack: this.options.showFriendlyErrorStack ? new Error() : void 0,
          keyPrefix: this.options.keyPrefix,
          replyEncoding: _encoding
        };
        if (!(0, autoPipelining_1.shouldUseAutoPipelining)(this, functionName, commandName)) {
          return this.sendCommand(
            new Command_1.default(commandName, args, options, callback)
          );
        }
        return (0, autoPipelining_1.executeWithAutoPipelining)(
          this,
          functionName,
          commandName,
          args,
          callback
        );
      };
    }
    function generateScriptingFunction(functionName, commandName, script, encoding) {
      return function(...args) {
        const callback = typeof args[args.length - 1] === "function" ? args.pop() : void 0;
        const options = {
          replyEncoding: encoding
        };
        if (this.options.showFriendlyErrorStack) {
          options.errorStack = new Error();
        }
        if (!(0, autoPipelining_1.shouldUseAutoPipelining)(this, functionName, commandName)) {
          return script.execute(this, args, options, callback);
        }
        return (0, autoPipelining_1.executeWithAutoPipelining)(this, functionName, commandName, args, callback);
      };
    }
    exports.default = Commander;
  }
});

// node_modules/ioredis/built/Pipeline.js
var require_Pipeline = __commonJS({
  "node_modules/ioredis/built/Pipeline.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var calculateSlot = require_lib3();
    var commands_1 = require_built();
    var standard_as_callback_1 = require_built2();
    var util_1 = require("util");
    var Command_1 = require_Command();
    var utils_1 = require_utils2();
    var Commander_1 = require_Commander();
    function generateMultiWithNodes(redis2, keys) {
      const slot = calculateSlot(keys[0]);
      const target = redis2._groupsBySlot[slot];
      for (let i2 = 1; i2 < keys.length; i2++) {
        if (redis2._groupsBySlot[calculateSlot(keys[i2])] !== target) {
          return -1;
        }
      }
      return slot;
    }
    var Pipeline = class extends Commander_1.default {
      constructor(redis2) {
        super();
        this.redis = redis2;
        this.isPipeline = true;
        this.replyPending = 0;
        this._queue = [];
        this._result = [];
        this._transactions = 0;
        this._shaToScript = {};
        this.isCluster = this.redis.constructor.name === "Cluster" || this.redis.isCluster;
        this.options = redis2.options;
        Object.keys(redis2.scriptsSet).forEach((name) => {
          const script = redis2.scriptsSet[name];
          this._shaToScript[script.sha] = script;
          this[name] = redis2[name];
          this[name + "Buffer"] = redis2[name + "Buffer"];
        });
        redis2.addedBuiltinSet.forEach((name) => {
          this[name] = redis2[name];
          this[name + "Buffer"] = redis2[name + "Buffer"];
        });
        this.promise = new Promise((resolve, reject) => {
          this.resolve = resolve;
          this.reject = reject;
        });
        const _this = this;
        Object.defineProperty(this, "length", {
          get: function() {
            return _this._queue.length;
          }
        });
      }
      fillResult(value, position) {
        if (this._queue[position].name === "exec" && Array.isArray(value[1])) {
          const execLength = value[1].length;
          for (let i2 = 0; i2 < execLength; i2++) {
            if (value[1][i2] instanceof Error) {
              continue;
            }
            const cmd = this._queue[position - (execLength - i2)];
            try {
              value[1][i2] = cmd.transformReply(value[1][i2]);
            } catch (err) {
              value[1][i2] = err;
            }
          }
        }
        this._result[position] = value;
        if (--this.replyPending) {
          return;
        }
        if (this.isCluster) {
          let retriable = true;
          let commonError;
          for (let i2 = 0; i2 < this._result.length; ++i2) {
            const error = this._result[i2][0];
            const command = this._queue[i2];
            if (error) {
              if (command.name === "exec" && error.message === "EXECABORT Transaction discarded because of previous errors.") {
                continue;
              }
              if (!commonError) {
                commonError = {
                  name: error.name,
                  message: error.message
                };
              } else if (commonError.name !== error.name || commonError.message !== error.message) {
                retriable = false;
                break;
              }
            } else if (!command.inTransaction) {
              const isReadOnly = (0, commands_1.exists)(command.name) && (0, commands_1.hasFlag)(command.name, "readonly");
              if (!isReadOnly) {
                retriable = false;
                break;
              }
            }
          }
          if (commonError && retriable) {
            const _this = this;
            const errv = commonError.message.split(" ");
            const queue = this._queue;
            let inTransaction = false;
            this._queue = [];
            for (let i2 = 0; i2 < queue.length; ++i2) {
              if (errv[0] === "ASK" && !inTransaction && queue[i2].name !== "asking" && (!queue[i2 - 1] || queue[i2 - 1].name !== "asking")) {
                const asking = new Command_1.default("asking");
                asking.ignore = true;
                this.sendCommand(asking);
              }
              queue[i2].initPromise();
              this.sendCommand(queue[i2]);
              inTransaction = queue[i2].inTransaction;
            }
            let matched = true;
            if (typeof this.leftRedirections === "undefined") {
              this.leftRedirections = {};
            }
            const exec = function() {
              _this.exec();
            };
            const cluster = this.redis;
            cluster.handleError(commonError, this.leftRedirections, {
              moved: function(_slot, key) {
                _this.preferKey = key;
                cluster.slots[errv[1]] = [key];
                cluster._groupsBySlot[errv[1]] = cluster._groupsIds[cluster.slots[errv[1]].join(";")];
                cluster.refreshSlotsCache();
                _this.exec();
              },
              ask: function(_slot, key) {
                _this.preferKey = key;
                _this.exec();
              },
              tryagain: exec,
              clusterDown: exec,
              connectionClosed: exec,
              maxRedirections: () => {
                matched = false;
              },
              defaults: () => {
                matched = false;
              }
            });
            if (matched) {
              return;
            }
          }
        }
        let ignoredCount = 0;
        for (let i2 = 0; i2 < this._queue.length - ignoredCount; ++i2) {
          if (this._queue[i2 + ignoredCount].ignore) {
            ignoredCount += 1;
          }
          this._result[i2] = this._result[i2 + ignoredCount];
        }
        this.resolve(this._result.slice(0, this._result.length - ignoredCount));
      }
      sendCommand(command) {
        if (this._transactions > 0) {
          command.inTransaction = true;
        }
        const position = this._queue.length;
        command.pipelineIndex = position;
        command.promise.then((result) => {
          this.fillResult([null, result], position);
        }).catch((error) => {
          this.fillResult([error], position);
        });
        this._queue.push(command);
        return this;
      }
      addBatch(commands) {
        let command, commandName, args;
        for (let i2 = 0; i2 < commands.length; ++i2) {
          command = commands[i2];
          commandName = command[0];
          args = command.slice(1);
          this[commandName].apply(this, args);
        }
        return this;
      }
    };
    exports.default = Pipeline;
    var multi = Pipeline.prototype.multi;
    Pipeline.prototype.multi = function() {
      this._transactions += 1;
      return multi.apply(this, arguments);
    };
    var execBuffer = Pipeline.prototype.execBuffer;
    Pipeline.prototype.execBuffer = (0, util_1.deprecate)(function() {
      if (this._transactions > 0) {
        this._transactions -= 1;
      }
      return execBuffer.apply(this, arguments);
    }, "Pipeline#execBuffer: Use Pipeline#exec instead");
    Pipeline.prototype.exec = function(callback) {
      if (this.isCluster && !this.redis.slots.length) {
        if (this.redis.status === "wait")
          this.redis.connect().catch(utils_1.noop);
        if (callback && !this.nodeifiedPromise) {
          this.nodeifiedPromise = true;
          (0, standard_as_callback_1.default)(this.promise, callback);
        }
        this.redis.delayUntilReady((err) => {
          if (err) {
            this.reject(err);
            return;
          }
          this.exec(callback);
        });
        return this.promise;
      }
      if (this._transactions > 0) {
        this._transactions -= 1;
        return execBuffer.apply(this, arguments);
      }
      if (!this.nodeifiedPromise) {
        this.nodeifiedPromise = true;
        (0, standard_as_callback_1.default)(this.promise, callback);
      }
      if (!this._queue.length) {
        this.resolve([]);
      }
      let pipelineSlot;
      if (this.isCluster) {
        const sampleKeys = [];
        for (let i2 = 0; i2 < this._queue.length; i2++) {
          const keys = this._queue[i2].getKeys();
          if (keys.length) {
            sampleKeys.push(keys[0]);
          }
          if (keys.length && calculateSlot.generateMulti(keys) < 0) {
            this.reject(new Error("All the keys in a pipeline command should belong to the same slot"));
            return this.promise;
          }
        }
        if (sampleKeys.length) {
          pipelineSlot = generateMultiWithNodes(this.redis, sampleKeys);
          if (pipelineSlot < 0) {
            this.reject(new Error("All keys in the pipeline should belong to the same slots allocation group"));
            return this.promise;
          }
        } else {
          pipelineSlot = Math.random() * 16384 | 0;
        }
      }
      const _this = this;
      execPipeline();
      return this.promise;
      function execPipeline() {
        let writePending = _this.replyPending = _this._queue.length;
        let node;
        if (_this.isCluster) {
          node = {
            slot: pipelineSlot,
            redis: _this.redis.connectionPool.nodes.all[_this.preferKey]
          };
        }
        let data = "";
        let buffers;
        const stream = {
          isPipeline: true,
          destination: _this.isCluster ? node : { redis: _this.redis },
          write(writable) {
            if (typeof writable !== "string") {
              if (!buffers) {
                buffers = [];
              }
              if (data) {
                buffers.push(Buffer.from(data, "utf8"));
                data = "";
              }
              buffers.push(writable);
            } else {
              data += writable;
            }
            if (!--writePending) {
              if (buffers) {
                if (data) {
                  buffers.push(Buffer.from(data, "utf8"));
                }
                stream.destination.redis.stream.write(Buffer.concat(buffers));
              } else {
                stream.destination.redis.stream.write(data);
              }
              writePending = _this._queue.length;
              data = "";
              buffers = void 0;
            }
          }
        };
        for (let i2 = 0; i2 < _this._queue.length; ++i2) {
          _this.redis.sendCommand(_this._queue[i2], stream, node);
        }
        return _this.promise;
      }
    };
  }
});

// node_modules/ioredis/built/transaction.js
var require_transaction = __commonJS({
  "node_modules/ioredis/built/transaction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.addTransactionSupport = void 0;
    var utils_1 = require_utils2();
    var standard_as_callback_1 = require_built2();
    var Pipeline_1 = require_Pipeline();
    function addTransactionSupport(redis2) {
      redis2.pipeline = function(commands) {
        const pipeline2 = new Pipeline_1.default(this);
        if (Array.isArray(commands)) {
          pipeline2.addBatch(commands);
        }
        return pipeline2;
      };
      const { multi } = redis2;
      redis2.multi = function(commands, options) {
        if (typeof options === "undefined" && !Array.isArray(commands)) {
          options = commands;
          commands = null;
        }
        if (options && options.pipeline === false) {
          return multi.call(this);
        }
        const pipeline2 = new Pipeline_1.default(this);
        pipeline2.multi();
        if (Array.isArray(commands)) {
          pipeline2.addBatch(commands);
        }
        const exec2 = pipeline2.exec;
        pipeline2.exec = function(callback) {
          if (this.isCluster && !this.redis.slots.length) {
            if (this.redis.status === "wait")
              this.redis.connect().catch(utils_1.noop);
            return (0, standard_as_callback_1.default)(new Promise((resolve, reject) => {
              this.redis.delayUntilReady((err) => {
                if (err) {
                  reject(err);
                  return;
                }
                this.exec(pipeline2).then(resolve, reject);
              });
            }), callback);
          }
          if (this._transactions > 0) {
            exec2.call(pipeline2);
          }
          if (this.nodeifiedPromise) {
            return exec2.call(pipeline2);
          }
          const promise = exec2.call(pipeline2);
          return (0, standard_as_callback_1.default)(promise.then(function(result) {
            const execResult = result[result.length - 1];
            if (typeof execResult === "undefined") {
              throw new Error("Pipeline cannot be used to send any commands when the `exec()` has been called on it.");
            }
            if (execResult[0]) {
              execResult[0].previousErrors = [];
              for (let i2 = 0; i2 < result.length - 1; ++i2) {
                if (result[i2][0]) {
                  execResult[0].previousErrors.push(result[i2][0]);
                }
              }
              throw execResult[0];
            }
            return (0, utils_1.wrapMultiResult)(execResult[1]);
          }), callback);
        };
        const { execBuffer } = pipeline2;
        pipeline2.execBuffer = function(callback) {
          if (this._transactions > 0) {
            execBuffer.call(pipeline2);
          }
          return pipeline2.exec(callback);
        };
        return pipeline2;
      };
      const { exec } = redis2;
      redis2.exec = function(callback) {
        return (0, standard_as_callback_1.default)(exec.call(this).then(function(results) {
          if (Array.isArray(results)) {
            results = (0, utils_1.wrapMultiResult)(results);
          }
          return results;
        }), callback);
      };
    }
    exports.addTransactionSupport = addTransactionSupport;
  }
});

// node_modules/ioredis/built/utils/applyMixin.js
var require_applyMixin = __commonJS({
  "node_modules/ioredis/built/utils/applyMixin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function applyMixin(derivedConstructor, mixinConstructor) {
      Object.getOwnPropertyNames(mixinConstructor.prototype).forEach((name) => {
        Object.defineProperty(derivedConstructor.prototype, name, Object.getOwnPropertyDescriptor(mixinConstructor.prototype, name));
      });
    }
    exports.default = applyMixin;
  }
});

// node_modules/ioredis/built/cluster/ClusterOptions.js
var require_ClusterOptions = __commonJS({
  "node_modules/ioredis/built/cluster/ClusterOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_CLUSTER_OPTIONS = void 0;
    var dns_1 = require("dns");
    exports.DEFAULT_CLUSTER_OPTIONS = {
      clusterRetryStrategy: (times) => Math.min(100 + times * 2, 2e3),
      enableOfflineQueue: true,
      enableReadyCheck: true,
      scaleReads: "master",
      maxRedirections: 16,
      retryDelayOnMoved: 0,
      retryDelayOnFailover: 100,
      retryDelayOnClusterDown: 100,
      retryDelayOnTryAgain: 100,
      slotsRefreshTimeout: 1e3,
      useSRVRecords: false,
      resolveSrv: dns_1.resolveSrv,
      dnsLookup: dns_1.lookup,
      enableAutoPipelining: false,
      autoPipeliningIgnoredCommands: []
    };
  }
});

// node_modules/ioredis/built/cluster/util.js
var require_util = __commonJS({
  "node_modules/ioredis/built/cluster/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getConnectionName = exports.weightSrvRecords = exports.groupSrvRecords = exports.getUniqueHostnamesFromOptions = exports.normalizeNodeOptions = exports.nodeKeyToRedisOptions = exports.getNodeKey = void 0;
    var utils_1 = require_utils2();
    var net_1 = require("net");
    function getNodeKey(node) {
      node.port = node.port || 6379;
      node.host = node.host || "127.0.0.1";
      return node.host + ":" + node.port;
    }
    exports.getNodeKey = getNodeKey;
    function nodeKeyToRedisOptions(nodeKey) {
      const portIndex = nodeKey.lastIndexOf(":");
      if (portIndex === -1) {
        throw new Error(`Invalid node key ${nodeKey}`);
      }
      return {
        host: nodeKey.slice(0, portIndex),
        port: Number(nodeKey.slice(portIndex + 1))
      };
    }
    exports.nodeKeyToRedisOptions = nodeKeyToRedisOptions;
    function normalizeNodeOptions(nodes) {
      return nodes.map((node) => {
        const options = {};
        if (typeof node === "object") {
          Object.assign(options, node);
        } else if (typeof node === "string") {
          Object.assign(options, (0, utils_1.parseURL)(node));
        } else if (typeof node === "number") {
          options.port = node;
        } else {
          throw new Error("Invalid argument " + node);
        }
        if (typeof options.port === "string") {
          options.port = parseInt(options.port, 10);
        }
        delete options.db;
        if (!options.port) {
          options.port = 6379;
        }
        if (!options.host) {
          options.host = "127.0.0.1";
        }
        return (0, utils_1.resolveTLSProfile)(options);
      });
    }
    exports.normalizeNodeOptions = normalizeNodeOptions;
    function getUniqueHostnamesFromOptions(nodes) {
      const uniqueHostsMap = {};
      nodes.forEach((node) => {
        uniqueHostsMap[node.host] = true;
      });
      return Object.keys(uniqueHostsMap).filter((host) => !(0, net_1.isIP)(host));
    }
    exports.getUniqueHostnamesFromOptions = getUniqueHostnamesFromOptions;
    function groupSrvRecords(records) {
      const recordsByPriority = {};
      for (const record of records) {
        if (!recordsByPriority.hasOwnProperty(record.priority)) {
          recordsByPriority[record.priority] = {
            totalWeight: record.weight,
            records: [record]
          };
        } else {
          recordsByPriority[record.priority].totalWeight += record.weight;
          recordsByPriority[record.priority].records.push(record);
        }
      }
      return recordsByPriority;
    }
    exports.groupSrvRecords = groupSrvRecords;
    function weightSrvRecords(recordsGroup) {
      if (recordsGroup.records.length === 1) {
        recordsGroup.totalWeight = 0;
        return recordsGroup.records.shift();
      }
      const random = Math.floor(Math.random() * (recordsGroup.totalWeight + recordsGroup.records.length));
      let total = 0;
      for (const [i2, record] of recordsGroup.records.entries()) {
        total += 1 + record.weight;
        if (total > random) {
          recordsGroup.totalWeight -= record.weight;
          recordsGroup.records.splice(i2, 1);
          return record;
        }
      }
    }
    exports.weightSrvRecords = weightSrvRecords;
    function getConnectionName(component, nodeConnectionName) {
      const prefix = `ioredis-cluster(${component})`;
      return nodeConnectionName ? `${prefix}:${nodeConnectionName}` : prefix;
    }
    exports.getConnectionName = getConnectionName;
  }
});

// node_modules/ioredis/built/cluster/ClusterSubscriber.js
var require_ClusterSubscriber = __commonJS({
  "node_modules/ioredis/built/cluster/ClusterSubscriber.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var util_1 = require_util();
    var utils_1 = require_utils2();
    var Redis_1 = require_Redis();
    var debug = (0, utils_1.Debug)("cluster:subscriber");
    var ClusterSubscriber = class {
      constructor(connectionPool, emitter) {
        this.connectionPool = connectionPool;
        this.emitter = emitter;
        this.started = false;
        this.subscriber = null;
        this.onSubscriberEnd = () => {
          if (!this.started) {
            debug("subscriber has disconnected, but ClusterSubscriber is not started, so not reconnecting.");
            return;
          }
          debug("subscriber has disconnected, selecting a new one...");
          this.selectSubscriber();
        };
        this.connectionPool.on("-node", (_, key) => {
          if (!this.started || !this.subscriber) {
            return;
          }
          if ((0, util_1.getNodeKey)(this.subscriber.options) === key) {
            debug("subscriber has left, selecting a new one...");
            this.selectSubscriber();
          }
        });
        this.connectionPool.on("+node", () => {
          if (!this.started || this.subscriber) {
            return;
          }
          debug("a new node is discovered and there is no subscriber, selecting a new one...");
          this.selectSubscriber();
        });
      }
      getInstance() {
        return this.subscriber;
      }
      start() {
        this.started = true;
        this.selectSubscriber();
        debug("started");
      }
      stop() {
        this.started = false;
        if (this.subscriber) {
          this.subscriber.disconnect();
          this.subscriber = null;
        }
        debug("stopped");
      }
      selectSubscriber() {
        const lastActiveSubscriber = this.lastActiveSubscriber;
        if (lastActiveSubscriber) {
          lastActiveSubscriber.off("end", this.onSubscriberEnd);
          lastActiveSubscriber.disconnect();
        }
        if (this.subscriber) {
          this.subscriber.off("end", this.onSubscriberEnd);
          this.subscriber.disconnect();
        }
        const sampleNode = (0, utils_1.sample)(this.connectionPool.getNodes());
        if (!sampleNode) {
          debug("selecting subscriber failed since there is no node discovered in the cluster yet");
          this.subscriber = null;
          return;
        }
        const { options } = sampleNode;
        debug("selected a subscriber %s:%s", options.host, options.port);
        this.subscriber = new Redis_1.default({
          port: options.port,
          host: options.host,
          username: options.username,
          password: options.password,
          enableReadyCheck: true,
          connectionName: (0, util_1.getConnectionName)("subscriber", options.connectionName),
          lazyConnect: true,
          tls: options.tls,
          retryStrategy: null
        });
        this.subscriber.on("error", utils_1.noop);
        this.subscriber.once("end", this.onSubscriberEnd);
        const previousChannels = { subscribe: [], psubscribe: [], ssubscribe: [] };
        if (lastActiveSubscriber) {
          const condition = lastActiveSubscriber.condition || lastActiveSubscriber.prevCondition;
          if (condition && condition.subscriber) {
            previousChannels.subscribe = condition.subscriber.channels("subscribe");
            previousChannels.psubscribe = condition.subscriber.channels("psubscribe");
            previousChannels.ssubscribe = condition.subscriber.channels("ssubscribe");
          }
        }
        if (previousChannels.subscribe.length || previousChannels.psubscribe.length || previousChannels.ssubscribe.length) {
          let pending = 0;
          for (const type of ["subscribe", "psubscribe", "ssubscribe"]) {
            const channels = previousChannels[type];
            if (channels.length) {
              pending += 1;
              debug("%s %d channels", type, channels.length);
              this.subscriber[type](channels).then(() => {
                if (!--pending) {
                  this.lastActiveSubscriber = this.subscriber;
                }
              }).catch(() => {
                debug("failed to %s %d channels", type, channels.length);
              });
            }
          }
        } else {
          this.lastActiveSubscriber = this.subscriber;
        }
        for (const event of [
          "message",
          "messageBuffer",
          "smessage",
          "smessageBuffer"
        ]) {
          this.subscriber.on(event, (arg1, arg2) => {
            this.emitter.emit(event, arg1, arg2);
          });
        }
        for (const event of ["pmessage", "pmessageBuffer"]) {
          this.subscriber.on(event, (arg1, arg2, arg3) => {
            this.emitter.emit(event, arg1, arg2, arg3);
          });
        }
      }
    };
    exports.default = ClusterSubscriber;
  }
});

// node_modules/ioredis/built/cluster/ConnectionPool.js
var require_ConnectionPool = __commonJS({
  "node_modules/ioredis/built/cluster/ConnectionPool.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var events_1 = require("events");
    var utils_1 = require_utils2();
    var util_1 = require_util();
    var Redis_1 = require_Redis();
    var debug = (0, utils_1.Debug)("cluster:connectionPool");
    var ConnectionPool = class extends events_1.EventEmitter {
      constructor(redisOptions) {
        super();
        this.redisOptions = redisOptions;
        this.nodes = {
          all: {},
          master: {},
          slave: {}
        };
        this.specifiedOptions = {};
      }
      getNodes(role = "all") {
        const nodes = this.nodes[role];
        return Object.keys(nodes).map((key) => nodes[key]);
      }
      getInstanceByKey(key) {
        return this.nodes.all[key];
      }
      getSampleInstance(role) {
        const keys = Object.keys(this.nodes[role]);
        const sampleKey = (0, utils_1.sample)(keys);
        return this.nodes[role][sampleKey];
      }
      findOrCreate(node, readOnly = false) {
        const key = (0, util_1.getNodeKey)(node);
        readOnly = Boolean(readOnly);
        if (this.specifiedOptions[key]) {
          Object.assign(node, this.specifiedOptions[key]);
        } else {
          this.specifiedOptions[key] = node;
        }
        let redis2;
        if (this.nodes.all[key]) {
          redis2 = this.nodes.all[key];
          if (redis2.options.readOnly !== readOnly) {
            redis2.options.readOnly = readOnly;
            debug("Change role of %s to %s", key, readOnly ? "slave" : "master");
            redis2[readOnly ? "readonly" : "readwrite"]().catch(utils_1.noop);
            if (readOnly) {
              delete this.nodes.master[key];
              this.nodes.slave[key] = redis2;
            } else {
              delete this.nodes.slave[key];
              this.nodes.master[key] = redis2;
            }
          }
        } else {
          debug("Connecting to %s as %s", key, readOnly ? "slave" : "master");
          redis2 = new Redis_1.default((0, utils_1.defaults)({
            retryStrategy: null,
            enableOfflineQueue: true,
            readOnly
          }, node, this.redisOptions, { lazyConnect: true }));
          this.nodes.all[key] = redis2;
          this.nodes[readOnly ? "slave" : "master"][key] = redis2;
          redis2.once("end", () => {
            this.removeNode(key);
            this.emit("-node", redis2, key);
            if (!Object.keys(this.nodes.all).length) {
              this.emit("drain");
            }
          });
          this.emit("+node", redis2, key);
          redis2.on("error", function(error) {
            this.emit("nodeError", error, key);
          });
        }
        return redis2;
      }
      reset(nodes) {
        debug("Reset with %O", nodes);
        const newNodes = {};
        nodes.forEach((node) => {
          const key = (0, util_1.getNodeKey)(node);
          if (!(node.readOnly && newNodes[key])) {
            newNodes[key] = node;
          }
        });
        Object.keys(this.nodes.all).forEach((key) => {
          if (!newNodes[key]) {
            debug("Disconnect %s because the node does not hold any slot", key);
            this.nodes.all[key].disconnect();
            this.removeNode(key);
          }
        });
        Object.keys(newNodes).forEach((key) => {
          const node = newNodes[key];
          this.findOrCreate(node, node.readOnly);
        });
      }
      removeNode(key) {
        const { nodes } = this;
        if (nodes.all[key]) {
          debug("Remove %s from the pool", key);
          delete nodes.all[key];
        }
        delete nodes.master[key];
        delete nodes.slave[key];
      }
    };
    exports.default = ConnectionPool;
  }
});

// node_modules/denque/index.js
var require_denque = __commonJS({
  "node_modules/denque/index.js"(exports, module2) {
    "use strict";
    function Denque(array, options) {
      var options = options || {};
      this._capacity = options.capacity;
      this._head = 0;
      this._tail = 0;
      if (Array.isArray(array)) {
        this._fromArray(array);
      } else {
        this._capacityMask = 3;
        this._list = new Array(4);
      }
    }
    Denque.prototype.peekAt = function peekAt(index) {
      var i2 = index;
      if (i2 !== (i2 | 0)) {
        return void 0;
      }
      var len = this.size();
      if (i2 >= len || i2 < -len)
        return void 0;
      if (i2 < 0)
        i2 += len;
      i2 = this._head + i2 & this._capacityMask;
      return this._list[i2];
    };
    Denque.prototype.get = function get(i2) {
      return this.peekAt(i2);
    };
    Denque.prototype.peek = function peek() {
      if (this._head === this._tail)
        return void 0;
      return this._list[this._head];
    };
    Denque.prototype.peekFront = function peekFront() {
      return this.peek();
    };
    Denque.prototype.peekBack = function peekBack() {
      return this.peekAt(-1);
    };
    Object.defineProperty(Denque.prototype, "length", {
      get: function length() {
        return this.size();
      }
    });
    Denque.prototype.size = function size() {
      if (this._head === this._tail)
        return 0;
      if (this._head < this._tail)
        return this._tail - this._head;
      else
        return this._capacityMask + 1 - (this._head - this._tail);
    };
    Denque.prototype.unshift = function unshift(item) {
      if (arguments.length === 0)
        return this.size();
      var len = this._list.length;
      this._head = this._head - 1 + len & this._capacityMask;
      this._list[this._head] = item;
      if (this._tail === this._head)
        this._growArray();
      if (this._capacity && this.size() > this._capacity)
        this.pop();
      if (this._head < this._tail)
        return this._tail - this._head;
      else
        return this._capacityMask + 1 - (this._head - this._tail);
    };
    Denque.prototype.shift = function shift() {
      var head = this._head;
      if (head === this._tail)
        return void 0;
      var item = this._list[head];
      this._list[head] = void 0;
      this._head = head + 1 & this._capacityMask;
      if (head < 2 && this._tail > 1e4 && this._tail <= this._list.length >>> 2)
        this._shrinkArray();
      return item;
    };
    Denque.prototype.push = function push(item) {
      if (arguments.length === 0)
        return this.size();
      var tail = this._tail;
      this._list[tail] = item;
      this._tail = tail + 1 & this._capacityMask;
      if (this._tail === this._head) {
        this._growArray();
      }
      if (this._capacity && this.size() > this._capacity) {
        this.shift();
      }
      if (this._head < this._tail)
        return this._tail - this._head;
      else
        return this._capacityMask + 1 - (this._head - this._tail);
    };
    Denque.prototype.pop = function pop() {
      var tail = this._tail;
      if (tail === this._head)
        return void 0;
      var len = this._list.length;
      this._tail = tail - 1 + len & this._capacityMask;
      var item = this._list[this._tail];
      this._list[this._tail] = void 0;
      if (this._head < 2 && tail > 1e4 && tail <= len >>> 2)
        this._shrinkArray();
      return item;
    };
    Denque.prototype.removeOne = function removeOne(index) {
      var i2 = index;
      if (i2 !== (i2 | 0)) {
        return void 0;
      }
      if (this._head === this._tail)
        return void 0;
      var size = this.size();
      var len = this._list.length;
      if (i2 >= size || i2 < -size)
        return void 0;
      if (i2 < 0)
        i2 += size;
      i2 = this._head + i2 & this._capacityMask;
      var item = this._list[i2];
      var k;
      if (index < size / 2) {
        for (k = index; k > 0; k--) {
          this._list[i2] = this._list[i2 = i2 - 1 + len & this._capacityMask];
        }
        this._list[i2] = void 0;
        this._head = this._head + 1 + len & this._capacityMask;
      } else {
        for (k = size - 1 - index; k > 0; k--) {
          this._list[i2] = this._list[i2 = i2 + 1 + len & this._capacityMask];
        }
        this._list[i2] = void 0;
        this._tail = this._tail - 1 + len & this._capacityMask;
      }
      return item;
    };
    Denque.prototype.remove = function remove(index, count) {
      var i2 = index;
      var removed;
      var del_count = count;
      if (i2 !== (i2 | 0)) {
        return void 0;
      }
      if (this._head === this._tail)
        return void 0;
      var size = this.size();
      var len = this._list.length;
      if (i2 >= size || i2 < -size || count < 1)
        return void 0;
      if (i2 < 0)
        i2 += size;
      if (count === 1 || !count) {
        removed = new Array(1);
        removed[0] = this.removeOne(i2);
        return removed;
      }
      if (i2 === 0 && i2 + count >= size) {
        removed = this.toArray();
        this.clear();
        return removed;
      }
      if (i2 + count > size)
        count = size - i2;
      var k;
      removed = new Array(count);
      for (k = 0; k < count; k++) {
        removed[k] = this._list[this._head + i2 + k & this._capacityMask];
      }
      i2 = this._head + i2 & this._capacityMask;
      if (index + count === size) {
        this._tail = this._tail - count + len & this._capacityMask;
        for (k = count; k > 0; k--) {
          this._list[i2 = i2 + 1 + len & this._capacityMask] = void 0;
        }
        return removed;
      }
      if (index === 0) {
        this._head = this._head + count + len & this._capacityMask;
        for (k = count - 1; k > 0; k--) {
          this._list[i2 = i2 + 1 + len & this._capacityMask] = void 0;
        }
        return removed;
      }
      if (i2 < size / 2) {
        this._head = this._head + index + count + len & this._capacityMask;
        for (k = index; k > 0; k--) {
          this.unshift(this._list[i2 = i2 - 1 + len & this._capacityMask]);
        }
        i2 = this._head - 1 + len & this._capacityMask;
        while (del_count > 0) {
          this._list[i2 = i2 - 1 + len & this._capacityMask] = void 0;
          del_count--;
        }
        if (index < 0)
          this._tail = i2;
      } else {
        this._tail = i2;
        i2 = i2 + count + len & this._capacityMask;
        for (k = size - (count + index); k > 0; k--) {
          this.push(this._list[i2++]);
        }
        i2 = this._tail;
        while (del_count > 0) {
          this._list[i2 = i2 + 1 + len & this._capacityMask] = void 0;
          del_count--;
        }
      }
      if (this._head < 2 && this._tail > 1e4 && this._tail <= len >>> 2)
        this._shrinkArray();
      return removed;
    };
    Denque.prototype.splice = function splice(index, count) {
      var i2 = index;
      if (i2 !== (i2 | 0)) {
        return void 0;
      }
      var size = this.size();
      if (i2 < 0)
        i2 += size;
      if (i2 > size)
        return void 0;
      if (arguments.length > 2) {
        var k;
        var temp;
        var removed;
        var arg_len = arguments.length;
        var len = this._list.length;
        var arguments_index = 2;
        if (!size || i2 < size / 2) {
          temp = new Array(i2);
          for (k = 0; k < i2; k++) {
            temp[k] = this._list[this._head + k & this._capacityMask];
          }
          if (count === 0) {
            removed = [];
            if (i2 > 0) {
              this._head = this._head + i2 + len & this._capacityMask;
            }
          } else {
            removed = this.remove(i2, count);
            this._head = this._head + i2 + len & this._capacityMask;
          }
          while (arg_len > arguments_index) {
            this.unshift(arguments[--arg_len]);
          }
          for (k = i2; k > 0; k--) {
            this.unshift(temp[k - 1]);
          }
        } else {
          temp = new Array(size - (i2 + count));
          var leng = temp.length;
          for (k = 0; k < leng; k++) {
            temp[k] = this._list[this._head + i2 + count + k & this._capacityMask];
          }
          if (count === 0) {
            removed = [];
            if (i2 != size) {
              this._tail = this._head + i2 + len & this._capacityMask;
            }
          } else {
            removed = this.remove(i2, count);
            this._tail = this._tail - leng + len & this._capacityMask;
          }
          while (arguments_index < arg_len) {
            this.push(arguments[arguments_index++]);
          }
          for (k = 0; k < leng; k++) {
            this.push(temp[k]);
          }
        }
        return removed;
      } else {
        return this.remove(i2, count);
      }
    };
    Denque.prototype.clear = function clear() {
      this._list = new Array(this._list.length);
      this._head = 0;
      this._tail = 0;
    };
    Denque.prototype.isEmpty = function isEmpty() {
      return this._head === this._tail;
    };
    Denque.prototype.toArray = function toArray() {
      return this._copyArray(false);
    };
    Denque.prototype._fromArray = function _fromArray(array) {
      var length = array.length;
      var capacity = this._nextPowerOf2(length);
      this._list = new Array(capacity);
      this._capacityMask = capacity - 1;
      this._tail = length;
      for (var i2 = 0; i2 < length; i2++)
        this._list[i2] = array[i2];
    };
    Denque.prototype._copyArray = function _copyArray(fullCopy, size) {
      var src = this._list;
      var capacity = src.length;
      var length = this.length;
      size = size | length;
      if (size == length && this._head < this._tail) {
        return this._list.slice(this._head, this._tail);
      }
      var dest = new Array(size);
      var k = 0;
      var i2;
      if (fullCopy || this._head > this._tail) {
        for (i2 = this._head; i2 < capacity; i2++)
          dest[k++] = src[i2];
        for (i2 = 0; i2 < this._tail; i2++)
          dest[k++] = src[i2];
      } else {
        for (i2 = this._head; i2 < this._tail; i2++)
          dest[k++] = src[i2];
      }
      return dest;
    };
    Denque.prototype._growArray = function _growArray() {
      if (this._head != 0) {
        var newList = this._copyArray(true, this._list.length << 1);
        this._tail = this._list.length;
        this._head = 0;
        this._list = newList;
      } else {
        this._tail = this._list.length;
        this._list.length <<= 1;
      }
      this._capacityMask = this._capacityMask << 1 | 1;
    };
    Denque.prototype._shrinkArray = function _shrinkArray() {
      this._list.length >>>= 1;
      this._capacityMask >>>= 1;
    };
    Denque.prototype._nextPowerOf2 = function _nextPowerOf2(num) {
      var log2 = Math.log(num) / Math.log(2);
      var nextPow2 = 1 << log2 + 1;
      return Math.max(nextPow2, 4);
    };
    module2.exports = Denque;
  }
});

// node_modules/ioredis/built/cluster/DelayQueue.js
var require_DelayQueue = __commonJS({
  "node_modules/ioredis/built/cluster/DelayQueue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils2();
    var Deque = require_denque();
    var debug = (0, utils_1.Debug)("delayqueue");
    var DelayQueue = class {
      constructor() {
        this.queues = {};
        this.timeouts = {};
      }
      push(bucket, item, options) {
        const callback = options.callback || process.nextTick;
        if (!this.queues[bucket]) {
          this.queues[bucket] = new Deque();
        }
        const queue = this.queues[bucket];
        queue.push(item);
        if (!this.timeouts[bucket]) {
          this.timeouts[bucket] = setTimeout(() => {
            callback(() => {
              this.timeouts[bucket] = null;
              this.execute(bucket);
            });
          }, options.timeout);
        }
      }
      execute(bucket) {
        const queue = this.queues[bucket];
        if (!queue) {
          return;
        }
        const { length } = queue;
        if (!length) {
          return;
        }
        debug("send %d commands in %s queue", length, bucket);
        this.queues[bucket] = null;
        while (queue.length > 0) {
          queue.shift()();
        }
      }
    };
    exports.default = DelayQueue;
  }
});

// node_modules/ioredis/built/cluster/index.js
var require_cluster = __commonJS({
  "node_modules/ioredis/built/cluster/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var commands_1 = require_built();
    var events_1 = require("events");
    var redis_errors_1 = require_redis_errors();
    var standard_as_callback_1 = require_built2();
    var Command_1 = require_Command();
    var ClusterAllFailedError_1 = require_ClusterAllFailedError();
    var Redis_1 = require_Redis();
    var ScanStream_1 = require_ScanStream();
    var transaction_1 = require_transaction();
    var utils_1 = require_utils2();
    var applyMixin_1 = require_applyMixin();
    var Commander_1 = require_Commander();
    var ClusterOptions_1 = require_ClusterOptions();
    var ClusterSubscriber_1 = require_ClusterSubscriber();
    var ConnectionPool_1 = require_ConnectionPool();
    var DelayQueue_1 = require_DelayQueue();
    var util_1 = require_util();
    var Deque = require_denque();
    var debug = (0, utils_1.Debug)("cluster");
    var REJECT_OVERWRITTEN_COMMANDS = /* @__PURE__ */ new WeakSet();
    var Cluster = class extends Commander_1.default {
      constructor(startupNodes, options = {}) {
        super();
        this.slots = [];
        this._groupsIds = {};
        this._groupsBySlot = Array(16384);
        this.isCluster = true;
        this.retryAttempts = 0;
        this.delayQueue = new DelayQueue_1.default();
        this.offlineQueue = new Deque();
        this.isRefreshing = false;
        this._refreshSlotsCacheCallbacks = [];
        this._autoPipelines = /* @__PURE__ */ new Map();
        this._runningAutoPipelines = /* @__PURE__ */ new Set();
        this._readyDelayedCallbacks = [];
        this.connectionEpoch = 0;
        events_1.EventEmitter.call(this);
        this.startupNodes = startupNodes;
        this.options = (0, utils_1.defaults)({}, options, ClusterOptions_1.DEFAULT_CLUSTER_OPTIONS, this.options);
        if (this.options.redisOptions && this.options.redisOptions.keyPrefix && !this.options.keyPrefix) {
          this.options.keyPrefix = this.options.redisOptions.keyPrefix;
        }
        if (typeof this.options.scaleReads !== "function" && ["all", "master", "slave"].indexOf(this.options.scaleReads) === -1) {
          throw new Error('Invalid option scaleReads "' + this.options.scaleReads + '". Expected "all", "master", "slave" or a custom function');
        }
        this.connectionPool = new ConnectionPool_1.default(this.options.redisOptions);
        this.connectionPool.on("-node", (redis2, key) => {
          this.emit("-node", redis2);
        });
        this.connectionPool.on("+node", (redis2) => {
          this.emit("+node", redis2);
        });
        this.connectionPool.on("drain", () => {
          this.setStatus("close");
        });
        this.connectionPool.on("nodeError", (error, key) => {
          this.emit("node error", error, key);
        });
        this.subscriber = new ClusterSubscriber_1.default(this.connectionPool, this);
        if (this.options.scripts) {
          Object.entries(this.options.scripts).forEach(([name, definition]) => {
            this.defineCommand(name, definition);
          });
        }
        if (this.options.lazyConnect) {
          this.setStatus("wait");
        } else {
          this.connect().catch((err) => {
            debug("connecting failed: %s", err);
          });
        }
      }
      connect() {
        return new Promise((resolve, reject) => {
          if (this.status === "connecting" || this.status === "connect" || this.status === "ready") {
            reject(new Error("Redis is already connecting/connected"));
            return;
          }
          const epoch = ++this.connectionEpoch;
          this.setStatus("connecting");
          this.resolveStartupNodeHostnames().then((nodes) => {
            if (this.connectionEpoch !== epoch) {
              debug("discard connecting after resolving startup nodes because epoch not match: %d != %d", epoch, this.connectionEpoch);
              reject(new redis_errors_1.RedisError("Connection is discarded because a new connection is made"));
              return;
            }
            if (this.status !== "connecting") {
              debug("discard connecting after resolving startup nodes because the status changed to %s", this.status);
              reject(new redis_errors_1.RedisError("Connection is aborted"));
              return;
            }
            this.connectionPool.reset(nodes);
            const readyHandler = () => {
              this.setStatus("ready");
              this.retryAttempts = 0;
              this.executeOfflineCommands();
              this.resetNodesRefreshInterval();
              resolve();
            };
            let closeListener = void 0;
            const refreshListener = () => {
              this.invokeReadyDelayedCallbacks(void 0);
              this.removeListener("close", closeListener);
              this.manuallyClosing = false;
              this.setStatus("connect");
              if (this.options.enableReadyCheck) {
                this.readyCheck((err, fail) => {
                  if (err || fail) {
                    debug("Ready check failed (%s). Reconnecting...", err || fail);
                    if (this.status === "connect") {
                      this.disconnect(true);
                    }
                  } else {
                    readyHandler();
                  }
                });
              } else {
                readyHandler();
              }
            };
            closeListener = () => {
              const error = new Error("None of startup nodes is available");
              this.removeListener("refresh", refreshListener);
              this.invokeReadyDelayedCallbacks(error);
              reject(error);
            };
            this.once("refresh", refreshListener);
            this.once("close", closeListener);
            this.once("close", this.handleCloseEvent.bind(this));
            this.refreshSlotsCache((err) => {
              if (err && err.message === ClusterAllFailedError_1.default.defaultMessage) {
                Redis_1.default.prototype.silentEmit.call(this, "error", err);
                this.connectionPool.reset([]);
              }
            });
            this.subscriber.start();
          }).catch((err) => {
            this.setStatus("close");
            this.handleCloseEvent(err);
            this.invokeReadyDelayedCallbacks(err);
            reject(err);
          });
        });
      }
      disconnect(reconnect = false) {
        const status = this.status;
        this.setStatus("disconnecting");
        if (!reconnect) {
          this.manuallyClosing = true;
        }
        if (this.reconnectTimeout && !reconnect) {
          clearTimeout(this.reconnectTimeout);
          this.reconnectTimeout = null;
          debug("Canceled reconnecting attempts");
        }
        this.clearNodesRefreshInterval();
        this.subscriber.stop();
        if (status === "wait") {
          this.setStatus("close");
          this.handleCloseEvent();
        } else {
          this.connectionPool.reset([]);
        }
      }
      quit(callback) {
        const status = this.status;
        this.setStatus("disconnecting");
        this.manuallyClosing = true;
        if (this.reconnectTimeout) {
          clearTimeout(this.reconnectTimeout);
          this.reconnectTimeout = null;
        }
        this.clearNodesRefreshInterval();
        this.subscriber.stop();
        if (status === "wait") {
          const ret = (0, standard_as_callback_1.default)(Promise.resolve("OK"), callback);
          setImmediate(function() {
            this.setStatus("close");
            this.handleCloseEvent();
          }.bind(this));
          return ret;
        }
        return (0, standard_as_callback_1.default)(Promise.all(this.nodes().map((node) => node.quit().catch((err) => {
          if (err.message === utils_1.CONNECTION_CLOSED_ERROR_MSG) {
            return "OK";
          }
          throw err;
        }))).then(() => "OK"), callback);
      }
      duplicate(overrideStartupNodes = [], overrideOptions = {}) {
        const startupNodes = overrideStartupNodes.length > 0 ? overrideStartupNodes : this.startupNodes.slice(0);
        const options = Object.assign({}, this.options, overrideOptions);
        return new Cluster(startupNodes, options);
      }
      nodes(role = "all") {
        if (role !== "all" && role !== "master" && role !== "slave") {
          throw new Error('Invalid role "' + role + '". Expected "all", "master" or "slave"');
        }
        return this.connectionPool.getNodes(role);
      }
      delayUntilReady(callback) {
        this._readyDelayedCallbacks.push(callback);
      }
      get autoPipelineQueueSize() {
        let queued = 0;
        for (const pipeline2 of this._autoPipelines.values()) {
          queued += pipeline2.length;
        }
        return queued;
      }
      refreshSlotsCache(callback) {
        if (callback) {
          this._refreshSlotsCacheCallbacks.push(callback);
        }
        if (this.isRefreshing) {
          return;
        }
        this.isRefreshing = true;
        const _this = this;
        const wrapper = (error) => {
          this.isRefreshing = false;
          for (const callback2 of this._refreshSlotsCacheCallbacks) {
            callback2(error);
          }
          this._refreshSlotsCacheCallbacks = [];
        };
        const nodes = (0, utils_1.shuffle)(this.connectionPool.getNodes());
        let lastNodeError = null;
        function tryNode(index) {
          if (index === nodes.length) {
            const error = new ClusterAllFailedError_1.default(ClusterAllFailedError_1.default.defaultMessage, lastNodeError);
            return wrapper(error);
          }
          const node = nodes[index];
          const key = `${node.options.host}:${node.options.port}`;
          debug("getting slot cache from %s", key);
          _this.getInfoFromNode(node, function(err) {
            switch (_this.status) {
              case "close":
              case "end":
                return wrapper(new Error("Cluster is disconnected."));
              case "disconnecting":
                return wrapper(new Error("Cluster is disconnecting."));
            }
            if (err) {
              _this.emit("node error", err, key);
              lastNodeError = err;
              tryNode(index + 1);
            } else {
              _this.emit("refresh");
              wrapper();
            }
          });
        }
        tryNode(0);
      }
      sendCommand(command, stream, node) {
        if (this.status === "wait") {
          this.connect().catch(utils_1.noop);
        }
        if (this.status === "end") {
          command.reject(new Error(utils_1.CONNECTION_CLOSED_ERROR_MSG));
          return command.promise;
        }
        let to = this.options.scaleReads;
        if (to !== "master") {
          const isCommandReadOnly = command.isReadOnly || (0, commands_1.exists)(command.name) && (0, commands_1.hasFlag)(command.name, "readonly");
          if (!isCommandReadOnly) {
            to = "master";
          }
        }
        let targetSlot = node ? node.slot : command.getSlot();
        const ttl = {};
        const _this = this;
        if (!node && !REJECT_OVERWRITTEN_COMMANDS.has(command)) {
          REJECT_OVERWRITTEN_COMMANDS.add(command);
          const reject = command.reject;
          command.reject = function(err) {
            const partialTry = tryConnection.bind(null, true);
            _this.handleError(err, ttl, {
              moved: function(slot, key) {
                debug("command %s is moved to %s", command.name, key);
                targetSlot = Number(slot);
                if (_this.slots[slot]) {
                  _this.slots[slot][0] = key;
                } else {
                  _this.slots[slot] = [key];
                }
                _this._groupsBySlot[slot] = _this._groupsIds[_this.slots[slot].join(";")];
                _this.connectionPool.findOrCreate(_this.natMapper(key));
                tryConnection();
                debug("refreshing slot caches... (triggered by MOVED error)");
                _this.refreshSlotsCache();
              },
              ask: function(slot, key) {
                debug("command %s is required to ask %s:%s", command.name, key);
                const mapped = _this.natMapper(key);
                _this.connectionPool.findOrCreate(mapped);
                tryConnection(false, `${mapped.host}:${mapped.port}`);
              },
              tryagain: partialTry,
              clusterDown: partialTry,
              connectionClosed: partialTry,
              maxRedirections: function(redirectionError) {
                reject.call(command, redirectionError);
              },
              defaults: function() {
                reject.call(command, err);
              }
            });
          };
        }
        tryConnection();
        function tryConnection(random, asking) {
          if (_this.status === "end") {
            command.reject(new redis_errors_1.AbortError("Cluster is ended."));
            return;
          }
          let redis2;
          if (_this.status === "ready" || command.name === "cluster") {
            if (node && node.redis) {
              redis2 = node.redis;
            } else if (Command_1.default.checkFlag("ENTER_SUBSCRIBER_MODE", command.name) || Command_1.default.checkFlag("EXIT_SUBSCRIBER_MODE", command.name)) {
              redis2 = _this.subscriber.getInstance();
              if (!redis2) {
                command.reject(new redis_errors_1.AbortError("No subscriber for the cluster"));
                return;
              }
            } else {
              if (!random) {
                if (typeof targetSlot === "number" && _this.slots[targetSlot]) {
                  const nodeKeys = _this.slots[targetSlot];
                  if (typeof to === "function") {
                    const nodes = nodeKeys.map(function(key) {
                      return _this.connectionPool.getInstanceByKey(key);
                    });
                    redis2 = to(nodes, command);
                    if (Array.isArray(redis2)) {
                      redis2 = (0, utils_1.sample)(redis2);
                    }
                    if (!redis2) {
                      redis2 = nodes[0];
                    }
                  } else {
                    let key;
                    if (to === "all") {
                      key = (0, utils_1.sample)(nodeKeys);
                    } else if (to === "slave" && nodeKeys.length > 1) {
                      key = (0, utils_1.sample)(nodeKeys, 1);
                    } else {
                      key = nodeKeys[0];
                    }
                    redis2 = _this.connectionPool.getInstanceByKey(key);
                  }
                }
                if (asking) {
                  redis2 = _this.connectionPool.getInstanceByKey(asking);
                  redis2.asking();
                }
              }
              if (!redis2) {
                redis2 = (typeof to === "function" ? null : _this.connectionPool.getSampleInstance(to)) || _this.connectionPool.getSampleInstance("all");
              }
            }
            if (node && !node.redis) {
              node.redis = redis2;
            }
          }
          if (redis2) {
            redis2.sendCommand(command, stream);
          } else if (_this.options.enableOfflineQueue) {
            _this.offlineQueue.push({
              command,
              stream,
              node
            });
          } else {
            command.reject(new Error("Cluster isn't ready and enableOfflineQueue options is false"));
          }
        }
        return command.promise;
      }
      sscanStream(key, options) {
        return this.createScanStream("sscan", { key, options });
      }
      sscanBufferStream(key, options) {
        return this.createScanStream("sscanBuffer", { key, options });
      }
      hscanStream(key, options) {
        return this.createScanStream("hscan", { key, options });
      }
      hscanBufferStream(key, options) {
        return this.createScanStream("hscanBuffer", { key, options });
      }
      zscanStream(key, options) {
        return this.createScanStream("zscan", { key, options });
      }
      zscanBufferStream(key, options) {
        return this.createScanStream("zscanBuffer", { key, options });
      }
      handleError(error, ttl, handlers) {
        if (typeof ttl.value === "undefined") {
          ttl.value = this.options.maxRedirections;
        } else {
          ttl.value -= 1;
        }
        if (ttl.value <= 0) {
          handlers.maxRedirections(new Error("Too many Cluster redirections. Last error: " + error));
          return;
        }
        const errv = error.message.split(" ");
        if (errv[0] === "MOVED") {
          const timeout = this.options.retryDelayOnMoved;
          if (timeout && typeof timeout === "number") {
            this.delayQueue.push("moved", handlers.moved.bind(null, errv[1], errv[2]), { timeout });
          } else {
            handlers.moved(errv[1], errv[2]);
          }
        } else if (errv[0] === "ASK") {
          handlers.ask(errv[1], errv[2]);
        } else if (errv[0] === "TRYAGAIN") {
          this.delayQueue.push("tryagain", handlers.tryagain, {
            timeout: this.options.retryDelayOnTryAgain
          });
        } else if (errv[0] === "CLUSTERDOWN" && this.options.retryDelayOnClusterDown > 0) {
          this.delayQueue.push("clusterdown", handlers.connectionClosed, {
            timeout: this.options.retryDelayOnClusterDown,
            callback: this.refreshSlotsCache.bind(this)
          });
        } else if (error.message === utils_1.CONNECTION_CLOSED_ERROR_MSG && this.options.retryDelayOnFailover > 0 && this.status === "ready") {
          this.delayQueue.push("failover", handlers.connectionClosed, {
            timeout: this.options.retryDelayOnFailover,
            callback: this.refreshSlotsCache.bind(this)
          });
        } else {
          handlers.defaults();
        }
      }
      resetOfflineQueue() {
        this.offlineQueue = new Deque();
      }
      clearNodesRefreshInterval() {
        if (this.slotsTimer) {
          clearTimeout(this.slotsTimer);
          this.slotsTimer = null;
        }
      }
      resetNodesRefreshInterval() {
        if (this.slotsTimer || !this.options.slotsRefreshInterval) {
          return;
        }
        const nextRound = () => {
          this.slotsTimer = setTimeout(() => {
            debug('refreshing slot caches... (triggered by "slotsRefreshInterval" option)');
            this.refreshSlotsCache(() => {
              nextRound();
            });
          }, this.options.slotsRefreshInterval);
        };
        nextRound();
      }
      setStatus(status) {
        debug("status: %s -> %s", this.status || "[empty]", status);
        this.status = status;
        process.nextTick(() => {
          this.emit(status);
        });
      }
      handleCloseEvent(reason) {
        if (reason) {
          debug("closed because %s", reason);
        }
        let retryDelay;
        if (!this.manuallyClosing && typeof this.options.clusterRetryStrategy === "function") {
          retryDelay = this.options.clusterRetryStrategy.call(this, ++this.retryAttempts, reason);
        }
        if (typeof retryDelay === "number") {
          this.setStatus("reconnecting");
          this.reconnectTimeout = setTimeout(() => {
            this.reconnectTimeout = null;
            debug("Cluster is disconnected. Retrying after %dms", retryDelay);
            this.connect().catch(function(err) {
              debug("Got error %s when reconnecting. Ignoring...", err);
            });
          }, retryDelay);
        } else {
          this.setStatus("end");
          this.flushQueue(new Error("None of startup nodes is available"));
        }
      }
      flushQueue(error) {
        let item;
        while (item = this.offlineQueue.shift()) {
          item.command.reject(error);
        }
      }
      executeOfflineCommands() {
        if (this.offlineQueue.length) {
          debug("send %d commands in offline queue", this.offlineQueue.length);
          const offlineQueue = this.offlineQueue;
          this.resetOfflineQueue();
          let item;
          while (item = offlineQueue.shift()) {
            this.sendCommand(item.command, item.stream, item.node);
          }
        }
      }
      natMapper(nodeKey) {
        if (this.options.natMap && typeof this.options.natMap === "object") {
          const key = typeof nodeKey === "string" ? nodeKey : `${nodeKey.host}:${nodeKey.port}`;
          const mapped = this.options.natMap[key];
          if (mapped) {
            debug("NAT mapping %s -> %O", key, mapped);
            return Object.assign({}, mapped);
          }
        }
        return typeof nodeKey === "string" ? (0, util_1.nodeKeyToRedisOptions)(nodeKey) : nodeKey;
      }
      getInfoFromNode(redis2, callback) {
        if (!redis2) {
          return callback(new Error("Node is disconnected"));
        }
        const duplicatedConnection = redis2.duplicate({
          enableOfflineQueue: true,
          enableReadyCheck: false,
          retryStrategy: null,
          connectionName: (0, util_1.getConnectionName)("refresher", this.options.redisOptions && this.options.redisOptions.connectionName)
        });
        duplicatedConnection.on("error", utils_1.noop);
        duplicatedConnection.cluster("SLOTS", (0, utils_1.timeout)((err, result) => {
          duplicatedConnection.disconnect();
          if (err) {
            return callback(err);
          }
          if (this.status === "disconnecting" || this.status === "close" || this.status === "end") {
            debug("ignore CLUSTER.SLOTS results (count: %d) since cluster status is %s", result.length, this.status);
            callback();
            return;
          }
          const nodes = [];
          debug("cluster slots result count: %d", result.length);
          for (let i2 = 0; i2 < result.length; ++i2) {
            const items = result[i2];
            const slotRangeStart = items[0];
            const slotRangeEnd = items[1];
            const keys = [];
            for (let j2 = 2; j2 < items.length; j2++) {
              if (!items[j2][0]) {
                continue;
              }
              const node = this.natMapper({
                host: items[j2][0],
                port: items[j2][1]
              });
              node.readOnly = j2 !== 2;
              nodes.push(node);
              keys.push(node.host + ":" + node.port);
            }
            debug("cluster slots result [%d]: slots %d~%d served by %s", i2, slotRangeStart, slotRangeEnd, keys);
            for (let slot = slotRangeStart; slot <= slotRangeEnd; slot++) {
              this.slots[slot] = keys;
            }
          }
          this._groupsIds = /* @__PURE__ */ Object.create(null);
          let j = 0;
          for (let i2 = 0; i2 < 16384; i2++) {
            const target = (this.slots[i2] || []).join(";");
            if (!target.length) {
              this._groupsBySlot[i2] = void 0;
              continue;
            }
            if (!this._groupsIds[target]) {
              this._groupsIds[target] = ++j;
            }
            this._groupsBySlot[i2] = this._groupsIds[target];
          }
          this.connectionPool.reset(nodes);
          callback();
        }, this.options.slotsRefreshTimeout));
      }
      invokeReadyDelayedCallbacks(err) {
        for (const c of this._readyDelayedCallbacks) {
          process.nextTick(c, err);
        }
        this._readyDelayedCallbacks = [];
      }
      readyCheck(callback) {
        this.cluster("INFO", (err, res) => {
          if (err) {
            return callback(err);
          }
          if (typeof res !== "string") {
            return callback();
          }
          let state;
          const lines = res.split("\r\n");
          for (let i2 = 0; i2 < lines.length; ++i2) {
            const parts = lines[i2].split(":");
            if (parts[0] === "cluster_state") {
              state = parts[1];
              break;
            }
          }
          if (state === "fail") {
            debug("cluster state not ok (%s)", state);
            callback(null, state);
          } else {
            callback();
          }
        });
      }
      resolveSrv(hostname) {
        return new Promise((resolve, reject) => {
          this.options.resolveSrv(hostname, (err, records) => {
            if (err) {
              return reject(err);
            }
            const self2 = this, groupedRecords = (0, util_1.groupSrvRecords)(records), sortedKeys = Object.keys(groupedRecords).sort((a, b) => parseInt(a) - parseInt(b));
            function tryFirstOne(err2) {
              if (!sortedKeys.length) {
                return reject(err2);
              }
              const key = sortedKeys[0], group = groupedRecords[key], record = (0, util_1.weightSrvRecords)(group);
              if (!group.records.length) {
                sortedKeys.shift();
              }
              self2.dnsLookup(record.name).then((host) => resolve({
                host,
                port: record.port
              }), tryFirstOne);
            }
            tryFirstOne();
          });
        });
      }
      dnsLookup(hostname) {
        return new Promise((resolve, reject) => {
          this.options.dnsLookup(hostname, (err, address) => {
            if (err) {
              debug("failed to resolve hostname %s to IP: %s", hostname, err.message);
              reject(err);
            } else {
              debug("resolved hostname %s to IP %s", hostname, address);
              resolve(address);
            }
          });
        });
      }
      async resolveStartupNodeHostnames() {
        if (!Array.isArray(this.startupNodes) || this.startupNodes.length === 0) {
          throw new Error("`startupNodes` should contain at least one node.");
        }
        const startupNodes = (0, util_1.normalizeNodeOptions)(this.startupNodes);
        const hostnames = (0, util_1.getUniqueHostnamesFromOptions)(startupNodes);
        if (hostnames.length === 0) {
          return startupNodes;
        }
        const configs = await Promise.all(hostnames.map((this.options.useSRVRecords ? this.resolveSrv : this.dnsLookup).bind(this)));
        const hostnameToConfig = (0, utils_1.zipMap)(hostnames, configs);
        return startupNodes.map((node) => {
          const config = hostnameToConfig.get(node.host);
          if (!config) {
            return node;
          }
          if (this.options.useSRVRecords) {
            return Object.assign({}, node, config);
          }
          return Object.assign({}, node, { host: config });
        });
      }
      createScanStream(command, { key, options = {} }) {
        return new ScanStream_1.default({
          objectMode: true,
          key,
          redis: this,
          command,
          ...options
        });
      }
    };
    (0, applyMixin_1.default)(Cluster, events_1.EventEmitter);
    (0, transaction_1.addTransactionSupport)(Cluster.prototype);
    exports.default = Cluster;
  }
});

// node_modules/ioredis/built/connectors/AbstractConnector.js
var require_AbstractConnector = __commonJS({
  "node_modules/ioredis/built/connectors/AbstractConnector.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils2();
    var debug = (0, utils_1.Debug)("AbstractConnector");
    var AbstractConnector = class {
      constructor(disconnectTimeout) {
        this.connecting = false;
        this.disconnectTimeout = disconnectTimeout;
      }
      check(info) {
        return true;
      }
      disconnect() {
        this.connecting = false;
        if (this.stream) {
          const stream = this.stream;
          const timeout = setTimeout(() => {
            debug("stream %s:%s still open, destroying it", stream.remoteAddress, stream.remotePort);
            stream.destroy();
          }, this.disconnectTimeout);
          stream.on("close", () => clearTimeout(timeout));
          stream.end();
        }
      }
    };
    exports.default = AbstractConnector;
  }
});

// node_modules/ioredis/built/connectors/StandaloneConnector.js
var require_StandaloneConnector = __commonJS({
  "node_modules/ioredis/built/connectors/StandaloneConnector.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var net_1 = require("net");
    var tls_1 = require("tls");
    var utils_1 = require_utils2();
    var AbstractConnector_1 = require_AbstractConnector();
    var StandaloneConnector = class extends AbstractConnector_1.default {
      constructor(options) {
        super(options.disconnectTimeout);
        this.options = options;
      }
      connect(_) {
        const { options } = this;
        this.connecting = true;
        let connectionOptions;
        if ("path" in options && options.path) {
          connectionOptions = {
            path: options.path
          };
        } else {
          connectionOptions = {};
          if ("port" in options && options.port != null) {
            connectionOptions.port = options.port;
          }
          if ("host" in options && options.host != null) {
            connectionOptions.host = options.host;
          }
          if ("family" in options && options.family != null) {
            connectionOptions.family = options.family;
          }
        }
        if (options.tls) {
          Object.assign(connectionOptions, options.tls);
        }
        return new Promise((resolve, reject) => {
          process.nextTick(() => {
            if (!this.connecting) {
              reject(new Error(utils_1.CONNECTION_CLOSED_ERROR_MSG));
              return;
            }
            try {
              if (options.tls) {
                this.stream = (0, tls_1.connect)(connectionOptions);
              } else {
                this.stream = (0, net_1.createConnection)(connectionOptions);
              }
            } catch (err) {
              reject(err);
              return;
            }
            this.stream.once("error", (err) => {
              this.firstError = err;
            });
            resolve(this.stream);
          });
        });
      }
    };
    exports.default = StandaloneConnector;
  }
});

// node_modules/ioredis/built/connectors/SentinelConnector/SentinelIterator.js
var require_SentinelIterator = __commonJS({
  "node_modules/ioredis/built/connectors/SentinelConnector/SentinelIterator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function isSentinelEql(a, b) {
      return (a.host || "127.0.0.1") === (b.host || "127.0.0.1") && (a.port || 26379) === (b.port || 26379);
    }
    var SentinelIterator = class {
      constructor(sentinels) {
        this.cursor = 0;
        this.sentinels = sentinels.slice(0);
      }
      next() {
        const done = this.cursor >= this.sentinels.length;
        return { done, value: done ? void 0 : this.sentinels[this.cursor++] };
      }
      reset(moveCurrentEndpointToFirst) {
        if (moveCurrentEndpointToFirst && this.sentinels.length > 1 && this.cursor !== 1) {
          this.sentinels.unshift(...this.sentinels.splice(this.cursor - 1));
        }
        this.cursor = 0;
      }
      add(sentinel) {
        for (let i2 = 0; i2 < this.sentinels.length; i2++) {
          if (isSentinelEql(sentinel, this.sentinels[i2])) {
            return false;
          }
        }
        this.sentinels.push(sentinel);
        return true;
      }
      toString() {
        return `${JSON.stringify(this.sentinels)} @${this.cursor}`;
      }
    };
    exports.default = SentinelIterator;
  }
});

// node_modules/ioredis/built/connectors/SentinelConnector/FailoverDetector.js
var require_FailoverDetector = __commonJS({
  "node_modules/ioredis/built/connectors/SentinelConnector/FailoverDetector.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FailoverDetector = void 0;
    var utils_1 = require_utils2();
    var debug = (0, utils_1.Debug)("FailoverDetector");
    var CHANNEL_NAME = "+switch-master";
    var FailoverDetector = class {
      constructor(connector, sentinels) {
        this.isDisconnected = false;
        this.connector = connector;
        this.sentinels = sentinels;
      }
      cleanup() {
        this.isDisconnected = true;
        for (const sentinel of this.sentinels) {
          sentinel.client.disconnect();
        }
      }
      async subscribe() {
        debug("Starting FailoverDetector");
        const promises = [];
        for (const sentinel of this.sentinels) {
          const promise = sentinel.client.subscribe(CHANNEL_NAME).catch((err) => {
            debug("Failed to subscribe to failover messages on sentinel %s:%s (%s)", sentinel.address.host || "127.0.0.1", sentinel.address.port || 26739, err.message);
          });
          promises.push(promise);
          sentinel.client.on("message", (channel) => {
            if (!this.isDisconnected && channel === CHANNEL_NAME) {
              this.disconnect();
            }
          });
        }
        await Promise.all(promises);
      }
      disconnect() {
        this.isDisconnected = true;
        debug("Failover detected, disconnecting");
        this.connector.disconnect();
      }
    };
    exports.FailoverDetector = FailoverDetector;
  }
});

// node_modules/ioredis/built/connectors/SentinelConnector/index.js
var require_SentinelConnector = __commonJS({
  "node_modules/ioredis/built/connectors/SentinelConnector/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SentinelIterator = void 0;
    var net_1 = require("net");
    var utils_1 = require_utils2();
    var tls_1 = require("tls");
    var SentinelIterator_1 = require_SentinelIterator();
    exports.SentinelIterator = SentinelIterator_1.default;
    var AbstractConnector_1 = require_AbstractConnector();
    var Redis_1 = require_Redis();
    var FailoverDetector_1 = require_FailoverDetector();
    var debug = (0, utils_1.Debug)("SentinelConnector");
    var SentinelConnector = class extends AbstractConnector_1.default {
      constructor(options) {
        super(options.disconnectTimeout);
        this.options = options;
        this.emitter = null;
        this.failoverDetector = null;
        if (!this.options.sentinels.length) {
          throw new Error("Requires at least one sentinel to connect to.");
        }
        if (!this.options.name) {
          throw new Error("Requires the name of master.");
        }
        this.sentinelIterator = new SentinelIterator_1.default(this.options.sentinels);
      }
      check(info) {
        const roleMatches = !info.role || this.options.role === info.role;
        if (!roleMatches) {
          debug("role invalid, expected %s, but got %s", this.options.role, info.role);
          this.sentinelIterator.next();
          this.sentinelIterator.next();
          this.sentinelIterator.reset(true);
        }
        return roleMatches;
      }
      disconnect() {
        super.disconnect();
        if (this.failoverDetector) {
          this.failoverDetector.cleanup();
        }
      }
      connect(eventEmitter) {
        this.connecting = true;
        this.retryAttempts = 0;
        let lastError;
        const connectToNext = async () => {
          const endpoint = this.sentinelIterator.next();
          if (endpoint.done) {
            this.sentinelIterator.reset(false);
            const retryDelay = typeof this.options.sentinelRetryStrategy === "function" ? this.options.sentinelRetryStrategy(++this.retryAttempts) : null;
            let errorMsg = typeof retryDelay !== "number" ? "All sentinels are unreachable and retry is disabled." : `All sentinels are unreachable. Retrying from scratch after ${retryDelay}ms.`;
            if (lastError) {
              errorMsg += ` Last error: ${lastError.message}`;
            }
            debug(errorMsg);
            const error = new Error(errorMsg);
            if (typeof retryDelay === "number") {
              eventEmitter("error", error);
              await new Promise((resolve) => setTimeout(resolve, retryDelay));
              return connectToNext();
            } else {
              throw error;
            }
          }
          let resolved = null;
          let err = null;
          try {
            resolved = await this.resolve(endpoint.value);
          } catch (error) {
            err = error;
          }
          if (!this.connecting) {
            throw new Error(utils_1.CONNECTION_CLOSED_ERROR_MSG);
          }
          const endpointAddress = endpoint.value.host + ":" + endpoint.value.port;
          if (resolved) {
            debug("resolved: %s:%s from sentinel %s", resolved.host, resolved.port, endpointAddress);
            if (this.options.enableTLSForSentinelMode && this.options.tls) {
              Object.assign(resolved, this.options.tls);
              this.stream = (0, tls_1.connect)(resolved);
              this.stream.once("secureConnect", this.initFailoverDetector.bind(this));
            } else {
              this.stream = (0, net_1.createConnection)(resolved);
              this.stream.once("connect", this.initFailoverDetector.bind(this));
            }
            this.stream.once("error", (err2) => {
              this.firstError = err2;
            });
            return this.stream;
          } else {
            const errorMsg = err ? "failed to connect to sentinel " + endpointAddress + " because " + err.message : "connected to sentinel " + endpointAddress + " successfully, but got an invalid reply: " + resolved;
            debug(errorMsg);
            eventEmitter("sentinelError", new Error(errorMsg));
            if (err) {
              lastError = err;
            }
            return connectToNext();
          }
        };
        return connectToNext();
      }
      async updateSentinels(client) {
        if (!this.options.updateSentinels) {
          return;
        }
        const result = await client.sentinel("sentinels", this.options.name);
        if (!Array.isArray(result)) {
          return;
        }
        result.map(utils_1.packObject).forEach((sentinel) => {
          const flags = sentinel.flags ? sentinel.flags.split(",") : [];
          if (flags.indexOf("disconnected") === -1 && sentinel.ip && sentinel.port) {
            const endpoint = this.sentinelNatResolve(addressResponseToAddress(sentinel));
            if (this.sentinelIterator.add(endpoint)) {
              debug("adding sentinel %s:%s", endpoint.host, endpoint.port);
            }
          }
        });
        debug("Updated internal sentinels: %s", this.sentinelIterator);
      }
      async resolveMaster(client) {
        const result = await client.sentinel("get-master-addr-by-name", this.options.name);
        await this.updateSentinels(client);
        return this.sentinelNatResolve(Array.isArray(result) ? { host: result[0], port: Number(result[1]) } : null);
      }
      async resolveSlave(client) {
        const result = await client.sentinel("slaves", this.options.name);
        if (!Array.isArray(result)) {
          return null;
        }
        const availableSlaves = result.map(utils_1.packObject).filter((slave) => slave.flags && !slave.flags.match(/(disconnected|s_down|o_down)/));
        return this.sentinelNatResolve(selectPreferredSentinel(availableSlaves, this.options.preferredSlaves));
      }
      sentinelNatResolve(item) {
        if (!item || !this.options.natMap)
          return item;
        return this.options.natMap[`${item.host}:${item.port}`] || item;
      }
      connectToSentinel(endpoint, options) {
        const redis2 = new Redis_1.default({
          port: endpoint.port || 26379,
          host: endpoint.host,
          username: this.options.sentinelUsername || null,
          password: this.options.sentinelPassword || null,
          family: endpoint.family || ("path" in this.options && this.options.path ? void 0 : this.options.family),
          tls: this.options.sentinelTLS,
          retryStrategy: null,
          enableReadyCheck: false,
          connectTimeout: this.options.connectTimeout,
          commandTimeout: this.options.sentinelCommandTimeout,
          ...options
        });
        return redis2;
      }
      async resolve(endpoint) {
        const client = this.connectToSentinel(endpoint);
        client.on("error", noop2);
        try {
          if (this.options.role === "slave") {
            return await this.resolveSlave(client);
          } else {
            return await this.resolveMaster(client);
          }
        } finally {
          client.disconnect();
        }
      }
      async initFailoverDetector() {
        var _a;
        if (!this.options.failoverDetector) {
          return;
        }
        this.sentinelIterator.reset(true);
        const sentinels = [];
        while (sentinels.length < this.options.sentinelMaxConnections) {
          const { done, value } = this.sentinelIterator.next();
          if (done) {
            break;
          }
          const client = this.connectToSentinel(value, {
            lazyConnect: true,
            retryStrategy: this.options.sentinelReconnectStrategy
          });
          client.on("reconnecting", () => {
            var _a2;
            (_a2 = this.emitter) === null || _a2 === void 0 ? void 0 : _a2.emit("sentinelReconnecting");
          });
          sentinels.push({ address: value, client });
        }
        this.sentinelIterator.reset(false);
        if (this.failoverDetector) {
          this.failoverDetector.cleanup();
        }
        this.failoverDetector = new FailoverDetector_1.FailoverDetector(this, sentinels);
        await this.failoverDetector.subscribe();
        (_a = this.emitter) === null || _a === void 0 ? void 0 : _a.emit("failoverSubscribed");
      }
    };
    exports.default = SentinelConnector;
    function selectPreferredSentinel(availableSlaves, preferredSlaves) {
      if (availableSlaves.length === 0) {
        return null;
      }
      let selectedSlave;
      if (typeof preferredSlaves === "function") {
        selectedSlave = preferredSlaves(availableSlaves);
      } else if (preferredSlaves !== null && typeof preferredSlaves === "object") {
        const preferredSlavesArray = Array.isArray(preferredSlaves) ? preferredSlaves : [preferredSlaves];
        preferredSlavesArray.sort((a, b) => {
          if (!a.prio) {
            a.prio = 1;
          }
          if (!b.prio) {
            b.prio = 1;
          }
          if (a.prio < b.prio) {
            return -1;
          }
          if (a.prio > b.prio) {
            return 1;
          }
          return 0;
        });
        for (let p = 0; p < preferredSlavesArray.length; p++) {
          for (let a = 0; a < availableSlaves.length; a++) {
            const slave = availableSlaves[a];
            if (slave.ip === preferredSlavesArray[p].ip) {
              if (slave.port === preferredSlavesArray[p].port) {
                selectedSlave = slave;
                break;
              }
            }
          }
          if (selectedSlave) {
            break;
          }
        }
      }
      if (!selectedSlave) {
        selectedSlave = (0, utils_1.sample)(availableSlaves);
      }
      return addressResponseToAddress(selectedSlave);
    }
    function addressResponseToAddress(input) {
      return { host: input.ip, port: Number(input.port) };
    }
    function noop2() {
    }
  }
});

// node_modules/ioredis/built/connectors/index.js
var require_connectors = __commonJS({
  "node_modules/ioredis/built/connectors/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SentinelConnector = exports.StandaloneConnector = void 0;
    var StandaloneConnector_1 = require_StandaloneConnector();
    exports.StandaloneConnector = StandaloneConnector_1.default;
    var SentinelConnector_1 = require_SentinelConnector();
    exports.SentinelConnector = SentinelConnector_1.default;
  }
});

// node_modules/ioredis/built/errors/MaxRetriesPerRequestError.js
var require_MaxRetriesPerRequestError = __commonJS({
  "node_modules/ioredis/built/errors/MaxRetriesPerRequestError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var redis_errors_1 = require_redis_errors();
    var MaxRetriesPerRequestError = class extends redis_errors_1.AbortError {
      constructor(maxRetriesPerRequest) {
        const message = `Reached the max retries per request limit (which is ${maxRetriesPerRequest}). Refer to "maxRetriesPerRequest" option for details.`;
        super(message);
        Error.captureStackTrace(this, this.constructor);
      }
      get name() {
        return this.constructor.name;
      }
    };
    exports.default = MaxRetriesPerRequestError;
  }
});

// node_modules/ioredis/built/errors/index.js
var require_errors = __commonJS({
  "node_modules/ioredis/built/errors/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MaxRetriesPerRequestError = void 0;
    var MaxRetriesPerRequestError_1 = require_MaxRetriesPerRequestError();
    exports.MaxRetriesPerRequestError = MaxRetriesPerRequestError_1.default;
  }
});

// node_modules/redis-parser/lib/parser.js
var require_parser2 = __commonJS({
  "node_modules/redis-parser/lib/parser.js"(exports, module2) {
    "use strict";
    var Buffer4 = require("buffer").Buffer;
    var StringDecoder = require("string_decoder").StringDecoder;
    var decoder = new StringDecoder();
    var errors = require_redis_errors();
    var ReplyError = errors.ReplyError;
    var ParserError = errors.ParserError;
    var bufferPool = Buffer4.allocUnsafe(32 * 1024);
    var bufferOffset = 0;
    var interval = null;
    var counter = 0;
    var notDecreased = 0;
    function parseSimpleNumbers(parser) {
      const length = parser.buffer.length - 1;
      var offset = parser.offset;
      var number = 0;
      var sign = 1;
      if (parser.buffer[offset] === 45) {
        sign = -1;
        offset++;
      }
      while (offset < length) {
        const c1 = parser.buffer[offset++];
        if (c1 === 13) {
          parser.offset = offset + 1;
          return sign * number;
        }
        number = number * 10 + (c1 - 48);
      }
    }
    function parseStringNumbers(parser) {
      const length = parser.buffer.length - 1;
      var offset = parser.offset;
      var number = 0;
      var res = "";
      if (parser.buffer[offset] === 45) {
        res += "-";
        offset++;
      }
      while (offset < length) {
        var c1 = parser.buffer[offset++];
        if (c1 === 13) {
          parser.offset = offset + 1;
          if (number !== 0) {
            res += number;
          }
          return res;
        } else if (number > 429496728) {
          res += number * 10 + (c1 - 48);
          number = 0;
        } else if (c1 === 48 && number === 0) {
          res += 0;
        } else {
          number = number * 10 + (c1 - 48);
        }
      }
    }
    function parseSimpleString(parser) {
      const start = parser.offset;
      const buffer = parser.buffer;
      const length = buffer.length - 1;
      var offset = start;
      while (offset < length) {
        if (buffer[offset++] === 13) {
          parser.offset = offset + 1;
          if (parser.optionReturnBuffers === true) {
            return parser.buffer.slice(start, offset - 1);
          }
          return parser.buffer.toString("utf8", start, offset - 1);
        }
      }
    }
    function parseLength(parser) {
      const length = parser.buffer.length - 1;
      var offset = parser.offset;
      var number = 0;
      while (offset < length) {
        const c1 = parser.buffer[offset++];
        if (c1 === 13) {
          parser.offset = offset + 1;
          return number;
        }
        number = number * 10 + (c1 - 48);
      }
    }
    function parseInteger(parser) {
      if (parser.optionStringNumbers === true) {
        return parseStringNumbers(parser);
      }
      return parseSimpleNumbers(parser);
    }
    function parseBulkString(parser) {
      const length = parseLength(parser);
      if (length === void 0) {
        return;
      }
      if (length < 0) {
        return null;
      }
      const offset = parser.offset + length;
      if (offset + 2 > parser.buffer.length) {
        parser.bigStrSize = offset + 2;
        parser.totalChunkSize = parser.buffer.length;
        parser.bufferCache.push(parser.buffer);
        return;
      }
      const start = parser.offset;
      parser.offset = offset + 2;
      if (parser.optionReturnBuffers === true) {
        return parser.buffer.slice(start, offset);
      }
      return parser.buffer.toString("utf8", start, offset);
    }
    function parseError(parser) {
      var string = parseSimpleString(parser);
      if (string !== void 0) {
        if (parser.optionReturnBuffers === true) {
          string = string.toString();
        }
        return new ReplyError(string);
      }
    }
    function handleError(parser, type) {
      const err = new ParserError(
        "Protocol error, got " + JSON.stringify(String.fromCharCode(type)) + " as reply type byte",
        JSON.stringify(parser.buffer),
        parser.offset
      );
      parser.buffer = null;
      parser.returnFatalError(err);
    }
    function parseArray(parser) {
      const length = parseLength(parser);
      if (length === void 0) {
        return;
      }
      if (length < 0) {
        return null;
      }
      const responses = new Array(length);
      return parseArrayElements(parser, responses, 0);
    }
    function pushArrayCache(parser, array, pos) {
      parser.arrayCache.push(array);
      parser.arrayPos.push(pos);
    }
    function parseArrayChunks(parser) {
      const tmp = parser.arrayCache.pop();
      var pos = parser.arrayPos.pop();
      if (parser.arrayCache.length) {
        const res = parseArrayChunks(parser);
        if (res === void 0) {
          pushArrayCache(parser, tmp, pos);
          return;
        }
        tmp[pos++] = res;
      }
      return parseArrayElements(parser, tmp, pos);
    }
    function parseArrayElements(parser, responses, i2) {
      const bufferLength = parser.buffer.length;
      while (i2 < responses.length) {
        const offset = parser.offset;
        if (parser.offset >= bufferLength) {
          pushArrayCache(parser, responses, i2);
          return;
        }
        const response = parseType(parser, parser.buffer[parser.offset++]);
        if (response === void 0) {
          if (!(parser.arrayCache.length || parser.bufferCache.length)) {
            parser.offset = offset;
          }
          pushArrayCache(parser, responses, i2);
          return;
        }
        responses[i2] = response;
        i2++;
      }
      return responses;
    }
    function parseType(parser, type) {
      switch (type) {
        case 36:
          return parseBulkString(parser);
        case 43:
          return parseSimpleString(parser);
        case 42:
          return parseArray(parser);
        case 58:
          return parseInteger(parser);
        case 45:
          return parseError(parser);
        default:
          return handleError(parser, type);
      }
    }
    function decreaseBufferPool() {
      if (bufferPool.length > 50 * 1024) {
        if (counter === 1 || notDecreased > counter * 2) {
          const minSliceLen = Math.floor(bufferPool.length / 10);
          const sliceLength = minSliceLen < bufferOffset ? bufferOffset : minSliceLen;
          bufferOffset = 0;
          bufferPool = bufferPool.slice(sliceLength, bufferPool.length);
        } else {
          notDecreased++;
          counter--;
        }
      } else {
        clearInterval(interval);
        counter = 0;
        notDecreased = 0;
        interval = null;
      }
    }
    function resizeBuffer(length) {
      if (bufferPool.length < length + bufferOffset) {
        const multiplier = length > 1024 * 1024 * 75 ? 2 : 3;
        if (bufferOffset > 1024 * 1024 * 111) {
          bufferOffset = 1024 * 1024 * 50;
        }
        bufferPool = Buffer4.allocUnsafe(length * multiplier + bufferOffset);
        bufferOffset = 0;
        counter++;
        if (interval === null) {
          interval = setInterval(decreaseBufferPool, 50);
        }
      }
    }
    function concatBulkString(parser) {
      const list = parser.bufferCache;
      const oldOffset = parser.offset;
      var chunks = list.length;
      var offset = parser.bigStrSize - parser.totalChunkSize;
      parser.offset = offset;
      if (offset <= 2) {
        if (chunks === 2) {
          return list[0].toString("utf8", oldOffset, list[0].length + offset - 2);
        }
        chunks--;
        offset = list[list.length - 2].length + offset;
      }
      var res = decoder.write(list[0].slice(oldOffset));
      for (var i2 = 1; i2 < chunks - 1; i2++) {
        res += decoder.write(list[i2]);
      }
      res += decoder.end(list[i2].slice(0, offset - 2));
      return res;
    }
    function concatBulkBuffer(parser) {
      const list = parser.bufferCache;
      const oldOffset = parser.offset;
      const length = parser.bigStrSize - oldOffset - 2;
      var chunks = list.length;
      var offset = parser.bigStrSize - parser.totalChunkSize;
      parser.offset = offset;
      if (offset <= 2) {
        if (chunks === 2) {
          return list[0].slice(oldOffset, list[0].length + offset - 2);
        }
        chunks--;
        offset = list[list.length - 2].length + offset;
      }
      resizeBuffer(length);
      const start = bufferOffset;
      list[0].copy(bufferPool, start, oldOffset, list[0].length);
      bufferOffset += list[0].length - oldOffset;
      for (var i2 = 1; i2 < chunks - 1; i2++) {
        list[i2].copy(bufferPool, bufferOffset);
        bufferOffset += list[i2].length;
      }
      list[i2].copy(bufferPool, bufferOffset, 0, offset - 2);
      bufferOffset += offset - 2;
      return bufferPool.slice(start, bufferOffset);
    }
    var JavascriptRedisParser = class {
      constructor(options) {
        if (!options) {
          throw new TypeError("Options are mandatory.");
        }
        if (typeof options.returnError !== "function" || typeof options.returnReply !== "function") {
          throw new TypeError("The returnReply and returnError options have to be functions.");
        }
        this.setReturnBuffers(!!options.returnBuffers);
        this.setStringNumbers(!!options.stringNumbers);
        this.returnError = options.returnError;
        this.returnFatalError = options.returnFatalError || options.returnError;
        this.returnReply = options.returnReply;
        this.reset();
      }
      reset() {
        this.offset = 0;
        this.buffer = null;
        this.bigStrSize = 0;
        this.totalChunkSize = 0;
        this.bufferCache = [];
        this.arrayCache = [];
        this.arrayPos = [];
      }
      setReturnBuffers(returnBuffers) {
        if (typeof returnBuffers !== "boolean") {
          throw new TypeError("The returnBuffers argument has to be a boolean");
        }
        this.optionReturnBuffers = returnBuffers;
      }
      setStringNumbers(stringNumbers) {
        if (typeof stringNumbers !== "boolean") {
          throw new TypeError("The stringNumbers argument has to be a boolean");
        }
        this.optionStringNumbers = stringNumbers;
      }
      execute(buffer) {
        if (this.buffer === null) {
          this.buffer = buffer;
          this.offset = 0;
        } else if (this.bigStrSize === 0) {
          const oldLength = this.buffer.length;
          const remainingLength = oldLength - this.offset;
          const newBuffer = Buffer4.allocUnsafe(remainingLength + buffer.length);
          this.buffer.copy(newBuffer, 0, this.offset, oldLength);
          buffer.copy(newBuffer, remainingLength, 0, buffer.length);
          this.buffer = newBuffer;
          this.offset = 0;
          if (this.arrayCache.length) {
            const arr = parseArrayChunks(this);
            if (arr === void 0) {
              return;
            }
            this.returnReply(arr);
          }
        } else if (this.totalChunkSize + buffer.length >= this.bigStrSize) {
          this.bufferCache.push(buffer);
          var tmp = this.optionReturnBuffers ? concatBulkBuffer(this) : concatBulkString(this);
          this.bigStrSize = 0;
          this.bufferCache = [];
          this.buffer = buffer;
          if (this.arrayCache.length) {
            this.arrayCache[0][this.arrayPos[0]++] = tmp;
            tmp = parseArrayChunks(this);
            if (tmp === void 0) {
              return;
            }
          }
          this.returnReply(tmp);
        } else {
          this.bufferCache.push(buffer);
          this.totalChunkSize += buffer.length;
          return;
        }
        while (this.offset < this.buffer.length) {
          const offset = this.offset;
          const type = this.buffer[this.offset++];
          const response = parseType(this, type);
          if (response === void 0) {
            if (!(this.arrayCache.length || this.bufferCache.length)) {
              this.offset = offset;
            }
            return;
          }
          if (type === 45) {
            this.returnError(response);
          } else {
            this.returnReply(response);
          }
        }
        this.buffer = null;
      }
    };
    module2.exports = JavascriptRedisParser;
  }
});

// node_modules/redis-parser/index.js
var require_redis_parser = __commonJS({
  "node_modules/redis-parser/index.js"(exports, module2) {
    "use strict";
    module2.exports = require_parser2();
  }
});

// node_modules/ioredis/built/SubscriptionSet.js
var require_SubscriptionSet = __commonJS({
  "node_modules/ioredis/built/SubscriptionSet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var SubscriptionSet = class {
      constructor() {
        this.set = {
          subscribe: {},
          psubscribe: {},
          ssubscribe: {}
        };
      }
      add(set, channel) {
        this.set[mapSet(set)][channel] = true;
      }
      del(set, channel) {
        delete this.set[mapSet(set)][channel];
      }
      channels(set) {
        return Object.keys(this.set[mapSet(set)]);
      }
      isEmpty() {
        return this.channels("subscribe").length === 0 && this.channels("psubscribe").length === 0 && this.channels("ssubscribe").length === 0;
      }
    };
    exports.default = SubscriptionSet;
    function mapSet(set) {
      if (set === "unsubscribe") {
        return "subscribe";
      }
      if (set === "punsubscribe") {
        return "psubscribe";
      }
      if (set === "sunsubscribe") {
        return "ssubscribe";
      }
      return set;
    }
  }
});

// node_modules/ioredis/built/DataHandler.js
var require_DataHandler = __commonJS({
  "node_modules/ioredis/built/DataHandler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Command_1 = require_Command();
    var utils_1 = require_utils2();
    var RedisParser = require_redis_parser();
    var SubscriptionSet_1 = require_SubscriptionSet();
    var debug = (0, utils_1.Debug)("dataHandler");
    var DataHandler = class {
      constructor(redis2, parserOptions) {
        this.redis = redis2;
        const parser = new RedisParser({
          stringNumbers: parserOptions.stringNumbers,
          returnBuffers: true,
          returnError: (err) => {
            this.returnError(err);
          },
          returnFatalError: (err) => {
            this.returnFatalError(err);
          },
          returnReply: (reply) => {
            this.returnReply(reply);
          }
        });
        redis2.stream.on("data", (data) => {
          parser.execute(data);
        });
      }
      returnFatalError(err) {
        err.message += ". Please report this.";
        this.redis.recoverFromFatalError(err, err, { offlineQueue: false });
      }
      returnError(err) {
        const item = this.shiftCommand(err);
        if (!item) {
          return;
        }
        err.command = {
          name: item.command.name,
          args: item.command.args
        };
        this.redis.handleReconnection(err, item);
      }
      returnReply(reply) {
        if (this.handleMonitorReply(reply)) {
          return;
        }
        if (this.handleSubscriberReply(reply)) {
          return;
        }
        const item = this.shiftCommand(reply);
        if (!item) {
          return;
        }
        if (Command_1.default.checkFlag("ENTER_SUBSCRIBER_MODE", item.command.name)) {
          this.redis.condition.subscriber = new SubscriptionSet_1.default();
          this.redis.condition.subscriber.add(item.command.name, reply[1].toString());
          if (!fillSubCommand(item.command, reply[2])) {
            this.redis.commandQueue.unshift(item);
          }
        } else if (Command_1.default.checkFlag("EXIT_SUBSCRIBER_MODE", item.command.name)) {
          if (!fillUnsubCommand(item.command, reply[2])) {
            this.redis.commandQueue.unshift(item);
          }
        } else {
          item.command.resolve(reply);
        }
      }
      handleSubscriberReply(reply) {
        if (!this.redis.condition.subscriber) {
          return false;
        }
        const replyType = Array.isArray(reply) ? reply[0].toString() : null;
        debug('receive reply "%s" in subscriber mode', replyType);
        switch (replyType) {
          case "message":
            if (this.redis.listeners("message").length > 0) {
              this.redis.emit("message", reply[1].toString(), reply[2] ? reply[2].toString() : "");
            }
            this.redis.emit("messageBuffer", reply[1], reply[2]);
            break;
          case "pmessage": {
            const pattern = reply[1].toString();
            if (this.redis.listeners("pmessage").length > 0) {
              this.redis.emit("pmessage", pattern, reply[2].toString(), reply[3].toString());
            }
            this.redis.emit("pmessageBuffer", pattern, reply[2], reply[3]);
            break;
          }
          case "smessage": {
            if (this.redis.listeners("smessage").length > 0) {
              this.redis.emit("smessage", reply[1].toString(), reply[2] ? reply[2].toString() : "");
            }
            this.redis.emit("smessageBuffer", reply[1], reply[2]);
            break;
          }
          case "ssubscribe":
          case "subscribe":
          case "psubscribe": {
            const channel = reply[1].toString();
            this.redis.condition.subscriber.add(replyType, channel);
            const item = this.shiftCommand(reply);
            if (!item) {
              return;
            }
            if (!fillSubCommand(item.command, reply[2])) {
              this.redis.commandQueue.unshift(item);
            }
            break;
          }
          case "sunsubscribe":
          case "unsubscribe":
          case "punsubscribe": {
            const channel = reply[1] ? reply[1].toString() : null;
            if (channel) {
              this.redis.condition.subscriber.del(replyType, channel);
            }
            const count = reply[2];
            if (Number(count) === 0) {
              this.redis.condition.subscriber = false;
            }
            const item = this.shiftCommand(reply);
            if (!item) {
              return;
            }
            if (!fillUnsubCommand(item.command, count)) {
              this.redis.commandQueue.unshift(item);
            }
            break;
          }
          default: {
            const item = this.shiftCommand(reply);
            if (!item) {
              return;
            }
            item.command.resolve(reply);
          }
        }
        return true;
      }
      handleMonitorReply(reply) {
        if (this.redis.status !== "monitoring") {
          return false;
        }
        const replyStr = reply.toString();
        if (replyStr === "OK") {
          return false;
        }
        const len = replyStr.indexOf(" ");
        const timestamp = replyStr.slice(0, len);
        const argIndex = replyStr.indexOf('"');
        const args = replyStr.slice(argIndex + 1, -1).split('" "').map((elem) => elem.replace(/\\"/g, '"'));
        const dbAndSource = replyStr.slice(len + 2, argIndex - 2).split(" ");
        this.redis.emit("monitor", timestamp, args, dbAndSource[1], dbAndSource[0]);
        return true;
      }
      shiftCommand(reply) {
        const item = this.redis.commandQueue.shift();
        if (!item) {
          const message = "Command queue state error. If you can reproduce this, please report it.";
          const error = new Error(message + (reply instanceof Error ? ` Last error: ${reply.message}` : ` Last reply: ${reply.toString()}`));
          this.redis.emit("error", error);
          return null;
        }
        return item;
      }
    };
    exports.default = DataHandler;
    var remainingRepliesMap = /* @__PURE__ */ new WeakMap();
    function fillSubCommand(command, count) {
      let remainingReplies = remainingRepliesMap.has(command) ? remainingRepliesMap.get(command) : command.args.length;
      remainingReplies -= 1;
      if (remainingReplies <= 0) {
        command.resolve(count);
        remainingRepliesMap.delete(command);
        return true;
      }
      remainingRepliesMap.set(command, remainingReplies);
      return false;
    }
    function fillUnsubCommand(command, count) {
      let remainingReplies = remainingRepliesMap.has(command) ? remainingRepliesMap.get(command) : command.args.length;
      if (remainingReplies === 0) {
        if (Number(count) === 0) {
          remainingRepliesMap.delete(command);
          command.resolve(count);
          return true;
        }
        return false;
      }
      remainingReplies -= 1;
      if (remainingReplies <= 0) {
        command.resolve(count);
        return true;
      }
      remainingRepliesMap.set(command, remainingReplies);
      return false;
    }
  }
});

// node_modules/ioredis/built/redis/event_handler.js
var require_event_handler = __commonJS({
  "node_modules/ioredis/built/redis/event_handler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.readyHandler = exports.errorHandler = exports.closeHandler = exports.connectHandler = void 0;
    var redis_errors_1 = require_redis_errors();
    var Command_1 = require_Command();
    var errors_1 = require_errors();
    var utils_1 = require_utils2();
    var DataHandler_1 = require_DataHandler();
    var debug = (0, utils_1.Debug)("connection");
    function connectHandler(self2) {
      return function() {
        self2.setStatus("connect");
        self2.resetCommandQueue();
        let flushed = false;
        const { connectionEpoch } = self2;
        if (self2.condition.auth) {
          self2.auth(self2.condition.auth, function(err) {
            if (connectionEpoch !== self2.connectionEpoch) {
              return;
            }
            if (err) {
              if (err.message.indexOf("no password is set") !== -1) {
                console.warn("[WARN] Redis server does not require a password, but a password was supplied.");
              } else if (err.message.indexOf("without any password configured for the default user") !== -1) {
                console.warn("[WARN] This Redis server's `default` user does not require a password, but a password was supplied");
              } else if (err.message.indexOf("wrong number of arguments for 'auth' command") !== -1) {
                console.warn(`[ERROR] The server returned "wrong number of arguments for 'auth' command". You are probably passing both username and password to Redis version 5 or below. You should only pass the 'password' option for Redis version 5 and under.`);
              } else {
                flushed = true;
                self2.recoverFromFatalError(err, err);
              }
            }
          });
        }
        if (self2.condition.select) {
          self2.select(self2.condition.select).catch((err) => {
            self2.silentEmit("error", err);
          });
        }
        if (!self2.options.enableReadyCheck) {
          exports.readyHandler(self2)();
        }
        new DataHandler_1.default(self2, {
          stringNumbers: self2.options.stringNumbers
        });
        if (self2.options.enableReadyCheck) {
          self2._readyCheck(function(err, info) {
            if (connectionEpoch !== self2.connectionEpoch) {
              return;
            }
            if (err) {
              if (!flushed) {
                self2.recoverFromFatalError(new Error("Ready check failed: " + err.message), err);
              }
            } else {
              if (self2.connector.check(info)) {
                exports.readyHandler(self2)();
              } else {
                self2.disconnect(true);
              }
            }
          });
        }
      };
    }
    exports.connectHandler = connectHandler;
    function abortError(command) {
      const err = new redis_errors_1.AbortError("Command aborted due to connection close");
      err.command = {
        name: command.name,
        args: command.args
      };
      return err;
    }
    function abortIncompletePipelines(commandQueue) {
      var _a;
      let expectedIndex = 0;
      for (let i2 = 0; i2 < commandQueue.length; ) {
        const command = (_a = commandQueue.peekAt(i2)) === null || _a === void 0 ? void 0 : _a.command;
        const pipelineIndex = command.pipelineIndex;
        if (pipelineIndex === void 0 || pipelineIndex === 0) {
          expectedIndex = 0;
        }
        if (pipelineIndex !== void 0 && pipelineIndex !== expectedIndex++) {
          commandQueue.remove(i2, 1);
          command.reject(abortError(command));
          continue;
        }
        i2++;
      }
    }
    function abortTransactionFragments(commandQueue) {
      var _a;
      for (let i2 = 0; i2 < commandQueue.length; ) {
        const command = (_a = commandQueue.peekAt(i2)) === null || _a === void 0 ? void 0 : _a.command;
        if (command.name === "multi") {
          break;
        }
        if (command.name === "exec") {
          commandQueue.remove(i2, 1);
          command.reject(abortError(command));
          break;
        }
        if (command.inTransaction) {
          commandQueue.remove(i2, 1);
          command.reject(abortError(command));
        } else {
          i2++;
        }
      }
    }
    function closeHandler(self2) {
      return function() {
        const prevStatus = self2.status;
        self2.setStatus("close");
        if (self2.commandQueue.length) {
          abortIncompletePipelines(self2.commandQueue);
        }
        if (self2.offlineQueue.length) {
          abortTransactionFragments(self2.offlineQueue);
        }
        if (prevStatus === "ready") {
          if (!self2.prevCondition) {
            self2.prevCondition = self2.condition;
          }
          if (self2.commandQueue.length) {
            self2.prevCommandQueue = self2.commandQueue;
          }
        }
        if (self2.manuallyClosing) {
          self2.manuallyClosing = false;
          debug("skip reconnecting since the connection is manually closed.");
          return close();
        }
        if (typeof self2.options.retryStrategy !== "function") {
          debug("skip reconnecting because `retryStrategy` is not a function");
          return close();
        }
        const retryDelay = self2.options.retryStrategy(++self2.retryAttempts);
        if (typeof retryDelay !== "number") {
          debug("skip reconnecting because `retryStrategy` doesn't return a number");
          return close();
        }
        debug("reconnect in %sms", retryDelay);
        self2.setStatus("reconnecting", retryDelay);
        self2.reconnectTimeout = setTimeout(function() {
          self2.reconnectTimeout = null;
          self2.connect().catch(utils_1.noop);
        }, retryDelay);
        const { maxRetriesPerRequest } = self2.options;
        if (typeof maxRetriesPerRequest === "number") {
          if (maxRetriesPerRequest < 0) {
            debug("maxRetriesPerRequest is negative, ignoring...");
          } else {
            const remainder = self2.retryAttempts % (maxRetriesPerRequest + 1);
            if (remainder === 0) {
              debug("reach maxRetriesPerRequest limitation, flushing command queue...");
              self2.flushQueue(new errors_1.MaxRetriesPerRequestError(maxRetriesPerRequest));
            }
          }
        }
      };
      function close() {
        self2.setStatus("end");
        self2.flushQueue(new Error(utils_1.CONNECTION_CLOSED_ERROR_MSG));
      }
    }
    exports.closeHandler = closeHandler;
    function errorHandler(self2) {
      return function(error) {
        debug("error: %s", error);
        self2.silentEmit("error", error);
      };
    }
    exports.errorHandler = errorHandler;
    function readyHandler(self2) {
      return function() {
        self2.setStatus("ready");
        self2.retryAttempts = 0;
        if (self2.options.monitor) {
          self2.call("monitor").then(() => self2.setStatus("monitoring"), (error) => self2.emit("error", error));
          const { sendCommand } = self2;
          self2.sendCommand = function(command) {
            if (Command_1.default.checkFlag("VALID_IN_MONITOR_MODE", command.name)) {
              return sendCommand.call(self2, command);
            }
            command.reject(new Error("Connection is in monitoring mode, can't process commands."));
            return command.promise;
          };
          self2.once("close", function() {
            delete self2.sendCommand;
          });
          return;
        }
        const finalSelect = self2.prevCondition ? self2.prevCondition.select : self2.condition.select;
        if (self2.options.connectionName) {
          debug("set the connection name [%s]", self2.options.connectionName);
          self2.client("setname", self2.options.connectionName).catch(utils_1.noop);
        }
        if (self2.options.readOnly) {
          debug("set the connection to readonly mode");
          self2.readonly().catch(utils_1.noop);
        }
        if (self2.prevCondition) {
          const condition = self2.prevCondition;
          self2.prevCondition = null;
          if (condition.subscriber && self2.options.autoResubscribe) {
            if (self2.condition.select !== finalSelect) {
              debug("connect to db [%d]", finalSelect);
              self2.select(finalSelect);
            }
            const subscribeChannels = condition.subscriber.channels("subscribe");
            if (subscribeChannels.length) {
              debug("subscribe %d channels", subscribeChannels.length);
              self2.subscribe(subscribeChannels);
            }
            const psubscribeChannels = condition.subscriber.channels("psubscribe");
            if (psubscribeChannels.length) {
              debug("psubscribe %d channels", psubscribeChannels.length);
              self2.psubscribe(psubscribeChannels);
            }
            const ssubscribeChannels = condition.subscriber.channels("ssubscribe");
            if (ssubscribeChannels.length) {
              debug("ssubscribe %d channels", ssubscribeChannels.length);
              self2.ssubscribe(ssubscribeChannels);
            }
          }
        }
        if (self2.prevCommandQueue) {
          if (self2.options.autoResendUnfulfilledCommands) {
            debug("resend %d unfulfilled commands", self2.prevCommandQueue.length);
            while (self2.prevCommandQueue.length > 0) {
              const item = self2.prevCommandQueue.shift();
              if (item.select !== self2.condition.select && item.command.name !== "select") {
                self2.select(item.select);
              }
              self2.sendCommand(item.command, item.stream);
            }
          } else {
            self2.prevCommandQueue = null;
          }
        }
        if (self2.offlineQueue.length) {
          debug("send %d commands in offline queue", self2.offlineQueue.length);
          const offlineQueue = self2.offlineQueue;
          self2.resetOfflineQueue();
          while (offlineQueue.length > 0) {
            const item = offlineQueue.shift();
            if (item.select !== self2.condition.select && item.command.name !== "select") {
              self2.select(item.select);
            }
            self2.sendCommand(item.command, item.stream);
          }
        }
        if (self2.condition.select !== finalSelect) {
          debug("connect to db [%d]", finalSelect);
          self2.select(finalSelect);
        }
      };
    }
    exports.readyHandler = readyHandler;
  }
});

// node_modules/ioredis/built/redis/RedisOptions.js
var require_RedisOptions = __commonJS({
  "node_modules/ioredis/built/redis/RedisOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_REDIS_OPTIONS = void 0;
    exports.DEFAULT_REDIS_OPTIONS = {
      port: 6379,
      host: "localhost",
      family: 4,
      connectTimeout: 1e4,
      disconnectTimeout: 2e3,
      retryStrategy: function(times) {
        return Math.min(times * 50, 2e3);
      },
      keepAlive: 0,
      noDelay: true,
      connectionName: null,
      sentinels: null,
      name: null,
      role: "master",
      sentinelRetryStrategy: function(times) {
        return Math.min(times * 10, 1e3);
      },
      sentinelReconnectStrategy: function() {
        return 6e4;
      },
      natMap: null,
      enableTLSForSentinelMode: false,
      updateSentinels: true,
      failoverDetector: false,
      username: null,
      password: null,
      db: 0,
      enableOfflineQueue: true,
      enableReadyCheck: true,
      autoResubscribe: true,
      autoResendUnfulfilledCommands: true,
      lazyConnect: false,
      keyPrefix: "",
      reconnectOnError: null,
      readOnly: false,
      stringNumbers: false,
      maxRetriesPerRequest: 20,
      maxLoadingRetryTime: 1e4,
      enableAutoPipelining: false,
      autoPipeliningIgnoredCommands: [],
      sentinelMaxConnections: 10
    };
  }
});

// node_modules/ioredis/built/Redis.js
var require_Redis = __commonJS({
  "node_modules/ioredis/built/Redis.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var commands_1 = require_built();
    var events_1 = require("events");
    var standard_as_callback_1 = require_built2();
    var cluster_1 = require_cluster();
    var Command_1 = require_Command();
    var connectors_1 = require_connectors();
    var SentinelConnector_1 = require_SentinelConnector();
    var eventHandler = require_event_handler();
    var RedisOptions_1 = require_RedisOptions();
    var ScanStream_1 = require_ScanStream();
    var transaction_1 = require_transaction();
    var utils_1 = require_utils2();
    var applyMixin_1 = require_applyMixin();
    var Commander_1 = require_Commander();
    var lodash_1 = require_lodash3();
    var Deque = require_denque();
    var debug = (0, utils_1.Debug)("redis");
    var Redis2 = class extends Commander_1.default {
      constructor(arg1, arg2, arg3) {
        super();
        this.status = "wait";
        this.isCluster = false;
        this.reconnectTimeout = null;
        this.connectionEpoch = 0;
        this.retryAttempts = 0;
        this.manuallyClosing = false;
        this._autoPipelines = /* @__PURE__ */ new Map();
        this._runningAutoPipelines = /* @__PURE__ */ new Set();
        this.parseOptions(arg1, arg2, arg3);
        events_1.EventEmitter.call(this);
        this.resetCommandQueue();
        this.resetOfflineQueue();
        if (this.options.Connector) {
          this.connector = new this.options.Connector(this.options);
        } else if (this.options.sentinels) {
          const sentinelConnector = new SentinelConnector_1.default(this.options);
          sentinelConnector.emitter = this;
          this.connector = sentinelConnector;
        } else {
          this.connector = new connectors_1.StandaloneConnector(this.options);
        }
        if (this.options.scripts) {
          Object.entries(this.options.scripts).forEach(([name, definition]) => {
            this.defineCommand(name, definition);
          });
        }
        if (this.options.lazyConnect) {
          this.setStatus("wait");
        } else {
          this.connect().catch(lodash_1.noop);
        }
      }
      static createClient(...args) {
        return new Redis2(...args);
      }
      get autoPipelineQueueSize() {
        let queued = 0;
        for (const pipeline2 of this._autoPipelines.values()) {
          queued += pipeline2.length;
        }
        return queued;
      }
      connect(callback) {
        const promise = new Promise((resolve, reject) => {
          if (this.status === "connecting" || this.status === "connect" || this.status === "ready") {
            reject(new Error("Redis is already connecting/connected"));
            return;
          }
          this.connectionEpoch += 1;
          this.setStatus("connecting");
          const { options } = this;
          this.condition = {
            select: options.db,
            auth: options.username ? [options.username, options.password] : options.password,
            subscriber: false
          };
          const _this = this;
          (0, standard_as_callback_1.default)(this.connector.connect(function(type, err) {
            _this.silentEmit(type, err);
          }), function(err, stream) {
            if (err) {
              _this.flushQueue(err);
              _this.silentEmit("error", err);
              reject(err);
              _this.setStatus("end");
              return;
            }
            let CONNECT_EVENT = options.tls ? "secureConnect" : "connect";
            if ("sentinels" in options && options.sentinels && !options.enableTLSForSentinelMode) {
              CONNECT_EVENT = "connect";
            }
            _this.stream = stream;
            if (options.noDelay) {
              stream.setNoDelay(true);
            }
            if (typeof options.keepAlive === "number") {
              if (stream.connecting) {
                stream.once(CONNECT_EVENT, () => {
                  stream.setKeepAlive(true, options.keepAlive);
                });
              } else {
                stream.setKeepAlive(true, options.keepAlive);
              }
            }
            if (stream.connecting) {
              stream.once(CONNECT_EVENT, eventHandler.connectHandler(_this));
              if (options.connectTimeout) {
                let connectTimeoutCleared = false;
                stream.setTimeout(options.connectTimeout, function() {
                  if (connectTimeoutCleared) {
                    return;
                  }
                  stream.setTimeout(0);
                  stream.destroy();
                  const err2 = new Error("connect ETIMEDOUT");
                  err2.errorno = "ETIMEDOUT";
                  err2.code = "ETIMEDOUT";
                  err2.syscall = "connect";
                  eventHandler.errorHandler(_this)(err2);
                });
                stream.once(CONNECT_EVENT, function() {
                  connectTimeoutCleared = true;
                  stream.setTimeout(0);
                });
              }
            } else if (stream.destroyed) {
              const firstError = _this.connector.firstError;
              if (firstError) {
                process.nextTick(() => {
                  eventHandler.errorHandler(_this)(firstError);
                });
              }
              process.nextTick(eventHandler.closeHandler(_this));
            } else {
              process.nextTick(eventHandler.connectHandler(_this));
            }
            if (!stream.destroyed) {
              stream.once("error", eventHandler.errorHandler(_this));
              stream.once("close", eventHandler.closeHandler(_this));
            }
            const connectionReadyHandler = function() {
              _this.removeListener("close", connectionCloseHandler);
              resolve();
            };
            var connectionCloseHandler = function() {
              _this.removeListener("ready", connectionReadyHandler);
              reject(new Error(utils_1.CONNECTION_CLOSED_ERROR_MSG));
            };
            _this.once("ready", connectionReadyHandler);
            _this.once("close", connectionCloseHandler);
          });
        });
        return (0, standard_as_callback_1.default)(promise, callback);
      }
      disconnect(reconnect = false) {
        if (!reconnect) {
          this.manuallyClosing = true;
        }
        if (this.reconnectTimeout && !reconnect) {
          clearTimeout(this.reconnectTimeout);
          this.reconnectTimeout = null;
        }
        if (this.status === "wait") {
          eventHandler.closeHandler(this)();
        } else {
          this.connector.disconnect();
        }
      }
      end() {
        this.disconnect();
      }
      duplicate(override) {
        return new Redis2({ ...this.options, ...override });
      }
      get mode() {
        var _a;
        return this.options.monitor ? "monitor" : ((_a = this.condition) === null || _a === void 0 ? void 0 : _a.subscriber) ? "subscriber" : "normal";
      }
      monitor(callback) {
        const monitorInstance = this.duplicate({
          monitor: true,
          lazyConnect: false
        });
        return (0, standard_as_callback_1.default)(new Promise(function(resolve, reject) {
          monitorInstance.once("error", reject);
          monitorInstance.once("monitoring", function() {
            resolve(monitorInstance);
          });
        }), callback);
      }
      sendCommand(command, stream) {
        var _a, _b;
        if (this.status === "wait") {
          this.connect().catch(lodash_1.noop);
        }
        if (this.status === "end") {
          command.reject(new Error(utils_1.CONNECTION_CLOSED_ERROR_MSG));
          return command.promise;
        }
        if (((_a = this.condition) === null || _a === void 0 ? void 0 : _a.subscriber) && !Command_1.default.checkFlag("VALID_IN_SUBSCRIBER_MODE", command.name)) {
          command.reject(new Error("Connection in subscriber mode, only subscriber commands may be used"));
          return command.promise;
        }
        if (typeof this.options.commandTimeout === "number") {
          command.setTimeout(this.options.commandTimeout);
        }
        let writable = this.status === "ready" || !stream && this.status === "connect" && (0, commands_1.exists)(command.name) && (0, commands_1.hasFlag)(command.name, "loading");
        if (!this.stream) {
          writable = false;
        } else if (!this.stream.writable) {
          writable = false;
        } else if (this.stream._writableState && this.stream._writableState.ended) {
          writable = false;
        }
        if (!writable) {
          if (!this.options.enableOfflineQueue) {
            command.reject(new Error("Stream isn't writeable and enableOfflineQueue options is false"));
            return command.promise;
          }
          if (command.name === "quit" && this.offlineQueue.length === 0) {
            this.disconnect();
            command.resolve(Buffer.from("OK"));
            return command.promise;
          }
          if (debug.enabled) {
            debug("queue command[%s]: %d -> %s(%o)", this._getDescription(), this.condition.select, command.name, command.args);
          }
          this.offlineQueue.push({
            command,
            stream,
            select: this.condition.select
          });
        } else {
          if (debug.enabled) {
            debug("write command[%s]: %d -> %s(%o)", this._getDescription(), (_b = this.condition) === null || _b === void 0 ? void 0 : _b.select, command.name, command.args);
          }
          if (stream) {
            if ("isPipeline" in stream && stream.isPipeline) {
              stream.write(command.toWritable(stream.destination.redis.stream));
            } else {
              stream.write(command.toWritable(stream));
            }
          } else {
            this.stream.write(command.toWritable(this.stream));
          }
          this.commandQueue.push({
            command,
            stream,
            select: this.condition.select
          });
          if (Command_1.default.checkFlag("WILL_DISCONNECT", command.name)) {
            this.manuallyClosing = true;
          }
          if (this.options.socketTimeout !== void 0 && this.socketTimeoutTimer === void 0) {
            this.setSocketTimeout();
          }
        }
        if (command.name === "select" && (0, utils_1.isInt)(command.args[0])) {
          const db = parseInt(command.args[0], 10);
          if (this.condition.select !== db) {
            this.condition.select = db;
            this.emit("select", db);
            debug("switch to db [%d]", this.condition.select);
          }
        }
        return command.promise;
      }
      setSocketTimeout() {
        this.socketTimeoutTimer = setTimeout(() => {
          this.stream.destroy(new Error(`Socket timeout. Expecting data, but didn't receive any in ${this.options.socketTimeout}ms.`));
          this.socketTimeoutTimer = void 0;
        }, this.options.socketTimeout);
        this.stream.once("data", () => {
          clearTimeout(this.socketTimeoutTimer);
          this.socketTimeoutTimer = void 0;
          if (this.commandQueue.length === 0)
            return;
          this.setSocketTimeout();
        });
      }
      scanStream(options) {
        return this.createScanStream("scan", { options });
      }
      scanBufferStream(options) {
        return this.createScanStream("scanBuffer", { options });
      }
      sscanStream(key, options) {
        return this.createScanStream("sscan", { key, options });
      }
      sscanBufferStream(key, options) {
        return this.createScanStream("sscanBuffer", { key, options });
      }
      hscanStream(key, options) {
        return this.createScanStream("hscan", { key, options });
      }
      hscanBufferStream(key, options) {
        return this.createScanStream("hscanBuffer", { key, options });
      }
      zscanStream(key, options) {
        return this.createScanStream("zscan", { key, options });
      }
      zscanBufferStream(key, options) {
        return this.createScanStream("zscanBuffer", { key, options });
      }
      silentEmit(eventName, arg) {
        let error;
        if (eventName === "error") {
          error = arg;
          if (this.status === "end") {
            return;
          }
          if (this.manuallyClosing) {
            if (error instanceof Error && (error.message === utils_1.CONNECTION_CLOSED_ERROR_MSG || error.syscall === "connect" || error.syscall === "read")) {
              return;
            }
          }
        }
        if (this.listeners(eventName).length > 0) {
          return this.emit.apply(this, arguments);
        }
        if (error && error instanceof Error) {
          console.error("[ioredis] Unhandled error event:", error.stack);
        }
        return false;
      }
      recoverFromFatalError(_commandError, err, options) {
        this.flushQueue(err, options);
        this.silentEmit("error", err);
        this.disconnect(true);
      }
      handleReconnection(err, item) {
        var _a;
        let needReconnect = false;
        if (this.options.reconnectOnError) {
          needReconnect = this.options.reconnectOnError(err);
        }
        switch (needReconnect) {
          case 1:
          case true:
            if (this.status !== "reconnecting") {
              this.disconnect(true);
            }
            item.command.reject(err);
            break;
          case 2:
            if (this.status !== "reconnecting") {
              this.disconnect(true);
            }
            if (((_a = this.condition) === null || _a === void 0 ? void 0 : _a.select) !== item.select && item.command.name !== "select") {
              this.select(item.select);
            }
            this.sendCommand(item.command);
            break;
          default:
            item.command.reject(err);
        }
      }
      _getDescription() {
        let description;
        if ("path" in this.options && this.options.path) {
          description = this.options.path;
        } else if (this.stream && this.stream.remoteAddress && this.stream.remotePort) {
          description = this.stream.remoteAddress + ":" + this.stream.remotePort;
        } else if ("host" in this.options && this.options.host) {
          description = this.options.host + ":" + this.options.port;
        } else {
          description = "";
        }
        if (this.options.connectionName) {
          description += ` (${this.options.connectionName})`;
        }
        return description;
      }
      resetCommandQueue() {
        this.commandQueue = new Deque();
      }
      resetOfflineQueue() {
        this.offlineQueue = new Deque();
      }
      parseOptions(...args) {
        const options = {};
        let isTls = false;
        for (let i2 = 0; i2 < args.length; ++i2) {
          const arg = args[i2];
          if (arg === null || typeof arg === "undefined") {
            continue;
          }
          if (typeof arg === "object") {
            (0, lodash_1.defaults)(options, arg);
          } else if (typeof arg === "string") {
            (0, lodash_1.defaults)(options, (0, utils_1.parseURL)(arg));
            if (arg.startsWith("rediss://")) {
              isTls = true;
            }
          } else if (typeof arg === "number") {
            options.port = arg;
          } else {
            throw new Error("Invalid argument " + arg);
          }
        }
        if (isTls) {
          (0, lodash_1.defaults)(options, { tls: true });
        }
        (0, lodash_1.defaults)(options, Redis2.defaultOptions);
        if (typeof options.port === "string") {
          options.port = parseInt(options.port, 10);
        }
        if (typeof options.db === "string") {
          options.db = parseInt(options.db, 10);
        }
        this.options = (0, utils_1.resolveTLSProfile)(options);
      }
      setStatus(status, arg) {
        if (debug.enabled) {
          debug("status[%s]: %s -> %s", this._getDescription(), this.status || "[empty]", status);
        }
        this.status = status;
        process.nextTick(this.emit.bind(this, status, arg));
      }
      createScanStream(command, { key, options = {} }) {
        return new ScanStream_1.default({
          objectMode: true,
          key,
          redis: this,
          command,
          ...options
        });
      }
      flushQueue(error, options) {
        options = (0, lodash_1.defaults)({}, options, {
          offlineQueue: true,
          commandQueue: true
        });
        let item;
        if (options.offlineQueue) {
          while (item = this.offlineQueue.shift()) {
            item.command.reject(error);
          }
        }
        if (options.commandQueue) {
          if (this.commandQueue.length > 0) {
            if (this.stream) {
              this.stream.removeAllListeners("data");
            }
            while (item = this.commandQueue.shift()) {
              item.command.reject(error);
            }
          }
        }
      }
      _readyCheck(callback) {
        const _this = this;
        this.info(function(err, res) {
          if (err) {
            if (err.message && err.message.includes("NOPERM")) {
              console.warn(`Skipping the ready check because INFO command fails: "${err.message}". You can disable ready check with "enableReadyCheck". More: https://github.com/luin/ioredis/wiki/Disable-ready-check.`);
              return callback(null, {});
            }
            return callback(err);
          }
          if (typeof res !== "string") {
            return callback(null, res);
          }
          const info = {};
          const lines = res.split("\r\n");
          for (let i2 = 0; i2 < lines.length; ++i2) {
            const [fieldName, ...fieldValueParts] = lines[i2].split(":");
            const fieldValue = fieldValueParts.join(":");
            if (fieldValue) {
              info[fieldName] = fieldValue;
            }
          }
          if (!info.loading || info.loading === "0") {
            callback(null, info);
          } else {
            const loadingEtaMs = (info.loading_eta_seconds || 1) * 1e3;
            const retryTime = _this.options.maxLoadingRetryTime && _this.options.maxLoadingRetryTime < loadingEtaMs ? _this.options.maxLoadingRetryTime : loadingEtaMs;
            debug("Redis server still loading, trying again in " + retryTime + "ms");
            setTimeout(function() {
              _this._readyCheck(callback);
            }, retryTime);
          }
        }).catch(lodash_1.noop);
      }
    };
    Redis2.Cluster = cluster_1.default;
    Redis2.Command = Command_1.default;
    Redis2.defaultOptions = RedisOptions_1.DEFAULT_REDIS_OPTIONS;
    (0, applyMixin_1.default)(Redis2, events_1.EventEmitter);
    (0, transaction_1.addTransactionSupport)(Redis2.prototype);
    exports.default = Redis2;
  }
});

// node_modules/ioredis/built/index.js
var require_built3 = __commonJS({
  "node_modules/ioredis/built/index.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.print = exports.ReplyError = exports.SentinelIterator = exports.SentinelConnector = exports.AbstractConnector = exports.Pipeline = exports.ScanStream = exports.Command = exports.Cluster = exports.Redis = exports.default = void 0;
    exports = module2.exports = require_Redis().default;
    var Redis_1 = require_Redis();
    Object.defineProperty(exports, "default", { enumerable: true, get: function() {
      return Redis_1.default;
    } });
    var Redis_2 = require_Redis();
    Object.defineProperty(exports, "Redis", { enumerable: true, get: function() {
      return Redis_2.default;
    } });
    var cluster_1 = require_cluster();
    Object.defineProperty(exports, "Cluster", { enumerable: true, get: function() {
      return cluster_1.default;
    } });
    var Command_1 = require_Command();
    Object.defineProperty(exports, "Command", { enumerable: true, get: function() {
      return Command_1.default;
    } });
    var ScanStream_1 = require_ScanStream();
    Object.defineProperty(exports, "ScanStream", { enumerable: true, get: function() {
      return ScanStream_1.default;
    } });
    var Pipeline_1 = require_Pipeline();
    Object.defineProperty(exports, "Pipeline", { enumerable: true, get: function() {
      return Pipeline_1.default;
    } });
    var AbstractConnector_1 = require_AbstractConnector();
    Object.defineProperty(exports, "AbstractConnector", { enumerable: true, get: function() {
      return AbstractConnector_1.default;
    } });
    var SentinelConnector_1 = require_SentinelConnector();
    Object.defineProperty(exports, "SentinelConnector", { enumerable: true, get: function() {
      return SentinelConnector_1.default;
    } });
    Object.defineProperty(exports, "SentinelIterator", { enumerable: true, get: function() {
      return SentinelConnector_1.SentinelIterator;
    } });
    exports.ReplyError = require_redis_errors().ReplyError;
    Object.defineProperty(exports, "Promise", {
      get() {
        console.warn("ioredis v5 does not support plugging third-party Promise library anymore. Native Promise will be used.");
        return Promise;
      },
      set(_lib) {
        console.warn("ioredis v5 does not support plugging third-party Promise library anymore. Native Promise will be used.");
      }
    });
    function print(err, reply) {
      if (err) {
        console.log("Error: " + err);
      } else {
        console.log("Reply: " + reply);
      }
    }
    exports.print = print;
  }
});

// node_modules/lambda-api/lib/errors.js
var require_errors2 = __commonJS({
  "node_modules/lambda-api/lib/errors.js"(exports, module2) {
    "use strict";
    var RouteError = class extends Error {
      constructor(message, path) {
        super(message);
        this.name = this.constructor.name;
        this.path = path;
      }
    };
    var MethodError = class extends Error {
      constructor(message, method, path) {
        super(message);
        this.name = this.constructor.name;
        this.method = method;
        this.path = path;
      }
    };
    var ConfigurationError = class extends Error {
      constructor(message) {
        super(message);
        this.name = this.constructor.name;
      }
    };
    var ResponseError = class extends Error {
      constructor(message, code) {
        super(message);
        this.name = this.constructor.name;
        this.code = code;
      }
    };
    var FileError = class extends Error {
      constructor(message, err) {
        super(message);
        this.name = this.constructor.name;
        for (let e2 in err)
          this[e2] = err[e2];
      }
    };
    module2.exports = {
      RouteError,
      MethodError,
      ConfigurationError,
      ResponseError,
      FileError
    };
  }
});

// node_modules/lambda-api/lib/mimemap.js
var require_mimemap = __commonJS({
  "node_modules/lambda-api/lib/mimemap.js"(exports, module2) {
    "use strict";
    module2.exports = {
      gif: "image/gif",
      ico: "image/x-icon",
      jpg: "image/jpeg",
      jpeg: "image/jpeg",
      png: "image/png",
      svg: "image/svg+xml",
      svgz: "image/svg+xml",
      atom: "application/atom+xml",
      css: "text/css",
      csv: "text/csv",
      html: "text/html",
      htm: "text/html",
      js: "application/javascript",
      json: "application/json",
      map: "application/json",
      rdf: "application/rdf+xml",
      rss: "application/rss+xml",
      txt: "text/plain",
      webmanifest: "application/manifest+json",
      xml: "application/xml",
      gz: "application/gzip",
      pdf: "application/pdf",
      zip: "application/zip",
      woff: "application/font-woff",
      doc: "application/msword",
      dot: "application/msword",
      docx: "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
      dotx: "application/vnd.openxmlformats-officedocument.wordprocessingml.template",
      docm: "application/vnd.ms-word.document.macroEnabled.12",
      dotm: "application/vnd.ms-word.template.macroEnabled.12",
      xls: "application/vnd.ms-excel",
      xlt: "application/vnd.ms-excel",
      xla: "application/vnd.ms-excel",
      xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
      xltx: "application/vnd.openxmlformats-officedocument.spreadsheetml.template",
      xlsm: "application/vnd.ms-excel.sheet.macroEnabled.12",
      xltm: "application/vnd.ms-excel.template.macroEnabled.12",
      xlam: "application/vnd.ms-excel.addin.macroEnabled.12",
      xlsb: "application/vnd.ms-excel.sheet.binary.macroEnabled.12",
      ppt: "application/vnd.ms-powerpoint",
      pot: "application/vnd.ms-powerpoint",
      pps: "application/vnd.ms-powerpoint",
      ppa: "application/vnd.ms-powerpoint",
      pptx: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
      potx: "application/vnd.openxmlformats-officedocument.presentationml.template",
      ppsx: "application/vnd.openxmlformats-officedocument.presentationml.slideshow",
      ppam: "application/vnd.ms-powerpoint.addin.macroEnabled.12",
      pptm: "application/vnd.ms-powerpoint.presentation.macroEnabled.12",
      potm: "application/vnd.ms-powerpoint.template.macroEnabled.12",
      ppsm: "application/vnd.ms-powerpoint.slideshow.macroEnabled.12",
      mdb: "application/vnd.ms-access"
    };
  }
});

// node_modules/lambda-api/lib/statusCodes.js
var require_statusCodes = __commonJS({
  "node_modules/lambda-api/lib/statusCodes.js"(exports, module2) {
    "use strict";
    module2.exports = {
      100: "Continue",
      101: "Switching Protocols",
      102: "Processing",
      103: "Early Hints",
      200: "OK",
      201: "Created",
      202: "Accepted",
      203: "Non-Authoritative Information",
      204: "No Content",
      205: "Reset Content",
      206: "Partial Content",
      207: "Multi-Status",
      208: "Already Reported",
      226: "IM Used",
      300: "Multiple Choices",
      301: "Moved Permanently",
      302: "Found",
      303: "See Other",
      304: "Not Modified",
      305: "Use Proxy",
      307: "Temporary Redirect",
      308: "Permanent Redirect",
      400: "Bad Request",
      401: "Unauthorized",
      402: "Payment Required",
      403: "Forbidden",
      404: "Not Found",
      405: "Method Not Allowed",
      406: "Not Acceptable",
      407: "Proxy Authentication Required",
      408: "Request Timeout",
      409: "Conflict",
      410: "Gone",
      411: "Length Required",
      412: "Precondition Failed",
      413: "Payload Too Large",
      414: "URI Too Long",
      415: "Unsupported Media Type",
      416: "Range Not Satisfiable",
      417: "Expectation Failed",
      421: "Misdirected Request",
      422: "Unprocessable Entity",
      423: "Locked",
      424: "Failed Dependency",
      425: "Too Early",
      426: "Upgrade Required",
      428: "Precondition Required",
      429: "Too Many Requests",
      431: "Request Header Fields Too Large",
      451: "Unavailable For Legal Reasons",
      500: "Internal Server Error",
      501: "Not Implemented",
      502: "Bad Gateway",
      503: "Service Unavailable",
      504: "Gateway Timeout",
      505: "HTTP Version Not Supported",
      506: "Variant Also Negotiates",
      507: "Insufficient Storage",
      508: "Loop Detected",
      510: "Not Extended",
      511: "Network Authentication Required"
    };
  }
});

// node_modules/lambda-api/lib/utils.js
var require_utils3 = __commonJS({
  "node_modules/lambda-api/lib/utils.js"(exports) {
    "use strict";
    var QS = require("querystring");
    var crypto = require("crypto");
    var { FileError } = require_errors2();
    var entityMap = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#39;"
    };
    exports.escapeHtml = (html) => html.replace(/[&<>"']/g, (s2) => entityMap[s2]);
    var ENCODE_CHARS_REGEXP = /(?:[^\x21\x25\x26-\x3B\x3D\x3F-\x5B\x5D\x5F\x61-\x7A\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g;
    var UNMATCHED_SURROGATE_PAIR_REGEXP = /(^|[^\uD800-\uDBFF])[\uDC00-\uDFFF]|[\uD800-\uDBFF]([^\uDC00-\uDFFF]|$)/g;
    var UNMATCHED_SURROGATE_PAIR_REPLACE = "$1\uFFFD$2";
    exports.encodeUrl = (url) => String(url).replace(UNMATCHED_SURROGATE_PAIR_REGEXP, UNMATCHED_SURROGATE_PAIR_REPLACE).replace(ENCODE_CHARS_REGEXP, encodeURI);
    var encodeBody = (body, serializer) => {
      const encode = typeof serializer === "function" ? serializer : JSON.stringify;
      return typeof body === "object" ? encode(body) : body && typeof body !== "string" ? body.toString() : body ? body : "";
    };
    exports.encodeBody = encodeBody;
    exports.parsePath = (path) => {
      return path ? path.trim().split("?")[0].replace(/^\/(.*?)(\/)*$/, "$1").split("/") : [];
    };
    exports.parseBody = (body) => {
      try {
        return JSON.parse(body);
      } catch (e2) {
        return body;
      }
    };
    var parseAuthValue = (type, value) => {
      switch (type) {
        case "Basic": {
          let creds = Buffer.from(value, "base64").toString().split(":");
          return {
            type,
            value,
            username: creds[0],
            password: creds[1] ? creds[1] : null
          };
        }
        case "OAuth": {
          let params = QS.parse(
            value.replace(/",\s*/g, "&").replace(/"/g, "").trim()
          );
          return Object.assign({ type, value }, params);
        }
        default: {
          return { type, value };
        }
      }
    };
    exports.parseAuth = (authStr) => {
      let auth = authStr && typeof authStr === "string" ? authStr.split(" ") : [];
      return auth.length > 1 && ["Bearer", "Basic", "Digest", "OAuth"].includes(auth[0]) ? parseAuthValue(auth[0], auth.slice(1).join(" ").trim()) : { type: "none", value: null };
    };
    var mimeMap = require_mimemap();
    exports.mimeLookup = (input, custom = {}) => {
      let type = input.trim().replace(/^\./, "");
      if (/.*\/.*/.test(type)) {
        return input.trim();
      } else {
        let mime = Object.assign(mimeMap, custom)[type];
        return mime ? mime : false;
      }
    };
    var statusCodes = require_statusCodes();
    exports.statusLookup = (status) => {
      return status in statusCodes ? statusCodes[status] : "Unknown";
    };
    var extractRoutes = (routes, table = []) => {
      for (let route in routes["ROUTES"]) {
        for (let method in routes["ROUTES"][route]["METHODS"]) {
          table.push([
            method,
            routes["ROUTES"][route]["METHODS"][method].path,
            routes["ROUTES"][route]["METHODS"][method].stack.map(
              (x2) => x2.name.trim() !== "" ? x2.name : "unnamed"
            )
          ]);
        }
        extractRoutes(routes["ROUTES"][route], table);
      }
      return table;
    };
    exports.extractRoutes = extractRoutes;
    exports.generateEtag = (data) => crypto.createHash("sha256").update(encodeBody(data)).digest("hex").substr(0, 32);
    exports.isS3 = (path) => /^s3:\/\/.+\/.+/i.test(path);
    exports.parseS3 = (path) => {
      if (!exports.isS3(path))
        throw new FileError("Invalid S3 path", { path });
      let s3object = path.replace(/^s3:\/\//i, "").split("/");
      return { Bucket: s3object.shift(), Key: s3object.join("/") };
    };
    exports.deepMerge = (a, b) => {
      Object.keys(b).forEach((key) => {
        if (key === "__proto__")
          return;
        if (typeof b[key] !== "object")
          return Object.assign(a, b);
        return key in a ? exports.deepMerge(a[key], b[key]) : Object.assign(a, b);
      });
      return a;
    };
    exports.mergeObjects = (obj1, obj2) => Object.keys(Object.assign({}, obj1, obj2)).reduce((acc, key) => {
      if (obj1[key] && obj2[key] && obj1[key].every((e2) => obj2[key].includes(e2))) {
        return Object.assign(acc, { [key]: obj1[key] });
      } else {
        return Object.assign(acc, {
          [key]: obj1[key] ? obj2[key] ? obj1[key].concat(obj2[key]) : obj1[key] : obj2[key]
        });
      }
    }, {});
    exports.fromArray = (val) => val && val instanceof Array ? val.toString() : void 0;
    exports.stringifyHeaders = (headers) => Object.keys(headers).reduce(
      (acc, key) => Object.assign(acc, {
        [key]: key === "set-cookie" ? headers[key].slice(-1)[0] : headers[key].toString()
      }),
      {}
    );
  }
});

// node_modules/lambda-api/lib/logger.js
var require_logger = __commonJS({
  "node_modules/lambda-api/lib/logger.js"(exports) {
    "use strict";
    var UTILS = require_utils3();
    var { ConfigurationError } = require_errors2();
    exports.config = (config, levels) => {
      let cfg = config ? config : {};
      if (cfg.levels && typeof cfg.levels === "object") {
        for (let lvl in cfg.levels) {
          if (!/^[A-Za-z_]\w*$/.test(lvl) || isNaN(cfg.levels[lvl])) {
            throw new ConfigurationError("Invalid level configuration");
          }
        }
        levels = Object.assign(levels, cfg.levels);
      }
      let sampling = cfg.sampling ? parseSamplerConfig(cfg.sampling, levels) : false;
      let level = cfg === true ? "info" : cfg.level && levels[cfg.level.toLowerCase()] ? cfg.level.toLowerCase() : cfg.level === "none" ? "none" : Object.keys(cfg).length > 0 ? "info" : "none";
      let messageKey = cfg.messageKey && typeof cfg.messageKey === "string" ? cfg.messageKey.trim() : "msg";
      let customKey = cfg.customKey && typeof cfg.customKey === "string" ? cfg.customKey.trim() : "custom";
      let timestamp = cfg.timestamp === false ? () => void 0 : typeof cfg.timestamp === "function" ? cfg.timestamp : () => Date.now();
      let timer = cfg.timer === false ? () => void 0 : (start) => Date.now() - start;
      let nested = cfg.nested === true ? true : false;
      let stack = cfg.stack === true ? true : false;
      let access = cfg.access === true ? true : cfg.access === "never" ? "never" : false;
      let detail = cfg.detail === true ? true : false;
      let multiValue = cfg.multiValue === true ? true : false;
      let defaults = {
        req: (req) => {
          return {
            path: req.path,
            ip: req.ip,
            ua: req.userAgent,
            device: req.clientType,
            country: req.clientCountry,
            version: req.version,
            qs: multiValue ? Object.keys(req.multiValueQuery).length > 0 ? req.multiValueQuery : void 0 : Object.keys(req.query).length > 0 ? req.query : void 0
          };
        },
        res: () => {
          return {};
        },
        context: (context) => {
          return {
            remaining: context.getRemainingTimeInMillis && context.getRemainingTimeInMillis(),
            function: context.functionName && context.functionName,
            memory: context.memoryLimitInMB && context.memoryLimitInMB
          };
        },
        custom: (custom) => typeof custom === "object" && !Array.isArray(custom) || nested ? custom : { [customKey]: custom }
      };
      let serializers = {
        main: cfg.serializers && typeof cfg.serializers.main === "function" ? cfg.serializers.main : () => {
        },
        req: cfg.serializers && typeof cfg.serializers.req === "function" ? cfg.serializers.req : () => {
        },
        res: cfg.serializers && typeof cfg.serializers.res === "function" ? cfg.serializers.res : () => {
        },
        context: cfg.serializers && typeof cfg.serializers.context === "function" ? cfg.serializers.context : () => {
        },
        custom: cfg.serializers && typeof cfg.serializers.custom === "function" ? cfg.serializers.custom : () => {
        }
      };
      let logger = cfg.log && typeof cfg.log === "function" ? cfg.log : (...a) => console.log(...a);
      let log = (level2, msg, req, context, custom) => {
        let _context = Object.assign(
          {},
          defaults.context(context),
          serializers.context(context)
        );
        let _custom = typeof custom === "object" && !Array.isArray(custom) ? Object.assign({}, defaults.custom(custom), serializers.custom(custom)) : defaults.custom(custom);
        return Object.assign(
          {},
          {
            level: level2,
            time: timestamp(),
            id: req.id,
            route: req.route,
            method: req.method,
            [messageKey]: msg,
            timer: timer(req._start),
            int: req.interface,
            sample: req._sample ? true : void 0
          },
          serializers.main(req),
          nested ? { [customKey]: _custom } : _custom,
          nested ? { context: _context } : _context
        );
      };
      let format = function(info, req, res) {
        let _req = Object.assign({}, defaults.req(req), serializers.req(req));
        let _res = Object.assign({}, defaults.res(res), serializers.res(res));
        return Object.assign(
          {},
          info,
          nested ? { req: _req } : _req,
          nested ? { res: _res } : _res
        );
      };
      return {
        level,
        stack,
        logger,
        log,
        format,
        access,
        detail,
        sampling,
        errorLogging: cfg.errorLogging !== false
      };
    };
    exports.sampler = (app, req) => {
      if (app._logger.sampling) {
        let level = false;
        let map = app._logger.sampling.rulesMap;
        let route = UTILS.parsePath(req.route);
        let wildcard = {};
        route.forEach((part) => {
          if (map["*"])
            wildcard = map["*"];
          map = map[part] ? map[part] : {};
        });
        let ref = map["__" + req.method] ? map["__" + req.method] : map["__ANY"] ? map["__ANY"] : wildcard["__" + req.method] ? wildcard["__" + req.method] : wildcard["__ANY"] ? wildcard["__ANY"] : -1;
        let rule = ref >= 0 ? app._logger.sampling.rules[ref] : app._logger.sampling.defaults;
        req._sampleRule = rule;
        let counts = app._sampleCounts[rule.default ? "default" : req.route] || Object.assign(app._sampleCounts, {
          [rule.default ? "default" : req.route]: {
            start: 0,
            fCount: 0,
            pCount: 0,
            tCount: 0
          }
        })[rule.default ? "default" : req.route];
        let now = Date.now();
        let velocity = rule.rate > 0 ? rule.period * 1e3 / (counts.tCount / (now - app._initTime) * rule.period * 1e3 * rule.rate) : 0;
        if (now - counts.start > rule.period * 1e3) {
          counts.start = now;
          counts.pCount = 0;
          if (rule.target > 0) {
            counts.fCount = 1;
            level = rule.level;
          }
        } else if (rule.target > 0 && counts.start + Math.floor(rule.period * 1e3 / rule.target * counts.fCount) < now) {
          level = rule.level;
          counts.fCount++;
        } else if (rule.rate > 0 && counts.start + Math.floor(velocity * counts.pCount + velocity / 2) < now) {
          level = rule.level;
          counts.pCount++;
        }
        counts.tCount++;
        return level;
      }
      return false;
    };
    var parseSamplerConfig = (config, levels) => {
      let cfg = typeof config === "object" ? config : config === true ? {} : false;
      if (cfg === false)
        throw new ConfigurationError("Invalid sampler configuration");
      let defaults = (inputs) => {
        return {
          target: Number.isInteger(inputs.target) ? inputs.target : 1,
          rate: !isNaN(inputs.rate) && inputs.rate <= 1 ? inputs.rate : 0.1,
          period: Number.isInteger(inputs.period) ? inputs.period : 60,
          level: Object.keys(levels).includes(inputs.level) ? inputs.level : "trace"
        };
      };
      let rulesMap = {};
      let rules = Array.isArray(cfg.rules) ? cfg.rules.map((rule, i2) => {
        if (!rule.route || typeof rule.route !== "string")
          throw new ConfigurationError("Invalid route specified in rule");
        let methods = (Array.isArray(rule.method) ? rule.method : typeof rule.method === "string" ? rule.method.split(",") : ["ANY"]).map((x2) => x2.toString().trim().toUpperCase());
        let map = {};
        let recursive = map;
        UTILS.parsePath(rule.route).forEach((part) => {
          Object.assign(recursive, { [part === "" ? "/" : part]: {} });
          recursive = recursive[part === "" ? "/" : part];
        });
        Object.assign(
          recursive,
          methods.reduce((acc, method) => {
            return Object.assign(acc, { ["__" + method]: i2 });
          }, {})
        );
        UTILS.deepMerge(rulesMap, map);
        return defaults(rule);
      }, {}) : {};
      return {
        defaults: Object.assign(defaults(cfg), { default: true }),
        rules,
        rulesMap
      };
    };
  }
});

// node_modules/lambda-api/lib/request.js
var require_request = __commonJS({
  "node_modules/lambda-api/lib/request.js"(exports, module2) {
    "use strict";
    var QS = require("querystring");
    var UTILS = require_utils3();
    var LOGGER = require_logger();
    var { RouteError, MethodError } = require_errors2();
    var REQUEST = class {
      constructor(app) {
        this._start = Date.now();
        this.app = app;
        this.coldStart = app._requestCount === 0 ? true : false;
        this.requestCount = ++app._requestCount;
        this._handler;
        this._stack;
        this.namespace = this.ns = app._app;
        this.version = app._version;
        this.params = {};
        this.headers = {};
        this._multiValueSupport = null;
        app.log = this.log = Object.keys(app._logLevels).reduce(
          (acc, lvl) => Object.assign(acc, {
            [lvl]: (m2, c) => this.logger(lvl, m2, this, this.context, c)
          }),
          {}
        );
        this._logs = [];
      }
      async parseRequest() {
        this.payloadVersion = this.app._event.version ? this.app._event.version : null;
        this._multiValueSupport = "multiValueHeaders" in this.app._event;
        this.method = this.app._event.httpMethod ? this.app._event.httpMethod.toUpperCase() : this.app._event.requestContext && this.app._event.requestContext.http ? this.app._event.requestContext.http.method.toUpperCase() : "GET";
        this.path = this.payloadVersion === "2.0" ? this.app._event.rawPath : this.app._event.path;
        this.query = Object.assign(
          {},
          this.app._event.queryStringParameters,
          "queryStringParameters" in this.app._event ? {} : Object.keys(
            Object.assign({}, this.app._event.multiValueQueryStringParameters)
          ).reduce(
            (qs, key) => Object.assign(
              qs,
              {
                [key]: decodeURIComponent(
                  this.app._event.multiValueQueryStringParameters[key].slice(
                    -1
                  )[0]
                )
              }
            ),
            {}
          )
        );
        this.multiValueQuery = Object.assign(
          {},
          this._multiValueSupport ? {} : Object.keys(this.query).reduce(
            (qs, key) => Object.assign(qs, { [key]: this.query[key].split(",") }),
            {}
          ),
          this.app._event.multiValueQueryStringParameters
        );
        this.rawHeaders = this._multiValueSupport && this.app._event.multiValueHeaders !== null ? Object.keys(this.app._event.multiValueHeaders).reduce(
          (headers, key) => Object.assign(headers, {
            [key]: UTILS.fromArray(this.app._event.multiValueHeaders[key])
          }),
          {}
        ) : this.app._event.headers || {};
        this.headers = Object.keys(this.rawHeaders).reduce(
          (acc, header) => Object.assign(acc, { [header.toLowerCase()]: this.rawHeaders[header] }),
          {}
        );
        this.multiValueHeaders = this._multiValueSupport ? this.app._event.multiValueHeaders : Object.keys(this.headers).reduce(
          (headers, key) => Object.assign(headers, {
            [key.toLowerCase()]: this.headers[key].split(",")
          }),
          {}
        );
        this.userAgent = this.headers["user-agent"];
        let cookies = this.app._event.cookies ? this.app._event.cookies : this.headers.cookie ? this.headers.cookie.split(";") : [];
        this.cookies = cookies.reduce((acc, cookie) => {
          cookie = cookie.trim().split("=");
          return Object.assign(acc, {
            [cookie[0]]: UTILS.parseBody(decodeURIComponent(cookie[1]))
          });
        }, {});
        this.auth = UTILS.parseAuth(this.headers.authorization);
        this.requestContext = this.app._event.requestContext || {};
        this.ip = this.headers["x-forwarded-for"] && this.headers["x-forwarded-for"].split(",")[0].trim() || this.requestContext["identity"] && this.requestContext["identity"]["sourceIp"] && this.requestContext["identity"]["sourceIp"].split(",")[0].trim();
        this.interface = this.requestContext.elb ? "alb" : "apigateway";
        this.pathParameters = this.app._event.pathParameters || {};
        this.stageVariables = this.app._event.stageVariables || {};
        this.isBase64Encoded = this.app._event.isBase64Encoded || false;
        this.context = this.app.context && typeof this.app.context === "object" ? this.app.context : {};
        this.id = this.context.awsRequestId ? this.context.awsRequestId : null;
        this.clientType = this.headers["cloudfront-is-desktop-viewer"] === "true" ? "desktop" : this.headers["cloudfront-is-mobile-viewer"] === "true" ? "mobile" : this.headers["cloudfront-is-smarttv-viewer"] === "true" ? "tv" : this.headers["cloudfront-is-tablet-viewer"] === "true" ? "tablet" : "unknown";
        this.clientCountry = this.headers["cloudfront-viewer-country"] ? this.headers["cloudfront-viewer-country"].toUpperCase() : "unknown";
        this.rawBody = this.app._event.body;
        this.body = this.app._event.isBase64Encoded ? Buffer.from(this.app._event.body || "", "base64").toString() : this.app._event.body;
        if (this.headers["content-type"] && this.headers["content-type"].includes("application/x-www-form-urlencoded")) {
          this.body = QS.parse(this.body);
        } else if (typeof this.body === "object") {
        } else {
          this.body = UTILS.parseBody(this.body);
        }
        this.stack = null;
        let path = UTILS.parsePath(this.path);
        this.route = null;
        let routes = this.app._routes;
        let wc = [];
        for (let i2 = 0; i2 < path.length; i2++) {
          if (routes["ROUTES"] && routes["ROUTES"]["*"]) {
            wc.push(routes["ROUTES"]["*"]);
          }
          if (routes["ROUTES"] && routes["ROUTES"][path[i2]]) {
            routes = routes["ROUTES"][path[i2]];
          } else if (routes["ROUTES"] && routes["ROUTES"]["__VAR__"]) {
            routes = routes["ROUTES"]["__VAR__"];
          } else if (wc[wc.length - 1] && wc[wc.length - 1]["METHODS"] && (this.method !== "OPTIONS" && Object.keys(wc[wc.length - 1]["METHODS"]).toString() !== "OPTIONS" || this.validWildcard(wc, this.method))) {
            routes = wc[wc.length - 1];
          } else {
            this.app._errorStatus = 404;
            throw new RouteError("Route not found", "/" + path.join("/"));
          }
        }
        let wildcard = wc.pop();
        let route = routes["METHODS"] && routes["METHODS"][this.method] ? routes["METHODS"][this.method] : routes["METHODS"] && routes["METHODS"]["ANY"] ? routes["METHODS"]["ANY"] : wildcard && wildcard["METHODS"] && wildcard["METHODS"][this.method] ? wildcard["METHODS"][this.method] : wildcard && wildcard["METHODS"] && wildcard["METHODS"]["ANY"] ? wildcard["METHODS"]["ANY"] : this.method === "HEAD" && routes["METHODS"] && routes["METHODS"]["GET"] ? routes["METHODS"]["GET"] : void 0;
        if (route) {
          for (let x2 in route.vars) {
            route.vars[x2].map((y) => this.params[y] = path[x2]);
          }
          this.route = route.route;
          this._stack = route.stack;
          this.stack = this._stack.map(
            (x2) => x2.name.trim() !== "" ? x2.name : "unnamed"
          );
        } else {
          this.app._errorStatus = 405;
          throw new MethodError(
            "Method not allowed",
            this.method,
            "/" + path.join("/")
          );
        }
        this._sampleRule = {};
        this._sample = LOGGER.sampler(this.app, this);
      }
      logger(...args) {
        this.app._logger.level !== "none" && this.app._logLevels[args[0]] >= this.app._logLevels[this._sample ? this._sample : this.app._logger.level] && this._logs.push(this.app._logger.log(...args));
      }
      validWildcard(wc) {
        return Object.keys(wc[wc.length - 1]["METHODS"]).length > 1 || wc.length > 1 && this.validWildcard(wc.slice(0, -1));
      }
    };
    module2.exports = REQUEST;
  }
});

// node_modules/lambda-api/lib/compression.js
var require_compression = __commonJS({
  "node_modules/lambda-api/lib/compression.js"(exports) {
    "use strict";
    var zlib2 = require("zlib");
    var defaultEnabledEcodings = ["gzip", "deflate"];
    exports.compress = (input, headers, _enabledEncodings) => {
      const enabledEncodings = new Set(_enabledEncodings || defaultEnabledEcodings);
      const acceptEncodingHeader = headers["accept-encoding"] || "";
      const acceptableEncodings = new Set(
        acceptEncodingHeader.toLowerCase().split(",").map((str) => str.trim())
      );
      if (acceptableEncodings.has("br") && enabledEncodings.has("br") && typeof zlib2.brotliCompressSync === "function") {
        return {
          data: zlib2.brotliCompressSync(input),
          contentEncoding: "br"
        };
      }
      if (acceptableEncodings.has("gzip") && enabledEncodings.has("gzip")) {
        return {
          data: zlib2.gzipSync(input),
          contentEncoding: "gzip"
        };
      }
      if (acceptableEncodings.has("deflate") && enabledEncodings.has("deflate")) {
        return {
          data: zlib2.deflateSync(input),
          contentEncoding: "deflate"
        };
      }
      return {
        data: input,
        contentEncoding: null
      };
    };
  }
});

// node_modules/lambda-api/lib/s3-service.js
var require_s3_service = __commonJS({
  "node_modules/lambda-api/lib/s3-service.js"(exports, module2) {
    "use strict";
    var AWS = require("aws-sdk");
    module2.exports = new AWS.S3();
  }
});

// node_modules/lambda-api/lib/response.js
var require_response = __commonJS({
  "node_modules/lambda-api/lib/response.js"(exports, module2) {
    "use strict";
    var UTILS = require_utils3();
    var fs2 = require("fs");
    var path = require("path");
    var compression = require_compression();
    var { ResponseError, FileError } = require_errors2();
    var S3 = require_s3_service();
    var RESPONSE = class {
      constructor(app, request) {
        app._response = this;
        this.app = app;
        this._request = request;
        this._serializer = app._serializer;
        this._state = "processing";
        this._statusCode = 200;
        this._headers = Object.assign(
          {
            "content-type": ["application/json"]
          },
          app._headers
        );
        this._isBase64 = app._isBase64;
        this._compression = app._compression;
        this._callback = "callback";
        this._etag = false;
        this._response = {};
      }
      status(code) {
        this._statusCode = code;
        return this;
      }
      header(key, value, append) {
        let _key = key.toLowerCase();
        let _values = value ? Array.isArray(value) ? value : [value] : [""];
        this._headers[_key] = append ? this.hasHeader(_key) ? this._headers[_key].concat(_values) : _values : _values;
        return this;
      }
      getHeader(key, asArr) {
        if (!key)
          return asArr ? this._headers : Object.keys(this._headers).reduce(
            (headers, key2) => Object.assign(headers, { [key2]: this._headers[key2].toString() }),
            {}
          );
        return asArr ? this._headers[key.toLowerCase()] : this._headers[key.toLowerCase()] ? this._headers[key.toLowerCase()].toString() : void 0;
      }
      getHeaders() {
        return this._headers;
      }
      removeHeader(key) {
        delete this._headers[key.toLowerCase()];
        return this;
      }
      hasHeader(key) {
        return this.getHeader(key ? key : "") !== void 0;
      }
      json(body) {
        this.header("Content-Type", "application/json").send(
          this._serializer(body)
        );
      }
      jsonp(body) {
        let query = this.app._event.queryStringParameters || {};
        let cb = query[this.app._callbackName];
        this.header("Content-Type", "application/json").send(
          (cb ? cb.replace(" ", "_") : "callback") + "(" + this._serializer(body) + ")"
        );
      }
      html(body) {
        this.header("Content-Type", "text/html").send(body);
      }
      location(path2) {
        this.header("Location", UTILS.encodeUrl(path2));
        return this;
      }
      async redirect(path2) {
        let statusCode = 302;
        try {
          if (arguments.length === 2) {
            if ([300, 301, 302, 303, 307, 308].includes(arguments[0])) {
              statusCode = arguments[0];
              path2 = arguments[1];
            } else {
              throw new ResponseError(
                arguments[0] + " is an invalid redirect status code",
                arguments[0]
              );
            }
          }
          if (UTILS.isS3(path2))
            path2 = await this.getLink(path2);
          let url = UTILS.escapeHtml(path2);
          this.location(path2).status(statusCode).html(
            `<p>${statusCode} Redirecting to <a href="${url}">${url}</a></p>`
          );
        } catch (e2) {
          this.error(e2);
        }
      }
      async getLink(path2, expires, callback) {
        let params = UTILS.parseS3(path2);
        params.Expires = !isNaN(expires) ? parseInt(expires) : 900;
        let fn = typeof expires === "function" ? expires : typeof callback === "function" ? callback : (e2) => {
          if (e2)
            this.error(e2);
        };
        return await new Promise(
          (r2) => S3.getSignedUrl("getObject", params, async (e2, url) => {
            if (e2) {
              await fn(e2);
              this.error(e2);
            }
            r2(url);
          })
        );
      }
      cookie(name, value, opts = {}) {
        let cookieString = (typeof name !== "string" ? name.toString() : name) + "=" + encodeURIComponent(UTILS.encodeBody(value));
        cookieString += opts.domain ? "; Domain=" + opts.domain : "";
        cookieString += opts.expires && typeof opts.expires.toUTCString === "function" ? "; Expires=" + opts.expires.toUTCString() : "";
        cookieString += opts.httpOnly && opts.httpOnly === true ? "; HttpOnly" : "";
        cookieString += opts.maxAge && !isNaN(opts.maxAge) ? "; MaxAge=" + (opts.maxAge / 1e3 | 0) + (!opts.expires ? "; Expires=" + new Date(Date.now() + opts.maxAge).toUTCString() : "") : "";
        cookieString += opts.path ? "; Path=" + opts.path : "; Path=/";
        cookieString += opts.secure && opts.secure === true ? "; Secure" : "";
        cookieString += opts.sameSite !== void 0 ? "; SameSite=" + (opts.sameSite === true ? "Strict" : opts.sameSite === false ? "Lax" : opts.sameSite) : "";
        this.header("Set-Cookie", cookieString, true);
        return this;
      }
      clearCookie(name, opts = {}) {
        let options = Object.assign(opts, { expires: new Date(1), maxAge: -1e3 });
        return this.cookie(name, "", options);
      }
      attachment(filename) {
        let name = typeof filename === "string" && filename.trim().length > 0 ? path.parse(filename) : void 0;
        this.header(
          "Content-Disposition",
          "attachment" + (name ? '; filename="' + name.base + '"' : "")
        );
        if (name) {
          this.type(name.ext);
        }
        return this;
      }
      download(file, filename, options, callback) {
        let name = filename;
        let opts = typeof options === "object" ? options : {};
        let fn = typeof callback === "function" ? callback : void 0;
        if (typeof filename === "function") {
          name = void 0;
          fn = filename;
        } else if (typeof options === "function") {
          fn = options;
        }
        if (typeof filename === "object") {
          name = void 0;
          opts = filename;
        }
        this.attachment(
          name ? name : typeof file === "string" ? path.basename(file) : null
        );
        this.sendFile(file, opts, fn);
      }
      async sendFile(file, options, callback) {
        let buffer, modified;
        let opts = typeof options === "object" ? options : {};
        let fn = typeof callback === "function" ? callback : () => {
        };
        if (typeof options === "function") {
          fn = options;
        }
        try {
          if (typeof file === "string") {
            let filepath = file.trim();
            if (/^s3:\/\//i.test(filepath)) {
              let params = UTILS.parseS3(filepath);
              let data = await S3.getObject(params).promise();
              buffer = data.Body;
              modified = data.LastModified;
              this.type(data.ContentType);
              this.header("ETag", data.ETag);
            } else {
              buffer = fs2.readFileSync((opts.root ? opts.root : "") + filepath);
              modified = opts.lastModified !== false ? fs2.statSync((opts.root ? opts.root : "") + filepath).mtime : void 0;
              this.type(path.extname(filepath));
            }
          } else if (Buffer.isBuffer(file)) {
            buffer = file;
          } else {
            throw new FileError("Invalid file", { path: file });
          }
          if (typeof opts.headers === "object") {
            Object.keys(opts.headers).map((header) => {
              this.header(header, opts.headers[header]);
            });
          }
          if (opts.cacheControl !== false) {
            if (opts.cacheControl !== true && opts.cacheControl !== void 0) {
              this.cache(opts.cacheControl);
            } else {
              this.cache(!isNaN(opts.maxAge) ? opts.maxAge : 0, opts.private);
            }
          }
          if (opts.lastModified !== false) {
            this.modified(opts.lastModified ? opts.lastModified : modified);
          }
          await fn();
          this._isBase64 = true;
          this.send(buffer.toString("base64"));
        } catch (e2) {
          await fn(e2);
          if (e2.code === "ENOENT") {
            this.error(new FileError("No such file", e2));
          } else {
            this.error(e2);
          }
        }
      }
      type(type) {
        let mimeType = UTILS.mimeLookup(type, this.app._mimeTypes);
        if (mimeType) {
          this.header("Content-Type", mimeType);
        }
        return this;
      }
      sendStatus(status) {
        this.status(status).send(UTILS.statusLookup(status));
      }
      cors(options) {
        const opts = typeof options === "object" ? options : {};
        let acao = this.getHeader("Access-Control-Allow-Origin");
        let acam = this.getHeader("Access-Control-Allow-Methods");
        let acah = this.getHeader("Access-Control-Allow-Headers");
        this.header(
          "Access-Control-Allow-Origin",
          opts.origin ? opts.origin : acao ? acao : "*"
        );
        this.header(
          "Access-Control-Allow-Methods",
          opts.methods ? opts.methods : acam ? acam : "GET, PUT, POST, DELETE, OPTIONS"
        );
        this.header(
          "Access-Control-Allow-Headers",
          opts.headers ? opts.headers : acah ? acah : "Content-Type, Authorization, Content-Length, X-Requested-With"
        );
        if (opts.maxAge && !isNaN(opts.maxAge))
          this.header(
            "Access-Control-Max-Age",
            (opts.maxAge / 1e3 | 0).toString()
          );
        if (opts.credentials)
          this.header(
            "Access-Control-Allow-Credentials",
            opts.credentials.toString()
          );
        if (opts.exposeHeaders)
          this.header("Access-Control-Expose-Headers", opts.exposeHeaders);
        return this;
      }
      etag(enable) {
        this._etag = enable === true ? true : false;
        return this;
      }
      cache(maxAge, isPrivate = false) {
        if (maxAge !== true && maxAge !== void 0 && typeof maxAge === "string") {
          this.header("Cache-Control", maxAge);
        } else if (maxAge === false) {
          this.header("Cache-Control", "no-cache, no-store, must-revalidate");
        } else {
          maxAge = maxAge && !isNaN(maxAge) ? maxAge / 1e3 | 0 : 0;
          this.header(
            "Cache-Control",
            (isPrivate === true ? "private, " : "") + "max-age=" + maxAge
          );
          this.header("Expires", new Date(Date.now() + maxAge).toUTCString());
        }
        return this;
      }
      modified(date) {
        if (date !== false) {
          let lastModified = date && typeof date.toUTCString === "function" ? date : date && Date.parse(date) ? new Date(date) : new Date();
          this.header("Last-Modified", lastModified.toUTCString());
        }
        return this;
      }
      send(body) {
        if (this._etag && ["GET", "HEAD"].includes(this._request.method) && !this.hasHeader("etag") && this._statusCode === 200) {
          this.header("etag", '"' + UTILS.generateEtag(body) + '"');
        }
        if (this._request.headers["if-none-match"] && this._request.headers["if-none-match"] === this.getHeader("etag")) {
          this.status(304);
          body = "";
        }
        let headers = {};
        let cookies = {};
        if (this._request.payloadVersion === "2.0") {
          if (this._headers["set-cookie"]) {
            cookies = { cookies: this._headers["set-cookie"] };
            delete this._headers["set-cookie"];
          }
        }
        if (this._request._multiValueSupport) {
          headers = { multiValueHeaders: this._headers };
        } else {
          headers = { headers: UTILS.stringifyHeaders(this._headers) };
        }
        this._response = Object.assign(
          {},
          headers,
          cookies,
          {
            statusCode: this._statusCode,
            body: this._request.method === "HEAD" ? "" : UTILS.encodeBody(body, this._serializer),
            isBase64Encoded: this._isBase64
          },
          this._request.interface === "alb" ? {
            statusDescription: `${this._statusCode} ${UTILS.statusLookup(
              this._statusCode
            )}`
          } : {}
        );
        if (this._compression && this._response.body) {
          const { data, contentEncoding } = compression.compress(
            this._response.body,
            this._request.headers,
            Array.isArray(this._compression) ? this._compression : null
          );
          if (contentEncoding) {
            Object.assign(this._response, {
              body: data.toString("base64"),
              isBase64Encoded: true
            });
            if (this._response.multiValueHeaders) {
              this._response.multiValueHeaders["content-encoding"] = [
                contentEncoding
              ];
            } else {
              this._response.headers["content-encoding"] = contentEncoding;
            }
          }
        }
        this.app._callback(null, this._response, this);
      }
      error(code, e2, detail) {
        detail = typeof code !== "number" && e2 !== void 0 ? e2 : detail;
        e2 = typeof code !== "number" ? code : e2;
        code = typeof code === "number" ? code : void 0;
        this.app.catchErrors(e2, this, code, detail);
      }
    };
    module2.exports = RESPONSE;
  }
});

// node_modules/lambda-api/lib/prettyPrint.js
var require_prettyPrint = __commonJS({
  "node_modules/lambda-api/lib/prettyPrint.js"(exports, module2) {
    "use strict";
    module2.exports = (routes) => {
      let out = "";
      let widths = routes.reduce(
        (acc, row) => {
          return [
            Math.max(acc[0], Math.max(6, row[0].length)),
            Math.max(acc[1], Math.max(5, row[1].length)),
            Math.max(acc[2], Math.max(6, row[2].join(", ").length))
          ];
        },
        [0, 0, 0]
      );
      out += "\u2554\u2550\u2550" + "".padEnd(widths[0], "\u2550") + "\u2550\u2550\u2564\u2550\u2550" + "".padEnd(widths[1], "\u2550") + "\u2550\u2550\u2564\u2550\u2550" + "".padEnd(widths[2], "\u2550") + "\u2550\u2550\u2557\n";
      out += "\u2551  \x1B[1m" + "METHOD".padEnd(widths[0]) + "\x1B[0m  \u2502  \x1B[1m" + "ROUTE".padEnd(widths[1]) + "\x1B[0m  \u2502  \x1B[1m" + "STACK".padEnd(widths[2]) + "\x1B[0m  \u2551\n";
      out += "\u255F\u2500\u2500" + "".padEnd(widths[0], "\u2500") + "\u2500\u2500\u253C\u2500\u2500" + "".padEnd(widths[1], "\u2500") + "\u2500\u2500\u253C\u2500\u2500" + "".padEnd(widths[2], "\u2500") + "\u2500\u2500\u2562\n";
      routes.forEach((route, i2) => {
        out += "\u2551  " + route[0].padEnd(widths[0]) + "  \u2502  " + route[1].padEnd(widths[1]) + "  \u2502  " + route[2].join(", ").padEnd(widths[2]) + "  \u2551\n";
        if (i2 < routes.length - 1) {
          out += "\u255F\u2500\u2500" + "".padEnd(widths[0], "\u2500") + "\u2500\u2500\u253C\u2500\u2500" + "".padEnd(widths[1], "\u2500") + "\u2500\u2500\u253C\u2500\u2500" + "".padEnd(widths[2], "\u2500") + "\u2500\u2500\u2562\n";
        }
      });
      out += "\u255A\u2550\u2550" + "".padEnd(widths[0], "\u2550") + "\u2550\u2550\u2567\u2550\u2550" + "".padEnd(widths[1], "\u2550") + "\u2550\u2550\u2567\u2550\u2550" + "".padEnd(widths[2], "\u2550") + "\u2550\u2550\u255D";
      return out;
    };
  }
});

// node_modules/lambda-api/index.js
var require_lambda_api = __commonJS({
  "node_modules/lambda-api/index.js"(exports, module2) {
    "use strict";
    var REQUEST = require_request();
    var RESPONSE = require_response();
    var UTILS = require_utils3();
    var LOGGER = require_logger();
    var prettyPrint = require_prettyPrint();
    var { ConfigurationError } = require_errors2();
    var API = class {
      constructor(props) {
        this._version = props && props.version ? props.version : "v1";
        this._base = props && props.base && typeof props.base === "string" ? props.base.trim() : "";
        this._callbackName = props && props.callback ? props.callback.trim() : "callback";
        this._mimeTypes = props && props.mimeTypes && typeof props.mimeTypes === "object" ? props.mimeTypes : {};
        this._serializer = props && props.serializer && typeof props.serializer === "function" ? props.serializer : JSON.stringify;
        this._errorHeaderWhitelist = props && Array.isArray(props.errorHeaderWhitelist) ? props.errorHeaderWhitelist.map((header) => header.toLowerCase()) : [];
        this._isBase64 = props && typeof props.isBase64 === "boolean" ? props.isBase64 : false;
        this._headers = props && props.headers && typeof props.headers === "object" ? props.headers : {};
        this._compression = props && (typeof props.compression === "boolean" || Array.isArray(props.compression)) ? props.compression : false;
        this._sampleCounts = {};
        this._requestCount = 0;
        this._initTime = Date.now();
        this._logLevels = {
          trace: 10,
          debug: 20,
          info: 30,
          warn: 40,
          error: 50,
          fatal: 60
        };
        this._logger = LOGGER.config(props && props.logger, this._logLevels);
        this._prefix = this.parseRoute(this._base);
        this._routes = {};
        this._cb;
        this._errors = [];
        this._app = {};
        this._finally = () => {
        };
        this._errorStatus = 500;
        this._methods = [
          "get",
          "post",
          "put",
          "patch",
          "delete",
          "options",
          "head",
          "any"
        ];
        this._methods.forEach((m2) => {
          this[m2] = (...a) => this.METHOD(m2.toUpperCase(), ...a);
        });
      }
      METHOD(method, ...args) {
        let path = typeof args[0] === "string" ? args.shift() : "/*";
        let stack = args.map((fn, i2) => {
          if (typeof fn === "function" && (fn.length === 3 || i2 === args.length - 1))
            return fn;
          throw new ConfigurationError(
            "Route-based middleware must have 3 parameters"
          );
        });
        if (stack.length === 0)
          throw new ConfigurationError(
            `No handler or middleware specified for ${method} method on ${path} route.`
          );
        let methods = (Array.isArray(method) ? method : method.split(",")).map(
          (x2) => typeof x2 === "string" ? x2.trim().toUpperCase() : null
        );
        let parsedPath = this.parseRoute(path);
        let route = this._prefix.concat(parsedPath);
        if (route.length === 0) {
          route.push("");
        }
        let pathVars = {};
        let routes = this._routes;
        let _stack = { "*": [], m: [] };
        for (let i2 = 0; i2 < route.length; i2++) {
          let end = i2 === route.length - 1;
          if (/^:(.*)$/.test(route[i2])) {
            pathVars[i2] = [route[i2].substr(1)];
            route[i2] = "__VAR__";
          }
          if (!routes["ROUTES"]) {
            routes["ROUTES"] = {};
          }
          if (!routes["ROUTES"][route[i2]]) {
            routes["ROUTES"][route[i2]] = {};
          }
          methods.forEach((_method) => {
            if (typeof _method === "string") {
              if (routes["ROUTES"]["*"]) {
                if (routes["ROUTES"]["*"]["MIDDLEWARE"] && (route[i2] !== "*" || _method !== "__MW__")) {
                  _stack["*"][method] = routes["ROUTES"]["*"]["MIDDLEWARE"].stack;
                }
                if (routes["ROUTES"]["*"]["METHODS"] && routes["ROUTES"]["*"]["METHODS"][method]) {
                  _stack["m"][method] = routes["ROUTES"]["*"]["METHODS"][method].stack;
                }
              }
              if (end) {
                if (route[i2] !== "*" && routes["ROUTES"][route[i2]] && routes["ROUTES"][route[i2]]["MIDDLEWARE"]) {
                  _stack["m"][method] = routes["ROUTES"][route[i2]]["MIDDLEWARE"].stack;
                }
                let meta = {
                  vars: pathVars,
                  stack: _stack["m"][method] ? _stack["m"][method].concat(stack) : _stack["*"][method] ? _stack["*"][method].concat(stack) : stack,
                  route: "/" + parsedPath.join("/"),
                  path: "/" + this._prefix.concat(parsedPath).join("/")
                };
                if (method === "__MW__") {
                  if (routes["ROUTES"][route[i2]]["MIDDLEWARE"]) {
                    meta.stack = routes["ROUTES"][route[i2]]["MIDDLEWARE"].stack.concat(stack);
                    meta.vars = UTILS.mergeObjects(
                      routes["ROUTES"][route[i2]]["MIDDLEWARE"].vars,
                      pathVars
                    );
                  }
                  routes["ROUTES"][route[i2]]["MIDDLEWARE"] = meta;
                } else {
                  if (!routes["ROUTES"][route[i2]]["METHODS"])
                    routes["ROUTES"][route[i2]]["METHODS"] = {};
                  if (routes["ROUTES"][route[i2]]["METHODS"][_method]) {
                    meta.stack = routes["ROUTES"][route[i2]]["METHODS"][_method].stack.concat(
                      stack
                    );
                    meta.vars = UTILS.mergeObjects(
                      routes["ROUTES"][route[i2]]["METHODS"][_method].vars,
                      pathVars
                    );
                  }
                  routes["ROUTES"][route[i2]]["METHODS"][_method] = meta;
                }
              } else if (route[i2] === "*") {
                throw new ConfigurationError(
                  "Wildcards can only be at the end of a route definition"
                );
              }
            }
          });
          routes = routes["ROUTES"][route[i2]];
        }
      }
      async run(event, context, cb) {
        this._event = event || {};
        this._context = this.context = typeof context === "object" ? context : {};
        this._cb = cb ? cb : void 0;
        let request = new REQUEST(this);
        let response = new RESPONSE(this, request);
        try {
          await request.parseRequest();
          for (const fn of request._stack) {
            if (response._state !== "processing")
              break;
            await new Promise(async (r2) => {
              try {
                let rtn = await fn(request, response, () => {
                  r2();
                });
                if (rtn)
                  response.send(rtn);
                if (response._state === "done")
                  r2();
              } catch (e2) {
                await this.catchErrors(e2, response);
                r2();
              }
            });
          }
        } catch (e2) {
          await this.catchErrors(e2, response);
        }
        return response._response;
      }
      async catchErrors(e2, response, code, detail) {
        response._isBase64 = this._isBase64;
        const strippedHeaders = Object.entries(response._headers).reduce(
          (acc, [headerName, value]) => {
            if (!this._errorHeaderWhitelist.includes(headerName.toLowerCase())) {
              return acc;
            }
            return Object.assign(acc, { [headerName]: value });
          },
          {}
        );
        response._headers = Object.assign(strippedHeaders, this._headers);
        let message;
        response.status(code ? code : this._errorStatus);
        let info = {
          detail,
          statusCode: response._statusCode,
          coldStart: response._request.coldStart,
          stack: this._logger.stack && e2.stack || void 0
        };
        if (e2 instanceof Error) {
          message = e2.message;
          if (this._logger.errorLogging) {
            this.log.fatal(message, info);
          }
        } else {
          message = e2;
          if (this._logger.errorLogging) {
            this.log.error(message, info);
          }
        }
        if (response._state === "processing") {
          response._state = "error";
          for (const err of this._errors) {
            if (response._state === "done")
              break;
            await new Promise((r2) => {
              let rtn = err(e2, response._request, response, () => {
                r2();
              });
              if (rtn)
                response.send(rtn);
            });
          }
        }
        if (response._state !== "done")
          response.json({ error: message });
      }
      async _callback(err, res, response) {
        response._state = "done";
        await this._finally(response._request, response);
        response._request._logs.forEach((log) => {
          this._logger.logger(
            JSON.stringify(
              this._logger.detail ? this._logger.format(log, response._request, response) : log
            )
          );
        });
        if ((this._logger.access || response._request._logs.length > 0) && this._logger.access !== "never") {
          let access = Object.assign(
            this._logger.log(
              "access",
              void 0,
              response._request,
              response._request.context
            ),
            {
              statusCode: res.statusCode,
              coldStart: response._request.coldStart,
              count: response._request.requestCount
            }
          );
          this._logger.logger(
            JSON.stringify(this._logger.format(access, response._request, response))
          );
        }
        this._errorStatus = 500;
        typeof this._cb === "function" && this._cb(err, res);
      }
      use(...args) {
        let routes = typeof args[0] === "string" ? Array.of(args.shift()) : Array.isArray(args[0]) ? args.shift() : ["/*"];
        let middleware = [];
        for (let arg in args) {
          if (typeof args[arg] === "function") {
            if (args[arg].length === 3) {
              middleware.push(args[arg]);
            } else if (args[arg].length === 4) {
              this._errors.push(args[arg]);
            } else {
              throw new ConfigurationError(
                "Middleware must have 3 or 4 parameters"
              );
            }
          }
        }
        if (middleware.length > 0) {
          routes.forEach((route) => {
            this.METHOD("__MW__", route, ...middleware);
          });
        }
      }
      finally(fn) {
        this._finally = fn;
      }
      parseRoute(path) {
        return path.trim().replace(/^\/(.*?)(\/)*$/, "$1").split("/").filter((x2) => x2.trim() !== "");
      }
      app(packages) {
        if (typeof packages === "object") {
          for (let namespace in packages) {
            try {
              this._app[namespace] = packages[namespace];
            } catch (e2) {
              console.error(e2.message);
            }
          }
        } else if (arguments.length === 2 && typeof packages === "string") {
          this._app[packages] = arguments[1];
        }
        return this._app;
      }
      register(fn, opts) {
        let options = typeof opts === "object" ? opts : {};
        let prefix = options.prefix && options.prefix.toString().trim() !== "" ? this.parseRoute(options.prefix) : [];
        this._prefix = this._prefix.concat(prefix);
        fn(this, options);
        if (prefix.length > 0) {
          this._prefix = this._prefix.slice(0, -prefix.length);
        }
      }
      routes(format) {
        let routes = UTILS.extractRoutes(this._routes);
        if (format) {
          console.log(prettyPrint(routes));
        } else {
          return routes;
        }
      }
    };
    module2.exports = (opts) => new API(opts);
    module2.exports.default = module2.exports;
  }
});

// src/fn_graphql.ts
var fn_graphql_exports = {};
__export(fn_graphql_exports, {
  APIGatewayLambda: () => APIGatewayLambda,
  graphqlApi: () => graphqlApi,
  handler: () => handler,
  mkAPIGatewayHandler: () => mkAPIGatewayHandler
});
module.exports = __toCommonJS(fn_graphql_exports);

// src/schema.ts
var import_graphql_compose = __toESM(require_lib2());

// node_modules/node-fetch/src/index.js
var import_node_http2 = __toESM(require("node:http"), 1);
var import_node_https = __toESM(require("node:https"), 1);
var import_node_zlib = __toESM(require("node:zlib"), 1);
var import_node_stream2 = __toESM(require("node:stream"), 1);
var import_node_buffer2 = require("node:buffer");

// node_modules/data-uri-to-buffer/dist/index.js
function dataUriToBuffer(uri) {
  if (!/^data:/i.test(uri)) {
    throw new TypeError('`uri` does not appear to be a Data URI (must begin with "data:")');
  }
  uri = uri.replace(/\r?\n/g, "");
  const firstComma = uri.indexOf(",");
  if (firstComma === -1 || firstComma <= 4) {
    throw new TypeError("malformed data: URI");
  }
  const meta = uri.substring(5, firstComma).split(";");
  let charset = "";
  let base64 = false;
  const type = meta[0] || "text/plain";
  let typeFull = type;
  for (let i2 = 1; i2 < meta.length; i2++) {
    if (meta[i2] === "base64") {
      base64 = true;
    } else if (meta[i2]) {
      typeFull += `;${meta[i2]}`;
      if (meta[i2].indexOf("charset=") === 0) {
        charset = meta[i2].substring(8);
      }
    }
  }
  if (!meta[0] && !charset.length) {
    typeFull += ";charset=US-ASCII";
    charset = "US-ASCII";
  }
  const encoding = base64 ? "base64" : "ascii";
  const data = unescape(uri.substring(firstComma + 1));
  const buffer = Buffer.from(data, encoding);
  buffer.type = type;
  buffer.typeFull = typeFull;
  buffer.charset = charset;
  return buffer;
}
var dist_default = dataUriToBuffer;

// node_modules/node-fetch/src/body.js
var import_node_stream = __toESM(require("node:stream"), 1);
var import_node_util = require("node:util");
var import_node_buffer = require("node:buffer");
init_fetch_blob();
init_esm_min();

// node_modules/node-fetch/src/errors/base.js
var FetchBaseError = class extends Error {
  constructor(message, type) {
    super(message);
    Error.captureStackTrace(this, this.constructor);
    this.type = type;
  }
  get name() {
    return this.constructor.name;
  }
  get [Symbol.toStringTag]() {
    return this.constructor.name;
  }
};

// node_modules/node-fetch/src/errors/fetch-error.js
var FetchError = class extends FetchBaseError {
  constructor(message, type, systemError) {
    super(message, type);
    if (systemError) {
      this.code = this.errno = systemError.code;
      this.erroredSysCall = systemError.syscall;
    }
  }
};

// node_modules/node-fetch/src/utils/is.js
var NAME = Symbol.toStringTag;
var isURLSearchParameters = (object) => {
  return typeof object === "object" && typeof object.append === "function" && typeof object.delete === "function" && typeof object.get === "function" && typeof object.getAll === "function" && typeof object.has === "function" && typeof object.set === "function" && typeof object.sort === "function" && object[NAME] === "URLSearchParams";
};
var isBlob = (object) => {
  return object && typeof object === "object" && typeof object.arrayBuffer === "function" && typeof object.type === "string" && typeof object.stream === "function" && typeof object.constructor === "function" && /^(Blob|File)$/.test(object[NAME]);
};
var isAbortSignal = (object) => {
  return typeof object === "object" && (object[NAME] === "AbortSignal" || object[NAME] === "EventTarget");
};
var isDomainOrSubdomain = (destination, original) => {
  const orig = new URL(original).hostname;
  const dest = new URL(destination).hostname;
  return orig === dest || orig.endsWith(`.${dest}`);
};
var isSameProtocol = (destination, original) => {
  const orig = new URL(original).protocol;
  const dest = new URL(destination).protocol;
  return orig === dest;
};

// node_modules/node-fetch/src/body.js
var pipeline = (0, import_node_util.promisify)(import_node_stream.default.pipeline);
var INTERNALS = Symbol("Body internals");
var Body = class {
  constructor(body, {
    size = 0
  } = {}) {
    let boundary = null;
    if (body === null) {
      body = null;
    } else if (isURLSearchParameters(body)) {
      body = import_node_buffer.Buffer.from(body.toString());
    } else if (isBlob(body)) {
    } else if (import_node_buffer.Buffer.isBuffer(body)) {
    } else if (import_node_util.types.isAnyArrayBuffer(body)) {
      body = import_node_buffer.Buffer.from(body);
    } else if (ArrayBuffer.isView(body)) {
      body = import_node_buffer.Buffer.from(body.buffer, body.byteOffset, body.byteLength);
    } else if (body instanceof import_node_stream.default) {
    } else if (body instanceof FormData) {
      body = formDataToBlob(body);
      boundary = body.type.split("=")[1];
    } else {
      body = import_node_buffer.Buffer.from(String(body));
    }
    let stream = body;
    if (import_node_buffer.Buffer.isBuffer(body)) {
      stream = import_node_stream.default.Readable.from(body);
    } else if (isBlob(body)) {
      stream = import_node_stream.default.Readable.from(body.stream());
    }
    this[INTERNALS] = {
      body,
      stream,
      boundary,
      disturbed: false,
      error: null
    };
    this.size = size;
    if (body instanceof import_node_stream.default) {
      body.on("error", (error_) => {
        const error = error_ instanceof FetchBaseError ? error_ : new FetchError(`Invalid response body while trying to fetch ${this.url}: ${error_.message}`, "system", error_);
        this[INTERNALS].error = error;
      });
    }
  }
  get body() {
    return this[INTERNALS].stream;
  }
  get bodyUsed() {
    return this[INTERNALS].disturbed;
  }
  async arrayBuffer() {
    const { buffer, byteOffset, byteLength } = await consumeBody(this);
    return buffer.slice(byteOffset, byteOffset + byteLength);
  }
  async formData() {
    const ct = this.headers.get("content-type");
    if (ct.startsWith("application/x-www-form-urlencoded")) {
      const formData = new FormData();
      const parameters = new URLSearchParams(await this.text());
      for (const [name, value] of parameters) {
        formData.append(name, value);
      }
      return formData;
    }
    const { toFormData: toFormData2 } = await Promise.resolve().then(() => (init_multipart_parser(), multipart_parser_exports));
    return toFormData2(this.body, ct);
  }
  async blob() {
    const ct = this.headers && this.headers.get("content-type") || this[INTERNALS].body && this[INTERNALS].body.type || "";
    const buf = await this.arrayBuffer();
    return new fetch_blob_default([buf], {
      type: ct
    });
  }
  async json() {
    const text = await this.text();
    return JSON.parse(text);
  }
  async text() {
    const buffer = await consumeBody(this);
    return new TextDecoder().decode(buffer);
  }
  buffer() {
    return consumeBody(this);
  }
};
Body.prototype.buffer = (0, import_node_util.deprecate)(Body.prototype.buffer, "Please use 'response.arrayBuffer()' instead of 'response.buffer()'", "node-fetch#buffer");
Object.defineProperties(Body.prototype, {
  body: { enumerable: true },
  bodyUsed: { enumerable: true },
  arrayBuffer: { enumerable: true },
  blob: { enumerable: true },
  json: { enumerable: true },
  text: { enumerable: true },
  data: { get: (0, import_node_util.deprecate)(
    () => {
    },
    "data doesn't exist, use json(), text(), arrayBuffer(), or body instead",
    "https://github.com/node-fetch/node-fetch/issues/1000 (response)"
  ) }
});
async function consumeBody(data) {
  if (data[INTERNALS].disturbed) {
    throw new TypeError(`body used already for: ${data.url}`);
  }
  data[INTERNALS].disturbed = true;
  if (data[INTERNALS].error) {
    throw data[INTERNALS].error;
  }
  const { body } = data;
  if (body === null) {
    return import_node_buffer.Buffer.alloc(0);
  }
  if (!(body instanceof import_node_stream.default)) {
    return import_node_buffer.Buffer.alloc(0);
  }
  const accum = [];
  let accumBytes = 0;
  try {
    for await (const chunk of body) {
      if (data.size > 0 && accumBytes + chunk.length > data.size) {
        const error = new FetchError(`content size at ${data.url} over limit: ${data.size}`, "max-size");
        body.destroy(error);
        throw error;
      }
      accumBytes += chunk.length;
      accum.push(chunk);
    }
  } catch (error) {
    const error_ = error instanceof FetchBaseError ? error : new FetchError(`Invalid response body while trying to fetch ${data.url}: ${error.message}`, "system", error);
    throw error_;
  }
  if (body.readableEnded === true || body._readableState.ended === true) {
    try {
      if (accum.every((c) => typeof c === "string")) {
        return import_node_buffer.Buffer.from(accum.join(""));
      }
      return import_node_buffer.Buffer.concat(accum, accumBytes);
    } catch (error) {
      throw new FetchError(`Could not create Buffer from response body for ${data.url}: ${error.message}`, "system", error);
    }
  } else {
    throw new FetchError(`Premature close of server response while trying to fetch ${data.url}`);
  }
}
var clone = (instance, highWaterMark) => {
  let p1;
  let p2;
  let { body } = instance[INTERNALS];
  if (instance.bodyUsed) {
    throw new Error("cannot clone body after it is used");
  }
  if (body instanceof import_node_stream.default && typeof body.getBoundary !== "function") {
    p1 = new import_node_stream.PassThrough({ highWaterMark });
    p2 = new import_node_stream.PassThrough({ highWaterMark });
    body.pipe(p1);
    body.pipe(p2);
    instance[INTERNALS].stream = p1;
    body = p2;
  }
  return body;
};
var getNonSpecFormDataBoundary = (0, import_node_util.deprecate)(
  (body) => body.getBoundary(),
  "form-data doesn't follow the spec and requires special treatment. Use alternative package",
  "https://github.com/node-fetch/node-fetch/issues/1167"
);
var extractContentType = (body, request) => {
  if (body === null) {
    return null;
  }
  if (typeof body === "string") {
    return "text/plain;charset=UTF-8";
  }
  if (isURLSearchParameters(body)) {
    return "application/x-www-form-urlencoded;charset=UTF-8";
  }
  if (isBlob(body)) {
    return body.type || null;
  }
  if (import_node_buffer.Buffer.isBuffer(body) || import_node_util.types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {
    return null;
  }
  if (body instanceof FormData) {
    return `multipart/form-data; boundary=${request[INTERNALS].boundary}`;
  }
  if (body && typeof body.getBoundary === "function") {
    return `multipart/form-data;boundary=${getNonSpecFormDataBoundary(body)}`;
  }
  if (body instanceof import_node_stream.default) {
    return null;
  }
  return "text/plain;charset=UTF-8";
};
var getTotalBytes = (request) => {
  const { body } = request[INTERNALS];
  if (body === null) {
    return 0;
  }
  if (isBlob(body)) {
    return body.size;
  }
  if (import_node_buffer.Buffer.isBuffer(body)) {
    return body.length;
  }
  if (body && typeof body.getLengthSync === "function") {
    return body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;
  }
  return null;
};
var writeToStream = async (dest, { body }) => {
  if (body === null) {
    dest.end();
  } else {
    await pipeline(body, dest);
  }
};

// node_modules/node-fetch/src/headers.js
var import_node_util2 = require("node:util");
var import_node_http = __toESM(require("node:http"), 1);
var validateHeaderName = typeof import_node_http.default.validateHeaderName === "function" ? import_node_http.default.validateHeaderName : (name) => {
  if (!/^[\^`\-\w!#$%&'*+.|~]+$/.test(name)) {
    const error = new TypeError(`Header name must be a valid HTTP token [${name}]`);
    Object.defineProperty(error, "code", { value: "ERR_INVALID_HTTP_TOKEN" });
    throw error;
  }
};
var validateHeaderValue = typeof import_node_http.default.validateHeaderValue === "function" ? import_node_http.default.validateHeaderValue : (name, value) => {
  if (/[^\t\u0020-\u007E\u0080-\u00FF]/.test(value)) {
    const error = new TypeError(`Invalid character in header content ["${name}"]`);
    Object.defineProperty(error, "code", { value: "ERR_INVALID_CHAR" });
    throw error;
  }
};
var Headers = class extends URLSearchParams {
  constructor(init) {
    let result = [];
    if (init instanceof Headers) {
      const raw = init.raw();
      for (const [name, values] of Object.entries(raw)) {
        result.push(...values.map((value) => [name, value]));
      }
    } else if (init == null) {
    } else if (typeof init === "object" && !import_node_util2.types.isBoxedPrimitive(init)) {
      const method = init[Symbol.iterator];
      if (method == null) {
        result.push(...Object.entries(init));
      } else {
        if (typeof method !== "function") {
          throw new TypeError("Header pairs must be iterable");
        }
        result = [...init].map((pair) => {
          if (typeof pair !== "object" || import_node_util2.types.isBoxedPrimitive(pair)) {
            throw new TypeError("Each header pair must be an iterable object");
          }
          return [...pair];
        }).map((pair) => {
          if (pair.length !== 2) {
            throw new TypeError("Each header pair must be a name/value tuple");
          }
          return [...pair];
        });
      }
    } else {
      throw new TypeError("Failed to construct 'Headers': The provided value is not of type '(sequence<sequence<ByteString>> or record<ByteString, ByteString>)");
    }
    result = result.length > 0 ? result.map(([name, value]) => {
      validateHeaderName(name);
      validateHeaderValue(name, String(value));
      return [String(name).toLowerCase(), String(value)];
    }) : void 0;
    super(result);
    return new Proxy(this, {
      get(target, p, receiver) {
        switch (p) {
          case "append":
          case "set":
            return (name, value) => {
              validateHeaderName(name);
              validateHeaderValue(name, String(value));
              return URLSearchParams.prototype[p].call(
                target,
                String(name).toLowerCase(),
                String(value)
              );
            };
          case "delete":
          case "has":
          case "getAll":
            return (name) => {
              validateHeaderName(name);
              return URLSearchParams.prototype[p].call(
                target,
                String(name).toLowerCase()
              );
            };
          case "keys":
            return () => {
              target.sort();
              return new Set(URLSearchParams.prototype.keys.call(target)).keys();
            };
          default:
            return Reflect.get(target, p, receiver);
        }
      }
    });
  }
  get [Symbol.toStringTag]() {
    return this.constructor.name;
  }
  toString() {
    return Object.prototype.toString.call(this);
  }
  get(name) {
    const values = this.getAll(name);
    if (values.length === 0) {
      return null;
    }
    let value = values.join(", ");
    if (/^content-encoding$/i.test(name)) {
      value = value.toLowerCase();
    }
    return value;
  }
  forEach(callback, thisArg = void 0) {
    for (const name of this.keys()) {
      Reflect.apply(callback, thisArg, [this.get(name), name, this]);
    }
  }
  *values() {
    for (const name of this.keys()) {
      yield this.get(name);
    }
  }
  *entries() {
    for (const name of this.keys()) {
      yield [name, this.get(name)];
    }
  }
  [Symbol.iterator]() {
    return this.entries();
  }
  raw() {
    return [...this.keys()].reduce((result, key) => {
      result[key] = this.getAll(key);
      return result;
    }, {});
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return [...this.keys()].reduce((result, key) => {
      const values = this.getAll(key);
      if (key === "host") {
        result[key] = values[0];
      } else {
        result[key] = values.length > 1 ? values : values[0];
      }
      return result;
    }, {});
  }
};
Object.defineProperties(
  Headers.prototype,
  ["get", "entries", "forEach", "values"].reduce((result, property) => {
    result[property] = { enumerable: true };
    return result;
  }, {})
);
function fromRawHeaders(headers = []) {
  return new Headers(
    headers.reduce((result, value, index, array) => {
      if (index % 2 === 0) {
        result.push(array.slice(index, index + 2));
      }
      return result;
    }, []).filter(([name, value]) => {
      try {
        validateHeaderName(name);
        validateHeaderValue(name, String(value));
        return true;
      } catch {
        return false;
      }
    })
  );
}

// node_modules/node-fetch/src/utils/is-redirect.js
var redirectStatus = /* @__PURE__ */ new Set([301, 302, 303, 307, 308]);
var isRedirect = (code) => {
  return redirectStatus.has(code);
};

// node_modules/node-fetch/src/response.js
var INTERNALS2 = Symbol("Response internals");
var Response = class extends Body {
  constructor(body = null, options = {}) {
    super(body, options);
    const status = options.status != null ? options.status : 200;
    const headers = new Headers(options.headers);
    if (body !== null && !headers.has("Content-Type")) {
      const contentType = extractContentType(body, this);
      if (contentType) {
        headers.append("Content-Type", contentType);
      }
    }
    this[INTERNALS2] = {
      type: "default",
      url: options.url,
      status,
      statusText: options.statusText || "",
      headers,
      counter: options.counter,
      highWaterMark: options.highWaterMark
    };
  }
  get type() {
    return this[INTERNALS2].type;
  }
  get url() {
    return this[INTERNALS2].url || "";
  }
  get status() {
    return this[INTERNALS2].status;
  }
  get ok() {
    return this[INTERNALS2].status >= 200 && this[INTERNALS2].status < 300;
  }
  get redirected() {
    return this[INTERNALS2].counter > 0;
  }
  get statusText() {
    return this[INTERNALS2].statusText;
  }
  get headers() {
    return this[INTERNALS2].headers;
  }
  get highWaterMark() {
    return this[INTERNALS2].highWaterMark;
  }
  clone() {
    return new Response(clone(this, this.highWaterMark), {
      type: this.type,
      url: this.url,
      status: this.status,
      statusText: this.statusText,
      headers: this.headers,
      ok: this.ok,
      redirected: this.redirected,
      size: this.size,
      highWaterMark: this.highWaterMark
    });
  }
  static redirect(url, status = 302) {
    if (!isRedirect(status)) {
      throw new RangeError('Failed to execute "redirect" on "response": Invalid status code');
    }
    return new Response(null, {
      headers: {
        location: new URL(url).toString()
      },
      status
    });
  }
  static error() {
    const response = new Response(null, { status: 0, statusText: "" });
    response[INTERNALS2].type = "error";
    return response;
  }
  static json(data = void 0, init = {}) {
    const body = JSON.stringify(data);
    if (body === void 0) {
      throw new TypeError("data is not JSON serializable");
    }
    const headers = new Headers(init && init.headers);
    if (!headers.has("content-type")) {
      headers.set("content-type", "application/json");
    }
    return new Response(body, {
      ...init,
      headers
    });
  }
  get [Symbol.toStringTag]() {
    return "Response";
  }
};
Object.defineProperties(Response.prototype, {
  type: { enumerable: true },
  url: { enumerable: true },
  status: { enumerable: true },
  ok: { enumerable: true },
  redirected: { enumerable: true },
  statusText: { enumerable: true },
  headers: { enumerable: true },
  clone: { enumerable: true }
});

// node_modules/node-fetch/src/request.js
var import_node_url = require("node:url");
var import_node_util3 = require("node:util");

// node_modules/node-fetch/src/utils/get-search.js
var getSearch = (parsedURL) => {
  if (parsedURL.search) {
    return parsedURL.search;
  }
  const lastOffset = parsedURL.href.length - 1;
  const hash = parsedURL.hash || (parsedURL.href[lastOffset] === "#" ? "#" : "");
  return parsedURL.href[lastOffset - hash.length] === "?" ? "?" : "";
};

// node_modules/node-fetch/src/utils/referrer.js
var import_node_net = require("node:net");
function stripURLForUseAsAReferrer(url, originOnly = false) {
  if (url == null) {
    return "no-referrer";
  }
  url = new URL(url);
  if (/^(about|blob|data):$/.test(url.protocol)) {
    return "no-referrer";
  }
  url.username = "";
  url.password = "";
  url.hash = "";
  if (originOnly) {
    url.pathname = "";
    url.search = "";
  }
  return url;
}
var ReferrerPolicy = /* @__PURE__ */ new Set([
  "",
  "no-referrer",
  "no-referrer-when-downgrade",
  "same-origin",
  "origin",
  "strict-origin",
  "origin-when-cross-origin",
  "strict-origin-when-cross-origin",
  "unsafe-url"
]);
var DEFAULT_REFERRER_POLICY = "strict-origin-when-cross-origin";
function validateReferrerPolicy(referrerPolicy) {
  if (!ReferrerPolicy.has(referrerPolicy)) {
    throw new TypeError(`Invalid referrerPolicy: ${referrerPolicy}`);
  }
  return referrerPolicy;
}
function isOriginPotentiallyTrustworthy(url) {
  if (/^(http|ws)s:$/.test(url.protocol)) {
    return true;
  }
  const hostIp = url.host.replace(/(^\[)|(]$)/g, "");
  const hostIPVersion = (0, import_node_net.isIP)(hostIp);
  if (hostIPVersion === 4 && /^127\./.test(hostIp)) {
    return true;
  }
  if (hostIPVersion === 6 && /^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(hostIp)) {
    return true;
  }
  if (url.host === "localhost" || url.host.endsWith(".localhost")) {
    return false;
  }
  if (url.protocol === "file:") {
    return true;
  }
  return false;
}
function isUrlPotentiallyTrustworthy(url) {
  if (/^about:(blank|srcdoc)$/.test(url)) {
    return true;
  }
  if (url.protocol === "data:") {
    return true;
  }
  if (/^(blob|filesystem):$/.test(url.protocol)) {
    return true;
  }
  return isOriginPotentiallyTrustworthy(url);
}
function determineRequestsReferrer(request, { referrerURLCallback, referrerOriginCallback } = {}) {
  if (request.referrer === "no-referrer" || request.referrerPolicy === "") {
    return null;
  }
  const policy = request.referrerPolicy;
  if (request.referrer === "about:client") {
    return "no-referrer";
  }
  const referrerSource = request.referrer;
  let referrerURL = stripURLForUseAsAReferrer(referrerSource);
  let referrerOrigin = stripURLForUseAsAReferrer(referrerSource, true);
  if (referrerURL.toString().length > 4096) {
    referrerURL = referrerOrigin;
  }
  if (referrerURLCallback) {
    referrerURL = referrerURLCallback(referrerURL);
  }
  if (referrerOriginCallback) {
    referrerOrigin = referrerOriginCallback(referrerOrigin);
  }
  const currentURL = new URL(request.url);
  switch (policy) {
    case "no-referrer":
      return "no-referrer";
    case "origin":
      return referrerOrigin;
    case "unsafe-url":
      return referrerURL;
    case "strict-origin":
      if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {
        return "no-referrer";
      }
      return referrerOrigin.toString();
    case "strict-origin-when-cross-origin":
      if (referrerURL.origin === currentURL.origin) {
        return referrerURL;
      }
      if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {
        return "no-referrer";
      }
      return referrerOrigin;
    case "same-origin":
      if (referrerURL.origin === currentURL.origin) {
        return referrerURL;
      }
      return "no-referrer";
    case "origin-when-cross-origin":
      if (referrerURL.origin === currentURL.origin) {
        return referrerURL;
      }
      return referrerOrigin;
    case "no-referrer-when-downgrade":
      if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {
        return "no-referrer";
      }
      return referrerURL;
    default:
      throw new TypeError(`Invalid referrerPolicy: ${policy}`);
  }
}
function parseReferrerPolicyFromHeader(headers) {
  const policyTokens = (headers.get("referrer-policy") || "").split(/[,\s]+/);
  let policy = "";
  for (const token of policyTokens) {
    if (token && ReferrerPolicy.has(token)) {
      policy = token;
    }
  }
  return policy;
}

// node_modules/node-fetch/src/request.js
var INTERNALS3 = Symbol("Request internals");
var isRequest = (object) => {
  return typeof object === "object" && typeof object[INTERNALS3] === "object";
};
var doBadDataWarn = (0, import_node_util3.deprecate)(
  () => {
  },
  ".data is not a valid RequestInit property, use .body instead",
  "https://github.com/node-fetch/node-fetch/issues/1000 (request)"
);
var Request = class extends Body {
  constructor(input, init = {}) {
    let parsedURL;
    if (isRequest(input)) {
      parsedURL = new URL(input.url);
    } else {
      parsedURL = new URL(input);
      input = {};
    }
    if (parsedURL.username !== "" || parsedURL.password !== "") {
      throw new TypeError(`${parsedURL} is an url with embedded credentials.`);
    }
    let method = init.method || input.method || "GET";
    if (/^(delete|get|head|options|post|put)$/i.test(method)) {
      method = method.toUpperCase();
    }
    if (!isRequest(init) && "data" in init) {
      doBadDataWarn();
    }
    if ((init.body != null || isRequest(input) && input.body !== null) && (method === "GET" || method === "HEAD")) {
      throw new TypeError("Request with GET/HEAD method cannot have body");
    }
    const inputBody = init.body ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;
    super(inputBody, {
      size: init.size || input.size || 0
    });
    const headers = new Headers(init.headers || input.headers || {});
    if (inputBody !== null && !headers.has("Content-Type")) {
      const contentType = extractContentType(inputBody, this);
      if (contentType) {
        headers.set("Content-Type", contentType);
      }
    }
    let signal = isRequest(input) ? input.signal : null;
    if ("signal" in init) {
      signal = init.signal;
    }
    if (signal != null && !isAbortSignal(signal)) {
      throw new TypeError("Expected signal to be an instanceof AbortSignal or EventTarget");
    }
    let referrer = init.referrer == null ? input.referrer : init.referrer;
    if (referrer === "") {
      referrer = "no-referrer";
    } else if (referrer) {
      const parsedReferrer = new URL(referrer);
      referrer = /^about:(\/\/)?client$/.test(parsedReferrer) ? "client" : parsedReferrer;
    } else {
      referrer = void 0;
    }
    this[INTERNALS3] = {
      method,
      redirect: init.redirect || input.redirect || "follow",
      headers,
      parsedURL,
      signal,
      referrer
    };
    this.follow = init.follow === void 0 ? input.follow === void 0 ? 20 : input.follow : init.follow;
    this.compress = init.compress === void 0 ? input.compress === void 0 ? true : input.compress : init.compress;
    this.counter = init.counter || input.counter || 0;
    this.agent = init.agent || input.agent;
    this.highWaterMark = init.highWaterMark || input.highWaterMark || 16384;
    this.insecureHTTPParser = init.insecureHTTPParser || input.insecureHTTPParser || false;
    this.referrerPolicy = init.referrerPolicy || input.referrerPolicy || "";
  }
  get method() {
    return this[INTERNALS3].method;
  }
  get url() {
    return (0, import_node_url.format)(this[INTERNALS3].parsedURL);
  }
  get headers() {
    return this[INTERNALS3].headers;
  }
  get redirect() {
    return this[INTERNALS3].redirect;
  }
  get signal() {
    return this[INTERNALS3].signal;
  }
  get referrer() {
    if (this[INTERNALS3].referrer === "no-referrer") {
      return "";
    }
    if (this[INTERNALS3].referrer === "client") {
      return "about:client";
    }
    if (this[INTERNALS3].referrer) {
      return this[INTERNALS3].referrer.toString();
    }
    return void 0;
  }
  get referrerPolicy() {
    return this[INTERNALS3].referrerPolicy;
  }
  set referrerPolicy(referrerPolicy) {
    this[INTERNALS3].referrerPolicy = validateReferrerPolicy(referrerPolicy);
  }
  clone() {
    return new Request(this);
  }
  get [Symbol.toStringTag]() {
    return "Request";
  }
};
Object.defineProperties(Request.prototype, {
  method: { enumerable: true },
  url: { enumerable: true },
  headers: { enumerable: true },
  redirect: { enumerable: true },
  clone: { enumerable: true },
  signal: { enumerable: true },
  referrer: { enumerable: true },
  referrerPolicy: { enumerable: true }
});
var getNodeRequestOptions = (request) => {
  const { parsedURL } = request[INTERNALS3];
  const headers = new Headers(request[INTERNALS3].headers);
  if (!headers.has("Accept")) {
    headers.set("Accept", "*/*");
  }
  let contentLengthValue = null;
  if (request.body === null && /^(post|put)$/i.test(request.method)) {
    contentLengthValue = "0";
  }
  if (request.body !== null) {
    const totalBytes = getTotalBytes(request);
    if (typeof totalBytes === "number" && !Number.isNaN(totalBytes)) {
      contentLengthValue = String(totalBytes);
    }
  }
  if (contentLengthValue) {
    headers.set("Content-Length", contentLengthValue);
  }
  if (request.referrerPolicy === "") {
    request.referrerPolicy = DEFAULT_REFERRER_POLICY;
  }
  if (request.referrer && request.referrer !== "no-referrer") {
    request[INTERNALS3].referrer = determineRequestsReferrer(request);
  } else {
    request[INTERNALS3].referrer = "no-referrer";
  }
  if (request[INTERNALS3].referrer instanceof URL) {
    headers.set("Referer", request.referrer);
  }
  if (!headers.has("User-Agent")) {
    headers.set("User-Agent", "node-fetch");
  }
  if (request.compress && !headers.has("Accept-Encoding")) {
    headers.set("Accept-Encoding", "gzip, deflate, br");
  }
  let { agent } = request;
  if (typeof agent === "function") {
    agent = agent(parsedURL);
  }
  const search = getSearch(parsedURL);
  const options = {
    path: parsedURL.pathname + search,
    method: request.method,
    headers: headers[Symbol.for("nodejs.util.inspect.custom")](),
    insecureHTTPParser: request.insecureHTTPParser,
    agent
  };
  return {
    parsedURL,
    options
  };
};

// node_modules/node-fetch/src/errors/abort-error.js
var AbortError = class extends FetchBaseError {
  constructor(message, type = "aborted") {
    super(message, type);
  }
};

// node_modules/node-fetch/src/index.js
init_esm_min();
init_from();
var supportedSchemas = /* @__PURE__ */ new Set(["data:", "http:", "https:"]);
async function fetch(url, options_) {
  return new Promise((resolve, reject) => {
    const request = new Request(url, options_);
    const { parsedURL, options } = getNodeRequestOptions(request);
    if (!supportedSchemas.has(parsedURL.protocol)) {
      throw new TypeError(`node-fetch cannot load ${url}. URL scheme "${parsedURL.protocol.replace(/:$/, "")}" is not supported.`);
    }
    if (parsedURL.protocol === "data:") {
      const data = dist_default(request.url);
      const response2 = new Response(data, { headers: { "Content-Type": data.typeFull } });
      resolve(response2);
      return;
    }
    const send = (parsedURL.protocol === "https:" ? import_node_https.default : import_node_http2.default).request;
    const { signal } = request;
    let response = null;
    const abort = () => {
      const error = new AbortError("The operation was aborted.");
      reject(error);
      if (request.body && request.body instanceof import_node_stream2.default.Readable) {
        request.body.destroy(error);
      }
      if (!response || !response.body) {
        return;
      }
      response.body.emit("error", error);
    };
    if (signal && signal.aborted) {
      abort();
      return;
    }
    const abortAndFinalize = () => {
      abort();
      finalize();
    };
    const request_ = send(parsedURL.toString(), options);
    if (signal) {
      signal.addEventListener("abort", abortAndFinalize);
    }
    const finalize = () => {
      request_.abort();
      if (signal) {
        signal.removeEventListener("abort", abortAndFinalize);
      }
    };
    request_.on("error", (error) => {
      reject(new FetchError(`request to ${request.url} failed, reason: ${error.message}`, "system", error));
      finalize();
    });
    fixResponseChunkedTransferBadEnding(request_, (error) => {
      if (response && response.body) {
        response.body.destroy(error);
      }
    });
    if (process.version < "v14") {
      request_.on("socket", (s2) => {
        let endedWithEventsCount;
        s2.prependListener("end", () => {
          endedWithEventsCount = s2._eventsCount;
        });
        s2.prependListener("close", (hadError) => {
          if (response && endedWithEventsCount < s2._eventsCount && !hadError) {
            const error = new Error("Premature close");
            error.code = "ERR_STREAM_PREMATURE_CLOSE";
            response.body.emit("error", error);
          }
        });
      });
    }
    request_.on("response", (response_) => {
      request_.setTimeout(0);
      const headers = fromRawHeaders(response_.rawHeaders);
      if (isRedirect(response_.statusCode)) {
        const location = headers.get("Location");
        let locationURL = null;
        try {
          locationURL = location === null ? null : new URL(location, request.url);
        } catch {
          if (request.redirect !== "manual") {
            reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, "invalid-redirect"));
            finalize();
            return;
          }
        }
        switch (request.redirect) {
          case "error":
            reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, "no-redirect"));
            finalize();
            return;
          case "manual":
            break;
          case "follow": {
            if (locationURL === null) {
              break;
            }
            if (request.counter >= request.follow) {
              reject(new FetchError(`maximum redirect reached at: ${request.url}`, "max-redirect"));
              finalize();
              return;
            }
            const requestOptions = {
              headers: new Headers(request.headers),
              follow: request.follow,
              counter: request.counter + 1,
              agent: request.agent,
              compress: request.compress,
              method: request.method,
              body: clone(request),
              signal: request.signal,
              size: request.size,
              referrer: request.referrer,
              referrerPolicy: request.referrerPolicy
            };
            if (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {
              for (const name of ["authorization", "www-authenticate", "cookie", "cookie2"]) {
                requestOptions.headers.delete(name);
              }
            }
            if (response_.statusCode !== 303 && request.body && options_.body instanceof import_node_stream2.default.Readable) {
              reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
              finalize();
              return;
            }
            if (response_.statusCode === 303 || (response_.statusCode === 301 || response_.statusCode === 302) && request.method === "POST") {
              requestOptions.method = "GET";
              requestOptions.body = void 0;
              requestOptions.headers.delete("content-length");
            }
            const responseReferrerPolicy = parseReferrerPolicyFromHeader(headers);
            if (responseReferrerPolicy) {
              requestOptions.referrerPolicy = responseReferrerPolicy;
            }
            resolve(fetch(new Request(locationURL, requestOptions)));
            finalize();
            return;
          }
          default:
            return reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));
        }
      }
      if (signal) {
        response_.once("end", () => {
          signal.removeEventListener("abort", abortAndFinalize);
        });
      }
      let body = (0, import_node_stream2.pipeline)(response_, new import_node_stream2.PassThrough(), (error) => {
        if (error) {
          reject(error);
        }
      });
      if (process.version < "v12.10") {
        response_.on("aborted", abortAndFinalize);
      }
      const responseOptions = {
        url: request.url,
        status: response_.statusCode,
        statusText: response_.statusMessage,
        headers,
        size: request.size,
        counter: request.counter,
        highWaterMark: request.highWaterMark
      };
      const codings = headers.get("Content-Encoding");
      if (!request.compress || request.method === "HEAD" || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {
        response = new Response(body, responseOptions);
        resolve(response);
        return;
      }
      const zlibOptions = {
        flush: import_node_zlib.default.Z_SYNC_FLUSH,
        finishFlush: import_node_zlib.default.Z_SYNC_FLUSH
      };
      if (codings === "gzip" || codings === "x-gzip") {
        body = (0, import_node_stream2.pipeline)(body, import_node_zlib.default.createGunzip(zlibOptions), (error) => {
          if (error) {
            reject(error);
          }
        });
        response = new Response(body, responseOptions);
        resolve(response);
        return;
      }
      if (codings === "deflate" || codings === "x-deflate") {
        const raw = (0, import_node_stream2.pipeline)(response_, new import_node_stream2.PassThrough(), (error) => {
          if (error) {
            reject(error);
          }
        });
        raw.once("data", (chunk) => {
          if ((chunk[0] & 15) === 8) {
            body = (0, import_node_stream2.pipeline)(body, import_node_zlib.default.createInflate(), (error) => {
              if (error) {
                reject(error);
              }
            });
          } else {
            body = (0, import_node_stream2.pipeline)(body, import_node_zlib.default.createInflateRaw(), (error) => {
              if (error) {
                reject(error);
              }
            });
          }
          response = new Response(body, responseOptions);
          resolve(response);
        });
        raw.once("end", () => {
          if (!response) {
            response = new Response(body, responseOptions);
            resolve(response);
          }
        });
        return;
      }
      if (codings === "br") {
        body = (0, import_node_stream2.pipeline)(body, import_node_zlib.default.createBrotliDecompress(), (error) => {
          if (error) {
            reject(error);
          }
        });
        response = new Response(body, responseOptions);
        resolve(response);
        return;
      }
      response = new Response(body, responseOptions);
      resolve(response);
    });
    writeToStream(request_, request).catch(reject);
  });
}
function fixResponseChunkedTransferBadEnding(request, errorCallback) {
  const LAST_CHUNK = import_node_buffer2.Buffer.from("0\r\n\r\n");
  let isChunkedTransfer = false;
  let properLastChunkReceived = false;
  let previousChunk;
  request.on("response", (response) => {
    const { headers } = response;
    isChunkedTransfer = headers["transfer-encoding"] === "chunked" && !headers["content-length"];
  });
  request.on("socket", (socket) => {
    const onSocketClose = () => {
      if (isChunkedTransfer && !properLastChunkReceived) {
        const error = new Error("Premature close");
        error.code = "ERR_STREAM_PREMATURE_CLOSE";
        errorCallback(error);
      }
    };
    const onData = (buf) => {
      properLastChunkReceived = import_node_buffer2.Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0;
      if (!properLastChunkReceived && previousChunk) {
        properLastChunkReceived = import_node_buffer2.Buffer.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 && import_node_buffer2.Buffer.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0;
      }
      previousChunk = buf;
    };
    socket.prependListener("close", onSocketClose);
    socket.on("data", onData);
    request.on("close", () => {
      socket.removeListener("close", onSocketClose);
      socket.removeListener("data", onData);
    });
  });
}

// src/fetcher.ts
var API_BASE_URL = "https://blockchain.info";
var fetchBlockByHash = async (blockHash) => {
  const response = await fetch(`${API_BASE_URL}/rawblock/${blockHash}`);
  const data = await response.json();
  return data;
};
var fetchBlocksInDay = async (timestamp) => {
  const response = await fetch(`${API_BASE_URL}/blocks/${timestamp}?format=json`);
  const data = await response.json();
  return data;
};

// src/cache.ts
var import_ioredis = __toESM(require_built3());
var redis = new import_ioredis.default({
  host: process.env.REDIS_HOST || "localhost",
  port: parseInt(process.env.REDIS_PORT) || 6379
});
var getCachedData = async (key) => {
  const data = await redis.get(key);
  return data ? JSON.parse(data) : null;
};
var setCachedData = async (key, value, ttl) => {
  await redis.set(key, JSON.stringify(value), "EX", ttl);
};

// src/resolver.ts
var ENERGY_COST_PER_BYTE = 4.56;
var calculateTransactionEnergy = (size) => {
  return size * ENERGY_COST_PER_BYTE;
};
var resolvers = {
  energyPerTransaction: async ({ blockHash }) => {
    const block = await fetchBlockByHash(blockHash);
    return block.tx.map((transaction) => ({
      txHash: transaction.hash,
      energyConsumption: calculateTransactionEnergy(transaction.size)
    }));
  },
  totalEnergyPerDay: async ({ days }) => {
    const now = Date.now();
    const dayInMs = 24 * 60 * 60 * 1e3;
    const results = [];
    for (let i2 = 0; i2 < days; i2++) {
      const timestamp = now - i2 * dayInMs;
      const cacheKey = `totalEnergy:${timestamp}`;
      let totalEnergy = await getCachedData(cacheKey);
      if (!totalEnergy) {
        const { blocks } = await fetchBlocksInDay(timestamp);
        totalEnergy = await blocks.reduce(async (totalPromise, block) => {
          const total = await totalPromise;
          const blockData = await fetchBlockByHash(block.hash);
          return total + blockData.tx.reduce((txTotal, tx) => {
            return txTotal + calculateTransactionEnergy(tx.size);
          }, 0);
        }, Promise.resolve(0));
        await setCachedData(cacheKey, totalEnergy, 3600);
      }
      results.push({
        date: new Date(timestamp).toISOString().split("T")[0],
        totalEnergy
      });
    }
    return results;
  }
};

// src/schema.ts
var schemaComposer = new import_graphql_compose.SchemaComposer();
schemaComposer.Query.addFields({
  hello: {
    type: "String!",
    resolve: () => "Hi there, good luck with the assignment!"
  },
  energyPerTransaction: {
    type: "[TransactionEnergy!]!",
    args: { blockHash: "String!" },
    resolve: resolvers.energyPerTransaction
  },
  totalEnergyPerDay: {
    type: "[DayEnergy!]!",
    args: { days: "Int!" },
    resolve: resolvers.totalEnergyPerDay
  }
});
schemaComposer.createObjectTC({
  name: "TransactionEnergy",
  fields: {
    txHash: "String!",
    energyConsumption: "Float!"
  }
});
schemaComposer.createObjectTC({
  name: "DayEnergy",
  fields: {
    date: "String!",
    totalEnergy: "Float!"
  }
});
var schema = schemaComposer.buildSchema();

// src/fn_graphql.ts
var import_lambda_api = __toESM(require_lambda_api());

// node_modules/graphql-helix/dist-esm/util/is-async-iterable.mjs
var isAsyncIterable = (maybeAsyncIterable) => {
  if (maybeAsyncIterable == null || typeof maybeAsyncIterable !== "object") {
    return false;
  }
  return typeof maybeAsyncIterable[Symbol.asyncIterator] === "function";
};

// node_modules/graphql-helix/dist-esm/util/is-http-method.mjs
var isHttpMethod = (target, subject) => {
  return subject.toUpperCase() === target;
};

// node_modules/graphql-helix/dist-esm/util/stop-async-iteration.mjs
var stopAsyncIteration = (asyncIterable) => {
  const method = asyncIterable[Symbol.asyncIterator];
  const asyncIterator = method.call(asyncIterable);
  if (asyncIterator.return) {
    asyncIterator.return();
  }
};

// node_modules/graphql-helix/dist-esm/get-graphql-parameters.mjs
var getGraphQLParameters = (request) => {
  const { body, method, query: queryParams } = request;
  let operationName;
  let query;
  let variables;
  let extensions;
  if (isHttpMethod("GET", method)) {
    operationName = queryParams.operationName;
    query = queryParams.query;
    variables = queryParams.variables;
    extensions = queryParams.extensions;
  } else if (isHttpMethod("POST", method)) {
    operationName = body === null || body === void 0 ? void 0 : body.operationName;
    query = body === null || body === void 0 ? void 0 : body.query;
    variables = body === null || body === void 0 ? void 0 : body.variables;
    extensions = body === null || body === void 0 ? void 0 : body.extension;
  }
  return {
    operationName,
    query,
    variables,
    extensions
  };
};

// node_modules/graphql-helix/dist-esm/process-request.mjs
var import_graphql = __toESM(require_graphql2(), 1);

// node_modules/graphql-helix/dist-esm/errors.mjs
var HttpError = class extends Error {
  constructor(status, message, details = {}) {
    super(message);
    this.status = status;
    this.headers = details.headers;
    this.graphqlErrors = details.graphqlErrors;
  }
};

// node_modules/graphql-helix/dist-esm/util/get-ranked-response-protocols.mjs
function normalizeValue(str) {
  return str.split(";")[0].trim();
}
function parseAcceptHeader(acceptHeader) {
  return acceptHeader.split(",").map(normalizeValue);
}
function getRankedResponseProtocols(acceptHeader, contentTypeHeader) {
  const rankedProtocols = {
    "application/graphql+json": -1,
    "application/json": -1,
    "text/event-stream": -1,
    "multipart/mixed": -1
  };
  if (typeof acceptHeader !== "string") {
    if (typeof contentTypeHeader === "string") {
      const normalizedContentType = normalizeValue(contentTypeHeader);
      if (normalizedContentType in rankedProtocols) {
        rankedProtocols[normalizedContentType]++;
      }
    }
    return rankedProtocols;
  }
  const supportedProtocols = parseAcceptHeader(acceptHeader);
  let index = 0;
  for (const protocol of supportedProtocols) {
    if (protocol in rankedProtocols) {
      rankedProtocols[protocol] = index;
      index++;
    }
  }
  return rankedProtocols;
}

// node_modules/graphql-helix/dist-esm/process-request.mjs
var parseQuery = (query, parse) => {
  if (typeof query !== "string" && query.kind === "Document") {
    return query;
  }
  try {
    const parseResult = parse(query);
    if (parseResult instanceof Promise) {
      return parseResult.catch((syntaxError) => {
        throw new HttpError(400, "GraphQL syntax error.", {
          graphqlErrors: [syntaxError]
        });
      });
    }
    return parseResult;
  } catch (syntaxError) {
    throw new HttpError(400, "GraphQL syntax error.", {
      graphqlErrors: [syntaxError]
    });
  }
};
var validateDocument = (schema2, document2, validate, validationRules) => {
  const validationErrors = validate(schema2, document2, validationRules);
  if (validationErrors.length) {
    throw new HttpError(400, "GraphQL validation error.", {
      graphqlErrors: validationErrors
    });
  }
};
var getExecutableOperation = (document2, operationName) => {
  const operation = (0, import_graphql.getOperationAST)(document2, operationName);
  if (!operation) {
    throw new HttpError(400, "Could not determine what operation to execute.");
  }
  return operation;
};
var getSingleResponseContentType = (protocols) => {
  if (protocols["application/graphql+json"] === -1) {
    return "application/json";
  }
  return protocols["application/graphql+json"] > protocols["application/json"] ? "application/graphql+json" : "application/json";
};
var getHeader = (request, headerName) => typeof request.headers.get === "function" ? request.headers.get(headerName) : request.headers[headerName];
var processRequest = async (options) => {
  const { contextFactory, execute = import_graphql.execute, formatPayload = ({ payload }) => payload, operationName, extensions, parse = import_graphql.parse, query, request, rootValueFactory, schema: schema2, subscribe = import_graphql.subscribe, validate = import_graphql.validate, validationRules, variables, allowedSubscriptionHttpMethods = ["GET", "POST"] } = options;
  let context;
  let rootValue;
  let document2;
  let operation;
  const result = await (async () => {
    const accept = getHeader(request, "accept");
    const contentType = getHeader(request, "contentType");
    const rankedProtocols = getRankedResponseProtocols(accept, contentType);
    const isEventStreamAccepted = rankedProtocols["text/event-stream"] !== -1;
    const defaultSingleResponseHeaders = [
      {
        name: "Content-Type",
        value: getSingleResponseContentType(rankedProtocols)
      }
    ];
    try {
      if (!isHttpMethod("GET", request.method) && !isHttpMethod("POST", request.method)) {
        throw new HttpError(405, "GraphQL only supports GET and POST requests.", {
          headers: [...defaultSingleResponseHeaders, { name: "Allow", value: "GET, POST" }]
        });
      }
      if (query == null) {
        throw new HttpError(400, "Must provide query string.", { headers: defaultSingleResponseHeaders });
      }
      document2 = await parseQuery(query, parse);
      validateDocument(schema2, document2, validate, validationRules);
      operation = getExecutableOperation(document2, operationName);
      if (operation.operation === "mutation" && isHttpMethod("GET", request.method)) {
        throw new HttpError(405, "Can only perform a mutation operation from a POST request.", {
          headers: [...defaultSingleResponseHeaders, { name: "Allow", value: "POST" }]
        });
      }
      let variableValues;
      try {
        if (variables) {
          variableValues = typeof variables === "string" ? JSON.parse(variables) : variables;
        }
      } catch (_error) {
        throw new HttpError(400, "Variables are invalid JSON.", {
          headers: defaultSingleResponseHeaders
        });
      }
      try {
        const executionContext = {
          request,
          document: document2,
          operation,
          operationName,
          extensions,
          variables: variableValues
        };
        context = contextFactory ? await contextFactory(executionContext) : {};
        rootValue = rootValueFactory ? await rootValueFactory(executionContext) : {};
        if (operation.operation === "subscription") {
          if (!allowedSubscriptionHttpMethods.some((method) => isHttpMethod(method, request.method))) {
            throw new HttpError(405, `Can only perform subscription operation from a ${allowedSubscriptionHttpMethods.join(" or ")} request.`, {
              headers: [
                ...defaultSingleResponseHeaders,
                {
                  name: "Allow",
                  value: allowedSubscriptionHttpMethods.join(", ")
                }
              ]
            });
          }
          const result2 = await subscribe({
            schema: schema2,
            document: document2,
            rootValue,
            contextValue: context,
            variableValues,
            operationName
          });
          if (isAsyncIterable(result2)) {
            return {
              type: "PUSH",
              subscribe: async (onResult) => {
                try {
                  for await (const payload of result2) {
                    onResult(formatPayload({
                      payload,
                      context,
                      rootValue,
                      document: document2,
                      operation
                    }));
                  }
                } catch (error) {
                  const payload = {
                    errors: error.graphqlErrors || [
                      new import_graphql.GraphQLError(error.message)
                    ]
                  };
                  onResult(formatPayload({
                    payload,
                    context,
                    rootValue,
                    document: document2,
                    operation
                  }));
                  stopAsyncIteration(result2);
                }
              },
              unsubscribe: () => {
                stopAsyncIteration(result2);
              }
            };
          }
          return {
            type: "PUSH",
            subscribe: async (onResult) => {
              onResult(formatPayload({
                payload: result2,
                context,
                rootValue,
                document: document2,
                operation
              }));
            },
            unsubscribe: () => void 0
          };
        } else {
          const result2 = await execute({
            schema: schema2,
            document: document2,
            rootValue,
            contextValue: context,
            variableValues,
            operationName
          });
          if (isAsyncIterable(result2)) {
            return {
              type: isHttpMethod("GET", request.method) ? "PUSH" : "MULTIPART_RESPONSE",
              subscribe: async (onResult) => {
                for await (const payload of result2) {
                  onResult(formatPayload({
                    payload,
                    context,
                    rootValue,
                    document: document2,
                    operation
                  }));
                }
              },
              unsubscribe: () => {
                stopAsyncIteration(result2);
              }
            };
          } else {
            return {
              type: "RESPONSE",
              status: 200,
              headers: defaultSingleResponseHeaders,
              payload: formatPayload({
                payload: result2,
                context,
                rootValue,
                document: document2,
                operation
              })
            };
          }
        }
      } catch (executionError) {
        if (executionError instanceof import_graphql.GraphQLError) {
          throw new HttpError(200, "GraphQLError encountered white executed GraphQL request.", {
            graphqlErrors: [executionError],
            headers: defaultSingleResponseHeaders
          });
        } else if (executionError instanceof HttpError) {
          throw executionError;
        } else {
          throw new HttpError(500, "Unexpected error encountered while executing GraphQL request.", {
            graphqlErrors: [new import_graphql.GraphQLError(executionError.message)],
            headers: defaultSingleResponseHeaders
          });
        }
      }
    } catch (error) {
      const payload = {
        errors: error.graphqlErrors || [new import_graphql.GraphQLError(error.message)]
      };
      if (isEventStreamAccepted) {
        return {
          type: "PUSH",
          subscribe: async (onResult) => {
            onResult(formatPayload({
              payload,
              context,
              rootValue,
              document: document2,
              operation
            }));
          },
          unsubscribe: () => void 0
        };
      } else {
        return {
          type: "RESPONSE",
          status: error.status || 500,
          headers: error.headers || [],
          payload: formatPayload({
            payload,
            context,
            rootValue,
            document: document2,
            operation
          })
        };
      }
    }
  })();
  return {
    ...result,
    context,
    rootValue,
    document: document2,
    operation
  };
};

// src/fn_graphql.ts
function APIGatewayLambda() {
  const isTest = process.env.NODE_ENV === "test";
  const isOffline = process.env.IS_OFFLINE === "true";
  return (0, import_lambda_api.default)({
    version: "v2",
    logger: isTest ? false : {
      level: isOffline ? "debug" : "info"
    }
  });
}
var graphqlApi = (schema2, contextFactory) => {
  return async function graphqlHandler(req, res) {
    const request = {
      body: req.body,
      headers: req.headers,
      method: req.method,
      query: req.query
    };
    const { query, variables, operationName } = getGraphQLParameters(request);
    const result = await processRequest({
      schema: schema2,
      query,
      variables,
      operationName,
      request,
      contextFactory
    });
    if (result.type === "RESPONSE") {
      result.headers.forEach(({ name, value }) => {
        res.header(name, value);
      });
      res.status(result.status);
      res.json(result.payload);
    } else {
      req.log.error(`Unhandled: ${result.type}`);
      res.error(`Unhandled: ${result.type}`);
    }
  };
};
function mkAPIGatewayHandler(api2) {
  return async function apiGatewayHandler(event, ctx) {
    return api2.run(event, ctx);
  };
}
var api = APIGatewayLambda();
api.any(graphqlApi(schema));
var handler = mkAPIGatewayHandler(api);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  APIGatewayLambda,
  graphqlApi,
  handler,
  mkAPIGatewayHandler
});
/*! fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */
/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */
/*! node-domexception. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */
/**
 * @license
 * web-streams-polyfill v3.3.3
 * Copyright 2024 Mattias Buelens, Diwank Singh Tomer and other contributors.
 * This code is released under the MIT license.
 * SPDX-License-Identifier: MIT
 */
/**
 * Lightweight web framework for your serverless applications
 * @author Jeremy Daly <jeremy@jeremydaly.com>
 * @license MIT
 */
/**
 * Lightweight web framework for your serverless applications
 * @author Jeremy Daly <jeremy@jeremydaly.com>
 * @version 0.11.0
 * @license MIT
 */
